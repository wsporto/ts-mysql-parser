// Generated from ./src/grammar/MySQLParser.g4 by ANTLR 4.13.1
// noinspection ES6UnusedImports,JSUnusedGlobalSymbols,JSUnusedLocalSymbols

import {
	ATN,
	ATNDeserializer, DecisionState, DFA, FailedPredicateException,
	RecognitionException, NoViableAltException, BailErrorStrategy,
	Parser, ParserATNSimulator,
	RuleContext, ParserRuleContext, PredictionMode, PredictionContextCache,
	TerminalNode, RuleNode,
	Token, TokenStream,
	Interval, IntervalSet
} from 'antlr4';
import MySQLParserListener from "./MySQLParserListener.js";
// for running tests with parameters, TODO: discuss strategy for typed parameters in CI
// eslint-disable-next-line no-unused-vars
type int = number;


  // import { MySQLBaseParser } from './MySQLBaseParser'
  import { SqlMode } from './common'

import MySQLBaseParser from './MySQLBaseParser';

export default class MySQLParser extends MySQLBaseParser {
	public static readonly ACCOUNT_SYMBOL = 1;
	public static readonly ASCII_SYMBOL = 2;
	public static readonly ALWAYS_SYMBOL = 3;
	public static readonly BACKUP_SYMBOL = 4;
	public static readonly BEGIN_SYMBOL = 5;
	public static readonly BYTE_SYMBOL = 6;
	public static readonly CACHE_SYMBOL = 7;
	public static readonly CHARSET_SYMBOL = 8;
	public static readonly CHECKSUM_SYMBOL = 9;
	public static readonly CLOSE_SYMBOL = 10;
	public static readonly COMMENT_SYMBOL = 11;
	public static readonly COMMIT_SYMBOL = 12;
	public static readonly CONTAINS_SYMBOL = 13;
	public static readonly DEALLOCATE_SYMBOL = 14;
	public static readonly DO_SYMBOL = 15;
	public static readonly END_SYMBOL = 16;
	public static readonly EXECUTE_SYMBOL = 17;
	public static readonly FLUSH_SYMBOL = 18;
	public static readonly FOLLOWS_SYMBOL = 19;
	public static readonly FORMAT_SYMBOL = 20;
	public static readonly GROUP_REPLICATION_SYMBOL = 21;
	public static readonly HANDLER_SYMBOL = 22;
	public static readonly HELP_SYMBOL = 23;
	public static readonly HOST_SYMBOL = 24;
	public static readonly INSTALL_SYMBOL = 25;
	public static readonly LANGUAGE_SYMBOL = 26;
	public static readonly NO_SYMBOL = 27;
	public static readonly OPEN_SYMBOL = 28;
	public static readonly OPTIONS_SYMBOL = 29;
	public static readonly OWNER_SYMBOL = 30;
	public static readonly PARSER_SYMBOL = 31;
	public static readonly PARTITION_SYMBOL = 32;
	public static readonly PORT_SYMBOL = 33;
	public static readonly PRECEDES_SYMBOL = 34;
	public static readonly PREPARE_SYMBOL = 35;
	public static readonly REMOVE_SYMBOL = 36;
	public static readonly REPAIR_SYMBOL = 37;
	public static readonly RESET_SYMBOL = 38;
	public static readonly RESTORE_SYMBOL = 39;
	public static readonly ROLLBACK_SYMBOL = 40;
	public static readonly SAVEPOINT_SYMBOL = 41;
	public static readonly SECURITY_SYMBOL = 42;
	public static readonly SERVER_SYMBOL = 43;
	public static readonly SIGNED_SYMBOL = 44;
	public static readonly SLAVE_SYMBOL = 45;
	public static readonly SOCKET_SYMBOL = 46;
	public static readonly SONAME_SYMBOL = 47;
	public static readonly START_SYMBOL = 48;
	public static readonly STOP_SYMBOL = 49;
	public static readonly TRUNCATE_SYMBOL = 50;
	public static readonly UNICODE_SYMBOL = 51;
	public static readonly UNINSTALL_SYMBOL = 52;
	public static readonly UPGRADE_SYMBOL = 53;
	public static readonly WRAPPER_SYMBOL = 54;
	public static readonly XA_SYMBOL = 55;
	public static readonly SHUTDOWN_SYMBOL = 56;
	public static readonly ACTION_SYMBOL = 57;
	public static readonly ADDDATE_SYMBOL = 58;
	public static readonly AFTER_SYMBOL = 59;
	public static readonly AGAINST_SYMBOL = 60;
	public static readonly AGGREGATE_SYMBOL = 61;
	public static readonly ALGORITHM_SYMBOL = 62;
	public static readonly ANALYZE_SYMBOL = 63;
	public static readonly ANY_SYMBOL = 64;
	public static readonly AT_SYMBOL = 65;
	public static readonly AUTHORS_SYMBOL = 66;
	public static readonly AUTO_INCREMENT_SYMBOL = 67;
	public static readonly AUTOEXTEND_SIZE_SYMBOL = 68;
	public static readonly AVG_ROW_LENGTH_SYMBOL = 69;
	public static readonly AVG_SYMBOL = 70;
	public static readonly BINLOG_SYMBOL = 71;
	public static readonly BIT_SYMBOL = 72;
	public static readonly BLOCK_SYMBOL = 73;
	public static readonly BOOL_SYMBOL = 74;
	public static readonly BOOLEAN_SYMBOL = 75;
	public static readonly BTREE_SYMBOL = 76;
	public static readonly CASCADED_SYMBOL = 77;
	public static readonly CATALOG_NAME_SYMBOL = 78;
	public static readonly CHAIN_SYMBOL = 79;
	public static readonly CHANGED_SYMBOL = 80;
	public static readonly CHANNEL_SYMBOL = 81;
	public static readonly CIPHER_SYMBOL = 82;
	public static readonly CLIENT_SYMBOL = 83;
	public static readonly CLASS_ORIGIN_SYMBOL = 84;
	public static readonly COALESCE_SYMBOL = 85;
	public static readonly CODE_SYMBOL = 86;
	public static readonly COLLATION_SYMBOL = 87;
	public static readonly COLUMN_NAME_SYMBOL = 88;
	public static readonly COLUMN_FORMAT_SYMBOL = 89;
	public static readonly COLUMNS_SYMBOL = 90;
	public static readonly COMMITTED_SYMBOL = 91;
	public static readonly COMPACT_SYMBOL = 92;
	public static readonly COMPLETION_SYMBOL = 93;
	public static readonly COMPRESSED_SYMBOL = 94;
	public static readonly COMPRESSION_SYMBOL = 95;
	public static readonly ENCRYPTION_SYMBOL = 96;
	public static readonly CONCURRENT_SYMBOL = 97;
	public static readonly CONNECTION_SYMBOL = 98;
	public static readonly CONSISTENT_SYMBOL = 99;
	public static readonly CONSTRAINT_CATALOG_SYMBOL = 100;
	public static readonly CONSTRAINT_SCHEMA_SYMBOL = 101;
	public static readonly CONSTRAINT_NAME_SYMBOL = 102;
	public static readonly CONTEXT_SYMBOL = 103;
	public static readonly CONTRIBUTORS_SYMBOL = 104;
	public static readonly CPU_SYMBOL = 105;
	public static readonly CUBE_SYMBOL = 106;
	public static readonly CURRENT_SYMBOL = 107;
	public static readonly CURSOR_NAME_SYMBOL = 108;
	public static readonly DATA_SYMBOL = 109;
	public static readonly DATAFILE_SYMBOL = 110;
	public static readonly DATETIME_SYMBOL = 111;
	public static readonly DATE_SYMBOL = 112;
	public static readonly DAY_SYMBOL = 113;
	public static readonly DEFAULT_AUTH_SYMBOL = 114;
	public static readonly DEFINER_SYMBOL = 115;
	public static readonly DELAY_KEY_WRITE_SYMBOL = 116;
	public static readonly DES_KEY_FILE_SYMBOL = 117;
	public static readonly DIAGNOSTICS_SYMBOL = 118;
	public static readonly DIRECTORY_SYMBOL = 119;
	public static readonly DISABLE_SYMBOL = 120;
	public static readonly DISCARD_SYMBOL = 121;
	public static readonly DISK_SYMBOL = 122;
	public static readonly DUMPFILE_SYMBOL = 123;
	public static readonly DUPLICATE_SYMBOL = 124;
	public static readonly DYNAMIC_SYMBOL = 125;
	public static readonly ENDS_SYMBOL = 126;
	public static readonly ENUM_SYMBOL = 127;
	public static readonly ENGINE_SYMBOL = 128;
	public static readonly ENGINES_SYMBOL = 129;
	public static readonly ERROR_SYMBOL = 130;
	public static readonly ERRORS_SYMBOL = 131;
	public static readonly ESCAPE_SYMBOL = 132;
	public static readonly EVENT_SYMBOL = 133;
	public static readonly EVENTS_SYMBOL = 134;
	public static readonly EVERY_SYMBOL = 135;
	public static readonly EXPANSION_SYMBOL = 136;
	public static readonly EXPORT_SYMBOL = 137;
	public static readonly EXTENDED_SYMBOL = 138;
	public static readonly EXTENT_SIZE_SYMBOL = 139;
	public static readonly FAULTS_SYMBOL = 140;
	public static readonly FAST_SYMBOL = 141;
	public static readonly FOUND_SYMBOL = 142;
	public static readonly ENABLE_SYMBOL = 143;
	public static readonly FULL_SYMBOL = 144;
	public static readonly FILE_SYMBOL = 145;
	public static readonly FILE_BLOCK_SIZE_SYMBOL = 146;
	public static readonly FILTER_SYMBOL = 147;
	public static readonly FIRST_SYMBOL = 148;
	public static readonly FIXED_SYMBOL = 149;
	public static readonly GENERAL_SYMBOL = 150;
	public static readonly GEOMETRY_SYMBOL = 151;
	public static readonly GEOMETRYCOLLECTION_SYMBOL = 152;
	public static readonly GET_FORMAT_SYMBOL = 153;
	public static readonly GRANTS_SYMBOL = 154;
	public static readonly GLOBAL_SYMBOL = 155;
	public static readonly HASH_SYMBOL = 156;
	public static readonly HOSTS_SYMBOL = 157;
	public static readonly HOUR_SYMBOL = 158;
	public static readonly IDENTIFIED_SYMBOL = 159;
	public static readonly IGNORE_SERVER_IDS_SYMBOL = 160;
	public static readonly INVOKER_SYMBOL = 161;
	public static readonly IMPORT_SYMBOL = 162;
	public static readonly INDEXES_SYMBOL = 163;
	public static readonly INITIAL_SIZE_SYMBOL = 164;
	public static readonly INSTANCE_SYMBOL = 165;
	public static readonly INNODB_SYMBOL = 166;
	public static readonly IO_SYMBOL = 167;
	public static readonly IPC_SYMBOL = 168;
	public static readonly ISOLATION_SYMBOL = 169;
	public static readonly ISSUER_SYMBOL = 170;
	public static readonly INSERT_METHOD_SYMBOL = 171;
	public static readonly JSON_SYMBOL = 172;
	public static readonly KEY_BLOCK_SIZE_SYMBOL = 173;
	public static readonly LAST_SYMBOL = 174;
	public static readonly LEAVES_SYMBOL = 175;
	public static readonly LESS_SYMBOL = 176;
	public static readonly LEVEL_SYMBOL = 177;
	public static readonly LINESTRING_SYMBOL = 178;
	public static readonly LIST_SYMBOL = 179;
	public static readonly LOCAL_SYMBOL = 180;
	public static readonly LOCKS_SYMBOL = 181;
	public static readonly LOGFILE_SYMBOL = 182;
	public static readonly LOGS_SYMBOL = 183;
	public static readonly MAX_ROWS_SYMBOL = 184;
	public static readonly MASTER_SYMBOL = 185;
	public static readonly MASTER_HEARTBEAT_PERIOD_SYMBOL = 186;
	public static readonly MASTER_HOST_SYMBOL = 187;
	public static readonly MASTER_PORT_SYMBOL = 188;
	public static readonly MASTER_LOG_FILE_SYMBOL = 189;
	public static readonly MASTER_LOG_POS_SYMBOL = 190;
	public static readonly MASTER_USER_SYMBOL = 191;
	public static readonly MASTER_PASSWORD_SYMBOL = 192;
	public static readonly MASTER_SERVER_ID_SYMBOL = 193;
	public static readonly MASTER_CONNECT_RETRY_SYMBOL = 194;
	public static readonly MASTER_RETRY_COUNT_SYMBOL = 195;
	public static readonly MASTER_DELAY_SYMBOL = 196;
	public static readonly MASTER_SSL_SYMBOL = 197;
	public static readonly MASTER_SSL_CA_SYMBOL = 198;
	public static readonly MASTER_SSL_CAPATH_SYMBOL = 199;
	public static readonly MASTER_TLS_VERSION_SYMBOL = 200;
	public static readonly MASTER_SSL_CERT_SYMBOL = 201;
	public static readonly MASTER_SSL_CIPHER_SYMBOL = 202;
	public static readonly MASTER_SSL_CRL_SYMBOL = 203;
	public static readonly MASTER_SSL_CRLPATH_SYMBOL = 204;
	public static readonly MASTER_SSL_KEY_SYMBOL = 205;
	public static readonly MASTER_AUTO_POSITION_SYMBOL = 206;
	public static readonly MAX_CONNECTIONS_PER_HOUR_SYMBOL = 207;
	public static readonly MAX_QUERIES_PER_HOUR_SYMBOL = 208;
	public static readonly MAX_STATEMENT_TIME_SYMBOL = 209;
	public static readonly MAX_SIZE_SYMBOL = 210;
	public static readonly MAX_UPDATES_PER_HOUR_SYMBOL = 211;
	public static readonly MAX_USER_CONNECTIONS_SYMBOL = 212;
	public static readonly MEDIUM_SYMBOL = 213;
	public static readonly MEMORY_SYMBOL = 214;
	public static readonly MERGE_SYMBOL = 215;
	public static readonly MESSAGE_TEXT_SYMBOL = 216;
	public static readonly MICROSECOND_SYMBOL = 217;
	public static readonly MIGRATE_SYMBOL = 218;
	public static readonly MINUTE_SYMBOL = 219;
	public static readonly MIN_ROWS_SYMBOL = 220;
	public static readonly MODIFY_SYMBOL = 221;
	public static readonly MODE_SYMBOL = 222;
	public static readonly MONTH_SYMBOL = 223;
	public static readonly MULTILINESTRING_SYMBOL = 224;
	public static readonly MULTIPOINT_SYMBOL = 225;
	public static readonly MULTIPOLYGON_SYMBOL = 226;
	public static readonly MUTEX_SYMBOL = 227;
	public static readonly MYSQL_ERRNO_SYMBOL = 228;
	public static readonly NAME_SYMBOL = 229;
	public static readonly NAMES_SYMBOL = 230;
	public static readonly NATIONAL_SYMBOL = 231;
	public static readonly NCHAR_SYMBOL = 232;
	public static readonly NDBCLUSTER_SYMBOL = 233;
	public static readonly NEVER_SYMBOL = 234;
	public static readonly NEXT_SYMBOL = 235;
	public static readonly NEW_SYMBOL = 236;
	public static readonly NO_WAIT_SYMBOL = 237;
	public static readonly NODEGROUP_SYMBOL = 238;
	public static readonly NONE_SYMBOL = 239;
	public static readonly NUMBER_SYMBOL = 240;
	public static readonly NVARCHAR_SYMBOL = 241;
	public static readonly OFFSET_SYMBOL = 242;
	public static readonly OLD_PASSWORD_SYMBOL = 243;
	public static readonly ONE_SHOT_SYMBOL = 244;
	public static readonly ONE_SYMBOL = 245;
	public static readonly PACK_KEYS_SYMBOL = 246;
	public static readonly PAGE_SYMBOL = 247;
	public static readonly PARTIAL_SYMBOL = 248;
	public static readonly PARTITIONING_SYMBOL = 249;
	public static readonly PARTITIONS_SYMBOL = 250;
	public static readonly PASSWORD_SYMBOL = 251;
	public static readonly PHASE_SYMBOL = 252;
	public static readonly PLUGIN_DIR_SYMBOL = 253;
	public static readonly PLUGIN_SYMBOL = 254;
	public static readonly PLUGINS_SYMBOL = 255;
	public static readonly POINT_SYMBOL = 256;
	public static readonly POLYGON_SYMBOL = 257;
	public static readonly PRESERVE_SYMBOL = 258;
	public static readonly PREV_SYMBOL = 259;
	public static readonly PRIVILEGES_SYMBOL = 260;
	public static readonly PROCESS_SYMBOL = 261;
	public static readonly PROCESSLIST_SYMBOL = 262;
	public static readonly PROFILE_SYMBOL = 263;
	public static readonly PROFILES_SYMBOL = 264;
	public static readonly PROXY_SYMBOL = 265;
	public static readonly QUARTER_SYMBOL = 266;
	public static readonly QUERY_SYMBOL = 267;
	public static readonly QUICK_SYMBOL = 268;
	public static readonly READ_ONLY_SYMBOL = 269;
	public static readonly REBUILD_SYMBOL = 270;
	public static readonly RECOVER_SYMBOL = 271;
	public static readonly REDO_BUFFER_SIZE_SYMBOL = 272;
	public static readonly REDOFILE_SYMBOL = 273;
	public static readonly REDUNDANT_SYMBOL = 274;
	public static readonly RELAY_SYMBOL = 275;
	public static readonly RELAYLOG_SYMBOL = 276;
	public static readonly RELAY_LOG_FILE_SYMBOL = 277;
	public static readonly RELAY_LOG_POS_SYMBOL = 278;
	public static readonly RELAY_THREAD_SYMBOL = 279;
	public static readonly RELOAD_SYMBOL = 280;
	public static readonly REORGANIZE_SYMBOL = 281;
	public static readonly REPEATABLE_SYMBOL = 282;
	public static readonly REPLICATION_SYMBOL = 283;
	public static readonly REPLICATE_DO_DB_SYMBOL = 284;
	public static readonly REPLICATE_IGNORE_DB_SYMBOL = 285;
	public static readonly REPLICATE_DO_TABLE_SYMBOL = 286;
	public static readonly REPLICATE_IGNORE_TABLE_SYMBOL = 287;
	public static readonly REPLICATE_WILD_DO_TABLE_SYMBOL = 288;
	public static readonly REPLICATE_WILD_IGNORE_TABLE_SYMBOL = 289;
	public static readonly REPLICATE_REWRITE_DB_SYMBOL = 290;
	public static readonly RESUME_SYMBOL = 291;
	public static readonly RETURNED_SQLSTATE_SYMBOL = 292;
	public static readonly RETURNS_SYMBOL = 293;
	public static readonly REVERSE_SYMBOL = 294;
	public static readonly ROLLUP_SYMBOL = 295;
	public static readonly ROTATE_SYMBOL = 296;
	public static readonly ROUTINE_SYMBOL = 297;
	public static readonly ROWS_SYMBOL = 298;
	public static readonly ROW_COUNT_SYMBOL = 299;
	public static readonly ROW_FORMAT_SYMBOL = 300;
	public static readonly ROW_SYMBOL = 301;
	public static readonly RTREE_SYMBOL = 302;
	public static readonly SCHEDULE_SYMBOL = 303;
	public static readonly SCHEMA_NAME_SYMBOL = 304;
	public static readonly SECOND_SYMBOL = 305;
	public static readonly SERIAL_SYMBOL = 306;
	public static readonly SERIALIZABLE_SYMBOL = 307;
	public static readonly SESSION_SYMBOL = 308;
	public static readonly SIMPLE_SYMBOL = 309;
	public static readonly SHARE_SYMBOL = 310;
	public static readonly SLOW_SYMBOL = 311;
	public static readonly SNAPSHOT_SYMBOL = 312;
	public static readonly SOUNDS_SYMBOL = 313;
	public static readonly SOURCE_SYMBOL = 314;
	public static readonly SQL_AFTER_GTIDS_SYMBOL = 315;
	public static readonly SQL_AFTER_MTS_GAPS_SYMBOL = 316;
	public static readonly SQL_BEFORE_GTIDS_SYMBOL = 317;
	public static readonly SQL_CACHE_SYMBOL = 318;
	public static readonly SQL_BUFFER_RESULT_SYMBOL = 319;
	public static readonly SQL_NO_CACHE_SYMBOL = 320;
	public static readonly SQL_THREAD_SYMBOL = 321;
	public static readonly STACKED_SYMBOL = 322;
	public static readonly STARTS_SYMBOL = 323;
	public static readonly STATS_AUTO_RECALC_SYMBOL = 324;
	public static readonly STATS_PERSISTENT_SYMBOL = 325;
	public static readonly STATS_SAMPLE_PAGES_SYMBOL = 326;
	public static readonly STATUS_SYMBOL = 327;
	public static readonly STORAGE_SYMBOL = 328;
	public static readonly STRING_SYMBOL = 329;
	public static readonly SUBCLASS_ORIGIN_SYMBOL = 330;
	public static readonly SUBDATE_SYMBOL = 331;
	public static readonly SUBJECT_SYMBOL = 332;
	public static readonly SUBPARTITION_SYMBOL = 333;
	public static readonly SUBPARTITIONS_SYMBOL = 334;
	public static readonly SUPER_SYMBOL = 335;
	public static readonly SUSPEND_SYMBOL = 336;
	public static readonly SWAPS_SYMBOL = 337;
	public static readonly SWITCHES_SYMBOL = 338;
	public static readonly TABLE_NAME_SYMBOL = 339;
	public static readonly TABLES_SYMBOL = 340;
	public static readonly TABLE_CHECKSUM_SYMBOL = 341;
	public static readonly TABLESPACE_SYMBOL = 342;
	public static readonly TEMPORARY_SYMBOL = 343;
	public static readonly TEMPTABLE_SYMBOL = 344;
	public static readonly TEXT_SYMBOL = 345;
	public static readonly THAN_SYMBOL = 346;
	public static readonly TRANSACTION_SYMBOL = 347;
	public static readonly TRIGGERS_SYMBOL = 348;
	public static readonly TIMESTAMP_SYMBOL = 349;
	public static readonly TIMESTAMP_ADD_SYMBOL = 350;
	public static readonly TIMESTAMP_DIFF_SYMBOL = 351;
	public static readonly TIME_SYMBOL = 352;
	public static readonly TYPES_SYMBOL = 353;
	public static readonly TYPE_SYMBOL = 354;
	public static readonly UDF_RETURNS_SYMBOL = 355;
	public static readonly FUNCTION_SYMBOL = 356;
	public static readonly UNCOMMITTED_SYMBOL = 357;
	public static readonly UNDEFINED_SYMBOL = 358;
	public static readonly UNDO_BUFFER_SIZE_SYMBOL = 359;
	public static readonly UNDOFILE_SYMBOL = 360;
	public static readonly UNKNOWN_SYMBOL = 361;
	public static readonly UNTIL_SYMBOL = 362;
	public static readonly USER_RESOURCES_SYMBOL = 363;
	public static readonly USER_SYMBOL = 364;
	public static readonly USE_FRM_SYMBOL = 365;
	public static readonly VARIABLES_SYMBOL = 366;
	public static readonly VIEW_SYMBOL = 367;
	public static readonly VALUE_SYMBOL = 368;
	public static readonly WARNINGS_SYMBOL = 369;
	public static readonly WAIT_SYMBOL = 370;
	public static readonly WEEK_SYMBOL = 371;
	public static readonly WORK_SYMBOL = 372;
	public static readonly WEIGHT_STRING_SYMBOL = 373;
	public static readonly X509_SYMBOL = 374;
	public static readonly XID_SYMBOL = 375;
	public static readonly XML_SYMBOL = 376;
	public static readonly YEAR_SYMBOL = 377;
	public static readonly NOT2_SYMBOL = 378;
	public static readonly CONCAT_PIPES_SYMBOL = 379;
	public static readonly INT_NUMBER = 380;
	public static readonly LONG_NUMBER = 381;
	public static readonly ULONGLONG_NUMBER = 382;
	public static readonly EQUAL_OPERATOR = 383;
	public static readonly ASSIGN_OPERATOR = 384;
	public static readonly NULL_SAFE_EQUAL_OPERATOR = 385;
	public static readonly GREATER_OR_EQUAL_OPERATOR = 386;
	public static readonly GREATER_THAN_OPERATOR = 387;
	public static readonly LESS_OR_EQUAL_OPERATOR = 388;
	public static readonly LESS_THAN_OPERATOR = 389;
	public static readonly NOT_EQUAL_OPERATOR = 390;
	public static readonly PLUS_OPERATOR = 391;
	public static readonly MINUS_OPERATOR = 392;
	public static readonly MULT_OPERATOR = 393;
	public static readonly DIV_OPERATOR = 394;
	public static readonly MOD_OPERATOR = 395;
	public static readonly LOGICAL_NOT_OPERATOR = 396;
	public static readonly BITWISE_NOT_OPERATOR = 397;
	public static readonly SHIFT_LEFT_OPERATOR = 398;
	public static readonly SHIFT_RIGHT_OPERATOR = 399;
	public static readonly LOGICAL_AND_OPERATOR = 400;
	public static readonly BITWISE_AND_OPERATOR = 401;
	public static readonly BITWISE_XOR_OPERATOR = 402;
	public static readonly LOGICAL_OR_OPERATOR = 403;
	public static readonly BITWISE_OR_OPERATOR = 404;
	public static readonly DOT_SYMBOL = 405;
	public static readonly COMMA_SYMBOL = 406;
	public static readonly SEMICOLON_SYMBOL = 407;
	public static readonly COLON_SYMBOL = 408;
	public static readonly OPEN_PAR_SYMBOL = 409;
	public static readonly CLOSE_PAR_SYMBOL = 410;
	public static readonly OPEN_CURLY_SYMBOL = 411;
	public static readonly CLOSE_CURLY_SYMBOL = 412;
	public static readonly UNDERLINE_SYMBOL = 413;
	public static readonly JSON_SEPARATOR_SYMBOL = 414;
	public static readonly JSON_UNQUOTED_SEPARATOR_SYMBOL = 415;
	public static readonly AT_SIGN_SYMBOL = 416;
	public static readonly AT_TEXT_SUFFIX = 417;
	public static readonly AT_AT_SIGN_SYMBOL = 418;
	public static readonly NULL2_SYMBOL = 419;
	public static readonly PARAM_MARKER = 420;
	public static readonly HEX_NUMBER = 421;
	public static readonly BIN_NUMBER = 422;
	public static readonly DECIMAL_NUMBER = 423;
	public static readonly FLOAT_NUMBER = 424;
	public static readonly ACCESSIBLE_SYMBOL = 425;
	public static readonly ADD_SYMBOL = 426;
	public static readonly ALL_SYMBOL = 427;
	public static readonly ALTER_SYMBOL = 428;
	public static readonly ANALYSE_SYMBOL = 429;
	public static readonly AND_SYMBOL = 430;
	public static readonly AS_SYMBOL = 431;
	public static readonly ASC_SYMBOL = 432;
	public static readonly ASENSITIVE_SYMBOL = 433;
	public static readonly BEFORE_SYMBOL = 434;
	public static readonly BETWEEN_SYMBOL = 435;
	public static readonly BIGINT_SYMBOL = 436;
	public static readonly BINARY_SYMBOL = 437;
	public static readonly BIN_NUM_SYMBOL = 438;
	public static readonly BIT_AND_SYMBOL = 439;
	public static readonly BIT_OR_SYMBOL = 440;
	public static readonly BIT_XOR_SYMBOL = 441;
	public static readonly BLOB_SYMBOL = 442;
	public static readonly BOTH_SYMBOL = 443;
	public static readonly BY_SYMBOL = 444;
	public static readonly CALL_SYMBOL = 445;
	public static readonly CASCADE_SYMBOL = 446;
	public static readonly CASE_SYMBOL = 447;
	public static readonly CAST_SYMBOL = 448;
	public static readonly CHANGE_SYMBOL = 449;
	public static readonly CHAR_SYMBOL = 450;
	public static readonly CHECK_SYMBOL = 451;
	public static readonly COLLATE_SYMBOL = 452;
	public static readonly COLUMN_SYMBOL = 453;
	public static readonly CONDITION_SYMBOL = 454;
	public static readonly CONSTRAINT_SYMBOL = 455;
	public static readonly CONTINUE_SYMBOL = 456;
	public static readonly CONVERT_SYMBOL = 457;
	public static readonly COUNT_SYMBOL = 458;
	public static readonly CREATE_SYMBOL = 459;
	public static readonly CROSS_SYMBOL = 460;
	public static readonly CURDATE_SYMBOL = 461;
	public static readonly CURRENT_DATE_SYMBOL = 462;
	public static readonly CURRENT_TIME_SYMBOL = 463;
	public static readonly CURRENT_USER_SYMBOL = 464;
	public static readonly CURSOR_SYMBOL = 465;
	public static readonly CURTIME_SYMBOL = 466;
	public static readonly DATABASE_SYMBOL = 467;
	public static readonly DATABASES_SYMBOL = 468;
	public static readonly DATE_ADD_SYMBOL = 469;
	public static readonly DATE_SUB_SYMBOL = 470;
	public static readonly DAY_HOUR_SYMBOL = 471;
	public static readonly DAY_MICROSECOND_SYMBOL = 472;
	public static readonly DAY_MINUTE_SYMBOL = 473;
	public static readonly DAY_SECOND_SYMBOL = 474;
	public static readonly DECIMAL_NUM_SYMBOL = 475;
	public static readonly DECIMAL_SYMBOL = 476;
	public static readonly DECLARE_SYMBOL = 477;
	public static readonly DEFAULT_SYMBOL = 478;
	public static readonly DELAYED_SYMBOL = 479;
	public static readonly DELETE_SYMBOL = 480;
	public static readonly DESC_SYMBOL = 481;
	public static readonly DESCRIBE_SYMBOL = 482;
	public static readonly DETERMINISTIC_SYMBOL = 483;
	public static readonly DISTINCT_SYMBOL = 484;
	public static readonly DIV_SYMBOL = 485;
	public static readonly DOUBLE_SYMBOL = 486;
	public static readonly DROP_SYMBOL = 487;
	public static readonly DUAL_SYMBOL = 488;
	public static readonly EACH_SYMBOL = 489;
	public static readonly ELSE_SYMBOL = 490;
	public static readonly ELSEIF_SYMBOL = 491;
	public static readonly ENCLOSED_SYMBOL = 492;
	public static readonly END_OF_INPUT_SYMBOL = 493;
	public static readonly ESCAPED_SYMBOL = 494;
	public static readonly EXCHANGE_SYMBOL = 495;
	public static readonly EXISTS_SYMBOL = 496;
	public static readonly EXIT_SYMBOL = 497;
	public static readonly EXPIRE_SYMBOL = 498;
	public static readonly EXPLAIN_SYMBOL = 499;
	public static readonly EXTRACT_SYMBOL = 500;
	public static readonly FALSE_SYMBOL = 501;
	public static readonly FETCH_SYMBOL = 502;
	public static readonly FLOAT_SYMBOL = 503;
	public static readonly FORCE_SYMBOL = 504;
	public static readonly FOREIGN_SYMBOL = 505;
	public static readonly FOR_SYMBOL = 506;
	public static readonly FROM_SYMBOL = 507;
	public static readonly FULLTEXT_SYMBOL = 508;
	public static readonly GET_SYMBOL = 509;
	public static readonly GENERATED_SYMBOL = 510;
	public static readonly GRANT_SYMBOL = 511;
	public static readonly GROUP_SYMBOL = 512;
	public static readonly GROUP_CONCAT_SYMBOL = 513;
	public static readonly HAVING_SYMBOL = 514;
	public static readonly HIGH_PRIORITY_SYMBOL = 515;
	public static readonly HOUR_MICROSECOND_SYMBOL = 516;
	public static readonly HOUR_MINUTE_SYMBOL = 517;
	public static readonly HOUR_SECOND_SYMBOL = 518;
	public static readonly IF_SYMBOL = 519;
	public static readonly IGNORE_SYMBOL = 520;
	public static readonly INDEX_SYMBOL = 521;
	public static readonly INFILE_SYMBOL = 522;
	public static readonly INNER_SYMBOL = 523;
	public static readonly INOUT_SYMBOL = 524;
	public static readonly INSENSITIVE_SYMBOL = 525;
	public static readonly INSERT_SYMBOL = 526;
	public static readonly INTERVAL_SYMBOL = 527;
	public static readonly INTO_SYMBOL = 528;
	public static readonly INT_SYMBOL = 529;
	public static readonly IN_SYMBOL = 530;
	public static readonly IO_AFTER_GTIDS_SYMBOL = 531;
	public static readonly IO_BEFORE_GTIDS_SYMBOL = 532;
	public static readonly IS_SYMBOL = 533;
	public static readonly ITERATE_SYMBOL = 534;
	public static readonly JOIN_SYMBOL = 535;
	public static readonly KEYS_SYMBOL = 536;
	public static readonly KEY_SYMBOL = 537;
	public static readonly KILL_SYMBOL = 538;
	public static readonly LEADING_SYMBOL = 539;
	public static readonly LEAVE_SYMBOL = 540;
	public static readonly LEFT_SYMBOL = 541;
	public static readonly LIKE_SYMBOL = 542;
	public static readonly LIMIT_SYMBOL = 543;
	public static readonly LINEAR_SYMBOL = 544;
	public static readonly LINES_SYMBOL = 545;
	public static readonly LOAD_SYMBOL = 546;
	public static readonly LOCATOR_SYMBOL = 547;
	public static readonly LOCK_SYMBOL = 548;
	public static readonly LONGBLOB_SYMBOL = 549;
	public static readonly LONGTEXT_SYMBOL = 550;
	public static readonly LONG_NUM_SYMBOL = 551;
	public static readonly LONG_SYMBOL = 552;
	public static readonly LOOP_SYMBOL = 553;
	public static readonly LOW_PRIORITY_SYMBOL = 554;
	public static readonly MASTER_BIND_SYMBOL = 555;
	public static readonly MASTER_SSL_VERIFY_SERVER_CERT_SYMBOL = 556;
	public static readonly MATCH_SYMBOL = 557;
	public static readonly MAX_SYMBOL = 558;
	public static readonly MAXVALUE_SYMBOL = 559;
	public static readonly MEDIUMBLOB_SYMBOL = 560;
	public static readonly MEDIUMINT_SYMBOL = 561;
	public static readonly MEDIUMTEXT_SYMBOL = 562;
	public static readonly MID_SYMBOL = 563;
	public static readonly MINUTE_MICROSECOND_SYMBOL = 564;
	public static readonly MINUTE_SECOND_SYMBOL = 565;
	public static readonly MIN_SYMBOL = 566;
	public static readonly MODIFIES_SYMBOL = 567;
	public static readonly MOD_SYMBOL = 568;
	public static readonly NATURAL_SYMBOL = 569;
	public static readonly NCHAR_STRING_SYMBOL = 570;
	public static readonly NEG_SYMBOL = 571;
	public static readonly NONBLOCKING_SYMBOL = 572;
	public static readonly NOT_SYMBOL = 573;
	public static readonly NOW_SYMBOL = 574;
	public static readonly NO_WRITE_TO_BINLOG_SYMBOL = 575;
	public static readonly NULL_SYMBOL = 576;
	public static readonly NUMERIC_SYMBOL = 577;
	public static readonly OFFLINE_SYMBOL = 578;
	public static readonly ON_SYMBOL = 579;
	public static readonly ONLINE_SYMBOL = 580;
	public static readonly ONLY_SYMBOL = 581;
	public static readonly OPTIMIZE_SYMBOL = 582;
	public static readonly OPTIMIZER_COSTS_SYMBOL = 583;
	public static readonly OPTION_SYMBOL = 584;
	public static readonly OPTIONALLY_SYMBOL = 585;
	public static readonly ORDER_SYMBOL = 586;
	public static readonly OR_SYMBOL = 587;
	public static readonly OUTER_SYMBOL = 588;
	public static readonly OUTFILE_SYMBOL = 589;
	public static readonly OUT_SYMBOL = 590;
	public static readonly POSITION_SYMBOL = 591;
	public static readonly PRECISION_SYMBOL = 592;
	public static readonly PRIMARY_SYMBOL = 593;
	public static readonly PROCEDURE_SYMBOL = 594;
	public static readonly PURGE_SYMBOL = 595;
	public static readonly RANGE_SYMBOL = 596;
	public static readonly READS_SYMBOL = 597;
	public static readonly READ_SYMBOL = 598;
	public static readonly READ_WRITE_SYMBOL = 599;
	public static readonly REAL_SYMBOL = 600;
	public static readonly REFERENCES_SYMBOL = 601;
	public static readonly REGEXP_SYMBOL = 602;
	public static readonly RELEASE_SYMBOL = 603;
	public static readonly RENAME_SYMBOL = 604;
	public static readonly REPEAT_SYMBOL = 605;
	public static readonly REPLACE_SYMBOL = 606;
	public static readonly REQUIRE_SYMBOL = 607;
	public static readonly RESIGNAL_SYMBOL = 608;
	public static readonly RESTRICT_SYMBOL = 609;
	public static readonly RETURN_SYMBOL = 610;
	public static readonly REVOKE_SYMBOL = 611;
	public static readonly RIGHT_SYMBOL = 612;
	public static readonly SECOND_MICROSECOND_SYMBOL = 613;
	public static readonly SELECT_SYMBOL = 614;
	public static readonly SENSITIVE_SYMBOL = 615;
	public static readonly SEPARATOR_SYMBOL = 616;
	public static readonly SERVER_OPTIONS_SYMBOL = 617;
	public static readonly SESSION_USER_SYMBOL = 618;
	public static readonly SET_SYMBOL = 619;
	public static readonly SET_VAR_SYMBOL = 620;
	public static readonly SHOW_SYMBOL = 621;
	public static readonly SIGNAL_SYMBOL = 622;
	public static readonly SMALLINT_SYMBOL = 623;
	public static readonly SPATIAL_SYMBOL = 624;
	public static readonly SPECIFIC_SYMBOL = 625;
	public static readonly SQLEXCEPTION_SYMBOL = 626;
	public static readonly SQLSTATE_SYMBOL = 627;
	public static readonly SQLWARNING_SYMBOL = 628;
	public static readonly SQL_BIG_RESULT_SYMBOL = 629;
	public static readonly SQL_CALC_FOUND_ROWS_SYMBOL = 630;
	public static readonly SQL_SMALL_RESULT_SYMBOL = 631;
	public static readonly SQL_SYMBOL = 632;
	public static readonly SSL_SYMBOL = 633;
	public static readonly STARTING_SYMBOL = 634;
	public static readonly STDDEV_SAMP_SYMBOL = 635;
	public static readonly STDDEV_SYMBOL = 636;
	public static readonly STDDEV_POP_SYMBOL = 637;
	public static readonly STD_SYMBOL = 638;
	public static readonly STORED_SYMBOL = 639;
	public static readonly STRAIGHT_JOIN_SYMBOL = 640;
	public static readonly SUBSTR_SYMBOL = 641;
	public static readonly SUBSTRING_SYMBOL = 642;
	public static readonly SUM_SYMBOL = 643;
	public static readonly SYSDATE_SYMBOL = 644;
	public static readonly SYSTEM_USER_SYMBOL = 645;
	public static readonly TABLE_REF_PRIORITY_SYMBOL = 646;
	public static readonly TABLE_SYMBOL = 647;
	public static readonly TERMINATED_SYMBOL = 648;
	public static readonly THEN_SYMBOL = 649;
	public static readonly TINYBLOB_SYMBOL = 650;
	public static readonly TINYINT_SYMBOL = 651;
	public static readonly TINYTEXT_SYMBOL = 652;
	public static readonly TO_SYMBOL = 653;
	public static readonly TRAILING_SYMBOL = 654;
	public static readonly TRIGGER_SYMBOL = 655;
	public static readonly TRIM_SYMBOL = 656;
	public static readonly TRUE_SYMBOL = 657;
	public static readonly UNDO_SYMBOL = 658;
	public static readonly UNION_SYMBOL = 659;
	public static readonly UNIQUE_SYMBOL = 660;
	public static readonly UNLOCK_SYMBOL = 661;
	public static readonly UNSIGNED_SYMBOL = 662;
	public static readonly UPDATE_SYMBOL = 663;
	public static readonly USAGE_SYMBOL = 664;
	public static readonly USE_SYMBOL = 665;
	public static readonly USING_SYMBOL = 666;
	public static readonly UTC_DATE_SYMBOL = 667;
	public static readonly UTC_TIMESTAMP_SYMBOL = 668;
	public static readonly UTC_TIME_SYMBOL = 669;
	public static readonly VALIDATION_SYMBOL = 670;
	public static readonly VALUES_SYMBOL = 671;
	public static readonly VARBINARY_SYMBOL = 672;
	public static readonly VARCHAR_SYMBOL = 673;
	public static readonly VARIANCE_SYMBOL = 674;
	public static readonly VARYING_SYMBOL = 675;
	public static readonly VAR_POP_SYMBOL = 676;
	public static readonly VAR_SAMP_SYMBOL = 677;
	public static readonly VIRTUAL_SYMBOL = 678;
	public static readonly WHEN_SYMBOL = 679;
	public static readonly WHERE_SYMBOL = 680;
	public static readonly WHILE_SYMBOL = 681;
	public static readonly WITH_SYMBOL = 682;
	public static readonly WITHOUT_SYMBOL = 683;
	public static readonly WRITE_SYMBOL = 684;
	public static readonly XOR_SYMBOL = 685;
	public static readonly YEAR_MONTH_SYMBOL = 686;
	public static readonly ZEROFILL_SYMBOL = 687;
	public static readonly PERSIST_SYMBOL = 688;
	public static readonly ROLE_SYMBOL = 689;
	public static readonly ADMIN_SYMBOL = 690;
	public static readonly INVISIBLE_SYMBOL = 691;
	public static readonly VISIBLE_SYMBOL = 692;
	public static readonly EXCEPT_SYMBOL = 693;
	public static readonly COMPONENT_SYMBOL = 694;
	public static readonly RECURSIVE_SYMBOL = 695;
	public static readonly JSON_OBJECTAGG_SYMBOL = 696;
	public static readonly JSON_ARRAYAGG_SYMBOL = 697;
	public static readonly OF_SYMBOL = 698;
	public static readonly SKIP_SYMBOL = 699;
	public static readonly LOCKED_SYMBOL = 700;
	public static readonly NOWAIT_SYMBOL = 701;
	public static readonly GROUPING_SYMBOL = 702;
	public static readonly PERSIST_ONLY_SYMBOL = 703;
	public static readonly HISTOGRAM_SYMBOL = 704;
	public static readonly BUCKETS_SYMBOL = 705;
	public static readonly REMOTE_SYMBOL = 706;
	public static readonly CLONE_SYMBOL = 707;
	public static readonly CUME_DIST_SYMBOL = 708;
	public static readonly DENSE_RANK_SYMBOL = 709;
	public static readonly EXCLUDE_SYMBOL = 710;
	public static readonly FIRST_VALUE_SYMBOL = 711;
	public static readonly FOLLOWING_SYMBOL = 712;
	public static readonly GROUPS_SYMBOL = 713;
	public static readonly LAG_SYMBOL = 714;
	public static readonly LAST_VALUE_SYMBOL = 715;
	public static readonly LEAD_SYMBOL = 716;
	public static readonly NTH_VALUE_SYMBOL = 717;
	public static readonly NTILE_SYMBOL = 718;
	public static readonly NULLS_SYMBOL = 719;
	public static readonly OTHERS_SYMBOL = 720;
	public static readonly OVER_SYMBOL = 721;
	public static readonly PERCENT_RANK_SYMBOL = 722;
	public static readonly PRECEDING_SYMBOL = 723;
	public static readonly RANK_SYMBOL = 724;
	public static readonly RESPECT_SYMBOL = 725;
	public static readonly ROW_NUMBER_SYMBOL = 726;
	public static readonly TIES_SYMBOL = 727;
	public static readonly UNBOUNDED_SYMBOL = 728;
	public static readonly WINDOW_SYMBOL = 729;
	public static readonly EMPTY_SYMBOL = 730;
	public static readonly JSON_TABLE_SYMBOL = 731;
	public static readonly NESTED_SYMBOL = 732;
	public static readonly ORDINALITY_SYMBOL = 733;
	public static readonly PATH_SYMBOL = 734;
	public static readonly HISTORY_SYMBOL = 735;
	public static readonly REUSE_SYMBOL = 736;
	public static readonly SRID_SYMBOL = 737;
	public static readonly THREAD_PRIORITY_SYMBOL = 738;
	public static readonly RESOURCE_SYMBOL = 739;
	public static readonly SYSTEM_SYMBOL = 740;
	public static readonly VCPU_SYMBOL = 741;
	public static readonly MASTER_PUBLIC_KEY_PATH_SYMBOL = 742;
	public static readonly GET_MASTER_PUBLIC_KEY_SYMBOL = 743;
	public static readonly RESTART_SYMBOL = 744;
	public static readonly DEFINITION_SYMBOL = 745;
	public static readonly DESCRIPTION_SYMBOL = 746;
	public static readonly ORGANIZATION_SYMBOL = 747;
	public static readonly REFERENCE_SYMBOL = 748;
	public static readonly OPTIONAL_SYMBOL = 749;
	public static readonly SECONDARY_SYMBOL = 750;
	public static readonly SECONDARY_ENGINE_SYMBOL = 751;
	public static readonly SECONDARY_LOAD_SYMBOL = 752;
	public static readonly SECONDARY_UNLOAD_SYMBOL = 753;
	public static readonly ACTIVE_SYMBOL = 754;
	public static readonly INACTIVE_SYMBOL = 755;
	public static readonly LATERAL_SYMBOL = 756;
	public static readonly RETAIN_SYMBOL = 757;
	public static readonly OLD_SYMBOL = 758;
	public static readonly NETWORK_NAMESPACE_SYMBOL = 759;
	public static readonly ENFORCED_SYMBOL = 760;
	public static readonly ARRAY_SYMBOL = 761;
	public static readonly OJ_SYMBOL = 762;
	public static readonly MEMBER_SYMBOL = 763;
	public static readonly RANDOM_SYMBOL = 764;
	public static readonly MASTER_COMPRESSION_ALGORITHM_SYMBOL = 765;
	public static readonly MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL = 766;
	public static readonly PRIVILEGE_CHECKS_USER_SYMBOL = 767;
	public static readonly MASTER_TLS_CIPHERSUITES_SYMBOL = 768;
	public static readonly WHITESPACE = 769;
	public static readonly INVALID_INPUT = 770;
	public static readonly UNDERSCORE_CHARSET = 771;
	public static readonly IDENTIFIER = 772;
	public static readonly NCHAR_TEXT = 773;
	public static readonly BACK_TICK_QUOTED_ID = 774;
	public static readonly DOUBLE_QUOTED_TEXT = 775;
	public static readonly SINGLE_QUOTED_TEXT = 776;
	public static readonly VERSION_COMMENT_START = 777;
	public static readonly MYSQL_COMMENT_START = 778;
	public static readonly VERSION_COMMENT_END = 779;
	public static readonly BLOCK_COMMENT = 780;
	public static readonly POUND_COMMENT = 781;
	public static readonly DASHDASH_COMMENT = 782;
	public static readonly NOT_EQUAL2_OPERATOR = 783;
	public static readonly EOF = Token.EOF;
	public static readonly RULE_query = 0;
	public static readonly RULE_simpleStatement = 1;
	public static readonly RULE_alterStatement = 2;
	public static readonly RULE_alterDatabase = 3;
	public static readonly RULE_alterEvent = 4;
	public static readonly RULE_alterLogfileGroup = 5;
	public static readonly RULE_alterLogfileGroupOptions = 6;
	public static readonly RULE_alterLogfileGroupOption = 7;
	public static readonly RULE_alterServer = 8;
	public static readonly RULE_alterTable = 9;
	public static readonly RULE_alterTableActions = 10;
	public static readonly RULE_alterCommandList = 11;
	public static readonly RULE_alterCommandsModifierList = 12;
	public static readonly RULE_standaloneAlterCommands = 13;
	public static readonly RULE_alterPartition = 14;
	public static readonly RULE_alterList = 15;
	public static readonly RULE_alterCommandsModifier = 16;
	public static readonly RULE_alterListItem = 17;
	public static readonly RULE_place = 18;
	public static readonly RULE_restrict = 19;
	public static readonly RULE_alterOrderList = 20;
	public static readonly RULE_alterAlgorithmOption = 21;
	public static readonly RULE_alterLockOption = 22;
	public static readonly RULE_indexLockAndAlgorithm = 23;
	public static readonly RULE_withValidation = 24;
	public static readonly RULE_removePartitioning = 25;
	public static readonly RULE_allOrPartitionNameList = 26;
	public static readonly RULE_reorgPartitionRule = 27;
	public static readonly RULE_alterTablespace = 28;
	public static readonly RULE_alterUndoTablespace = 29;
	public static readonly RULE_undoTableSpaceOptions = 30;
	public static readonly RULE_undoTableSpaceOption = 31;
	public static readonly RULE_alterTablespaceOptions = 32;
	public static readonly RULE_alterTablespaceOption = 33;
	public static readonly RULE_changeTablespaceOption = 34;
	public static readonly RULE_alterView = 35;
	public static readonly RULE_viewTail = 36;
	public static readonly RULE_viewSelect = 37;
	public static readonly RULE_viewCheckOption = 38;
	public static readonly RULE_createStatement = 39;
	public static readonly RULE_createDatabase = 40;
	public static readonly RULE_createDatabaseOption = 41;
	public static readonly RULE_createTable = 42;
	public static readonly RULE_tableElementList = 43;
	public static readonly RULE_tableElement = 44;
	public static readonly RULE_duplicateAsQueryExpression = 45;
	public static readonly RULE_queryExpressionOrParens = 46;
	public static readonly RULE_createRoutine = 47;
	public static readonly RULE_createProcedure = 48;
	public static readonly RULE_createFunction = 49;
	public static readonly RULE_createUdf = 50;
	public static readonly RULE_routineCreateOption = 51;
	public static readonly RULE_routineAlterOptions = 52;
	public static readonly RULE_routineOption = 53;
	public static readonly RULE_createIndex = 54;
	public static readonly RULE_indexNameAndType = 55;
	public static readonly RULE_createIndexTarget = 56;
	public static readonly RULE_createLogfileGroup = 57;
	public static readonly RULE_logfileGroupOptions = 58;
	public static readonly RULE_logfileGroupOption = 59;
	public static readonly RULE_createServer = 60;
	public static readonly RULE_serverOptions = 61;
	public static readonly RULE_serverOption = 62;
	public static readonly RULE_createTablespace = 63;
	public static readonly RULE_createUndoTablespace = 64;
	public static readonly RULE_tsDataFileName = 65;
	public static readonly RULE_tsDataFile = 66;
	public static readonly RULE_tablespaceOptions = 67;
	public static readonly RULE_tablespaceOption = 68;
	public static readonly RULE_tsOptionInitialSize = 69;
	public static readonly RULE_tsOptionUndoRedoBufferSize = 70;
	public static readonly RULE_tsOptionAutoextendSize = 71;
	public static readonly RULE_tsOptionMaxSize = 72;
	public static readonly RULE_tsOptionExtentSize = 73;
	public static readonly RULE_tsOptionNodegroup = 74;
	public static readonly RULE_tsOptionEngine = 75;
	public static readonly RULE_tsOptionWait = 76;
	public static readonly RULE_tsOptionComment = 77;
	public static readonly RULE_tsOptionFileblockSize = 78;
	public static readonly RULE_tsOptionEncryption = 79;
	public static readonly RULE_createView = 80;
	public static readonly RULE_viewReplaceOrAlgorithm = 81;
	public static readonly RULE_viewAlgorithm = 82;
	public static readonly RULE_viewSuid = 83;
	public static readonly RULE_createTrigger = 84;
	public static readonly RULE_triggerFollowsPrecedesClause = 85;
	public static readonly RULE_createEvent = 86;
	public static readonly RULE_createRole = 87;
	public static readonly RULE_createSpatialReference = 88;
	public static readonly RULE_srsAttribute = 89;
	public static readonly RULE_dropStatement = 90;
	public static readonly RULE_dropDatabase = 91;
	public static readonly RULE_dropEvent = 92;
	public static readonly RULE_dropFunction = 93;
	public static readonly RULE_dropProcedure = 94;
	public static readonly RULE_dropIndex = 95;
	public static readonly RULE_dropLogfileGroup = 96;
	public static readonly RULE_dropLogfileGroupOption = 97;
	public static readonly RULE_dropServer = 98;
	public static readonly RULE_dropTable = 99;
	public static readonly RULE_dropTableSpace = 100;
	public static readonly RULE_dropTrigger = 101;
	public static readonly RULE_dropView = 102;
	public static readonly RULE_dropRole = 103;
	public static readonly RULE_dropSpatialReference = 104;
	public static readonly RULE_dropUndoTablespace = 105;
	public static readonly RULE_renameTableStatement = 106;
	public static readonly RULE_renamePair = 107;
	public static readonly RULE_truncateTableStatement = 108;
	public static readonly RULE_importStatement = 109;
	public static readonly RULE_callStatement = 110;
	public static readonly RULE_deleteStatement = 111;
	public static readonly RULE_partitionDelete = 112;
	public static readonly RULE_deleteStatementOption = 113;
	public static readonly RULE_doStatement = 114;
	public static readonly RULE_handlerStatement = 115;
	public static readonly RULE_handlerReadOrScan = 116;
	public static readonly RULE_insertStatement = 117;
	public static readonly RULE_insertLockOption = 118;
	public static readonly RULE_insertFromConstructor = 119;
	public static readonly RULE_fields = 120;
	public static readonly RULE_insertValues = 121;
	public static readonly RULE_insertQueryExpression = 122;
	public static readonly RULE_valueList = 123;
	public static readonly RULE_values = 124;
	public static readonly RULE_valuesReference = 125;
	public static readonly RULE_insertUpdateList = 126;
	public static readonly RULE_loadStatement = 127;
	public static readonly RULE_dataOrXml = 128;
	public static readonly RULE_xmlRowsIdentifiedBy = 129;
	public static readonly RULE_loadDataFileTail = 130;
	public static readonly RULE_loadDataFileTargetList = 131;
	public static readonly RULE_fieldOrVariableList = 132;
	public static readonly RULE_replaceStatement = 133;
	public static readonly RULE_selectStatement = 134;
	public static readonly RULE_selectStatementWithInto = 135;
	public static readonly RULE_queryExpression = 136;
	public static readonly RULE_queryExpressionBody = 137;
	public static readonly RULE_queryExpressionParens = 138;
	public static readonly RULE_querySpecification = 139;
	public static readonly RULE_subquery = 140;
	public static readonly RULE_querySpecOption = 141;
	public static readonly RULE_limitClause = 142;
	public static readonly RULE_simpleLimitClause = 143;
	public static readonly RULE_limitOptions = 144;
	public static readonly RULE_limitOption = 145;
	public static readonly RULE_intoClause = 146;
	public static readonly RULE_procedureAnalyseClause = 147;
	public static readonly RULE_havingClause = 148;
	public static readonly RULE_windowClause = 149;
	public static readonly RULE_windowDefinition = 150;
	public static readonly RULE_windowSpec = 151;
	public static readonly RULE_windowSpecDetails = 152;
	public static readonly RULE_windowFrameClause = 153;
	public static readonly RULE_windowFrameUnits = 154;
	public static readonly RULE_windowFrameExtent = 155;
	public static readonly RULE_windowFrameStart = 156;
	public static readonly RULE_windowFrameBetween = 157;
	public static readonly RULE_windowFrameBound = 158;
	public static readonly RULE_windowFrameExclusion = 159;
	public static readonly RULE_withClause = 160;
	public static readonly RULE_commonTableExpression = 161;
	public static readonly RULE_groupByClause = 162;
	public static readonly RULE_olapOption = 163;
	public static readonly RULE_orderClause = 164;
	public static readonly RULE_direction = 165;
	public static readonly RULE_fromClause = 166;
	public static readonly RULE_tableReferenceList = 167;
	public static readonly RULE_selectOption = 168;
	public static readonly RULE_lockingClause = 169;
	public static readonly RULE_lockStrengh = 170;
	public static readonly RULE_lockedRowAction = 171;
	public static readonly RULE_selectItemList = 172;
	public static readonly RULE_selectItem = 173;
	public static readonly RULE_selectAlias = 174;
	public static readonly RULE_whereClause = 175;
	public static readonly RULE_tableReference = 176;
	public static readonly RULE_escapedTableReference = 177;
	public static readonly RULE_joinedTable = 178;
	public static readonly RULE_naturalJoinType = 179;
	public static readonly RULE_innerJoinType = 180;
	public static readonly RULE_outerJoinType = 181;
	public static readonly RULE_tableFactor = 182;
	public static readonly RULE_singleTable = 183;
	public static readonly RULE_singleTableParens = 184;
	public static readonly RULE_derivedTable = 185;
	public static readonly RULE_tableReferenceListParens = 186;
	public static readonly RULE_tableFunction = 187;
	public static readonly RULE_columnsClause = 188;
	public static readonly RULE_jtColumn = 189;
	public static readonly RULE_onEmptyOrError = 190;
	public static readonly RULE_onEmpty = 191;
	public static readonly RULE_onError = 192;
	public static readonly RULE_jtOnResponse = 193;
	public static readonly RULE_unionOption = 194;
	public static readonly RULE_tableAlias = 195;
	public static readonly RULE_indexHintList = 196;
	public static readonly RULE_indexHint = 197;
	public static readonly RULE_indexHintType = 198;
	public static readonly RULE_keyOrIndex = 199;
	public static readonly RULE_constraintKeyType = 200;
	public static readonly RULE_indexHintClause = 201;
	public static readonly RULE_indexList = 202;
	public static readonly RULE_indexListElement = 203;
	public static readonly RULE_updateStatement = 204;
	public static readonly RULE_transactionOrLockingStatement = 205;
	public static readonly RULE_transactionStatement = 206;
	public static readonly RULE_beginWork = 207;
	public static readonly RULE_transactionCharacteristic = 208;
	public static readonly RULE_savepointStatement = 209;
	public static readonly RULE_lockStatement = 210;
	public static readonly RULE_lockItem = 211;
	public static readonly RULE_lockOption = 212;
	public static readonly RULE_xaStatement = 213;
	public static readonly RULE_xaConvert = 214;
	public static readonly RULE_xid = 215;
	public static readonly RULE_replicationStatement = 216;
	public static readonly RULE_resetOption = 217;
	public static readonly RULE_masterResetOptions = 218;
	public static readonly RULE_replicationLoad = 219;
	public static readonly RULE_changeMaster = 220;
	public static readonly RULE_changeMasterOptions = 221;
	public static readonly RULE_masterOption = 222;
	public static readonly RULE_privilegeCheckDef = 223;
	public static readonly RULE_masterTlsCiphersuitesDef = 224;
	public static readonly RULE_masterFileDef = 225;
	public static readonly RULE_serverIdList = 226;
	public static readonly RULE_changeReplication = 227;
	public static readonly RULE_filterDefinition = 228;
	public static readonly RULE_filterDbList = 229;
	public static readonly RULE_filterTableList = 230;
	public static readonly RULE_filterStringList = 231;
	public static readonly RULE_filterWildDbTableString = 232;
	public static readonly RULE_filterDbPairList = 233;
	public static readonly RULE_slave = 234;
	public static readonly RULE_slaveUntilOptions = 235;
	public static readonly RULE_slaveConnectionOptions = 236;
	public static readonly RULE_slaveThreadOptions = 237;
	public static readonly RULE_slaveThreadOption = 238;
	public static readonly RULE_groupReplication = 239;
	public static readonly RULE_preparedStatement = 240;
	public static readonly RULE_executeStatement = 241;
	public static readonly RULE_executeVarList = 242;
	public static readonly RULE_cloneStatement = 243;
	public static readonly RULE_dataDirSSL = 244;
	public static readonly RULE_ssl = 245;
	public static readonly RULE_accountManagementStatement = 246;
	public static readonly RULE_alterUser = 247;
	public static readonly RULE_alterUserTail = 248;
	public static readonly RULE_userFunction = 249;
	public static readonly RULE_createUser = 250;
	public static readonly RULE_createUserTail = 251;
	public static readonly RULE_defaultRoleClause = 252;
	public static readonly RULE_requireClause = 253;
	public static readonly RULE_connectOptions = 254;
	public static readonly RULE_accountLockPasswordExpireOptions = 255;
	public static readonly RULE_dropUser = 256;
	public static readonly RULE_grant = 257;
	public static readonly RULE_grantTargetList = 258;
	public static readonly RULE_grantOptions = 259;
	public static readonly RULE_exceptRoleList = 260;
	public static readonly RULE_withRoles = 261;
	public static readonly RULE_grantAs = 262;
	public static readonly RULE_versionedRequireClause = 263;
	public static readonly RULE_renameUser = 264;
	public static readonly RULE_revoke = 265;
	public static readonly RULE_onTypeTo = 266;
	public static readonly RULE_aclType = 267;
	public static readonly RULE_roleOrPrivilegesList = 268;
	public static readonly RULE_roleOrPrivilege = 269;
	public static readonly RULE_grantIdentifier = 270;
	public static readonly RULE_requireList = 271;
	public static readonly RULE_requireListElement = 272;
	public static readonly RULE_grantOption = 273;
	public static readonly RULE_setRole = 274;
	public static readonly RULE_roleList = 275;
	public static readonly RULE_role = 276;
	public static readonly RULE_tableAdministrationStatement = 277;
	public static readonly RULE_histogram = 278;
	public static readonly RULE_checkOption = 279;
	public static readonly RULE_repairType = 280;
	public static readonly RULE_installUninstallStatment = 281;
	public static readonly RULE_setStatement = 282;
	public static readonly RULE_startOptionValueList = 283;
	public static readonly RULE_transactionCharacteristics = 284;
	public static readonly RULE_transactionAccessMode = 285;
	public static readonly RULE_isolationLevel = 286;
	public static readonly RULE_optionValueListContinued = 287;
	public static readonly RULE_optionValueNoOptionType = 288;
	public static readonly RULE_optionValue = 289;
	public static readonly RULE_setSystemVariable = 290;
	public static readonly RULE_startOptionValueListFollowingOptionType = 291;
	public static readonly RULE_optionValueFollowingOptionType = 292;
	public static readonly RULE_setExprOrDefault = 293;
	public static readonly RULE_showStatement = 294;
	public static readonly RULE_showCommandType = 295;
	public static readonly RULE_nonBlocking = 296;
	public static readonly RULE_fromOrIn = 297;
	public static readonly RULE_inDb = 298;
	public static readonly RULE_profileType = 299;
	public static readonly RULE_otherAdministrativeStatement = 300;
	public static readonly RULE_keyCacheListOrParts = 301;
	public static readonly RULE_keyCacheList = 302;
	public static readonly RULE_assignToKeycache = 303;
	public static readonly RULE_assignToKeycachePartition = 304;
	public static readonly RULE_cacheKeyList = 305;
	public static readonly RULE_keyUsageElement = 306;
	public static readonly RULE_keyUsageList = 307;
	public static readonly RULE_flushOption = 308;
	public static readonly RULE_logType = 309;
	public static readonly RULE_flushTables = 310;
	public static readonly RULE_flushTablesOptions = 311;
	public static readonly RULE_preloadTail = 312;
	public static readonly RULE_preloadList = 313;
	public static readonly RULE_preloadKeys = 314;
	public static readonly RULE_adminPartition = 315;
	public static readonly RULE_resourceGroupManagement = 316;
	public static readonly RULE_createResourceGroup = 317;
	public static readonly RULE_resourceGroupVcpuList = 318;
	public static readonly RULE_vcpuNumOrRange = 319;
	public static readonly RULE_resourceGroupPriority = 320;
	public static readonly RULE_resourceGroupEnableDisable = 321;
	public static readonly RULE_alterResourceGroup = 322;
	public static readonly RULE_setResourceGroup = 323;
	public static readonly RULE_threadIdList = 324;
	public static readonly RULE_dropResourceGroup = 325;
	public static readonly RULE_utilityStatement = 326;
	public static readonly RULE_describeCommand = 327;
	public static readonly RULE_explainCommand = 328;
	public static readonly RULE_explainableStatement = 329;
	public static readonly RULE_helpCommand = 330;
	public static readonly RULE_useCommand = 331;
	public static readonly RULE_restartServer = 332;
	public static readonly RULE_expr = 333;
	public static readonly RULE_boolPri = 334;
	public static readonly RULE_compOp = 335;
	public static readonly RULE_predicate = 336;
	public static readonly RULE_predicateOperations = 337;
	public static readonly RULE_bitExpr = 338;
	public static readonly RULE_simpleExpr = 339;
	public static readonly RULE_arrayCast = 340;
	public static readonly RULE_jsonOperator = 341;
	public static readonly RULE_sumExpr = 342;
	public static readonly RULE_groupingOperation = 343;
	public static readonly RULE_windowFunctionCall = 344;
	public static readonly RULE_windowingClause = 345;
	public static readonly RULE_leadLagInfo = 346;
	public static readonly RULE_nullTreatment = 347;
	public static readonly RULE_jsonFunction = 348;
	public static readonly RULE_inSumExpr = 349;
	public static readonly RULE_identListArg = 350;
	public static readonly RULE_identList = 351;
	public static readonly RULE_fulltextOptions = 352;
	public static readonly RULE_runtimeFunctionCall = 353;
	public static readonly RULE_geometryFunction = 354;
	public static readonly RULE_timeFunctionParameters = 355;
	public static readonly RULE_fractionalPrecision = 356;
	public static readonly RULE_weightStringLevels = 357;
	public static readonly RULE_weightStringLevelListItem = 358;
	public static readonly RULE_dateTimeTtype = 359;
	public static readonly RULE_trimFunction = 360;
	public static readonly RULE_substringFunction = 361;
	public static readonly RULE_functionCall = 362;
	public static readonly RULE_udfExprList = 363;
	public static readonly RULE_udfExpr = 364;
	public static readonly RULE_variable = 365;
	public static readonly RULE_userVariable = 366;
	public static readonly RULE_systemVariable = 367;
	public static readonly RULE_internalVariableName = 368;
	public static readonly RULE_whenExpression = 369;
	public static readonly RULE_thenExpression = 370;
	public static readonly RULE_elseExpression = 371;
	public static readonly RULE_castType = 372;
	public static readonly RULE_exprList = 373;
	public static readonly RULE_charset = 374;
	public static readonly RULE_notRule = 375;
	public static readonly RULE_not2Rule = 376;
	public static readonly RULE_interval = 377;
	public static readonly RULE_intervalTimeStamp = 378;
	public static readonly RULE_exprListWithParentheses = 379;
	public static readonly RULE_exprWithParentheses = 380;
	public static readonly RULE_simpleExprWithParentheses = 381;
	public static readonly RULE_orderList = 382;
	public static readonly RULE_orderExpression = 383;
	public static readonly RULE_groupList = 384;
	public static readonly RULE_groupingExpression = 385;
	public static readonly RULE_channel = 386;
	public static readonly RULE_compoundStatement = 387;
	public static readonly RULE_returnStatement = 388;
	public static readonly RULE_ifStatement = 389;
	public static readonly RULE_ifBody = 390;
	public static readonly RULE_thenStatement = 391;
	public static readonly RULE_compoundStatementList = 392;
	public static readonly RULE_caseStatement = 393;
	public static readonly RULE_elseStatement = 394;
	public static readonly RULE_labeledBlock = 395;
	public static readonly RULE_unlabeledBlock = 396;
	public static readonly RULE_label = 397;
	public static readonly RULE_beginEndBlock = 398;
	public static readonly RULE_labeledControl = 399;
	public static readonly RULE_unlabeledControl = 400;
	public static readonly RULE_loopBlock = 401;
	public static readonly RULE_whileDoBlock = 402;
	public static readonly RULE_repeatUntilBlock = 403;
	public static readonly RULE_spDeclarations = 404;
	public static readonly RULE_spDeclaration = 405;
	public static readonly RULE_variableDeclaration = 406;
	public static readonly RULE_conditionDeclaration = 407;
	public static readonly RULE_spCondition = 408;
	public static readonly RULE_sqlstate = 409;
	public static readonly RULE_handlerDeclaration = 410;
	public static readonly RULE_handlerCondition = 411;
	public static readonly RULE_cursorDeclaration = 412;
	public static readonly RULE_iterateStatement = 413;
	public static readonly RULE_leaveStatement = 414;
	public static readonly RULE_getDiagnostics = 415;
	public static readonly RULE_signalAllowedExpr = 416;
	public static readonly RULE_statementInformationItem = 417;
	public static readonly RULE_conditionInformationItem = 418;
	public static readonly RULE_signalInformationItemName = 419;
	public static readonly RULE_signalStatement = 420;
	public static readonly RULE_resignalStatement = 421;
	public static readonly RULE_signalInformationItem = 422;
	public static readonly RULE_cursorOpen = 423;
	public static readonly RULE_cursorClose = 424;
	public static readonly RULE_cursorFetch = 425;
	public static readonly RULE_schedule = 426;
	public static readonly RULE_columnDefinition = 427;
	public static readonly RULE_checkOrReferences = 428;
	public static readonly RULE_checkConstraint = 429;
	public static readonly RULE_constraintEnforcement = 430;
	public static readonly RULE_tableConstraintDef = 431;
	public static readonly RULE_constraintName = 432;
	public static readonly RULE_fieldDefinition = 433;
	public static readonly RULE_columnAttribute = 434;
	public static readonly RULE_columnFormat = 435;
	public static readonly RULE_storageMedia = 436;
	public static readonly RULE_gcolAttribute = 437;
	public static readonly RULE_references = 438;
	public static readonly RULE_deleteOption = 439;
	public static readonly RULE_keyList = 440;
	public static readonly RULE_keyPart = 441;
	public static readonly RULE_keyListWithExpression = 442;
	public static readonly RULE_keyPartOrExpression = 443;
	public static readonly RULE_keyListVariants = 444;
	public static readonly RULE_indexType = 445;
	public static readonly RULE_indexOption = 446;
	public static readonly RULE_commonIndexOption = 447;
	public static readonly RULE_visibility = 448;
	public static readonly RULE_indexTypeClause = 449;
	public static readonly RULE_fulltextIndexOption = 450;
	public static readonly RULE_spatialIndexOption = 451;
	public static readonly RULE_dataTypeDefinition = 452;
	public static readonly RULE_dataType = 453;
	public static readonly RULE_nchar = 454;
	public static readonly RULE_realType = 455;
	public static readonly RULE_fieldLength = 456;
	public static readonly RULE_fieldOptions = 457;
	public static readonly RULE_charsetWithOptBinary = 458;
	public static readonly RULE_ascii = 459;
	public static readonly RULE_unicode = 460;
	public static readonly RULE_wsNumCodepoints = 461;
	public static readonly RULE_typeDatetimePrecision = 462;
	public static readonly RULE_charsetName = 463;
	public static readonly RULE_collationName = 464;
	public static readonly RULE_createTableOptions = 465;
	public static readonly RULE_createTableOptionsSpaceSeparated = 466;
	public static readonly RULE_createTableOption = 467;
	public static readonly RULE_ternaryOption = 468;
	public static readonly RULE_defaultCollation = 469;
	public static readonly RULE_defaultEncryption = 470;
	public static readonly RULE_defaultCharset = 471;
	public static readonly RULE_partitionClause = 472;
	public static readonly RULE_partitionTypeDef = 473;
	public static readonly RULE_subPartitions = 474;
	public static readonly RULE_partitionKeyAlgorithm = 475;
	public static readonly RULE_partitionDefinitions = 476;
	public static readonly RULE_partitionDefinition = 477;
	public static readonly RULE_partitionValuesIn = 478;
	public static readonly RULE_partitionOption = 479;
	public static readonly RULE_subpartitionDefinition = 480;
	public static readonly RULE_partitionValueItemListParen = 481;
	public static readonly RULE_partitionValueItem = 482;
	public static readonly RULE_definerClause = 483;
	public static readonly RULE_ifExists = 484;
	public static readonly RULE_ifNotExists = 485;
	public static readonly RULE_procedureParameter = 486;
	public static readonly RULE_functionParameter = 487;
	public static readonly RULE_collate = 488;
	public static readonly RULE_typeWithOptCollate = 489;
	public static readonly RULE_schemaIdentifierPair = 490;
	public static readonly RULE_viewRefList = 491;
	public static readonly RULE_updateList = 492;
	public static readonly RULE_updateElement = 493;
	public static readonly RULE_charsetClause = 494;
	public static readonly RULE_fieldsClause = 495;
	public static readonly RULE_fieldTerm = 496;
	public static readonly RULE_linesClause = 497;
	public static readonly RULE_lineTerm = 498;
	public static readonly RULE_userList = 499;
	public static readonly RULE_createUserList = 500;
	public static readonly RULE_alterUserList = 501;
	public static readonly RULE_createUserEntry = 502;
	public static readonly RULE_alterUserEntry = 503;
	public static readonly RULE_retainCurrentPassword = 504;
	public static readonly RULE_discardOldPassword = 505;
	public static readonly RULE_replacePassword = 506;
	public static readonly RULE_userIdentifierOrText = 507;
	public static readonly RULE_user = 508;
	public static readonly RULE_likeClause = 509;
	public static readonly RULE_likeOrWhere = 510;
	public static readonly RULE_onlineOption = 511;
	public static readonly RULE_noWriteToBinLog = 512;
	public static readonly RULE_usePartition = 513;
	public static readonly RULE_fieldIdentifier = 514;
	public static readonly RULE_columnName = 515;
	public static readonly RULE_columnInternalRef = 516;
	public static readonly RULE_columnInternalRefList = 517;
	public static readonly RULE_columnRef = 518;
	public static readonly RULE_insertIdentifier = 519;
	public static readonly RULE_indexName = 520;
	public static readonly RULE_indexRef = 521;
	public static readonly RULE_tableWild = 522;
	public static readonly RULE_schemaName = 523;
	public static readonly RULE_schemaRef = 524;
	public static readonly RULE_procedureName = 525;
	public static readonly RULE_procedureRef = 526;
	public static readonly RULE_functionName = 527;
	public static readonly RULE_functionRef = 528;
	public static readonly RULE_triggerName = 529;
	public static readonly RULE_triggerRef = 530;
	public static readonly RULE_viewName = 531;
	public static readonly RULE_viewRef = 532;
	public static readonly RULE_tablespaceName = 533;
	public static readonly RULE_tablespaceRef = 534;
	public static readonly RULE_logfileGroupName = 535;
	public static readonly RULE_logfileGroupRef = 536;
	public static readonly RULE_eventName = 537;
	public static readonly RULE_eventRef = 538;
	public static readonly RULE_udfName = 539;
	public static readonly RULE_serverName = 540;
	public static readonly RULE_serverRef = 541;
	public static readonly RULE_engineRef = 542;
	public static readonly RULE_tableName = 543;
	public static readonly RULE_filterTableRef = 544;
	public static readonly RULE_tableRefWithWildcard = 545;
	public static readonly RULE_tableRef = 546;
	public static readonly RULE_tableRefList = 547;
	public static readonly RULE_tableAliasRefList = 548;
	public static readonly RULE_parameterName = 549;
	public static readonly RULE_labelIdentifier = 550;
	public static readonly RULE_labelRef = 551;
	public static readonly RULE_roleIdentifier = 552;
	public static readonly RULE_roleRef = 553;
	public static readonly RULE_pluginRef = 554;
	public static readonly RULE_componentRef = 555;
	public static readonly RULE_resourceGroupRef = 556;
	public static readonly RULE_windowName = 557;
	public static readonly RULE_pureIdentifier = 558;
	public static readonly RULE_identifier = 559;
	public static readonly RULE_identifierList = 560;
	public static readonly RULE_identifierListWithParentheses = 561;
	public static readonly RULE_qualifiedIdentifier = 562;
	public static readonly RULE_simpleIdentifier = 563;
	public static readonly RULE_dotIdentifier = 564;
	public static readonly RULE_ulong_number = 565;
	public static readonly RULE_real_ulong_number = 566;
	public static readonly RULE_ulonglong_number = 567;
	public static readonly RULE_real_ulonglong_number = 568;
	public static readonly RULE_literal = 569;
	public static readonly RULE_signedLiteral = 570;
	public static readonly RULE_stringList = 571;
	public static readonly RULE_textStringLiteral = 572;
	public static readonly RULE_textString = 573;
	public static readonly RULE_textStringHash = 574;
	public static readonly RULE_textLiteral = 575;
	public static readonly RULE_textStringNoLinebreak = 576;
	public static readonly RULE_textStringLiteralList = 577;
	public static readonly RULE_numLiteral = 578;
	public static readonly RULE_boolLiteral = 579;
	public static readonly RULE_nullLiteral = 580;
	public static readonly RULE_temporalLiteral = 581;
	public static readonly RULE_floatOptions = 582;
	public static readonly RULE_standardFloatOptions = 583;
	public static readonly RULE_precision = 584;
	public static readonly RULE_textOrIdentifier = 585;
	public static readonly RULE_lValueIdentifier = 586;
	public static readonly RULE_roleIdentifierOrText = 587;
	public static readonly RULE_sizeNumber = 588;
	public static readonly RULE_parentheses = 589;
	public static readonly RULE_equal = 590;
	public static readonly RULE_optionType = 591;
	public static readonly RULE_varIdentType = 592;
	public static readonly RULE_setVarIdentType = 593;
	public static readonly RULE_identifierKeyword = 594;
	public static readonly RULE_identifierKeywordsAmbiguous1RolesAndLabels = 595;
	public static readonly RULE_identifierKeywordsAmbiguous2Labels = 596;
	public static readonly RULE_labelKeyword = 597;
	public static readonly RULE_identifierKeywordsAmbiguous3Roles = 598;
	public static readonly RULE_identifierKeywordsUnambiguous = 599;
	public static readonly RULE_roleKeyword = 600;
	public static readonly RULE_lValueKeyword = 601;
	public static readonly RULE_identifierKeywordsAmbiguous4SystemVariables = 602;
	public static readonly RULE_roleOrIdentifierKeyword = 603;
	public static readonly RULE_roleOrLabelKeyword = 604;
	public static readonly literalNames: (string | null)[] = [ null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, "'='", 
                                                            "':='", "'<=>'", 
                                                            "'>='", "'>'", 
                                                            "'<='", "'<'", 
                                                            "'!='", "'+'", 
                                                            "'-'", "'*'", 
                                                            "'/'", "'%'", 
                                                            "'!'", "'~'", 
                                                            "'<<'", "'>>'", 
                                                            "'&&'", "'&'", 
                                                            "'^'", "'||'", 
                                                            "'|'", "'.'", 
                                                            "','", "';'", 
                                                            "':'", "'('", 
                                                            "')'", "'{'", 
                                                            "'}'", "'_'", 
                                                            "'->'", "'->>'", 
                                                            "'@'", null, 
                                                            "'@@'", "'\\N'", 
                                                            "'?'", null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, "'<>'" ];
	public static readonly symbolicNames: (string | null)[] = [ null, "ACCOUNT_SYMBOL", 
                                                             "ASCII_SYMBOL", 
                                                             "ALWAYS_SYMBOL", 
                                                             "BACKUP_SYMBOL", 
                                                             "BEGIN_SYMBOL", 
                                                             "BYTE_SYMBOL", 
                                                             "CACHE_SYMBOL", 
                                                             "CHARSET_SYMBOL", 
                                                             "CHECKSUM_SYMBOL", 
                                                             "CLOSE_SYMBOL", 
                                                             "COMMENT_SYMBOL", 
                                                             "COMMIT_SYMBOL", 
                                                             "CONTAINS_SYMBOL", 
                                                             "DEALLOCATE_SYMBOL", 
                                                             "DO_SYMBOL", 
                                                             "END_SYMBOL", 
                                                             "EXECUTE_SYMBOL", 
                                                             "FLUSH_SYMBOL", 
                                                             "FOLLOWS_SYMBOL", 
                                                             "FORMAT_SYMBOL", 
                                                             "GROUP_REPLICATION_SYMBOL", 
                                                             "HANDLER_SYMBOL", 
                                                             "HELP_SYMBOL", 
                                                             "HOST_SYMBOL", 
                                                             "INSTALL_SYMBOL", 
                                                             "LANGUAGE_SYMBOL", 
                                                             "NO_SYMBOL", 
                                                             "OPEN_SYMBOL", 
                                                             "OPTIONS_SYMBOL", 
                                                             "OWNER_SYMBOL", 
                                                             "PARSER_SYMBOL", 
                                                             "PARTITION_SYMBOL", 
                                                             "PORT_SYMBOL", 
                                                             "PRECEDES_SYMBOL", 
                                                             "PREPARE_SYMBOL", 
                                                             "REMOVE_SYMBOL", 
                                                             "REPAIR_SYMBOL", 
                                                             "RESET_SYMBOL", 
                                                             "RESTORE_SYMBOL", 
                                                             "ROLLBACK_SYMBOL", 
                                                             "SAVEPOINT_SYMBOL", 
                                                             "SECURITY_SYMBOL", 
                                                             "SERVER_SYMBOL", 
                                                             "SIGNED_SYMBOL", 
                                                             "SLAVE_SYMBOL", 
                                                             "SOCKET_SYMBOL", 
                                                             "SONAME_SYMBOL", 
                                                             "START_SYMBOL", 
                                                             "STOP_SYMBOL", 
                                                             "TRUNCATE_SYMBOL", 
                                                             "UNICODE_SYMBOL", 
                                                             "UNINSTALL_SYMBOL", 
                                                             "UPGRADE_SYMBOL", 
                                                             "WRAPPER_SYMBOL", 
                                                             "XA_SYMBOL", 
                                                             "SHUTDOWN_SYMBOL", 
                                                             "ACTION_SYMBOL", 
                                                             "ADDDATE_SYMBOL", 
                                                             "AFTER_SYMBOL", 
                                                             "AGAINST_SYMBOL", 
                                                             "AGGREGATE_SYMBOL", 
                                                             "ALGORITHM_SYMBOL", 
                                                             "ANALYZE_SYMBOL", 
                                                             "ANY_SYMBOL", 
                                                             "AT_SYMBOL", 
                                                             "AUTHORS_SYMBOL", 
                                                             "AUTO_INCREMENT_SYMBOL", 
                                                             "AUTOEXTEND_SIZE_SYMBOL", 
                                                             "AVG_ROW_LENGTH_SYMBOL", 
                                                             "AVG_SYMBOL", 
                                                             "BINLOG_SYMBOL", 
                                                             "BIT_SYMBOL", 
                                                             "BLOCK_SYMBOL", 
                                                             "BOOL_SYMBOL", 
                                                             "BOOLEAN_SYMBOL", 
                                                             "BTREE_SYMBOL", 
                                                             "CASCADED_SYMBOL", 
                                                             "CATALOG_NAME_SYMBOL", 
                                                             "CHAIN_SYMBOL", 
                                                             "CHANGED_SYMBOL", 
                                                             "CHANNEL_SYMBOL", 
                                                             "CIPHER_SYMBOL", 
                                                             "CLIENT_SYMBOL", 
                                                             "CLASS_ORIGIN_SYMBOL", 
                                                             "COALESCE_SYMBOL", 
                                                             "CODE_SYMBOL", 
                                                             "COLLATION_SYMBOL", 
                                                             "COLUMN_NAME_SYMBOL", 
                                                             "COLUMN_FORMAT_SYMBOL", 
                                                             "COLUMNS_SYMBOL", 
                                                             "COMMITTED_SYMBOL", 
                                                             "COMPACT_SYMBOL", 
                                                             "COMPLETION_SYMBOL", 
                                                             "COMPRESSED_SYMBOL", 
                                                             "COMPRESSION_SYMBOL", 
                                                             "ENCRYPTION_SYMBOL", 
                                                             "CONCURRENT_SYMBOL", 
                                                             "CONNECTION_SYMBOL", 
                                                             "CONSISTENT_SYMBOL", 
                                                             "CONSTRAINT_CATALOG_SYMBOL", 
                                                             "CONSTRAINT_SCHEMA_SYMBOL", 
                                                             "CONSTRAINT_NAME_SYMBOL", 
                                                             "CONTEXT_SYMBOL", 
                                                             "CONTRIBUTORS_SYMBOL", 
                                                             "CPU_SYMBOL", 
                                                             "CUBE_SYMBOL", 
                                                             "CURRENT_SYMBOL", 
                                                             "CURSOR_NAME_SYMBOL", 
                                                             "DATA_SYMBOL", 
                                                             "DATAFILE_SYMBOL", 
                                                             "DATETIME_SYMBOL", 
                                                             "DATE_SYMBOL", 
                                                             "DAY_SYMBOL", 
                                                             "DEFAULT_AUTH_SYMBOL", 
                                                             "DEFINER_SYMBOL", 
                                                             "DELAY_KEY_WRITE_SYMBOL", 
                                                             "DES_KEY_FILE_SYMBOL", 
                                                             "DIAGNOSTICS_SYMBOL", 
                                                             "DIRECTORY_SYMBOL", 
                                                             "DISABLE_SYMBOL", 
                                                             "DISCARD_SYMBOL", 
                                                             "DISK_SYMBOL", 
                                                             "DUMPFILE_SYMBOL", 
                                                             "DUPLICATE_SYMBOL", 
                                                             "DYNAMIC_SYMBOL", 
                                                             "ENDS_SYMBOL", 
                                                             "ENUM_SYMBOL", 
                                                             "ENGINE_SYMBOL", 
                                                             "ENGINES_SYMBOL", 
                                                             "ERROR_SYMBOL", 
                                                             "ERRORS_SYMBOL", 
                                                             "ESCAPE_SYMBOL", 
                                                             "EVENT_SYMBOL", 
                                                             "EVENTS_SYMBOL", 
                                                             "EVERY_SYMBOL", 
                                                             "EXPANSION_SYMBOL", 
                                                             "EXPORT_SYMBOL", 
                                                             "EXTENDED_SYMBOL", 
                                                             "EXTENT_SIZE_SYMBOL", 
                                                             "FAULTS_SYMBOL", 
                                                             "FAST_SYMBOL", 
                                                             "FOUND_SYMBOL", 
                                                             "ENABLE_SYMBOL", 
                                                             "FULL_SYMBOL", 
                                                             "FILE_SYMBOL", 
                                                             "FILE_BLOCK_SIZE_SYMBOL", 
                                                             "FILTER_SYMBOL", 
                                                             "FIRST_SYMBOL", 
                                                             "FIXED_SYMBOL", 
                                                             "GENERAL_SYMBOL", 
                                                             "GEOMETRY_SYMBOL", 
                                                             "GEOMETRYCOLLECTION_SYMBOL", 
                                                             "GET_FORMAT_SYMBOL", 
                                                             "GRANTS_SYMBOL", 
                                                             "GLOBAL_SYMBOL", 
                                                             "HASH_SYMBOL", 
                                                             "HOSTS_SYMBOL", 
                                                             "HOUR_SYMBOL", 
                                                             "IDENTIFIED_SYMBOL", 
                                                             "IGNORE_SERVER_IDS_SYMBOL", 
                                                             "INVOKER_SYMBOL", 
                                                             "IMPORT_SYMBOL", 
                                                             "INDEXES_SYMBOL", 
                                                             "INITIAL_SIZE_SYMBOL", 
                                                             "INSTANCE_SYMBOL", 
                                                             "INNODB_SYMBOL", 
                                                             "IO_SYMBOL", 
                                                             "IPC_SYMBOL", 
                                                             "ISOLATION_SYMBOL", 
                                                             "ISSUER_SYMBOL", 
                                                             "INSERT_METHOD_SYMBOL", 
                                                             "JSON_SYMBOL", 
                                                             "KEY_BLOCK_SIZE_SYMBOL", 
                                                             "LAST_SYMBOL", 
                                                             "LEAVES_SYMBOL", 
                                                             "LESS_SYMBOL", 
                                                             "LEVEL_SYMBOL", 
                                                             "LINESTRING_SYMBOL", 
                                                             "LIST_SYMBOL", 
                                                             "LOCAL_SYMBOL", 
                                                             "LOCKS_SYMBOL", 
                                                             "LOGFILE_SYMBOL", 
                                                             "LOGS_SYMBOL", 
                                                             "MAX_ROWS_SYMBOL", 
                                                             "MASTER_SYMBOL", 
                                                             "MASTER_HEARTBEAT_PERIOD_SYMBOL", 
                                                             "MASTER_HOST_SYMBOL", 
                                                             "MASTER_PORT_SYMBOL", 
                                                             "MASTER_LOG_FILE_SYMBOL", 
                                                             "MASTER_LOG_POS_SYMBOL", 
                                                             "MASTER_USER_SYMBOL", 
                                                             "MASTER_PASSWORD_SYMBOL", 
                                                             "MASTER_SERVER_ID_SYMBOL", 
                                                             "MASTER_CONNECT_RETRY_SYMBOL", 
                                                             "MASTER_RETRY_COUNT_SYMBOL", 
                                                             "MASTER_DELAY_SYMBOL", 
                                                             "MASTER_SSL_SYMBOL", 
                                                             "MASTER_SSL_CA_SYMBOL", 
                                                             "MASTER_SSL_CAPATH_SYMBOL", 
                                                             "MASTER_TLS_VERSION_SYMBOL", 
                                                             "MASTER_SSL_CERT_SYMBOL", 
                                                             "MASTER_SSL_CIPHER_SYMBOL", 
                                                             "MASTER_SSL_CRL_SYMBOL", 
                                                             "MASTER_SSL_CRLPATH_SYMBOL", 
                                                             "MASTER_SSL_KEY_SYMBOL", 
                                                             "MASTER_AUTO_POSITION_SYMBOL", 
                                                             "MAX_CONNECTIONS_PER_HOUR_SYMBOL", 
                                                             "MAX_QUERIES_PER_HOUR_SYMBOL", 
                                                             "MAX_STATEMENT_TIME_SYMBOL", 
                                                             "MAX_SIZE_SYMBOL", 
                                                             "MAX_UPDATES_PER_HOUR_SYMBOL", 
                                                             "MAX_USER_CONNECTIONS_SYMBOL", 
                                                             "MEDIUM_SYMBOL", 
                                                             "MEMORY_SYMBOL", 
                                                             "MERGE_SYMBOL", 
                                                             "MESSAGE_TEXT_SYMBOL", 
                                                             "MICROSECOND_SYMBOL", 
                                                             "MIGRATE_SYMBOL", 
                                                             "MINUTE_SYMBOL", 
                                                             "MIN_ROWS_SYMBOL", 
                                                             "MODIFY_SYMBOL", 
                                                             "MODE_SYMBOL", 
                                                             "MONTH_SYMBOL", 
                                                             "MULTILINESTRING_SYMBOL", 
                                                             "MULTIPOINT_SYMBOL", 
                                                             "MULTIPOLYGON_SYMBOL", 
                                                             "MUTEX_SYMBOL", 
                                                             "MYSQL_ERRNO_SYMBOL", 
                                                             "NAME_SYMBOL", 
                                                             "NAMES_SYMBOL", 
                                                             "NATIONAL_SYMBOL", 
                                                             "NCHAR_SYMBOL", 
                                                             "NDBCLUSTER_SYMBOL", 
                                                             "NEVER_SYMBOL", 
                                                             "NEXT_SYMBOL", 
                                                             "NEW_SYMBOL", 
                                                             "NO_WAIT_SYMBOL", 
                                                             "NODEGROUP_SYMBOL", 
                                                             "NONE_SYMBOL", 
                                                             "NUMBER_SYMBOL", 
                                                             "NVARCHAR_SYMBOL", 
                                                             "OFFSET_SYMBOL", 
                                                             "OLD_PASSWORD_SYMBOL", 
                                                             "ONE_SHOT_SYMBOL", 
                                                             "ONE_SYMBOL", 
                                                             "PACK_KEYS_SYMBOL", 
                                                             "PAGE_SYMBOL", 
                                                             "PARTIAL_SYMBOL", 
                                                             "PARTITIONING_SYMBOL", 
                                                             "PARTITIONS_SYMBOL", 
                                                             "PASSWORD_SYMBOL", 
                                                             "PHASE_SYMBOL", 
                                                             "PLUGIN_DIR_SYMBOL", 
                                                             "PLUGIN_SYMBOL", 
                                                             "PLUGINS_SYMBOL", 
                                                             "POINT_SYMBOL", 
                                                             "POLYGON_SYMBOL", 
                                                             "PRESERVE_SYMBOL", 
                                                             "PREV_SYMBOL", 
                                                             "PRIVILEGES_SYMBOL", 
                                                             "PROCESS_SYMBOL", 
                                                             "PROCESSLIST_SYMBOL", 
                                                             "PROFILE_SYMBOL", 
                                                             "PROFILES_SYMBOL", 
                                                             "PROXY_SYMBOL", 
                                                             "QUARTER_SYMBOL", 
                                                             "QUERY_SYMBOL", 
                                                             "QUICK_SYMBOL", 
                                                             "READ_ONLY_SYMBOL", 
                                                             "REBUILD_SYMBOL", 
                                                             "RECOVER_SYMBOL", 
                                                             "REDO_BUFFER_SIZE_SYMBOL", 
                                                             "REDOFILE_SYMBOL", 
                                                             "REDUNDANT_SYMBOL", 
                                                             "RELAY_SYMBOL", 
                                                             "RELAYLOG_SYMBOL", 
                                                             "RELAY_LOG_FILE_SYMBOL", 
                                                             "RELAY_LOG_POS_SYMBOL", 
                                                             "RELAY_THREAD_SYMBOL", 
                                                             "RELOAD_SYMBOL", 
                                                             "REORGANIZE_SYMBOL", 
                                                             "REPEATABLE_SYMBOL", 
                                                             "REPLICATION_SYMBOL", 
                                                             "REPLICATE_DO_DB_SYMBOL", 
                                                             "REPLICATE_IGNORE_DB_SYMBOL", 
                                                             "REPLICATE_DO_TABLE_SYMBOL", 
                                                             "REPLICATE_IGNORE_TABLE_SYMBOL", 
                                                             "REPLICATE_WILD_DO_TABLE_SYMBOL", 
                                                             "REPLICATE_WILD_IGNORE_TABLE_SYMBOL", 
                                                             "REPLICATE_REWRITE_DB_SYMBOL", 
                                                             "RESUME_SYMBOL", 
                                                             "RETURNED_SQLSTATE_SYMBOL", 
                                                             "RETURNS_SYMBOL", 
                                                             "REVERSE_SYMBOL", 
                                                             "ROLLUP_SYMBOL", 
                                                             "ROTATE_SYMBOL", 
                                                             "ROUTINE_SYMBOL", 
                                                             "ROWS_SYMBOL", 
                                                             "ROW_COUNT_SYMBOL", 
                                                             "ROW_FORMAT_SYMBOL", 
                                                             "ROW_SYMBOL", 
                                                             "RTREE_SYMBOL", 
                                                             "SCHEDULE_SYMBOL", 
                                                             "SCHEMA_NAME_SYMBOL", 
                                                             "SECOND_SYMBOL", 
                                                             "SERIAL_SYMBOL", 
                                                             "SERIALIZABLE_SYMBOL", 
                                                             "SESSION_SYMBOL", 
                                                             "SIMPLE_SYMBOL", 
                                                             "SHARE_SYMBOL", 
                                                             "SLOW_SYMBOL", 
                                                             "SNAPSHOT_SYMBOL", 
                                                             "SOUNDS_SYMBOL", 
                                                             "SOURCE_SYMBOL", 
                                                             "SQL_AFTER_GTIDS_SYMBOL", 
                                                             "SQL_AFTER_MTS_GAPS_SYMBOL", 
                                                             "SQL_BEFORE_GTIDS_SYMBOL", 
                                                             "SQL_CACHE_SYMBOL", 
                                                             "SQL_BUFFER_RESULT_SYMBOL", 
                                                             "SQL_NO_CACHE_SYMBOL", 
                                                             "SQL_THREAD_SYMBOL", 
                                                             "STACKED_SYMBOL", 
                                                             "STARTS_SYMBOL", 
                                                             "STATS_AUTO_RECALC_SYMBOL", 
                                                             "STATS_PERSISTENT_SYMBOL", 
                                                             "STATS_SAMPLE_PAGES_SYMBOL", 
                                                             "STATUS_SYMBOL", 
                                                             "STORAGE_SYMBOL", 
                                                             "STRING_SYMBOL", 
                                                             "SUBCLASS_ORIGIN_SYMBOL", 
                                                             "SUBDATE_SYMBOL", 
                                                             "SUBJECT_SYMBOL", 
                                                             "SUBPARTITION_SYMBOL", 
                                                             "SUBPARTITIONS_SYMBOL", 
                                                             "SUPER_SYMBOL", 
                                                             "SUSPEND_SYMBOL", 
                                                             "SWAPS_SYMBOL", 
                                                             "SWITCHES_SYMBOL", 
                                                             "TABLE_NAME_SYMBOL", 
                                                             "TABLES_SYMBOL", 
                                                             "TABLE_CHECKSUM_SYMBOL", 
                                                             "TABLESPACE_SYMBOL", 
                                                             "TEMPORARY_SYMBOL", 
                                                             "TEMPTABLE_SYMBOL", 
                                                             "TEXT_SYMBOL", 
                                                             "THAN_SYMBOL", 
                                                             "TRANSACTION_SYMBOL", 
                                                             "TRIGGERS_SYMBOL", 
                                                             "TIMESTAMP_SYMBOL", 
                                                             "TIMESTAMP_ADD_SYMBOL", 
                                                             "TIMESTAMP_DIFF_SYMBOL", 
                                                             "TIME_SYMBOL", 
                                                             "TYPES_SYMBOL", 
                                                             "TYPE_SYMBOL", 
                                                             "UDF_RETURNS_SYMBOL", 
                                                             "FUNCTION_SYMBOL", 
                                                             "UNCOMMITTED_SYMBOL", 
                                                             "UNDEFINED_SYMBOL", 
                                                             "UNDO_BUFFER_SIZE_SYMBOL", 
                                                             "UNDOFILE_SYMBOL", 
                                                             "UNKNOWN_SYMBOL", 
                                                             "UNTIL_SYMBOL", 
                                                             "USER_RESOURCES_SYMBOL", 
                                                             "USER_SYMBOL", 
                                                             "USE_FRM_SYMBOL", 
                                                             "VARIABLES_SYMBOL", 
                                                             "VIEW_SYMBOL", 
                                                             "VALUE_SYMBOL", 
                                                             "WARNINGS_SYMBOL", 
                                                             "WAIT_SYMBOL", 
                                                             "WEEK_SYMBOL", 
                                                             "WORK_SYMBOL", 
                                                             "WEIGHT_STRING_SYMBOL", 
                                                             "X509_SYMBOL", 
                                                             "XID_SYMBOL", 
                                                             "XML_SYMBOL", 
                                                             "YEAR_SYMBOL", 
                                                             "NOT2_SYMBOL", 
                                                             "CONCAT_PIPES_SYMBOL", 
                                                             "INT_NUMBER", 
                                                             "LONG_NUMBER", 
                                                             "ULONGLONG_NUMBER", 
                                                             "EQUAL_OPERATOR", 
                                                             "ASSIGN_OPERATOR", 
                                                             "NULL_SAFE_EQUAL_OPERATOR", 
                                                             "GREATER_OR_EQUAL_OPERATOR", 
                                                             "GREATER_THAN_OPERATOR", 
                                                             "LESS_OR_EQUAL_OPERATOR", 
                                                             "LESS_THAN_OPERATOR", 
                                                             "NOT_EQUAL_OPERATOR", 
                                                             "PLUS_OPERATOR", 
                                                             "MINUS_OPERATOR", 
                                                             "MULT_OPERATOR", 
                                                             "DIV_OPERATOR", 
                                                             "MOD_OPERATOR", 
                                                             "LOGICAL_NOT_OPERATOR", 
                                                             "BITWISE_NOT_OPERATOR", 
                                                             "SHIFT_LEFT_OPERATOR", 
                                                             "SHIFT_RIGHT_OPERATOR", 
                                                             "LOGICAL_AND_OPERATOR", 
                                                             "BITWISE_AND_OPERATOR", 
                                                             "BITWISE_XOR_OPERATOR", 
                                                             "LOGICAL_OR_OPERATOR", 
                                                             "BITWISE_OR_OPERATOR", 
                                                             "DOT_SYMBOL", 
                                                             "COMMA_SYMBOL", 
                                                             "SEMICOLON_SYMBOL", 
                                                             "COLON_SYMBOL", 
                                                             "OPEN_PAR_SYMBOL", 
                                                             "CLOSE_PAR_SYMBOL", 
                                                             "OPEN_CURLY_SYMBOL", 
                                                             "CLOSE_CURLY_SYMBOL", 
                                                             "UNDERLINE_SYMBOL", 
                                                             "JSON_SEPARATOR_SYMBOL", 
                                                             "JSON_UNQUOTED_SEPARATOR_SYMBOL", 
                                                             "AT_SIGN_SYMBOL", 
                                                             "AT_TEXT_SUFFIX", 
                                                             "AT_AT_SIGN_SYMBOL", 
                                                             "NULL2_SYMBOL", 
                                                             "PARAM_MARKER", 
                                                             "HEX_NUMBER", 
                                                             "BIN_NUMBER", 
                                                             "DECIMAL_NUMBER", 
                                                             "FLOAT_NUMBER", 
                                                             "ACCESSIBLE_SYMBOL", 
                                                             "ADD_SYMBOL", 
                                                             "ALL_SYMBOL", 
                                                             "ALTER_SYMBOL", 
                                                             "ANALYSE_SYMBOL", 
                                                             "AND_SYMBOL", 
                                                             "AS_SYMBOL", 
                                                             "ASC_SYMBOL", 
                                                             "ASENSITIVE_SYMBOL", 
                                                             "BEFORE_SYMBOL", 
                                                             "BETWEEN_SYMBOL", 
                                                             "BIGINT_SYMBOL", 
                                                             "BINARY_SYMBOL", 
                                                             "BIN_NUM_SYMBOL", 
                                                             "BIT_AND_SYMBOL", 
                                                             "BIT_OR_SYMBOL", 
                                                             "BIT_XOR_SYMBOL", 
                                                             "BLOB_SYMBOL", 
                                                             "BOTH_SYMBOL", 
                                                             "BY_SYMBOL", 
                                                             "CALL_SYMBOL", 
                                                             "CASCADE_SYMBOL", 
                                                             "CASE_SYMBOL", 
                                                             "CAST_SYMBOL", 
                                                             "CHANGE_SYMBOL", 
                                                             "CHAR_SYMBOL", 
                                                             "CHECK_SYMBOL", 
                                                             "COLLATE_SYMBOL", 
                                                             "COLUMN_SYMBOL", 
                                                             "CONDITION_SYMBOL", 
                                                             "CONSTRAINT_SYMBOL", 
                                                             "CONTINUE_SYMBOL", 
                                                             "CONVERT_SYMBOL", 
                                                             "COUNT_SYMBOL", 
                                                             "CREATE_SYMBOL", 
                                                             "CROSS_SYMBOL", 
                                                             "CURDATE_SYMBOL", 
                                                             "CURRENT_DATE_SYMBOL", 
                                                             "CURRENT_TIME_SYMBOL", 
                                                             "CURRENT_USER_SYMBOL", 
                                                             "CURSOR_SYMBOL", 
                                                             "CURTIME_SYMBOL", 
                                                             "DATABASE_SYMBOL", 
                                                             "DATABASES_SYMBOL", 
                                                             "DATE_ADD_SYMBOL", 
                                                             "DATE_SUB_SYMBOL", 
                                                             "DAY_HOUR_SYMBOL", 
                                                             "DAY_MICROSECOND_SYMBOL", 
                                                             "DAY_MINUTE_SYMBOL", 
                                                             "DAY_SECOND_SYMBOL", 
                                                             "DECIMAL_NUM_SYMBOL", 
                                                             "DECIMAL_SYMBOL", 
                                                             "DECLARE_SYMBOL", 
                                                             "DEFAULT_SYMBOL", 
                                                             "DELAYED_SYMBOL", 
                                                             "DELETE_SYMBOL", 
                                                             "DESC_SYMBOL", 
                                                             "DESCRIBE_SYMBOL", 
                                                             "DETERMINISTIC_SYMBOL", 
                                                             "DISTINCT_SYMBOL", 
                                                             "DIV_SYMBOL", 
                                                             "DOUBLE_SYMBOL", 
                                                             "DROP_SYMBOL", 
                                                             "DUAL_SYMBOL", 
                                                             "EACH_SYMBOL", 
                                                             "ELSE_SYMBOL", 
                                                             "ELSEIF_SYMBOL", 
                                                             "ENCLOSED_SYMBOL", 
                                                             "END_OF_INPUT_SYMBOL", 
                                                             "ESCAPED_SYMBOL", 
                                                             "EXCHANGE_SYMBOL", 
                                                             "EXISTS_SYMBOL", 
                                                             "EXIT_SYMBOL", 
                                                             "EXPIRE_SYMBOL", 
                                                             "EXPLAIN_SYMBOL", 
                                                             "EXTRACT_SYMBOL", 
                                                             "FALSE_SYMBOL", 
                                                             "FETCH_SYMBOL", 
                                                             "FLOAT_SYMBOL", 
                                                             "FORCE_SYMBOL", 
                                                             "FOREIGN_SYMBOL", 
                                                             "FOR_SYMBOL", 
                                                             "FROM_SYMBOL", 
                                                             "FULLTEXT_SYMBOL", 
                                                             "GET_SYMBOL", 
                                                             "GENERATED_SYMBOL", 
                                                             "GRANT_SYMBOL", 
                                                             "GROUP_SYMBOL", 
                                                             "GROUP_CONCAT_SYMBOL", 
                                                             "HAVING_SYMBOL", 
                                                             "HIGH_PRIORITY_SYMBOL", 
                                                             "HOUR_MICROSECOND_SYMBOL", 
                                                             "HOUR_MINUTE_SYMBOL", 
                                                             "HOUR_SECOND_SYMBOL", 
                                                             "IF_SYMBOL", 
                                                             "IGNORE_SYMBOL", 
                                                             "INDEX_SYMBOL", 
                                                             "INFILE_SYMBOL", 
                                                             "INNER_SYMBOL", 
                                                             "INOUT_SYMBOL", 
                                                             "INSENSITIVE_SYMBOL", 
                                                             "INSERT_SYMBOL", 
                                                             "INTERVAL_SYMBOL", 
                                                             "INTO_SYMBOL", 
                                                             "INT_SYMBOL", 
                                                             "IN_SYMBOL", 
                                                             "IO_AFTER_GTIDS_SYMBOL", 
                                                             "IO_BEFORE_GTIDS_SYMBOL", 
                                                             "IS_SYMBOL", 
                                                             "ITERATE_SYMBOL", 
                                                             "JOIN_SYMBOL", 
                                                             "KEYS_SYMBOL", 
                                                             "KEY_SYMBOL", 
                                                             "KILL_SYMBOL", 
                                                             "LEADING_SYMBOL", 
                                                             "LEAVE_SYMBOL", 
                                                             "LEFT_SYMBOL", 
                                                             "LIKE_SYMBOL", 
                                                             "LIMIT_SYMBOL", 
                                                             "LINEAR_SYMBOL", 
                                                             "LINES_SYMBOL", 
                                                             "LOAD_SYMBOL", 
                                                             "LOCATOR_SYMBOL", 
                                                             "LOCK_SYMBOL", 
                                                             "LONGBLOB_SYMBOL", 
                                                             "LONGTEXT_SYMBOL", 
                                                             "LONG_NUM_SYMBOL", 
                                                             "LONG_SYMBOL", 
                                                             "LOOP_SYMBOL", 
                                                             "LOW_PRIORITY_SYMBOL", 
                                                             "MASTER_BIND_SYMBOL", 
                                                             "MASTER_SSL_VERIFY_SERVER_CERT_SYMBOL", 
                                                             "MATCH_SYMBOL", 
                                                             "MAX_SYMBOL", 
                                                             "MAXVALUE_SYMBOL", 
                                                             "MEDIUMBLOB_SYMBOL", 
                                                             "MEDIUMINT_SYMBOL", 
                                                             "MEDIUMTEXT_SYMBOL", 
                                                             "MID_SYMBOL", 
                                                             "MINUTE_MICROSECOND_SYMBOL", 
                                                             "MINUTE_SECOND_SYMBOL", 
                                                             "MIN_SYMBOL", 
                                                             "MODIFIES_SYMBOL", 
                                                             "MOD_SYMBOL", 
                                                             "NATURAL_SYMBOL", 
                                                             "NCHAR_STRING_SYMBOL", 
                                                             "NEG_SYMBOL", 
                                                             "NONBLOCKING_SYMBOL", 
                                                             "NOT_SYMBOL", 
                                                             "NOW_SYMBOL", 
                                                             "NO_WRITE_TO_BINLOG_SYMBOL", 
                                                             "NULL_SYMBOL", 
                                                             "NUMERIC_SYMBOL", 
                                                             "OFFLINE_SYMBOL", 
                                                             "ON_SYMBOL", 
                                                             "ONLINE_SYMBOL", 
                                                             "ONLY_SYMBOL", 
                                                             "OPTIMIZE_SYMBOL", 
                                                             "OPTIMIZER_COSTS_SYMBOL", 
                                                             "OPTION_SYMBOL", 
                                                             "OPTIONALLY_SYMBOL", 
                                                             "ORDER_SYMBOL", 
                                                             "OR_SYMBOL", 
                                                             "OUTER_SYMBOL", 
                                                             "OUTFILE_SYMBOL", 
                                                             "OUT_SYMBOL", 
                                                             "POSITION_SYMBOL", 
                                                             "PRECISION_SYMBOL", 
                                                             "PRIMARY_SYMBOL", 
                                                             "PROCEDURE_SYMBOL", 
                                                             "PURGE_SYMBOL", 
                                                             "RANGE_SYMBOL", 
                                                             "READS_SYMBOL", 
                                                             "READ_SYMBOL", 
                                                             "READ_WRITE_SYMBOL", 
                                                             "REAL_SYMBOL", 
                                                             "REFERENCES_SYMBOL", 
                                                             "REGEXP_SYMBOL", 
                                                             "RELEASE_SYMBOL", 
                                                             "RENAME_SYMBOL", 
                                                             "REPEAT_SYMBOL", 
                                                             "REPLACE_SYMBOL", 
                                                             "REQUIRE_SYMBOL", 
                                                             "RESIGNAL_SYMBOL", 
                                                             "RESTRICT_SYMBOL", 
                                                             "RETURN_SYMBOL", 
                                                             "REVOKE_SYMBOL", 
                                                             "RIGHT_SYMBOL", 
                                                             "SECOND_MICROSECOND_SYMBOL", 
                                                             "SELECT_SYMBOL", 
                                                             "SENSITIVE_SYMBOL", 
                                                             "SEPARATOR_SYMBOL", 
                                                             "SERVER_OPTIONS_SYMBOL", 
                                                             "SESSION_USER_SYMBOL", 
                                                             "SET_SYMBOL", 
                                                             "SET_VAR_SYMBOL", 
                                                             "SHOW_SYMBOL", 
                                                             "SIGNAL_SYMBOL", 
                                                             "SMALLINT_SYMBOL", 
                                                             "SPATIAL_SYMBOL", 
                                                             "SPECIFIC_SYMBOL", 
                                                             "SQLEXCEPTION_SYMBOL", 
                                                             "SQLSTATE_SYMBOL", 
                                                             "SQLWARNING_SYMBOL", 
                                                             "SQL_BIG_RESULT_SYMBOL", 
                                                             "SQL_CALC_FOUND_ROWS_SYMBOL", 
                                                             "SQL_SMALL_RESULT_SYMBOL", 
                                                             "SQL_SYMBOL", 
                                                             "SSL_SYMBOL", 
                                                             "STARTING_SYMBOL", 
                                                             "STDDEV_SAMP_SYMBOL", 
                                                             "STDDEV_SYMBOL", 
                                                             "STDDEV_POP_SYMBOL", 
                                                             "STD_SYMBOL", 
                                                             "STORED_SYMBOL", 
                                                             "STRAIGHT_JOIN_SYMBOL", 
                                                             "SUBSTR_SYMBOL", 
                                                             "SUBSTRING_SYMBOL", 
                                                             "SUM_SYMBOL", 
                                                             "SYSDATE_SYMBOL", 
                                                             "SYSTEM_USER_SYMBOL", 
                                                             "TABLE_REF_PRIORITY_SYMBOL", 
                                                             "TABLE_SYMBOL", 
                                                             "TERMINATED_SYMBOL", 
                                                             "THEN_SYMBOL", 
                                                             "TINYBLOB_SYMBOL", 
                                                             "TINYINT_SYMBOL", 
                                                             "TINYTEXT_SYMBOL", 
                                                             "TO_SYMBOL", 
                                                             "TRAILING_SYMBOL", 
                                                             "TRIGGER_SYMBOL", 
                                                             "TRIM_SYMBOL", 
                                                             "TRUE_SYMBOL", 
                                                             "UNDO_SYMBOL", 
                                                             "UNION_SYMBOL", 
                                                             "UNIQUE_SYMBOL", 
                                                             "UNLOCK_SYMBOL", 
                                                             "UNSIGNED_SYMBOL", 
                                                             "UPDATE_SYMBOL", 
                                                             "USAGE_SYMBOL", 
                                                             "USE_SYMBOL", 
                                                             "USING_SYMBOL", 
                                                             "UTC_DATE_SYMBOL", 
                                                             "UTC_TIMESTAMP_SYMBOL", 
                                                             "UTC_TIME_SYMBOL", 
                                                             "VALIDATION_SYMBOL", 
                                                             "VALUES_SYMBOL", 
                                                             "VARBINARY_SYMBOL", 
                                                             "VARCHAR_SYMBOL", 
                                                             "VARIANCE_SYMBOL", 
                                                             "VARYING_SYMBOL", 
                                                             "VAR_POP_SYMBOL", 
                                                             "VAR_SAMP_SYMBOL", 
                                                             "VIRTUAL_SYMBOL", 
                                                             "WHEN_SYMBOL", 
                                                             "WHERE_SYMBOL", 
                                                             "WHILE_SYMBOL", 
                                                             "WITH_SYMBOL", 
                                                             "WITHOUT_SYMBOL", 
                                                             "WRITE_SYMBOL", 
                                                             "XOR_SYMBOL", 
                                                             "YEAR_MONTH_SYMBOL", 
                                                             "ZEROFILL_SYMBOL", 
                                                             "PERSIST_SYMBOL", 
                                                             "ROLE_SYMBOL", 
                                                             "ADMIN_SYMBOL", 
                                                             "INVISIBLE_SYMBOL", 
                                                             "VISIBLE_SYMBOL", 
                                                             "EXCEPT_SYMBOL", 
                                                             "COMPONENT_SYMBOL", 
                                                             "RECURSIVE_SYMBOL", 
                                                             "JSON_OBJECTAGG_SYMBOL", 
                                                             "JSON_ARRAYAGG_SYMBOL", 
                                                             "OF_SYMBOL", 
                                                             "SKIP_SYMBOL", 
                                                             "LOCKED_SYMBOL", 
                                                             "NOWAIT_SYMBOL", 
                                                             "GROUPING_SYMBOL", 
                                                             "PERSIST_ONLY_SYMBOL", 
                                                             "HISTOGRAM_SYMBOL", 
                                                             "BUCKETS_SYMBOL", 
                                                             "REMOTE_SYMBOL", 
                                                             "CLONE_SYMBOL", 
                                                             "CUME_DIST_SYMBOL", 
                                                             "DENSE_RANK_SYMBOL", 
                                                             "EXCLUDE_SYMBOL", 
                                                             "FIRST_VALUE_SYMBOL", 
                                                             "FOLLOWING_SYMBOL", 
                                                             "GROUPS_SYMBOL", 
                                                             "LAG_SYMBOL", 
                                                             "LAST_VALUE_SYMBOL", 
                                                             "LEAD_SYMBOL", 
                                                             "NTH_VALUE_SYMBOL", 
                                                             "NTILE_SYMBOL", 
                                                             "NULLS_SYMBOL", 
                                                             "OTHERS_SYMBOL", 
                                                             "OVER_SYMBOL", 
                                                             "PERCENT_RANK_SYMBOL", 
                                                             "PRECEDING_SYMBOL", 
                                                             "RANK_SYMBOL", 
                                                             "RESPECT_SYMBOL", 
                                                             "ROW_NUMBER_SYMBOL", 
                                                             "TIES_SYMBOL", 
                                                             "UNBOUNDED_SYMBOL", 
                                                             "WINDOW_SYMBOL", 
                                                             "EMPTY_SYMBOL", 
                                                             "JSON_TABLE_SYMBOL", 
                                                             "NESTED_SYMBOL", 
                                                             "ORDINALITY_SYMBOL", 
                                                             "PATH_SYMBOL", 
                                                             "HISTORY_SYMBOL", 
                                                             "REUSE_SYMBOL", 
                                                             "SRID_SYMBOL", 
                                                             "THREAD_PRIORITY_SYMBOL", 
                                                             "RESOURCE_SYMBOL", 
                                                             "SYSTEM_SYMBOL", 
                                                             "VCPU_SYMBOL", 
                                                             "MASTER_PUBLIC_KEY_PATH_SYMBOL", 
                                                             "GET_MASTER_PUBLIC_KEY_SYMBOL", 
                                                             "RESTART_SYMBOL", 
                                                             "DEFINITION_SYMBOL", 
                                                             "DESCRIPTION_SYMBOL", 
                                                             "ORGANIZATION_SYMBOL", 
                                                             "REFERENCE_SYMBOL", 
                                                             "OPTIONAL_SYMBOL", 
                                                             "SECONDARY_SYMBOL", 
                                                             "SECONDARY_ENGINE_SYMBOL", 
                                                             "SECONDARY_LOAD_SYMBOL", 
                                                             "SECONDARY_UNLOAD_SYMBOL", 
                                                             "ACTIVE_SYMBOL", 
                                                             "INACTIVE_SYMBOL", 
                                                             "LATERAL_SYMBOL", 
                                                             "RETAIN_SYMBOL", 
                                                             "OLD_SYMBOL", 
                                                             "NETWORK_NAMESPACE_SYMBOL", 
                                                             "ENFORCED_SYMBOL", 
                                                             "ARRAY_SYMBOL", 
                                                             "OJ_SYMBOL", 
                                                             "MEMBER_SYMBOL", 
                                                             "RANDOM_SYMBOL", 
                                                             "MASTER_COMPRESSION_ALGORITHM_SYMBOL", 
                                                             "MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL", 
                                                             "PRIVILEGE_CHECKS_USER_SYMBOL", 
                                                             "MASTER_TLS_CIPHERSUITES_SYMBOL", 
                                                             "WHITESPACE", 
                                                             "INVALID_INPUT", 
                                                             "UNDERSCORE_CHARSET", 
                                                             "IDENTIFIER", 
                                                             "NCHAR_TEXT", 
                                                             "BACK_TICK_QUOTED_ID", 
                                                             "DOUBLE_QUOTED_TEXT", 
                                                             "SINGLE_QUOTED_TEXT", 
                                                             "VERSION_COMMENT_START", 
                                                             "MYSQL_COMMENT_START", 
                                                             "VERSION_COMMENT_END", 
                                                             "BLOCK_COMMENT", 
                                                             "POUND_COMMENT", 
                                                             "DASHDASH_COMMENT", 
                                                             "NOT_EQUAL2_OPERATOR" ];
	// tslint:disable:no-trailing-whitespace
	public static readonly ruleNames: string[] = [
		"query", "simpleStatement", "alterStatement", "alterDatabase", "alterEvent", 
		"alterLogfileGroup", "alterLogfileGroupOptions", "alterLogfileGroupOption", 
		"alterServer", "alterTable", "alterTableActions", "alterCommandList", 
		"alterCommandsModifierList", "standaloneAlterCommands", "alterPartition", 
		"alterList", "alterCommandsModifier", "alterListItem", "place", "restrict", 
		"alterOrderList", "alterAlgorithmOption", "alterLockOption", "indexLockAndAlgorithm", 
		"withValidation", "removePartitioning", "allOrPartitionNameList", "reorgPartitionRule", 
		"alterTablespace", "alterUndoTablespace", "undoTableSpaceOptions", "undoTableSpaceOption", 
		"alterTablespaceOptions", "alterTablespaceOption", "changeTablespaceOption", 
		"alterView", "viewTail", "viewSelect", "viewCheckOption", "createStatement", 
		"createDatabase", "createDatabaseOption", "createTable", "tableElementList", 
		"tableElement", "duplicateAsQueryExpression", "queryExpressionOrParens", 
		"createRoutine", "createProcedure", "createFunction", "createUdf", "routineCreateOption", 
		"routineAlterOptions", "routineOption", "createIndex", "indexNameAndType", 
		"createIndexTarget", "createLogfileGroup", "logfileGroupOptions", "logfileGroupOption", 
		"createServer", "serverOptions", "serverOption", "createTablespace", "createUndoTablespace", 
		"tsDataFileName", "tsDataFile", "tablespaceOptions", "tablespaceOption", 
		"tsOptionInitialSize", "tsOptionUndoRedoBufferSize", "tsOptionAutoextendSize", 
		"tsOptionMaxSize", "tsOptionExtentSize", "tsOptionNodegroup", "tsOptionEngine", 
		"tsOptionWait", "tsOptionComment", "tsOptionFileblockSize", "tsOptionEncryption", 
		"createView", "viewReplaceOrAlgorithm", "viewAlgorithm", "viewSuid", "createTrigger", 
		"triggerFollowsPrecedesClause", "createEvent", "createRole", "createSpatialReference", 
		"srsAttribute", "dropStatement", "dropDatabase", "dropEvent", "dropFunction", 
		"dropProcedure", "dropIndex", "dropLogfileGroup", "dropLogfileGroupOption", 
		"dropServer", "dropTable", "dropTableSpace", "dropTrigger", "dropView", 
		"dropRole", "dropSpatialReference", "dropUndoTablespace", "renameTableStatement", 
		"renamePair", "truncateTableStatement", "importStatement", "callStatement", 
		"deleteStatement", "partitionDelete", "deleteStatementOption", "doStatement", 
		"handlerStatement", "handlerReadOrScan", "insertStatement", "insertLockOption", 
		"insertFromConstructor", "fields", "insertValues", "insertQueryExpression", 
		"valueList", "values", "valuesReference", "insertUpdateList", "loadStatement", 
		"dataOrXml", "xmlRowsIdentifiedBy", "loadDataFileTail", "loadDataFileTargetList", 
		"fieldOrVariableList", "replaceStatement", "selectStatement", "selectStatementWithInto", 
		"queryExpression", "queryExpressionBody", "queryExpressionParens", "querySpecification", 
		"subquery", "querySpecOption", "limitClause", "simpleLimitClause", "limitOptions", 
		"limitOption", "intoClause", "procedureAnalyseClause", "havingClause", 
		"windowClause", "windowDefinition", "windowSpec", "windowSpecDetails", 
		"windowFrameClause", "windowFrameUnits", "windowFrameExtent", "windowFrameStart", 
		"windowFrameBetween", "windowFrameBound", "windowFrameExclusion", "withClause", 
		"commonTableExpression", "groupByClause", "olapOption", "orderClause", 
		"direction", "fromClause", "tableReferenceList", "selectOption", "lockingClause", 
		"lockStrengh", "lockedRowAction", "selectItemList", "selectItem", "selectAlias", 
		"whereClause", "tableReference", "escapedTableReference", "joinedTable", 
		"naturalJoinType", "innerJoinType", "outerJoinType", "tableFactor", "singleTable", 
		"singleTableParens", "derivedTable", "tableReferenceListParens", "tableFunction", 
		"columnsClause", "jtColumn", "onEmptyOrError", "onEmpty", "onError", "jtOnResponse", 
		"unionOption", "tableAlias", "indexHintList", "indexHint", "indexHintType", 
		"keyOrIndex", "constraintKeyType", "indexHintClause", "indexList", "indexListElement", 
		"updateStatement", "transactionOrLockingStatement", "transactionStatement", 
		"beginWork", "transactionCharacteristic", "savepointStatement", "lockStatement", 
		"lockItem", "lockOption", "xaStatement", "xaConvert", "xid", "replicationStatement", 
		"resetOption", "masterResetOptions", "replicationLoad", "changeMaster", 
		"changeMasterOptions", "masterOption", "privilegeCheckDef", "masterTlsCiphersuitesDef", 
		"masterFileDef", "serverIdList", "changeReplication", "filterDefinition", 
		"filterDbList", "filterTableList", "filterStringList", "filterWildDbTableString", 
		"filterDbPairList", "slave", "slaveUntilOptions", "slaveConnectionOptions", 
		"slaveThreadOptions", "slaveThreadOption", "groupReplication", "preparedStatement", 
		"executeStatement", "executeVarList", "cloneStatement", "dataDirSSL", 
		"ssl", "accountManagementStatement", "alterUser", "alterUserTail", "userFunction", 
		"createUser", "createUserTail", "defaultRoleClause", "requireClause", 
		"connectOptions", "accountLockPasswordExpireOptions", "dropUser", "grant", 
		"grantTargetList", "grantOptions", "exceptRoleList", "withRoles", "grantAs", 
		"versionedRequireClause", "renameUser", "revoke", "onTypeTo", "aclType", 
		"roleOrPrivilegesList", "roleOrPrivilege", "grantIdentifier", "requireList", 
		"requireListElement", "grantOption", "setRole", "roleList", "role", "tableAdministrationStatement", 
		"histogram", "checkOption", "repairType", "installUninstallStatment", 
		"setStatement", "startOptionValueList", "transactionCharacteristics", 
		"transactionAccessMode", "isolationLevel", "optionValueListContinued", 
		"optionValueNoOptionType", "optionValue", "setSystemVariable", "startOptionValueListFollowingOptionType", 
		"optionValueFollowingOptionType", "setExprOrDefault", "showStatement", 
		"showCommandType", "nonBlocking", "fromOrIn", "inDb", "profileType", "otherAdministrativeStatement", 
		"keyCacheListOrParts", "keyCacheList", "assignToKeycache", "assignToKeycachePartition", 
		"cacheKeyList", "keyUsageElement", "keyUsageList", "flushOption", "logType", 
		"flushTables", "flushTablesOptions", "preloadTail", "preloadList", "preloadKeys", 
		"adminPartition", "resourceGroupManagement", "createResourceGroup", "resourceGroupVcpuList", 
		"vcpuNumOrRange", "resourceGroupPriority", "resourceGroupEnableDisable", 
		"alterResourceGroup", "setResourceGroup", "threadIdList", "dropResourceGroup", 
		"utilityStatement", "describeCommand", "explainCommand", "explainableStatement", 
		"helpCommand", "useCommand", "restartServer", "expr", "boolPri", "compOp", 
		"predicate", "predicateOperations", "bitExpr", "simpleExpr", "arrayCast", 
		"jsonOperator", "sumExpr", "groupingOperation", "windowFunctionCall", 
		"windowingClause", "leadLagInfo", "nullTreatment", "jsonFunction", "inSumExpr", 
		"identListArg", "identList", "fulltextOptions", "runtimeFunctionCall", 
		"geometryFunction", "timeFunctionParameters", "fractionalPrecision", "weightStringLevels", 
		"weightStringLevelListItem", "dateTimeTtype", "trimFunction", "substringFunction", 
		"functionCall", "udfExprList", "udfExpr", "variable", "userVariable", 
		"systemVariable", "internalVariableName", "whenExpression", "thenExpression", 
		"elseExpression", "castType", "exprList", "charset", "notRule", "not2Rule", 
		"interval", "intervalTimeStamp", "exprListWithParentheses", "exprWithParentheses", 
		"simpleExprWithParentheses", "orderList", "orderExpression", "groupList", 
		"groupingExpression", "channel", "compoundStatement", "returnStatement", 
		"ifStatement", "ifBody", "thenStatement", "compoundStatementList", "caseStatement", 
		"elseStatement", "labeledBlock", "unlabeledBlock", "label", "beginEndBlock", 
		"labeledControl", "unlabeledControl", "loopBlock", "whileDoBlock", "repeatUntilBlock", 
		"spDeclarations", "spDeclaration", "variableDeclaration", "conditionDeclaration", 
		"spCondition", "sqlstate", "handlerDeclaration", "handlerCondition", "cursorDeclaration", 
		"iterateStatement", "leaveStatement", "getDiagnostics", "signalAllowedExpr", 
		"statementInformationItem", "conditionInformationItem", "signalInformationItemName", 
		"signalStatement", "resignalStatement", "signalInformationItem", "cursorOpen", 
		"cursorClose", "cursorFetch", "schedule", "columnDefinition", "checkOrReferences", 
		"checkConstraint", "constraintEnforcement", "tableConstraintDef", "constraintName", 
		"fieldDefinition", "columnAttribute", "columnFormat", "storageMedia", 
		"gcolAttribute", "references", "deleteOption", "keyList", "keyPart", "keyListWithExpression", 
		"keyPartOrExpression", "keyListVariants", "indexType", "indexOption", 
		"commonIndexOption", "visibility", "indexTypeClause", "fulltextIndexOption", 
		"spatialIndexOption", "dataTypeDefinition", "dataType", "nchar", "realType", 
		"fieldLength", "fieldOptions", "charsetWithOptBinary", "ascii", "unicode", 
		"wsNumCodepoints", "typeDatetimePrecision", "charsetName", "collationName", 
		"createTableOptions", "createTableOptionsSpaceSeparated", "createTableOption", 
		"ternaryOption", "defaultCollation", "defaultEncryption", "defaultCharset", 
		"partitionClause", "partitionTypeDef", "subPartitions", "partitionKeyAlgorithm", 
		"partitionDefinitions", "partitionDefinition", "partitionValuesIn", "partitionOption", 
		"subpartitionDefinition", "partitionValueItemListParen", "partitionValueItem", 
		"definerClause", "ifExists", "ifNotExists", "procedureParameter", "functionParameter", 
		"collate", "typeWithOptCollate", "schemaIdentifierPair", "viewRefList", 
		"updateList", "updateElement", "charsetClause", "fieldsClause", "fieldTerm", 
		"linesClause", "lineTerm", "userList", "createUserList", "alterUserList", 
		"createUserEntry", "alterUserEntry", "retainCurrentPassword", "discardOldPassword", 
		"replacePassword", "userIdentifierOrText", "user", "likeClause", "likeOrWhere", 
		"onlineOption", "noWriteToBinLog", "usePartition", "fieldIdentifier", 
		"columnName", "columnInternalRef", "columnInternalRefList", "columnRef", 
		"insertIdentifier", "indexName", "indexRef", "tableWild", "schemaName", 
		"schemaRef", "procedureName", "procedureRef", "functionName", "functionRef", 
		"triggerName", "triggerRef", "viewName", "viewRef", "tablespaceName", 
		"tablespaceRef", "logfileGroupName", "logfileGroupRef", "eventName", "eventRef", 
		"udfName", "serverName", "serverRef", "engineRef", "tableName", "filterTableRef", 
		"tableRefWithWildcard", "tableRef", "tableRefList", "tableAliasRefList", 
		"parameterName", "labelIdentifier", "labelRef", "roleIdentifier", "roleRef", 
		"pluginRef", "componentRef", "resourceGroupRef", "windowName", "pureIdentifier", 
		"identifier", "identifierList", "identifierListWithParentheses", "qualifiedIdentifier", 
		"simpleIdentifier", "dotIdentifier", "ulong_number", "real_ulong_number", 
		"ulonglong_number", "real_ulonglong_number", "literal", "signedLiteral", 
		"stringList", "textStringLiteral", "textString", "textStringHash", "textLiteral", 
		"textStringNoLinebreak", "textStringLiteralList", "numLiteral", "boolLiteral", 
		"nullLiteral", "temporalLiteral", "floatOptions", "standardFloatOptions", 
		"precision", "textOrIdentifier", "lValueIdentifier", "roleIdentifierOrText", 
		"sizeNumber", "parentheses", "equal", "optionType", "varIdentType", "setVarIdentType", 
		"identifierKeyword", "identifierKeywordsAmbiguous1RolesAndLabels", "identifierKeywordsAmbiguous2Labels", 
		"labelKeyword", "identifierKeywordsAmbiguous3Roles", "identifierKeywordsUnambiguous", 
		"roleKeyword", "lValueKeyword", "identifierKeywordsAmbiguous4SystemVariables", 
		"roleOrIdentifierKeyword", "roleOrLabelKeyword",
	];
	public get grammarFileName(): string { return "MySQLParser.g4"; }
	public get literalNames(): (string | null)[] { return MySQLParser.literalNames; }
	public get symbolicNames(): (string | null)[] { return MySQLParser.symbolicNames; }
	public get ruleNames(): string[] { return MySQLParser.ruleNames; }
	public get serializedATN(): number[] { return MySQLParser._serializedATN; }

	protected createFailedPredicateException(predicate?: string, message?: string): FailedPredicateException {
		return new FailedPredicateException(this, predicate, message);
	}

	constructor(input: TokenStream) {
		super(input);
		this._interp = new ParserATNSimulator(this, MySQLParser._ATN, MySQLParser.DecisionsToDFA, new PredictionContextCache());
	}
	// @RuleVersion(0)
	public query(): QueryContext {
		let localctx: QueryContext = new QueryContext(this, this._ctx, this.state);
		this.enterRule(localctx, 0, MySQLParser.RULE_query);
		try {
			this.state = 1222;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 3, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 1210;
				this.match(MySQLParser.EOF);
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 1213;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 0, this._ctx) ) {
				case 1:
					{
					this.state = 1211;
					this.simpleStatement();
					}
					break;
				case 2:
					{
					this.state = 1212;
					this.beginWork();
					}
					break;
				}
				this.state = 1220;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case 407:
					{
					this.state = 1215;
					this.match(MySQLParser.SEMICOLON_SYMBOL);
					this.state = 1217;
					this._errHandler.sync(this);
					switch ( this._interp.adaptivePredict(this._input, 1, this._ctx) ) {
					case 1:
						{
						this.state = 1216;
						this.match(MySQLParser.EOF);
						}
						break;
					}
					}
					break;
				case -1:
					{
					this.state = 1219;
					this.match(MySQLParser.EOF);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public simpleStatement(): SimpleStatementContext {
		let localctx: SimpleStatementContext = new SimpleStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 2, MySQLParser.RULE_simpleStatement);
		try {
			this.state = 1258;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 4, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 1224;
				this.alterStatement();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 1225;
				this.createStatement();
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 1226;
				this.dropStatement();
				}
				break;
			case 4:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 1227;
				this.renameTableStatement();
				}
				break;
			case 5:
				this.enterOuterAlt(localctx, 5);
				{
				this.state = 1228;
				this.truncateTableStatement();
				}
				break;
			case 6:
				this.enterOuterAlt(localctx, 6);
				{
				this.state = 1229;
				if (!(this.serverVersion >= 80000)) {
					throw this.createFailedPredicateException("this.serverVersion >= 80000");
				}
				this.state = 1230;
				this.importStatement();
				}
				break;
			case 7:
				this.enterOuterAlt(localctx, 7);
				{
				this.state = 1231;
				this.callStatement();
				}
				break;
			case 8:
				this.enterOuterAlt(localctx, 8);
				{
				this.state = 1232;
				this.deleteStatement();
				}
				break;
			case 9:
				this.enterOuterAlt(localctx, 9);
				{
				this.state = 1233;
				this.doStatement();
				}
				break;
			case 10:
				this.enterOuterAlt(localctx, 10);
				{
				this.state = 1234;
				this.handlerStatement();
				}
				break;
			case 11:
				this.enterOuterAlt(localctx, 11);
				{
				this.state = 1235;
				this.insertStatement();
				}
				break;
			case 12:
				this.enterOuterAlt(localctx, 12);
				{
				this.state = 1236;
				this.loadStatement();
				}
				break;
			case 13:
				this.enterOuterAlt(localctx, 13);
				{
				this.state = 1237;
				this.replaceStatement();
				}
				break;
			case 14:
				this.enterOuterAlt(localctx, 14);
				{
				this.state = 1238;
				this.selectStatement();
				}
				break;
			case 15:
				this.enterOuterAlt(localctx, 15);
				{
				this.state = 1239;
				this.updateStatement();
				}
				break;
			case 16:
				this.enterOuterAlt(localctx, 16);
				{
				this.state = 1240;
				this.transactionOrLockingStatement();
				}
				break;
			case 17:
				this.enterOuterAlt(localctx, 17);
				{
				this.state = 1241;
				this.replicationStatement();
				}
				break;
			case 18:
				this.enterOuterAlt(localctx, 18);
				{
				this.state = 1242;
				this.preparedStatement();
				}
				break;
			case 19:
				this.enterOuterAlt(localctx, 19);
				{
				this.state = 1243;
				if (!(this.serverVersion >= 80000)) {
					throw this.createFailedPredicateException("this.serverVersion >= 80000");
				}
				this.state = 1244;
				this.cloneStatement();
				}
				break;
			case 20:
				this.enterOuterAlt(localctx, 20);
				{
				this.state = 1245;
				this.accountManagementStatement();
				}
				break;
			case 21:
				this.enterOuterAlt(localctx, 21);
				{
				this.state = 1246;
				this.tableAdministrationStatement();
				}
				break;
			case 22:
				this.enterOuterAlt(localctx, 22);
				{
				this.state = 1247;
				this.installUninstallStatment();
				}
				break;
			case 23:
				this.enterOuterAlt(localctx, 23);
				{
				this.state = 1248;
				this.setStatement();
				}
				break;
			case 24:
				this.enterOuterAlt(localctx, 24);
				{
				this.state = 1249;
				this.showStatement();
				}
				break;
			case 25:
				this.enterOuterAlt(localctx, 25);
				{
				this.state = 1250;
				if (!(this.serverVersion >= 80000)) {
					throw this.createFailedPredicateException("this.serverVersion >= 80000");
				}
				this.state = 1251;
				this.resourceGroupManagement();
				}
				break;
			case 26:
				this.enterOuterAlt(localctx, 26);
				{
				this.state = 1252;
				this.otherAdministrativeStatement();
				}
				break;
			case 27:
				this.enterOuterAlt(localctx, 27);
				{
				this.state = 1253;
				this.utilityStatement();
				}
				break;
			case 28:
				this.enterOuterAlt(localctx, 28);
				{
				this.state = 1254;
				if (!(this.serverVersion >= 50604)) {
					throw this.createFailedPredicateException("this.serverVersion >= 50604");
				}
				this.state = 1255;
				this.getDiagnostics();
				}
				break;
			case 29:
				this.enterOuterAlt(localctx, 29);
				{
				this.state = 1256;
				this.signalStatement();
				}
				break;
			case 30:
				this.enterOuterAlt(localctx, 30);
				{
				this.state = 1257;
				this.resignalStatement();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public alterStatement(): AlterStatementContext {
		let localctx: AlterStatementContext = new AlterStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 4, MySQLParser.RULE_alterStatement);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1260;
			this.match(MySQLParser.ALTER_SYMBOL);
			this.state = 1287;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 7, this._ctx) ) {
			case 1:
				{
				this.state = 1261;
				this.alterTable();
				}
				break;
			case 2:
				{
				this.state = 1262;
				this.alterDatabase();
				}
				break;
			case 3:
				{
				this.state = 1263;
				this.match(MySQLParser.PROCEDURE_SYMBOL);
				this.state = 1264;
				this.procedureRef();
				this.state = 1266;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 201336832) !== 0) || _la===483 || ((((_la - 567)) & ~0x1F) === 0 && ((1 << (_la - 567)) & 1073741889) !== 0) || _la===632) {
					{
					this.state = 1265;
					this.routineAlterOptions();
					}
				}

				}
				break;
			case 4:
				{
				this.state = 1268;
				this.match(MySQLParser.FUNCTION_SYMBOL);
				this.state = 1269;
				this.functionRef();
				this.state = 1271;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 201336832) !== 0) || _la===483 || ((((_la - 567)) & ~0x1F) === 0 && ((1 << (_la - 567)) & 1073741889) !== 0) || _la===632) {
					{
					this.state = 1270;
					this.routineAlterOptions();
					}
				}

				}
				break;
			case 5:
				{
				this.state = 1273;
				this.alterView();
				}
				break;
			case 6:
				{
				this.state = 1274;
				this.alterEvent();
				}
				break;
			case 7:
				{
				this.state = 1275;
				this.alterTablespace();
				}
				break;
			case 8:
				{
				this.state = 1276;
				if (!(this.serverVersion >= 80014)) {
					throw this.createFailedPredicateException("this.serverVersion >= 80014");
				}
				this.state = 1277;
				this.alterUndoTablespace();
				}
				break;
			case 9:
				{
				this.state = 1278;
				this.alterLogfileGroup();
				}
				break;
			case 10:
				{
				this.state = 1279;
				this.alterServer();
				}
				break;
			case 11:
				{
				this.state = 1280;
				if (!(this.serverVersion >= 50713)) {
					throw this.createFailedPredicateException("this.serverVersion >= 50713");
				}
				this.state = 1281;
				this.match(MySQLParser.INSTANCE_SYMBOL);
				this.state = 1282;
				this.match(MySQLParser.ROTATE_SYMBOL);
				this.state = 1283;
				this.textOrIdentifier();
				this.state = 1284;
				this.match(MySQLParser.MASTER_SYMBOL);
				this.state = 1285;
				this.match(MySQLParser.KEY_SYMBOL);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public alterDatabase(): AlterDatabaseContext {
		let localctx: AlterDatabaseContext = new AlterDatabaseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 6, MySQLParser.RULE_alterDatabase);
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1289;
			this.match(MySQLParser.DATABASE_SYMBOL);
			this.state = 1290;
			this.schemaRef();
			this.state = 1301;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 9, this._ctx) ) {
			case 1:
				{
				this.state = 1292;
				this._errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						this.state = 1291;
						this.createDatabaseOption();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					this.state = 1294;
					this._errHandler.sync(this);
					_alt = this._interp.adaptivePredict(this._input, 8, this._ctx);
				} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
				}
				break;
			case 2:
				{
				this.state = 1296;
				if (!(this.serverVersion < 80000)) {
					throw this.createFailedPredicateException("this.serverVersion < 80000");
				}
				this.state = 1297;
				this.match(MySQLParser.UPGRADE_SYMBOL);
				this.state = 1298;
				this.match(MySQLParser.DATA_SYMBOL);
				this.state = 1299;
				this.match(MySQLParser.DIRECTORY_SYMBOL);
				this.state = 1300;
				this.match(MySQLParser.NAME_SYMBOL);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public alterEvent(): AlterEventContext {
		let localctx: AlterEventContext = new AlterEventContext(this, this._ctx, this.state);
		this.enterRule(localctx, 8, MySQLParser.RULE_alterEvent);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1304;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===115) {
				{
				this.state = 1303;
				this.definerClause();
				}
			}

			this.state = 1306;
			this.match(MySQLParser.EVENT_SYMBOL);
			this.state = 1307;
			this.eventRef();
			this.state = 1311;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 11, this._ctx) ) {
			case 1:
				{
				this.state = 1308;
				this.match(MySQLParser.ON_SYMBOL);
				this.state = 1309;
				this.match(MySQLParser.SCHEDULE_SYMBOL);
				this.state = 1310;
				this.schedule();
				}
				break;
			}
			this.state = 1319;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===579) {
				{
				this.state = 1313;
				this.match(MySQLParser.ON_SYMBOL);
				this.state = 1314;
				this.match(MySQLParser.COMPLETION_SYMBOL);
				this.state = 1316;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===573) {
					{
					this.state = 1315;
					this.match(MySQLParser.NOT_SYMBOL);
					}
				}

				this.state = 1318;
				this.match(MySQLParser.PRESERVE_SYMBOL);
				}
			}

			this.state = 1324;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===604) {
				{
				this.state = 1321;
				this.match(MySQLParser.RENAME_SYMBOL);
				this.state = 1322;
				this.match(MySQLParser.TO_SYMBOL);
				this.state = 1323;
				this.identifier();
				}
			}

			this.state = 1332;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 143:
				{
				this.state = 1326;
				this.match(MySQLParser.ENABLE_SYMBOL);
				}
				break;
			case 120:
				{
				this.state = 1327;
				this.match(MySQLParser.DISABLE_SYMBOL);
				this.state = 1330;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===579) {
					{
					this.state = 1328;
					this.match(MySQLParser.ON_SYMBOL);
					this.state = 1329;
					this.match(MySQLParser.SLAVE_SYMBOL);
					}
				}

				}
				break;
			case -1:
			case 11:
			case 15:
			case 407:
				break;
			default:
				break;
			}
			this.state = 1336;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===11) {
				{
				this.state = 1334;
				this.match(MySQLParser.COMMENT_SYMBOL);
				this.state = 1335;
				this.textLiteral();
				}
			}

			this.state = 1340;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===15) {
				{
				this.state = 1338;
				this.match(MySQLParser.DO_SYMBOL);
				this.state = 1339;
				this.compoundStatement();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public alterLogfileGroup(): AlterLogfileGroupContext {
		let localctx: AlterLogfileGroupContext = new AlterLogfileGroupContext(this, this._ctx, this.state);
		this.enterRule(localctx, 10, MySQLParser.RULE_alterLogfileGroup);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1342;
			this.match(MySQLParser.LOGFILE_SYMBOL);
			this.state = 1343;
			this.match(MySQLParser.GROUP_SYMBOL);
			this.state = 1344;
			this.logfileGroupRef();
			this.state = 1345;
			this.match(MySQLParser.ADD_SYMBOL);
			this.state = 1346;
			this.match(MySQLParser.UNDOFILE_SYMBOL);
			this.state = 1347;
			this.textLiteral();
			this.state = 1349;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===128 || _la===164 || _la===237 || _la===328 || _la===370) {
				{
				this.state = 1348;
				this.alterLogfileGroupOptions();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public alterLogfileGroupOptions(): AlterLogfileGroupOptionsContext {
		let localctx: AlterLogfileGroupOptionsContext = new AlterLogfileGroupOptionsContext(this, this._ctx, this.state);
		this.enterRule(localctx, 12, MySQLParser.RULE_alterLogfileGroupOptions);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1351;
			this.alterLogfileGroupOption();
			this.state = 1358;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===128 || _la===164 || _la===237 || _la===328 || _la===370 || _la===406) {
				{
				{
				this.state = 1353;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===406) {
					{
					this.state = 1352;
					this.match(MySQLParser.COMMA_SYMBOL);
					}
				}

				this.state = 1355;
				this.alterLogfileGroupOption();
				}
				}
				this.state = 1360;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public alterLogfileGroupOption(): AlterLogfileGroupOptionContext {
		let localctx: AlterLogfileGroupOptionContext = new AlterLogfileGroupOptionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 14, MySQLParser.RULE_alterLogfileGroupOption);
		try {
			this.state = 1364;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 164:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 1361;
				this.tsOptionInitialSize();
				}
				break;
			case 128:
			case 328:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 1362;
				this.tsOptionEngine();
				}
				break;
			case 237:
			case 370:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 1363;
				this.tsOptionWait();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public alterServer(): AlterServerContext {
		let localctx: AlterServerContext = new AlterServerContext(this, this._ctx, this.state);
		this.enterRule(localctx, 16, MySQLParser.RULE_alterServer);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1366;
			this.match(MySQLParser.SERVER_SYMBOL);
			this.state = 1367;
			this.serverRef();
			this.state = 1368;
			this.serverOptions();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public alterTable(): AlterTableContext {
		let localctx: AlterTableContext = new AlterTableContext(this, this._ctx, this.state);
		this.enterRule(localctx, 18, MySQLParser.RULE_alterTable);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1371;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 23, this._ctx) ) {
			case 1:
				{
				this.state = 1370;
				this.onlineOption();
				}
				break;
			}
			this.state = 1375;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 24, this._ctx) ) {
			case 1:
				{
				this.state = 1373;
				if (!(this.serverVersion < 50700)) {
					throw this.createFailedPredicateException("this.serverVersion < 50700");
				}
				this.state = 1374;
				this.match(MySQLParser.IGNORE_SYMBOL);
				}
				break;
			}
			this.state = 1377;
			this.match(MySQLParser.TABLE_SYMBOL);
			this.state = 1378;
			this.tableRef();
			this.state = 1380;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 25, this._ctx) ) {
			case 1:
				{
				this.state = 1379;
				this.alterTableActions();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public alterTableActions(): AlterTableActionsContext {
		let localctx: AlterTableActionsContext = new AlterTableActionsContext(this, this._ctx, this.state);
		this.enterRule(localctx, 20, MySQLParser.RULE_alterTableActions);
		try {
			this.state = 1395;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 28, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 1382;
				this.alterCommandList();
				this.state = 1385;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case 32:
					{
					this.state = 1383;
					this.partitionClause();
					}
					break;
				case 36:
					{
					this.state = 1384;
					this.removePartitioning();
					}
					break;
				case -1:
				case 407:
					break;
				default:
					break;
				}
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 1387;
				this.partitionClause();
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 1388;
				this.removePartitioning();
				}
				break;
			case 4:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 1392;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 27, this._ctx) ) {
				case 1:
					{
					this.state = 1389;
					this.alterCommandsModifierList();
					this.state = 1390;
					this.match(MySQLParser.COMMA_SYMBOL);
					}
					break;
				}
				this.state = 1394;
				this.standaloneAlterCommands();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public alterCommandList(): AlterCommandListContext {
		let localctx: AlterCommandListContext = new AlterCommandListContext(this, this._ctx, this.state);
		this.enterRule(localctx, 22, MySQLParser.RULE_alterCommandList);
		try {
			this.state = 1404;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 30, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 1397;
				this.alterCommandsModifierList();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 1401;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 29, this._ctx) ) {
				case 1:
					{
					this.state = 1398;
					this.alterCommandsModifierList();
					this.state = 1399;
					this.match(MySQLParser.COMMA_SYMBOL);
					}
					break;
				}
				this.state = 1403;
				this.alterList();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public alterCommandsModifierList(): AlterCommandsModifierListContext {
		let localctx: AlterCommandsModifierListContext = new AlterCommandsModifierListContext(this, this._ctx, this.state);
		this.enterRule(localctx, 24, MySQLParser.RULE_alterCommandsModifierList);
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1406;
			this.alterCommandsModifier();
			this.state = 1411;
			this._errHandler.sync(this);
			_alt = this._interp.adaptivePredict(this._input, 31, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 1407;
					this.match(MySQLParser.COMMA_SYMBOL);
					this.state = 1408;
					this.alterCommandsModifier();
					}
					}
				}
				this.state = 1413;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 31, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public standaloneAlterCommands(): StandaloneAlterCommandsContext {
		let localctx: StandaloneAlterCommandsContext = new StandaloneAlterCommandsContext(this, this._ctx, this.state);
		this.enterRule(localctx, 26, MySQLParser.RULE_standaloneAlterCommands);
		let _la: number;
		try {
			this.state = 1421;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 32, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 1414;
				this.match(MySQLParser.DISCARD_SYMBOL);
				this.state = 1415;
				this.match(MySQLParser.TABLESPACE_SYMBOL);
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 1416;
				this.match(MySQLParser.IMPORT_SYMBOL);
				this.state = 1417;
				this.match(MySQLParser.TABLESPACE_SYMBOL);
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 1418;
				this.alterPartition();
				}
				break;
			case 4:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 1419;
				if (!(this.serverVersion >= 80014)) {
					throw this.createFailedPredicateException("this.serverVersion >= 80014");
				}
				this.state = 1420;
				_la = this._input.LA(1);
				if(!(_la===752 || _la===753)) {
				this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public alterPartition(): AlterPartitionContext {
		let localctx: AlterPartitionContext = new AlterPartitionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 28, MySQLParser.RULE_alterPartition);
		let _la: number;
		try {
			this.state = 1520;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 46, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 1423;
				this.match(MySQLParser.ADD_SYMBOL);
				this.state = 1424;
				this.match(MySQLParser.PARTITION_SYMBOL);
				this.state = 1426;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===180 || _la===575) {
					{
					this.state = 1425;
					this.noWriteToBinLog();
					}
				}

				this.state = 1431;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case 409:
					{
					this.state = 1428;
					this.partitionDefinitions();
					}
					break;
				case 250:
					{
					this.state = 1429;
					this.match(MySQLParser.PARTITIONS_SYMBOL);
					this.state = 1430;
					this.real_ulong_number();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 1433;
				this.match(MySQLParser.DROP_SYMBOL);
				this.state = 1434;
				this.match(MySQLParser.PARTITION_SYMBOL);
				this.state = 1435;
				this.identifierList();
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 1436;
				this.match(MySQLParser.REBUILD_SYMBOL);
				this.state = 1437;
				this.match(MySQLParser.PARTITION_SYMBOL);
				this.state = 1439;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 35, this._ctx) ) {
				case 1:
					{
					this.state = 1438;
					this.noWriteToBinLog();
					}
					break;
				}
				this.state = 1441;
				this.allOrPartitionNameList();
				}
				break;
			case 4:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 1442;
				this.match(MySQLParser.OPTIMIZE_SYMBOL);
				this.state = 1443;
				this.match(MySQLParser.PARTITION_SYMBOL);
				this.state = 1445;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 36, this._ctx) ) {
				case 1:
					{
					this.state = 1444;
					this.noWriteToBinLog();
					}
					break;
				}
				this.state = 1447;
				this.allOrPartitionNameList();
				this.state = 1449;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===180 || _la===575) {
					{
					this.state = 1448;
					this.noWriteToBinLog();
					}
				}

				}
				break;
			case 5:
				this.enterOuterAlt(localctx, 5);
				{
				this.state = 1451;
				this.match(MySQLParser.ANALYZE_SYMBOL);
				this.state = 1452;
				this.match(MySQLParser.PARTITION_SYMBOL);
				this.state = 1454;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 38, this._ctx) ) {
				case 1:
					{
					this.state = 1453;
					this.noWriteToBinLog();
					}
					break;
				}
				this.state = 1456;
				this.allOrPartitionNameList();
				}
				break;
			case 6:
				this.enterOuterAlt(localctx, 6);
				{
				this.state = 1457;
				this.match(MySQLParser.CHECK_SYMBOL);
				this.state = 1458;
				this.match(MySQLParser.PARTITION_SYMBOL);
				this.state = 1459;
				this.allOrPartitionNameList();
				this.state = 1463;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la===80 || _la===138 || _la===141 || _la===213 || _la===268 || _la===506) {
					{
					{
					this.state = 1460;
					this.checkOption();
					}
					}
					this.state = 1465;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;
			case 7:
				this.enterOuterAlt(localctx, 7);
				{
				this.state = 1466;
				this.match(MySQLParser.REPAIR_SYMBOL);
				this.state = 1467;
				this.match(MySQLParser.PARTITION_SYMBOL);
				this.state = 1469;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 40, this._ctx) ) {
				case 1:
					{
					this.state = 1468;
					this.noWriteToBinLog();
					}
					break;
				}
				this.state = 1471;
				this.allOrPartitionNameList();
				this.state = 1475;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la===138 || _la===268 || _la===365) {
					{
					{
					this.state = 1472;
					this.repairType();
					}
					}
					this.state = 1477;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;
			case 8:
				this.enterOuterAlt(localctx, 8);
				{
				this.state = 1478;
				this.match(MySQLParser.COALESCE_SYMBOL);
				this.state = 1479;
				this.match(MySQLParser.PARTITION_SYMBOL);
				this.state = 1481;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===180 || _la===575) {
					{
					this.state = 1480;
					this.noWriteToBinLog();
					}
				}

				this.state = 1483;
				this.real_ulong_number();
				}
				break;
			case 9:
				this.enterOuterAlt(localctx, 9);
				{
				this.state = 1484;
				this.match(MySQLParser.TRUNCATE_SYMBOL);
				this.state = 1485;
				this.match(MySQLParser.PARTITION_SYMBOL);
				this.state = 1486;
				this.allOrPartitionNameList();
				}
				break;
			case 10:
				this.enterOuterAlt(localctx, 10);
				{
				this.state = 1487;
				this.reorgPartitionRule();
				}
				break;
			case 11:
				this.enterOuterAlt(localctx, 11);
				{
				this.state = 1488;
				this.match(MySQLParser.REORGANIZE_SYMBOL);
				this.state = 1489;
				this.match(MySQLParser.PARTITION_SYMBOL);
				this.state = 1491;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 43, this._ctx) ) {
				case 1:
					{
					this.state = 1490;
					this.noWriteToBinLog();
					}
					break;
				}
				this.state = 1497;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 44, this._ctx) ) {
				case 1:
					{
					this.state = 1493;
					this.identifierList();
					this.state = 1494;
					this.match(MySQLParser.INTO_SYMBOL);
					this.state = 1495;
					this.partitionDefinitions();
					}
					break;
				}
				}
				break;
			case 12:
				this.enterOuterAlt(localctx, 12);
				{
				this.state = 1499;
				this.match(MySQLParser.EXCHANGE_SYMBOL);
				this.state = 1500;
				this.match(MySQLParser.PARTITION_SYMBOL);
				this.state = 1501;
				this.identifier();
				this.state = 1502;
				this.match(MySQLParser.WITH_SYMBOL);
				this.state = 1503;
				this.match(MySQLParser.TABLE_SYMBOL);
				this.state = 1504;
				this.tableRef();
				this.state = 1506;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 45, this._ctx) ) {
				case 1:
					{
					this.state = 1505;
					this.withValidation();
					}
					break;
				}
				}
				break;
			case 13:
				this.enterOuterAlt(localctx, 13);
				{
				this.state = 1508;
				if (!(this.serverVersion >= 50704)) {
					throw this.createFailedPredicateException("this.serverVersion >= 50704");
				}
				this.state = 1509;
				this.match(MySQLParser.DISCARD_SYMBOL);
				this.state = 1510;
				this.match(MySQLParser.PARTITION_SYMBOL);
				this.state = 1511;
				this.allOrPartitionNameList();
				this.state = 1512;
				this.match(MySQLParser.TABLESPACE_SYMBOL);
				}
				break;
			case 14:
				this.enterOuterAlt(localctx, 14);
				{
				this.state = 1514;
				if (!(this.serverVersion >= 50704)) {
					throw this.createFailedPredicateException("this.serverVersion >= 50704");
				}
				this.state = 1515;
				this.match(MySQLParser.IMPORT_SYMBOL);
				this.state = 1516;
				this.match(MySQLParser.PARTITION_SYMBOL);
				this.state = 1517;
				this.allOrPartitionNameList();
				this.state = 1518;
				this.match(MySQLParser.TABLESPACE_SYMBOL);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public alterList(): AlterListContext {
		let localctx: AlterListContext = new AlterListContext(this, this._ctx, this.state);
		this.enterRule(localctx, 30, MySQLParser.RULE_alterList);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1524;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 47, this._ctx) ) {
			case 1:
				{
				this.state = 1522;
				this.alterListItem();
				}
				break;
			case 2:
				{
				this.state = 1523;
				this.createTableOptionsSpaceSeparated();
				}
				break;
			}
			this.state = 1534;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===406) {
				{
				{
				this.state = 1526;
				this.match(MySQLParser.COMMA_SYMBOL);
				this.state = 1530;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 48, this._ctx) ) {
				case 1:
					{
					this.state = 1527;
					this.alterListItem();
					}
					break;
				case 2:
					{
					this.state = 1528;
					this.alterCommandsModifier();
					}
					break;
				case 3:
					{
					this.state = 1529;
					this.createTableOptionsSpaceSeparated();
					}
					break;
				}
				}
				}
				this.state = 1536;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public alterCommandsModifier(): AlterCommandsModifierContext {
		let localctx: AlterCommandsModifierContext = new AlterCommandsModifierContext(this, this._ctx, this.state);
		this.enterRule(localctx, 32, MySQLParser.RULE_alterCommandsModifier);
		try {
			this.state = 1540;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 50, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 1537;
				this.alterAlgorithmOption();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 1538;
				this.alterLockOption();
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 1539;
				this.withValidation();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public alterListItem(): AlterListItemContext {
		let localctx: AlterListItemContext = new AlterListItemContext(this, this._ctx, this.state);
		this.enterRule(localctx, 34, MySQLParser.RULE_alterListItem);
		let _la: number;
		try {
			this.state = 1675;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 70, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 1542;
				this.match(MySQLParser.ADD_SYMBOL);
				this.state = 1544;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 51, this._ctx) ) {
				case 1:
					{
					this.state = 1543;
					this.match(MySQLParser.COLUMN_SYMBOL);
					}
					break;
				}
				this.state = 1558;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 54, this._ctx) ) {
				case 1:
					{
					this.state = 1546;
					this.identifier();
					this.state = 1547;
					this.fieldDefinition();
					this.state = 1549;
					this._errHandler.sync(this);
					switch ( this._interp.adaptivePredict(this._input, 52, this._ctx) ) {
					case 1:
						{
						this.state = 1548;
						this.checkOrReferences();
						}
						break;
					}
					this.state = 1552;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la===59 || _la===148) {
						{
						this.state = 1551;
						this.place();
						}
					}

					}
					break;
				case 2:
					{
					this.state = 1554;
					this.match(MySQLParser.OPEN_PAR_SYMBOL);
					this.state = 1555;
					this.tableElementList();
					this.state = 1556;
					this.match(MySQLParser.CLOSE_PAR_SYMBOL);
					}
					break;
				}
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 1560;
				this.match(MySQLParser.ADD_SYMBOL);
				this.state = 1561;
				this.tableConstraintDef();
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 1562;
				this.match(MySQLParser.CHANGE_SYMBOL);
				this.state = 1564;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 55, this._ctx) ) {
				case 1:
					{
					this.state = 1563;
					this.match(MySQLParser.COLUMN_SYMBOL);
					}
					break;
				}
				this.state = 1566;
				this.columnInternalRef();
				this.state = 1567;
				this.identifier();
				this.state = 1568;
				this.fieldDefinition();
				this.state = 1570;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===59 || _la===148) {
					{
					this.state = 1569;
					this.place();
					}
				}

				}
				break;
			case 4:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 1572;
				this.match(MySQLParser.MODIFY_SYMBOL);
				this.state = 1574;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 57, this._ctx) ) {
				case 1:
					{
					this.state = 1573;
					this.match(MySQLParser.COLUMN_SYMBOL);
					}
					break;
				}
				this.state = 1576;
				this.columnInternalRef();
				this.state = 1577;
				this.fieldDefinition();
				this.state = 1579;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===59 || _la===148) {
					{
					this.state = 1578;
					this.place();
					}
				}

				}
				break;
			case 5:
				this.enterOuterAlt(localctx, 5);
				{
				this.state = 1581;
				this.match(MySQLParser.DROP_SYMBOL);
				this.state = 1604;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 63, this._ctx) ) {
				case 1:
					{
					this.state = 1583;
					this._errHandler.sync(this);
					switch ( this._interp.adaptivePredict(this._input, 59, this._ctx) ) {
					case 1:
						{
						this.state = 1582;
						this.match(MySQLParser.COLUMN_SYMBOL);
						}
						break;
					}
					this.state = 1585;
					this.columnInternalRef();
					this.state = 1587;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la===446 || _la===609) {
						{
						this.state = 1586;
						this.restrict();
						}
					}

					}
					break;
				case 2:
					{
					this.state = 1589;
					this.match(MySQLParser.FOREIGN_SYMBOL);
					this.state = 1590;
					this.match(MySQLParser.KEY_SYMBOL);
					this.state = 1597;
					this._errHandler.sync(this);
					switch ( this._interp.adaptivePredict(this._input, 62, this._ctx) ) {
					case 1:
						{
						this.state = 1591;
						if (!(this.serverVersion >= 50700)) {
							throw this.createFailedPredicateException("this.serverVersion >= 50700");
						}
						this.state = 1592;
						this.columnInternalRef();
						}
						break;
					case 2:
						{
						this.state = 1593;
						if (!(this.serverVersion < 50700)) {
							throw this.createFailedPredicateException("this.serverVersion < 50700");
						}
						this.state = 1595;
						this._errHandler.sync(this);
						switch ( this._interp.adaptivePredict(this._input, 61, this._ctx) ) {
						case 1:
							{
							this.state = 1594;
							this.columnInternalRef();
							}
							break;
						}
						}
						break;
					}
					}
					break;
				case 3:
					{
					this.state = 1599;
					this.match(MySQLParser.PRIMARY_SYMBOL);
					this.state = 1600;
					this.match(MySQLParser.KEY_SYMBOL);
					}
					break;
				case 4:
					{
					this.state = 1601;
					this.keyOrIndex();
					this.state = 1602;
					this.indexRef();
					}
					break;
				}
				}
				break;
			case 6:
				this.enterOuterAlt(localctx, 6);
				{
				this.state = 1606;
				this.match(MySQLParser.DISABLE_SYMBOL);
				this.state = 1607;
				this.match(MySQLParser.KEYS_SYMBOL);
				}
				break;
			case 7:
				this.enterOuterAlt(localctx, 7);
				{
				this.state = 1608;
				this.match(MySQLParser.ENABLE_SYMBOL);
				this.state = 1609;
				this.match(MySQLParser.KEYS_SYMBOL);
				}
				break;
			case 8:
				this.enterOuterAlt(localctx, 8);
				{
				this.state = 1610;
				this.match(MySQLParser.ALTER_SYMBOL);
				this.state = 1612;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 64, this._ctx) ) {
				case 1:
					{
					this.state = 1611;
					this.match(MySQLParser.COLUMN_SYMBOL);
					}
					break;
				}
				this.state = 1614;
				this.columnInternalRef();
				this.state = 1624;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case 619:
					{
					this.state = 1615;
					this.match(MySQLParser.SET_SYMBOL);
					this.state = 1616;
					this.match(MySQLParser.DEFAULT_SYMBOL);
					this.state = 1620;
					this._errHandler.sync(this);
					switch ( this._interp.adaptivePredict(this._input, 65, this._ctx) ) {
					case 1:
						{
						this.state = 1617;
						if (!(this.serverVersion >= 80014)) {
							throw this.createFailedPredicateException("this.serverVersion >= 80014");
						}
						this.state = 1618;
						this.exprWithParentheses();
						}
						break;
					case 2:
						{
						this.state = 1619;
						this.signedLiteral();
						}
						break;
					}
					}
					break;
				case 487:
					{
					this.state = 1622;
					this.match(MySQLParser.DROP_SYMBOL);
					this.state = 1623;
					this.match(MySQLParser.DEFAULT_SYMBOL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 9:
				this.enterOuterAlt(localctx, 9);
				{
				this.state = 1626;
				if (!(this.serverVersion >= 80000)) {
					throw this.createFailedPredicateException("this.serverVersion >= 80000");
				}
				this.state = 1627;
				this.match(MySQLParser.ALTER_SYMBOL);
				this.state = 1628;
				this.match(MySQLParser.INDEX_SYMBOL);
				this.state = 1629;
				this.indexRef();
				this.state = 1630;
				this.visibility();
				}
				break;
			case 10:
				this.enterOuterAlt(localctx, 10);
				{
				this.state = 1632;
				if (!(this.serverVersion >= 80017)) {
					throw this.createFailedPredicateException("this.serverVersion >= 80017");
				}
				this.state = 1633;
				this.match(MySQLParser.ALTER_SYMBOL);
				this.state = 1634;
				this.match(MySQLParser.CHECK_SYMBOL);
				this.state = 1635;
				this.identifier();
				this.state = 1636;
				this.constraintEnforcement();
				}
				break;
			case 11:
				this.enterOuterAlt(localctx, 11);
				{
				this.state = 1638;
				if (!(this.serverVersion >= 80000)) {
					throw this.createFailedPredicateException("this.serverVersion >= 80000");
				}
				this.state = 1639;
				this.match(MySQLParser.RENAME_SYMBOL);
				this.state = 1640;
				this.match(MySQLParser.COLUMN_SYMBOL);
				this.state = 1641;
				this.columnInternalRef();
				this.state = 1642;
				this.match(MySQLParser.TO_SYMBOL);
				this.state = 1643;
				this.identifier();
				}
				break;
			case 12:
				this.enterOuterAlt(localctx, 12);
				{
				this.state = 1645;
				this.match(MySQLParser.RENAME_SYMBOL);
				this.state = 1647;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 67, this._ctx) ) {
				case 1:
					{
					this.state = 1646;
					_la = this._input.LA(1);
					if(!(_la===431 || _la===653)) {
					this._errHandler.recoverInline(this);
					}
					else {
						this._errHandler.reportMatch(this);
					    this.consume();
					}
					}
					break;
				}
				this.state = 1649;
				this.tableName();
				}
				break;
			case 13:
				this.enterOuterAlt(localctx, 13);
				{
				this.state = 1650;
				if (!(this.serverVersion >= 50700)) {
					throw this.createFailedPredicateException("this.serverVersion >= 50700");
				}
				this.state = 1651;
				this.match(MySQLParser.RENAME_SYMBOL);
				this.state = 1652;
				this.keyOrIndex();
				this.state = 1653;
				this.indexRef();
				this.state = 1654;
				this.match(MySQLParser.TO_SYMBOL);
				this.state = 1655;
				this.indexName();
				}
				break;
			case 14:
				this.enterOuterAlt(localctx, 14);
				{
				this.state = 1657;
				this.match(MySQLParser.CONVERT_SYMBOL);
				this.state = 1658;
				this.match(MySQLParser.TO_SYMBOL);
				this.state = 1659;
				this.charset();
				this.state = 1663;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 68, this._ctx) ) {
				case 1:
					{
					this.state = 1660;
					if (!(this.serverVersion >= 80014)) {
						throw this.createFailedPredicateException("this.serverVersion >= 80014");
					}
					this.state = 1661;
					this.match(MySQLParser.DEFAULT_SYMBOL);
					}
					break;
				case 2:
					{
					this.state = 1662;
					this.charsetName();
					}
					break;
				}
				this.state = 1666;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===452) {
					{
					this.state = 1665;
					this.collate();
					}
				}

				}
				break;
			case 15:
				this.enterOuterAlt(localctx, 15);
				{
				this.state = 1668;
				this.match(MySQLParser.FORCE_SYMBOL);
				}
				break;
			case 16:
				this.enterOuterAlt(localctx, 16);
				{
				this.state = 1669;
				this.match(MySQLParser.ORDER_SYMBOL);
				this.state = 1670;
				this.match(MySQLParser.BY_SYMBOL);
				this.state = 1671;
				this.alterOrderList();
				}
				break;
			case 17:
				this.enterOuterAlt(localctx, 17);
				{
				this.state = 1672;
				if (!(this.serverVersion >= 50708 && this.serverVersion < 80000)) {
					throw this.createFailedPredicateException("this.serverVersion >= 50708 && this.serverVersion < 80000");
				}
				this.state = 1673;
				this.match(MySQLParser.UPGRADE_SYMBOL);
				this.state = 1674;
				this.match(MySQLParser.PARTITIONING_SYMBOL);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public place(): PlaceContext {
		let localctx: PlaceContext = new PlaceContext(this, this._ctx, this.state);
		this.enterRule(localctx, 36, MySQLParser.RULE_place);
		try {
			this.state = 1680;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 59:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 1677;
				this.match(MySQLParser.AFTER_SYMBOL);
				this.state = 1678;
				this.identifier();
				}
				break;
			case 148:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 1679;
				this.match(MySQLParser.FIRST_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public restrict(): RestrictContext {
		let localctx: RestrictContext = new RestrictContext(this, this._ctx, this.state);
		this.enterRule(localctx, 38, MySQLParser.RULE_restrict);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1682;
			_la = this._input.LA(1);
			if(!(_la===446 || _la===609)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public alterOrderList(): AlterOrderListContext {
		let localctx: AlterOrderListContext = new AlterOrderListContext(this, this._ctx, this.state);
		this.enterRule(localctx, 40, MySQLParser.RULE_alterOrderList);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1684;
			this.identifier();
			this.state = 1686;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===432 || _la===481) {
				{
				this.state = 1685;
				this.direction();
				}
			}

			this.state = 1695;
			this._errHandler.sync(this);
			_alt = this._interp.adaptivePredict(this._input, 74, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 1688;
					this.match(MySQLParser.COMMA_SYMBOL);
					this.state = 1689;
					this.identifier();
					this.state = 1691;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la===432 || _la===481) {
						{
						this.state = 1690;
						this.direction();
						}
					}

					}
					}
				}
				this.state = 1697;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 74, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public alterAlgorithmOption(): AlterAlgorithmOptionContext {
		let localctx: AlterAlgorithmOptionContext = new AlterAlgorithmOptionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 42, MySQLParser.RULE_alterAlgorithmOption);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1698;
			this.match(MySQLParser.ALGORITHM_SYMBOL);
			this.state = 1700;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 75, this._ctx) ) {
			case 1:
				{
				this.state = 1699;
				this.match(MySQLParser.EQUAL_OPERATOR);
				}
				break;
			}
			this.state = 1704;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 76, this._ctx) ) {
			case 1:
				{
				this.state = 1702;
				this.match(MySQLParser.DEFAULT_SYMBOL);
				}
				break;
			case 2:
				{
				this.state = 1703;
				this.identifier();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public alterLockOption(): AlterLockOptionContext {
		let localctx: AlterLockOptionContext = new AlterLockOptionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 44, MySQLParser.RULE_alterLockOption);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1706;
			this.match(MySQLParser.LOCK_SYMBOL);
			this.state = 1708;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 77, this._ctx) ) {
			case 1:
				{
				this.state = 1707;
				this.match(MySQLParser.EQUAL_OPERATOR);
				}
				break;
			}
			this.state = 1712;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 78, this._ctx) ) {
			case 1:
				{
				this.state = 1710;
				this.match(MySQLParser.DEFAULT_SYMBOL);
				}
				break;
			case 2:
				{
				this.state = 1711;
				this.identifier();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public indexLockAndAlgorithm(): IndexLockAndAlgorithmContext {
		let localctx: IndexLockAndAlgorithmContext = new IndexLockAndAlgorithmContext(this, this._ctx, this.state);
		this.enterRule(localctx, 46, MySQLParser.RULE_indexLockAndAlgorithm);
		let _la: number;
		try {
			this.state = 1722;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 62:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 1714;
				this.alterAlgorithmOption();
				this.state = 1716;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===548) {
					{
					this.state = 1715;
					this.alterLockOption();
					}
				}

				}
				break;
			case 548:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 1718;
				this.alterLockOption();
				this.state = 1720;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===62) {
					{
					this.state = 1719;
					this.alterAlgorithmOption();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public withValidation(): WithValidationContext {
		let localctx: WithValidationContext = new WithValidationContext(this, this._ctx, this.state);
		this.enterRule(localctx, 48, MySQLParser.RULE_withValidation);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1724;
			if (!(this.serverVersion >= 50706)) {
				throw this.createFailedPredicateException("this.serverVersion >= 50706");
			}
			this.state = 1725;
			_la = this._input.LA(1);
			if(!(_la===682 || _la===683)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			this.state = 1726;
			this.match(MySQLParser.VALIDATION_SYMBOL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public removePartitioning(): RemovePartitioningContext {
		let localctx: RemovePartitioningContext = new RemovePartitioningContext(this, this._ctx, this.state);
		this.enterRule(localctx, 50, MySQLParser.RULE_removePartitioning);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1728;
			this.match(MySQLParser.REMOVE_SYMBOL);
			this.state = 1729;
			this.match(MySQLParser.PARTITIONING_SYMBOL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public allOrPartitionNameList(): AllOrPartitionNameListContext {
		let localctx: AllOrPartitionNameListContext = new AllOrPartitionNameListContext(this, this._ctx, this.state);
		this.enterRule(localctx, 52, MySQLParser.RULE_allOrPartitionNameList);
		try {
			this.state = 1733;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 82, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 1731;
				this.match(MySQLParser.ALL_SYMBOL);
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 1732;
				this.identifierList();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public reorgPartitionRule(): ReorgPartitionRuleContext {
		let localctx: ReorgPartitionRuleContext = new ReorgPartitionRuleContext(this, this._ctx, this.state);
		this.enterRule(localctx, 54, MySQLParser.RULE_reorgPartitionRule);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1735;
			this.match(MySQLParser.REORGANIZE_SYMBOL);
			this.state = 1736;
			this.match(MySQLParser.PARTITION_SYMBOL);
			this.state = 1738;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 83, this._ctx) ) {
			case 1:
				{
				this.state = 1737;
				this.noWriteToBinLog();
				}
				break;
			}
			this.state = 1744;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 84, this._ctx) ) {
			case 1:
				{
				this.state = 1740;
				this.identifierList();
				this.state = 1741;
				this.match(MySQLParser.INTO_SYMBOL);
				this.state = 1742;
				this.partitionDefinitions();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public alterTablespace(): AlterTablespaceContext {
		let localctx: AlterTablespaceContext = new AlterTablespaceContext(this, this._ctx, this.state);
		this.enterRule(localctx, 56, MySQLParser.RULE_alterTablespace);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1746;
			this.match(MySQLParser.TABLESPACE_SYMBOL);
			this.state = 1747;
			this.tablespaceRef();
			this.state = 1781;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 90, this._ctx) ) {
			case 1:
				{
				this.state = 1748;
				_la = this._input.LA(1);
				if(!(_la===426 || _la===487)) {
				this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				this.state = 1749;
				this.match(MySQLParser.DATAFILE_SYMBOL);
				this.state = 1750;
				this.textLiteral();
				this.state = 1752;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===68 || _la===96 || _la===128 || _la===164 || _la===210 || _la===237 || _la===328 || _la===370) {
					{
					this.state = 1751;
					this.alterTablespaceOptions();
					}
				}

				}
				break;
			case 2:
				{
				this.state = 1754;
				if (!(this.serverVersion < 80000)) {
					throw this.createFailedPredicateException("this.serverVersion < 80000");
				}
				this.state = 1774;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case -1:
				case 407:
					// tslint:disable-next-line:no-empty
					{
					}
					break;
				case 449:
					{
					this.state = 1756;
					this.match(MySQLParser.CHANGE_SYMBOL);
					this.state = 1757;
					this.match(MySQLParser.DATAFILE_SYMBOL);
					this.state = 1758;
					this.textLiteral();
					this.state = 1769;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la===68 || _la===164 || _la===210) {
						{
						this.state = 1759;
						this.changeTablespaceOption();
						this.state = 1766;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						while (_la===68 || _la===164 || _la===210 || _la===406) {
							{
							{
							this.state = 1761;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							if (_la===406) {
								{
								this.state = 1760;
								this.match(MySQLParser.COMMA_SYMBOL);
								}
							}

							this.state = 1763;
							this.changeTablespaceOption();
							}
							}
							this.state = 1768;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						}
						}
					}

					}
					break;
				case 269:
				case 599:
					{
					this.state = 1771;
					_la = this._input.LA(1);
					if(!(_la===269 || _la===599)) {
					this._errHandler.recoverInline(this);
					}
					else {
						this._errHandler.reportMatch(this);
					    this.consume();
					}
					}
					break;
				case 573:
					{
					this.state = 1772;
					this.match(MySQLParser.NOT_SYMBOL);
					this.state = 1773;
					this.match(MySQLParser.ACCESSIBLE_SYMBOL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 3:
				{
				this.state = 1776;
				this.match(MySQLParser.RENAME_SYMBOL);
				this.state = 1777;
				this.match(MySQLParser.TO_SYMBOL);
				this.state = 1778;
				this.identifier();
				}
				break;
			case 4:
				{
				this.state = 1779;
				if (!(this.serverVersion >= 80014)) {
					throw this.createFailedPredicateException("this.serverVersion >= 80014");
				}
				this.state = 1780;
				this.alterTablespaceOptions();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public alterUndoTablespace(): AlterUndoTablespaceContext {
		let localctx: AlterUndoTablespaceContext = new AlterUndoTablespaceContext(this, this._ctx, this.state);
		this.enterRule(localctx, 58, MySQLParser.RULE_alterUndoTablespace);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1783;
			this.match(MySQLParser.UNDO_SYMBOL);
			this.state = 1784;
			this.match(MySQLParser.TABLESPACE_SYMBOL);
			this.state = 1785;
			this.tablespaceRef();
			this.state = 1786;
			this.match(MySQLParser.SET_SYMBOL);
			this.state = 1787;
			_la = this._input.LA(1);
			if(!(_la===754 || _la===755)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			this.state = 1789;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===128 || _la===328) {
				{
				this.state = 1788;
				this.undoTableSpaceOptions();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public undoTableSpaceOptions(): UndoTableSpaceOptionsContext {
		let localctx: UndoTableSpaceOptionsContext = new UndoTableSpaceOptionsContext(this, this._ctx, this.state);
		this.enterRule(localctx, 60, MySQLParser.RULE_undoTableSpaceOptions);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1791;
			this.undoTableSpaceOption();
			this.state = 1798;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===128 || _la===328 || _la===406) {
				{
				{
				this.state = 1793;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===406) {
					{
					this.state = 1792;
					this.match(MySQLParser.COMMA_SYMBOL);
					}
				}

				this.state = 1795;
				this.undoTableSpaceOption();
				}
				}
				this.state = 1800;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public undoTableSpaceOption(): UndoTableSpaceOptionContext {
		let localctx: UndoTableSpaceOptionContext = new UndoTableSpaceOptionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 62, MySQLParser.RULE_undoTableSpaceOption);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1801;
			this.tsOptionEngine();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public alterTablespaceOptions(): AlterTablespaceOptionsContext {
		let localctx: AlterTablespaceOptionsContext = new AlterTablespaceOptionsContext(this, this._ctx, this.state);
		this.enterRule(localctx, 64, MySQLParser.RULE_alterTablespaceOptions);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1803;
			this.alterTablespaceOption();
			this.state = 1810;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===68 || _la===96 || _la===128 || _la===164 || _la===210 || _la===237 || _la===328 || _la===370 || _la===406) {
				{
				{
				this.state = 1805;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===406) {
					{
					this.state = 1804;
					this.match(MySQLParser.COMMA_SYMBOL);
					}
				}

				this.state = 1807;
				this.alterTablespaceOption();
				}
				}
				this.state = 1812;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public alterTablespaceOption(): AlterTablespaceOptionContext {
		let localctx: AlterTablespaceOptionContext = new AlterTablespaceOptionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 66, MySQLParser.RULE_alterTablespaceOption);
		try {
			this.state = 1823;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 164:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 1813;
				this.match(MySQLParser.INITIAL_SIZE_SYMBOL);
				this.state = 1815;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 96, this._ctx) ) {
				case 1:
					{
					this.state = 1814;
					this.match(MySQLParser.EQUAL_OPERATOR);
					}
					break;
				}
				this.state = 1817;
				this.sizeNumber();
				}
				break;
			case 68:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 1818;
				this.tsOptionAutoextendSize();
				}
				break;
			case 210:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 1819;
				this.tsOptionMaxSize();
				}
				break;
			case 128:
			case 328:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 1820;
				this.tsOptionEngine();
				}
				break;
			case 237:
			case 370:
				this.enterOuterAlt(localctx, 5);
				{
				this.state = 1821;
				this.tsOptionWait();
				}
				break;
			case 96:
				this.enterOuterAlt(localctx, 6);
				{
				this.state = 1822;
				this.tsOptionEncryption();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public changeTablespaceOption(): ChangeTablespaceOptionContext {
		let localctx: ChangeTablespaceOptionContext = new ChangeTablespaceOptionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 68, MySQLParser.RULE_changeTablespaceOption);
		try {
			this.state = 1832;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 164:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 1825;
				this.match(MySQLParser.INITIAL_SIZE_SYMBOL);
				this.state = 1827;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 98, this._ctx) ) {
				case 1:
					{
					this.state = 1826;
					this.match(MySQLParser.EQUAL_OPERATOR);
					}
					break;
				}
				this.state = 1829;
				this.sizeNumber();
				}
				break;
			case 68:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 1830;
				this.tsOptionAutoextendSize();
				}
				break;
			case 210:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 1831;
				this.tsOptionMaxSize();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public alterView(): AlterViewContext {
		let localctx: AlterViewContext = new AlterViewContext(this, this._ctx, this.state);
		this.enterRule(localctx, 70, MySQLParser.RULE_alterView);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1835;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===62) {
				{
				this.state = 1834;
				this.viewAlgorithm();
				}
			}

			this.state = 1838;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===115) {
				{
				this.state = 1837;
				this.definerClause();
				}
			}

			this.state = 1841;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===632) {
				{
				this.state = 1840;
				this.viewSuid();
				}
			}

			this.state = 1843;
			this.match(MySQLParser.VIEW_SYMBOL);
			this.state = 1844;
			this.viewRef();
			this.state = 1845;
			this.viewTail();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public viewTail(): ViewTailContext {
		let localctx: ViewTailContext = new ViewTailContext(this, this._ctx, this.state);
		this.enterRule(localctx, 72, MySQLParser.RULE_viewTail);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1848;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===409) {
				{
				this.state = 1847;
				this.columnInternalRefList();
				}
			}

			this.state = 1850;
			this.match(MySQLParser.AS_SYMBOL);
			this.state = 1851;
			this.viewSelect();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public viewSelect(): ViewSelectContext {
		let localctx: ViewSelectContext = new ViewSelectContext(this, this._ctx, this.state);
		this.enterRule(localctx, 74, MySQLParser.RULE_viewSelect);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1853;
			this.queryExpressionOrParens();
			this.state = 1855;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===682) {
				{
				this.state = 1854;
				this.viewCheckOption();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public viewCheckOption(): ViewCheckOptionContext {
		let localctx: ViewCheckOptionContext = new ViewCheckOptionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 76, MySQLParser.RULE_viewCheckOption);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1857;
			this.match(MySQLParser.WITH_SYMBOL);
			this.state = 1859;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===77 || _la===180) {
				{
				this.state = 1858;
				_la = this._input.LA(1);
				if(!(_la===77 || _la===180)) {
				this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				}
			}

			this.state = 1861;
			this.match(MySQLParser.CHECK_SYMBOL);
			this.state = 1862;
			this.match(MySQLParser.OPTION_SYMBOL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public createStatement(): CreateStatementContext {
		let localctx: CreateStatementContext = new CreateStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 78, MySQLParser.RULE_createStatement);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1864;
			this.match(MySQLParser.CREATE_SYMBOL);
			this.state = 1883;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 106, this._ctx) ) {
			case 1:
				{
				this.state = 1865;
				this.createDatabase();
				}
				break;
			case 2:
				{
				this.state = 1866;
				this.createTable();
				}
				break;
			case 3:
				{
				this.state = 1867;
				this.createFunction();
				}
				break;
			case 4:
				{
				this.state = 1868;
				this.createProcedure();
				}
				break;
			case 5:
				{
				this.state = 1869;
				this.createUdf();
				}
				break;
			case 6:
				{
				this.state = 1870;
				this.createLogfileGroup();
				}
				break;
			case 7:
				{
				this.state = 1871;
				this.createView();
				}
				break;
			case 8:
				{
				this.state = 1872;
				this.createTrigger();
				}
				break;
			case 9:
				{
				this.state = 1873;
				this.createIndex();
				}
				break;
			case 10:
				{
				this.state = 1874;
				this.createServer();
				}
				break;
			case 11:
				{
				this.state = 1875;
				this.createTablespace();
				}
				break;
			case 12:
				{
				this.state = 1876;
				this.createEvent();
				}
				break;
			case 13:
				{
				this.state = 1877;
				if (!(this.serverVersion >= 80000)) {
					throw this.createFailedPredicateException("this.serverVersion >= 80000");
				}
				this.state = 1878;
				this.createRole();
				}
				break;
			case 14:
				{
				this.state = 1879;
				if (!(this.serverVersion >= 80011)) {
					throw this.createFailedPredicateException("this.serverVersion >= 80011");
				}
				this.state = 1880;
				this.createSpatialReference();
				}
				break;
			case 15:
				{
				this.state = 1881;
				if (!(this.serverVersion >= 80014)) {
					throw this.createFailedPredicateException("this.serverVersion >= 80014");
				}
				this.state = 1882;
				this.createUndoTablespace();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public createDatabase(): CreateDatabaseContext {
		let localctx: CreateDatabaseContext = new CreateDatabaseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 80, MySQLParser.RULE_createDatabase);
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1885;
			this.match(MySQLParser.DATABASE_SYMBOL);
			this.state = 1887;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 107, this._ctx) ) {
			case 1:
				{
				this.state = 1886;
				this.ifNotExists();
				}
				break;
			}
			this.state = 1889;
			this.schemaName();
			this.state = 1893;
			this._errHandler.sync(this);
			_alt = this._interp.adaptivePredict(this._input, 108, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 1890;
					this.createDatabaseOption();
					}
					}
				}
				this.state = 1895;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 108, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public createDatabaseOption(): CreateDatabaseOptionContext {
		let localctx: CreateDatabaseOptionContext = new CreateDatabaseOptionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 82, MySQLParser.RULE_createDatabaseOption);
		try {
			this.state = 1900;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 109, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 1896;
				this.defaultCharset();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 1897;
				this.defaultCollation();
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 1898;
				if (!(this.serverVersion >= 80016)) {
					throw this.createFailedPredicateException("this.serverVersion >= 80016");
				}
				this.state = 1899;
				this.defaultEncryption();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public createTable(): CreateTableContext {
		let localctx: CreateTableContext = new CreateTableContext(this, this._ctx, this.state);
		this.enterRule(localctx, 84, MySQLParser.RULE_createTable);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1903;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===343) {
				{
				this.state = 1902;
				this.match(MySQLParser.TEMPORARY_SYMBOL);
				}
			}

			this.state = 1905;
			this.match(MySQLParser.TABLE_SYMBOL);
			this.state = 1907;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 111, this._ctx) ) {
			case 1:
				{
				this.state = 1906;
				this.ifNotExists();
				}
				break;
			}
			this.state = 1909;
			this.tableName();
			this.state = 1932;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 116, this._ctx) ) {
			case 1:
				{
				this.state = 1914;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 112, this._ctx) ) {
				case 1:
					{
					this.state = 1910;
					this.match(MySQLParser.OPEN_PAR_SYMBOL);
					this.state = 1911;
					this.tableElementList();
					this.state = 1912;
					this.match(MySQLParser.CLOSE_PAR_SYMBOL);
					}
					break;
				}
				this.state = 1917;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 113, this._ctx) ) {
				case 1:
					{
					this.state = 1916;
					this.createTableOptions();
					}
					break;
				}
				this.state = 1920;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 114, this._ctx) ) {
				case 1:
					{
					this.state = 1919;
					this.partitionClause();
					}
					break;
				}
				this.state = 1923;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 115, this._ctx) ) {
				case 1:
					{
					this.state = 1922;
					this.duplicateAsQueryExpression();
					}
					break;
				}
				}
				break;
			case 2:
				{
				this.state = 1925;
				this.match(MySQLParser.LIKE_SYMBOL);
				this.state = 1926;
				this.tableRef();
				}
				break;
			case 3:
				{
				this.state = 1927;
				this.match(MySQLParser.OPEN_PAR_SYMBOL);
				this.state = 1928;
				this.match(MySQLParser.LIKE_SYMBOL);
				this.state = 1929;
				this.tableRef();
				this.state = 1930;
				this.match(MySQLParser.CLOSE_PAR_SYMBOL);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public tableElementList(): TableElementListContext {
		let localctx: TableElementListContext = new TableElementListContext(this, this._ctx, this.state);
		this.enterRule(localctx, 86, MySQLParser.RULE_tableElementList);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1934;
			this.tableElement();
			this.state = 1939;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===406) {
				{
				{
				this.state = 1935;
				this.match(MySQLParser.COMMA_SYMBOL);
				this.state = 1936;
				this.tableElement();
				}
				}
				this.state = 1941;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public tableElement(): TableElementContext {
		let localctx: TableElementContext = new TableElementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 88, MySQLParser.RULE_tableElement);
		try {
			this.state = 1944;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 118, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 1942;
				this.columnDefinition();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 1943;
				this.tableConstraintDef();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public duplicateAsQueryExpression(): DuplicateAsQueryExpressionContext {
		let localctx: DuplicateAsQueryExpressionContext = new DuplicateAsQueryExpressionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 90, MySQLParser.RULE_duplicateAsQueryExpression);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1947;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 119, this._ctx) ) {
			case 1:
				{
				this.state = 1946;
				_la = this._input.LA(1);
				if(!(_la===520 || _la===606)) {
				this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				}
				break;
			}
			this.state = 1950;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 120, this._ctx) ) {
			case 1:
				{
				this.state = 1949;
				this.match(MySQLParser.AS_SYMBOL);
				}
				break;
			}
			this.state = 1952;
			this.queryExpressionOrParens();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public queryExpressionOrParens(): QueryExpressionOrParensContext {
		let localctx: QueryExpressionOrParensContext = new QueryExpressionOrParensContext(this, this._ctx, this.state);
		this.enterRule(localctx, 92, MySQLParser.RULE_queryExpressionOrParens);
		try {
			this.state = 1956;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 121, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 1954;
				this.queryExpression();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 1955;
				this.queryExpressionParens();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public createRoutine(): CreateRoutineContext {
		let localctx: CreateRoutineContext = new CreateRoutineContext(this, this._ctx, this.state);
		this.enterRule(localctx, 94, MySQLParser.RULE_createRoutine);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1958;
			this.match(MySQLParser.CREATE_SYMBOL);
			this.state = 1962;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 122, this._ctx) ) {
			case 1:
				{
				this.state = 1959;
				this.createProcedure();
				}
				break;
			case 2:
				{
				this.state = 1960;
				this.createFunction();
				}
				break;
			case 3:
				{
				this.state = 1961;
				this.createUdf();
				}
				break;
			}
			this.state = 1965;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===407) {
				{
				this.state = 1964;
				this.match(MySQLParser.SEMICOLON_SYMBOL);
				}
			}

			this.state = 1967;
			this.match(MySQLParser.EOF);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public createProcedure(): CreateProcedureContext {
		let localctx: CreateProcedureContext = new CreateProcedureContext(this, this._ctx, this.state);
		this.enterRule(localctx, 96, MySQLParser.RULE_createProcedure);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1970;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===115) {
				{
				this.state = 1969;
				this.definerClause();
				}
			}

			this.state = 1972;
			this.match(MySQLParser.PROCEDURE_SYMBOL);
			this.state = 1973;
			this.procedureName();
			this.state = 1974;
			this.match(MySQLParser.OPEN_PAR_SYMBOL);
			this.state = 1983;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 126, this._ctx) ) {
			case 1:
				{
				this.state = 1975;
				this.procedureParameter();
				this.state = 1980;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la===406) {
					{
					{
					this.state = 1976;
					this.match(MySQLParser.COMMA_SYMBOL);
					this.state = 1977;
					this.procedureParameter();
					}
					}
					this.state = 1982;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;
			}
			this.state = 1985;
			this.match(MySQLParser.CLOSE_PAR_SYMBOL);
			this.state = 1989;
			this._errHandler.sync(this);
			_alt = this._interp.adaptivePredict(this._input, 127, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 1986;
					this.routineCreateOption();
					}
					}
				}
				this.state = 1991;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 127, this._ctx);
			}
			this.state = 1992;
			this.compoundStatement();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public createFunction(): CreateFunctionContext {
		let localctx: CreateFunctionContext = new CreateFunctionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 98, MySQLParser.RULE_createFunction);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1995;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===115) {
				{
				this.state = 1994;
				this.definerClause();
				}
			}

			this.state = 1997;
			this.match(MySQLParser.FUNCTION_SYMBOL);
			this.state = 1998;
			this.functionName();
			this.state = 1999;
			this.match(MySQLParser.OPEN_PAR_SYMBOL);
			this.state = 2008;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 130, this._ctx) ) {
			case 1:
				{
				this.state = 2000;
				this.functionParameter();
				this.state = 2005;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la===406) {
					{
					{
					this.state = 2001;
					this.match(MySQLParser.COMMA_SYMBOL);
					this.state = 2002;
					this.functionParameter();
					}
					}
					this.state = 2007;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;
			}
			this.state = 2010;
			this.match(MySQLParser.CLOSE_PAR_SYMBOL);
			this.state = 2011;
			this.match(MySQLParser.RETURNS_SYMBOL);
			this.state = 2012;
			this.typeWithOptCollate();
			this.state = 2016;
			this._errHandler.sync(this);
			_alt = this._interp.adaptivePredict(this._input, 131, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2013;
					this.routineCreateOption();
					}
					}
				}
				this.state = 2018;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 131, this._ctx);
			}
			this.state = 2019;
			this.compoundStatement();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public createUdf(): CreateUdfContext {
		let localctx: CreateUdfContext = new CreateUdfContext(this, this._ctx, this.state);
		this.enterRule(localctx, 100, MySQLParser.RULE_createUdf);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2022;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===61) {
				{
				this.state = 2021;
				this.match(MySQLParser.AGGREGATE_SYMBOL);
				}
			}

			this.state = 2024;
			this.match(MySQLParser.FUNCTION_SYMBOL);
			this.state = 2025;
			this.udfName();
			this.state = 2026;
			this.match(MySQLParser.RETURNS_SYMBOL);
			this.state = 2027;
			localctx._type_ = this._input.LT(1);
			_la = this._input.LA(1);
			if(!(_la===329 || _la===476 || _la===529 || _la===600)) {
			    localctx._type_ = this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			this.state = 2028;
			this.match(MySQLParser.SONAME_SYMBOL);
			this.state = 2029;
			this.textLiteral();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public routineCreateOption(): RoutineCreateOptionContext {
		let localctx: RoutineCreateOptionContext = new RoutineCreateOptionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 102, MySQLParser.RULE_routineCreateOption);
		let _la: number;
		try {
			this.state = 2036;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 11:
			case 13:
			case 26:
			case 27:
			case 567:
			case 597:
			case 632:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 2031;
				this.routineOption();
				}
				break;
			case 483:
			case 573:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 2033;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===573) {
					{
					this.state = 2032;
					this.match(MySQLParser.NOT_SYMBOL);
					}
				}

				this.state = 2035;
				this.match(MySQLParser.DETERMINISTIC_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public routineAlterOptions(): RoutineAlterOptionsContext {
		let localctx: RoutineAlterOptionsContext = new RoutineAlterOptionsContext(this, this._ctx, this.state);
		this.enterRule(localctx, 104, MySQLParser.RULE_routineAlterOptions);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2039;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 2038;
				this.routineCreateOption();
				}
				}
				this.state = 2041;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while ((((_la) & ~0x1F) === 0 && ((1 << _la) & 201336832) !== 0) || _la===483 || ((((_la - 567)) & ~0x1F) === 0 && ((1 << (_la - 567)) & 1073741889) !== 0) || _la===632);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public routineOption(): RoutineOptionContext {
		let localctx: RoutineOptionContext = new RoutineOptionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 106, MySQLParser.RULE_routineOption);
		let _la: number;
		try {
			this.state = 2060;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 11:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 2043;
				localctx._option = this.match(MySQLParser.COMMENT_SYMBOL);
				this.state = 2044;
				this.textLiteral();
				}
				break;
			case 26:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 2045;
				localctx._option = this.match(MySQLParser.LANGUAGE_SYMBOL);
				this.state = 2046;
				this.match(MySQLParser.SQL_SYMBOL);
				}
				break;
			case 27:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 2047;
				localctx._option = this.match(MySQLParser.NO_SYMBOL);
				this.state = 2048;
				this.match(MySQLParser.SQL_SYMBOL);
				}
				break;
			case 13:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 2049;
				localctx._option = this.match(MySQLParser.CONTAINS_SYMBOL);
				this.state = 2050;
				this.match(MySQLParser.SQL_SYMBOL);
				}
				break;
			case 597:
				this.enterOuterAlt(localctx, 5);
				{
				this.state = 2051;
				localctx._option = this.match(MySQLParser.READS_SYMBOL);
				this.state = 2052;
				this.match(MySQLParser.SQL_SYMBOL);
				this.state = 2053;
				this.match(MySQLParser.DATA_SYMBOL);
				}
				break;
			case 567:
				this.enterOuterAlt(localctx, 6);
				{
				this.state = 2054;
				localctx._option = this.match(MySQLParser.MODIFIES_SYMBOL);
				this.state = 2055;
				this.match(MySQLParser.SQL_SYMBOL);
				this.state = 2056;
				this.match(MySQLParser.DATA_SYMBOL);
				}
				break;
			case 632:
				this.enterOuterAlt(localctx, 7);
				{
				this.state = 2057;
				localctx._option = this.match(MySQLParser.SQL_SYMBOL);
				this.state = 2058;
				this.match(MySQLParser.SECURITY_SYMBOL);
				this.state = 2059;
				localctx._security = this._input.LT(1);
				_la = this._input.LA(1);
				if(!(_la===115 || _la===161)) {
				    localctx._security = this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public createIndex(): CreateIndexContext {
		let localctx: CreateIndexContext = new CreateIndexContext(this, this._ctx, this.state);
		this.enterRule(localctx, 108, MySQLParser.RULE_createIndex);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2063;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===578 || _la===580) {
				{
				this.state = 2062;
				this.onlineOption();
				}
			}

			this.state = 2106;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 521:
			case 660:
				{
				this.state = 2066;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===660) {
					{
					this.state = 2065;
					this.match(MySQLParser.UNIQUE_SYMBOL);
					}
				}

				this.state = 2068;
				localctx._type_ = this.match(MySQLParser.INDEX_SYMBOL);
				this.state = 2077;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 141, this._ctx) ) {
				case 1:
					{
					this.state = 2069;
					if (!(this.serverVersion >= 80014)) {
						throw this.createFailedPredicateException("this.serverVersion >= 80014");
					}
					this.state = 2070;
					this.indexName();
					this.state = 2072;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la===354 || _la===666) {
						{
						this.state = 2071;
						this.indexTypeClause();
						}
					}

					}
					break;
				case 2:
					{
					this.state = 2075;
					this._errHandler.sync(this);
					switch ( this._interp.adaptivePredict(this._input, 140, this._ctx) ) {
					case 1:
						{
						this.state = 2074;
						this.indexNameAndType();
						}
						break;
					}
					}
					break;
				}
				this.state = 2079;
				this.createIndexTarget();
				this.state = 2083;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 142, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 2080;
						this.indexOption();
						}
						}
					}
					this.state = 2085;
					this._errHandler.sync(this);
					_alt = this._interp.adaptivePredict(this._input, 142, this._ctx);
				}
				}
				break;
			case 508:
				{
				this.state = 2086;
				localctx._type_ = this.match(MySQLParser.FULLTEXT_SYMBOL);
				this.state = 2087;
				this.match(MySQLParser.INDEX_SYMBOL);
				this.state = 2088;
				this.indexName();
				this.state = 2089;
				this.createIndexTarget();
				this.state = 2093;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 143, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 2090;
						this.fulltextIndexOption();
						}
						}
					}
					this.state = 2095;
					this._errHandler.sync(this);
					_alt = this._interp.adaptivePredict(this._input, 143, this._ctx);
				}
				}
				break;
			case 624:
				{
				this.state = 2096;
				localctx._type_ = this.match(MySQLParser.SPATIAL_SYMBOL);
				this.state = 2097;
				this.match(MySQLParser.INDEX_SYMBOL);
				this.state = 2098;
				this.indexName();
				this.state = 2099;
				this.createIndexTarget();
				this.state = 2103;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 144, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 2100;
						this.spatialIndexOption();
						}
						}
					}
					this.state = 2105;
					this._errHandler.sync(this);
					_alt = this._interp.adaptivePredict(this._input, 144, this._ctx);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 2109;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===62 || _la===548) {
				{
				this.state = 2108;
				this.indexLockAndAlgorithm();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public indexNameAndType(): IndexNameAndTypeContext {
		let localctx: IndexNameAndTypeContext = new IndexNameAndTypeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 110, MySQLParser.RULE_indexNameAndType);
		try {
			this.state = 2120;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 148, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 2111;
				this.indexName();
				this.state = 2114;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 147, this._ctx) ) {
				case 1:
					{
					this.state = 2112;
					this.match(MySQLParser.USING_SYMBOL);
					this.state = 2113;
					this.indexType();
					}
					break;
				}
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 2116;
				this.indexName();
				this.state = 2117;
				this.match(MySQLParser.TYPE_SYMBOL);
				this.state = 2118;
				this.indexType();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public createIndexTarget(): CreateIndexTargetContext {
		let localctx: CreateIndexTargetContext = new CreateIndexTargetContext(this, this._ctx, this.state);
		this.enterRule(localctx, 112, MySQLParser.RULE_createIndexTarget);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2122;
			this.match(MySQLParser.ON_SYMBOL);
			this.state = 2123;
			this.tableRef();
			this.state = 2124;
			this.keyListVariants();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public createLogfileGroup(): CreateLogfileGroupContext {
		let localctx: CreateLogfileGroupContext = new CreateLogfileGroupContext(this, this._ctx, this.state);
		this.enterRule(localctx, 114, MySQLParser.RULE_createLogfileGroup);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2126;
			this.match(MySQLParser.LOGFILE_SYMBOL);
			this.state = 2127;
			this.match(MySQLParser.GROUP_SYMBOL);
			this.state = 2128;
			this.logfileGroupName();
			this.state = 2129;
			this.match(MySQLParser.ADD_SYMBOL);
			this.state = 2130;
			_la = this._input.LA(1);
			if(!(_la===273 || _la===360)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			this.state = 2131;
			this.textLiteral();
			this.state = 2133;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===11 || _la===128 || _la===164 || _la===237 || _la===238 || _la===272 || _la===328 || _la===359 || _la===370) {
				{
				this.state = 2132;
				this.logfileGroupOptions();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public logfileGroupOptions(): LogfileGroupOptionsContext {
		let localctx: LogfileGroupOptionsContext = new LogfileGroupOptionsContext(this, this._ctx, this.state);
		this.enterRule(localctx, 116, MySQLParser.RULE_logfileGroupOptions);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2135;
			this.logfileGroupOption();
			this.state = 2142;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===11 || _la===128 || _la===164 || _la===237 || _la===238 || _la===272 || _la===328 || _la===359 || _la===370 || _la===406) {
				{
				{
				this.state = 2137;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===406) {
					{
					this.state = 2136;
					this.match(MySQLParser.COMMA_SYMBOL);
					}
				}

				this.state = 2139;
				this.logfileGroupOption();
				}
				}
				this.state = 2144;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public logfileGroupOption(): LogfileGroupOptionContext {
		let localctx: LogfileGroupOptionContext = new LogfileGroupOptionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 118, MySQLParser.RULE_logfileGroupOption);
		try {
			this.state = 2151;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 164:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 2145;
				this.tsOptionInitialSize();
				}
				break;
			case 272:
			case 359:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 2146;
				this.tsOptionUndoRedoBufferSize();
				}
				break;
			case 238:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 2147;
				this.tsOptionNodegroup();
				}
				break;
			case 128:
			case 328:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 2148;
				this.tsOptionEngine();
				}
				break;
			case 237:
			case 370:
				this.enterOuterAlt(localctx, 5);
				{
				this.state = 2149;
				this.tsOptionWait();
				}
				break;
			case 11:
				this.enterOuterAlt(localctx, 6);
				{
				this.state = 2150;
				this.tsOptionComment();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public createServer(): CreateServerContext {
		let localctx: CreateServerContext = new CreateServerContext(this, this._ctx, this.state);
		this.enterRule(localctx, 120, MySQLParser.RULE_createServer);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2153;
			this.match(MySQLParser.SERVER_SYMBOL);
			this.state = 2154;
			this.serverName();
			this.state = 2155;
			this.match(MySQLParser.FOREIGN_SYMBOL);
			this.state = 2156;
			this.match(MySQLParser.DATA_SYMBOL);
			this.state = 2157;
			this.match(MySQLParser.WRAPPER_SYMBOL);
			this.state = 2158;
			this.textOrIdentifier();
			this.state = 2159;
			this.serverOptions();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public serverOptions(): ServerOptionsContext {
		let localctx: ServerOptionsContext = new ServerOptionsContext(this, this._ctx, this.state);
		this.enterRule(localctx, 122, MySQLParser.RULE_serverOptions);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2161;
			this.match(MySQLParser.OPTIONS_SYMBOL);
			this.state = 2162;
			this.match(MySQLParser.OPEN_PAR_SYMBOL);
			this.state = 2163;
			this.serverOption();
			this.state = 2168;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===406) {
				{
				{
				this.state = 2164;
				this.match(MySQLParser.COMMA_SYMBOL);
				this.state = 2165;
				this.serverOption();
				}
				}
				this.state = 2170;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 2171;
			this.match(MySQLParser.CLOSE_PAR_SYMBOL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public serverOption(): ServerOptionContext {
		let localctx: ServerOptionContext = new ServerOptionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 124, MySQLParser.RULE_serverOption);
		try {
			this.state = 2187;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 24:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 2173;
				localctx._option = this.match(MySQLParser.HOST_SYMBOL);
				this.state = 2174;
				this.textLiteral();
				}
				break;
			case 467:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 2175;
				localctx._option = this.match(MySQLParser.DATABASE_SYMBOL);
				this.state = 2176;
				this.textLiteral();
				}
				break;
			case 364:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 2177;
				localctx._option = this.match(MySQLParser.USER_SYMBOL);
				this.state = 2178;
				this.textLiteral();
				}
				break;
			case 251:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 2179;
				localctx._option = this.match(MySQLParser.PASSWORD_SYMBOL);
				this.state = 2180;
				this.textLiteral();
				}
				break;
			case 46:
				this.enterOuterAlt(localctx, 5);
				{
				this.state = 2181;
				localctx._option = this.match(MySQLParser.SOCKET_SYMBOL);
				this.state = 2182;
				this.textLiteral();
				}
				break;
			case 30:
				this.enterOuterAlt(localctx, 6);
				{
				this.state = 2183;
				localctx._option = this.match(MySQLParser.OWNER_SYMBOL);
				this.state = 2184;
				this.textLiteral();
				}
				break;
			case 33:
				this.enterOuterAlt(localctx, 7);
				{
				this.state = 2185;
				localctx._option = this.match(MySQLParser.PORT_SYMBOL);
				this.state = 2186;
				this.ulong_number();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public createTablespace(): CreateTablespaceContext {
		let localctx: CreateTablespaceContext = new CreateTablespaceContext(this, this._ctx, this.state);
		this.enterRule(localctx, 126, MySQLParser.RULE_createTablespace);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2189;
			this.match(MySQLParser.TABLESPACE_SYMBOL);
			this.state = 2190;
			this.tablespaceName();
			this.state = 2191;
			this.tsDataFileName();
			this.state = 2196;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 155, this._ctx) ) {
			case 1:
				{
				this.state = 2192;
				this.match(MySQLParser.USE_SYMBOL);
				this.state = 2193;
				this.match(MySQLParser.LOGFILE_SYMBOL);
				this.state = 2194;
				this.match(MySQLParser.GROUP_SYMBOL);
				this.state = 2195;
				this.logfileGroupRef();
				}
				break;
			}
			this.state = 2199;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 156, this._ctx) ) {
			case 1:
				{
				this.state = 2198;
				this.tablespaceOptions();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public createUndoTablespace(): CreateUndoTablespaceContext {
		let localctx: CreateUndoTablespaceContext = new CreateUndoTablespaceContext(this, this._ctx, this.state);
		this.enterRule(localctx, 128, MySQLParser.RULE_createUndoTablespace);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2201;
			this.match(MySQLParser.UNDO_SYMBOL);
			this.state = 2202;
			this.match(MySQLParser.TABLESPACE_SYMBOL);
			this.state = 2203;
			this.tablespaceName();
			this.state = 2204;
			this.match(MySQLParser.ADD_SYMBOL);
			this.state = 2205;
			this.tsDataFile();
			this.state = 2207;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===128 || _la===328) {
				{
				this.state = 2206;
				this.undoTableSpaceOptions();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public tsDataFileName(): TsDataFileNameContext {
		let localctx: TsDataFileNameContext = new TsDataFileNameContext(this, this._ctx, this.state);
		this.enterRule(localctx, 130, MySQLParser.RULE_tsDataFileName);
		try {
			this.state = 2216;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 159, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 2209;
				if (!(this.serverVersion >= 80014)) {
					throw this.createFailedPredicateException("this.serverVersion >= 80014");
				}
				this.state = 2212;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 158, this._ctx) ) {
				case 1:
					{
					this.state = 2210;
					this.match(MySQLParser.ADD_SYMBOL);
					this.state = 2211;
					this.tsDataFile();
					}
					break;
				}
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 2214;
				this.match(MySQLParser.ADD_SYMBOL);
				this.state = 2215;
				this.tsDataFile();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public tsDataFile(): TsDataFileContext {
		let localctx: TsDataFileContext = new TsDataFileContext(this, this._ctx, this.state);
		this.enterRule(localctx, 132, MySQLParser.RULE_tsDataFile);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2218;
			this.match(MySQLParser.DATAFILE_SYMBOL);
			this.state = 2219;
			this.textLiteral();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public tablespaceOptions(): TablespaceOptionsContext {
		let localctx: TablespaceOptionsContext = new TablespaceOptionsContext(this, this._ctx, this.state);
		this.enterRule(localctx, 134, MySQLParser.RULE_tablespaceOptions);
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2221;
			this.tablespaceOption();
			this.state = 2228;
			this._errHandler.sync(this);
			_alt = this._interp.adaptivePredict(this._input, 161, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2223;
					this._errHandler.sync(this);
					switch ( this._interp.adaptivePredict(this._input, 160, this._ctx) ) {
					case 1:
						{
						this.state = 2222;
						this.match(MySQLParser.COMMA_SYMBOL);
						}
						break;
					}
					this.state = 2225;
					this.tablespaceOption();
					}
					}
				}
				this.state = 2230;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 161, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public tablespaceOption(): TablespaceOptionContext {
		let localctx: TablespaceOptionContext = new TablespaceOptionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 136, MySQLParser.RULE_tablespaceOption);
		try {
			this.state = 2243;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 162, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 2231;
				this.tsOptionInitialSize();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 2232;
				this.tsOptionAutoextendSize();
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 2233;
				this.tsOptionMaxSize();
				}
				break;
			case 4:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 2234;
				this.tsOptionExtentSize();
				}
				break;
			case 5:
				this.enterOuterAlt(localctx, 5);
				{
				this.state = 2235;
				this.tsOptionNodegroup();
				}
				break;
			case 6:
				this.enterOuterAlt(localctx, 6);
				{
				this.state = 2236;
				this.tsOptionEngine();
				}
				break;
			case 7:
				this.enterOuterAlt(localctx, 7);
				{
				this.state = 2237;
				this.tsOptionWait();
				}
				break;
			case 8:
				this.enterOuterAlt(localctx, 8);
				{
				this.state = 2238;
				this.tsOptionComment();
				}
				break;
			case 9:
				this.enterOuterAlt(localctx, 9);
				{
				this.state = 2239;
				if (!(this.serverVersion >= 50707)) {
					throw this.createFailedPredicateException("this.serverVersion >= 50707");
				}
				this.state = 2240;
				this.tsOptionFileblockSize();
				}
				break;
			case 10:
				this.enterOuterAlt(localctx, 10);
				{
				this.state = 2241;
				if (!(this.serverVersion >= 80014)) {
					throw this.createFailedPredicateException("this.serverVersion >= 80014");
				}
				this.state = 2242;
				this.tsOptionEncryption();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public tsOptionInitialSize(): TsOptionInitialSizeContext {
		let localctx: TsOptionInitialSizeContext = new TsOptionInitialSizeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 138, MySQLParser.RULE_tsOptionInitialSize);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2245;
			this.match(MySQLParser.INITIAL_SIZE_SYMBOL);
			this.state = 2247;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 163, this._ctx) ) {
			case 1:
				{
				this.state = 2246;
				this.match(MySQLParser.EQUAL_OPERATOR);
				}
				break;
			}
			this.state = 2249;
			this.sizeNumber();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public tsOptionUndoRedoBufferSize(): TsOptionUndoRedoBufferSizeContext {
		let localctx: TsOptionUndoRedoBufferSizeContext = new TsOptionUndoRedoBufferSizeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 140, MySQLParser.RULE_tsOptionUndoRedoBufferSize);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2251;
			_la = this._input.LA(1);
			if(!(_la===272 || _la===359)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			this.state = 2253;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 164, this._ctx) ) {
			case 1:
				{
				this.state = 2252;
				this.match(MySQLParser.EQUAL_OPERATOR);
				}
				break;
			}
			this.state = 2255;
			this.sizeNumber();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public tsOptionAutoextendSize(): TsOptionAutoextendSizeContext {
		let localctx: TsOptionAutoextendSizeContext = new TsOptionAutoextendSizeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 142, MySQLParser.RULE_tsOptionAutoextendSize);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2257;
			this.match(MySQLParser.AUTOEXTEND_SIZE_SYMBOL);
			this.state = 2259;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 165, this._ctx) ) {
			case 1:
				{
				this.state = 2258;
				this.match(MySQLParser.EQUAL_OPERATOR);
				}
				break;
			}
			this.state = 2261;
			this.sizeNumber();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public tsOptionMaxSize(): TsOptionMaxSizeContext {
		let localctx: TsOptionMaxSizeContext = new TsOptionMaxSizeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 144, MySQLParser.RULE_tsOptionMaxSize);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2263;
			this.match(MySQLParser.MAX_SIZE_SYMBOL);
			this.state = 2265;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 166, this._ctx) ) {
			case 1:
				{
				this.state = 2264;
				this.match(MySQLParser.EQUAL_OPERATOR);
				}
				break;
			}
			this.state = 2267;
			this.sizeNumber();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public tsOptionExtentSize(): TsOptionExtentSizeContext {
		let localctx: TsOptionExtentSizeContext = new TsOptionExtentSizeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 146, MySQLParser.RULE_tsOptionExtentSize);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2269;
			this.match(MySQLParser.EXTENT_SIZE_SYMBOL);
			this.state = 2271;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 167, this._ctx) ) {
			case 1:
				{
				this.state = 2270;
				this.match(MySQLParser.EQUAL_OPERATOR);
				}
				break;
			}
			this.state = 2273;
			this.sizeNumber();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public tsOptionNodegroup(): TsOptionNodegroupContext {
		let localctx: TsOptionNodegroupContext = new TsOptionNodegroupContext(this, this._ctx, this.state);
		this.enterRule(localctx, 148, MySQLParser.RULE_tsOptionNodegroup);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2275;
			this.match(MySQLParser.NODEGROUP_SYMBOL);
			this.state = 2277;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===383) {
				{
				this.state = 2276;
				this.match(MySQLParser.EQUAL_OPERATOR);
				}
			}

			this.state = 2279;
			this.real_ulong_number();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public tsOptionEngine(): TsOptionEngineContext {
		let localctx: TsOptionEngineContext = new TsOptionEngineContext(this, this._ctx, this.state);
		this.enterRule(localctx, 150, MySQLParser.RULE_tsOptionEngine);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2282;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===328) {
				{
				this.state = 2281;
				this.match(MySQLParser.STORAGE_SYMBOL);
				}
			}

			this.state = 2284;
			this.match(MySQLParser.ENGINE_SYMBOL);
			this.state = 2286;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 170, this._ctx) ) {
			case 1:
				{
				this.state = 2285;
				this.match(MySQLParser.EQUAL_OPERATOR);
				}
				break;
			}
			this.state = 2288;
			this.engineRef();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public tsOptionWait(): TsOptionWaitContext {
		let localctx: TsOptionWaitContext = new TsOptionWaitContext(this, this._ctx, this.state);
		this.enterRule(localctx, 152, MySQLParser.RULE_tsOptionWait);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2290;
			_la = this._input.LA(1);
			if(!(_la===237 || _la===370)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public tsOptionComment(): TsOptionCommentContext {
		let localctx: TsOptionCommentContext = new TsOptionCommentContext(this, this._ctx, this.state);
		this.enterRule(localctx, 154, MySQLParser.RULE_tsOptionComment);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2292;
			this.match(MySQLParser.COMMENT_SYMBOL);
			this.state = 2294;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 171, this._ctx) ) {
			case 1:
				{
				this.state = 2293;
				this.match(MySQLParser.EQUAL_OPERATOR);
				}
				break;
			}
			this.state = 2296;
			this.textLiteral();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public tsOptionFileblockSize(): TsOptionFileblockSizeContext {
		let localctx: TsOptionFileblockSizeContext = new TsOptionFileblockSizeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 156, MySQLParser.RULE_tsOptionFileblockSize);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2298;
			this.match(MySQLParser.FILE_BLOCK_SIZE_SYMBOL);
			this.state = 2300;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 172, this._ctx) ) {
			case 1:
				{
				this.state = 2299;
				this.match(MySQLParser.EQUAL_OPERATOR);
				}
				break;
			}
			this.state = 2302;
			this.sizeNumber();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public tsOptionEncryption(): TsOptionEncryptionContext {
		let localctx: TsOptionEncryptionContext = new TsOptionEncryptionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 158, MySQLParser.RULE_tsOptionEncryption);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2304;
			this.match(MySQLParser.ENCRYPTION_SYMBOL);
			this.state = 2306;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 173, this._ctx) ) {
			case 1:
				{
				this.state = 2305;
				this.match(MySQLParser.EQUAL_OPERATOR);
				}
				break;
			}
			this.state = 2308;
			this.textStringLiteral();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public createView(): CreateViewContext {
		let localctx: CreateViewContext = new CreateViewContext(this, this._ctx, this.state);
		this.enterRule(localctx, 160, MySQLParser.RULE_createView);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2311;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===62 || _la===587) {
				{
				this.state = 2310;
				this.viewReplaceOrAlgorithm();
				}
			}

			this.state = 2314;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===115) {
				{
				this.state = 2313;
				this.definerClause();
				}
			}

			this.state = 2317;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===632) {
				{
				this.state = 2316;
				this.viewSuid();
				}
			}

			this.state = 2319;
			this.match(MySQLParser.VIEW_SYMBOL);
			this.state = 2320;
			this.viewName();
			this.state = 2321;
			this.viewTail();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public viewReplaceOrAlgorithm(): ViewReplaceOrAlgorithmContext {
		let localctx: ViewReplaceOrAlgorithmContext = new ViewReplaceOrAlgorithmContext(this, this._ctx, this.state);
		this.enterRule(localctx, 162, MySQLParser.RULE_viewReplaceOrAlgorithm);
		let _la: number;
		try {
			this.state = 2329;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 587:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 2323;
				this.match(MySQLParser.OR_SYMBOL);
				this.state = 2324;
				this.match(MySQLParser.REPLACE_SYMBOL);
				this.state = 2326;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===62) {
					{
					this.state = 2325;
					this.viewAlgorithm();
					}
				}

				}
				break;
			case 62:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 2328;
				this.viewAlgorithm();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public viewAlgorithm(): ViewAlgorithmContext {
		let localctx: ViewAlgorithmContext = new ViewAlgorithmContext(this, this._ctx, this.state);
		this.enterRule(localctx, 164, MySQLParser.RULE_viewAlgorithm);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2331;
			this.match(MySQLParser.ALGORITHM_SYMBOL);
			this.state = 2332;
			this.match(MySQLParser.EQUAL_OPERATOR);
			this.state = 2333;
			localctx._algorithm = this._input.LT(1);
			_la = this._input.LA(1);
			if(!(_la===215 || _la===344 || _la===358)) {
			    localctx._algorithm = this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public viewSuid(): ViewSuidContext {
		let localctx: ViewSuidContext = new ViewSuidContext(this, this._ctx, this.state);
		this.enterRule(localctx, 166, MySQLParser.RULE_viewSuid);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2335;
			this.match(MySQLParser.SQL_SYMBOL);
			this.state = 2336;
			this.match(MySQLParser.SECURITY_SYMBOL);
			this.state = 2337;
			_la = this._input.LA(1);
			if(!(_la===115 || _la===161)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public createTrigger(): CreateTriggerContext {
		let localctx: CreateTriggerContext = new CreateTriggerContext(this, this._ctx, this.state);
		this.enterRule(localctx, 168, MySQLParser.RULE_createTrigger);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2340;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===115) {
				{
				this.state = 2339;
				this.definerClause();
				}
			}

			this.state = 2342;
			this.match(MySQLParser.TRIGGER_SYMBOL);
			this.state = 2343;
			this.triggerName();
			this.state = 2344;
			localctx._timing = this._input.LT(1);
			_la = this._input.LA(1);
			if(!(_la===59 || _la===434)) {
			    localctx._timing = this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			this.state = 2345;
			localctx._event = this._input.LT(1);
			_la = this._input.LA(1);
			if(!(_la===480 || _la===526 || _la===663)) {
			    localctx._event = this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			this.state = 2346;
			this.match(MySQLParser.ON_SYMBOL);
			this.state = 2347;
			this.tableRef();
			this.state = 2348;
			this.match(MySQLParser.FOR_SYMBOL);
			this.state = 2349;
			this.match(MySQLParser.EACH_SYMBOL);
			this.state = 2350;
			this.match(MySQLParser.ROW_SYMBOL);
			this.state = 2352;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 180, this._ctx) ) {
			case 1:
				{
				this.state = 2351;
				this.triggerFollowsPrecedesClause();
				}
				break;
			}
			this.state = 2354;
			this.compoundStatement();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public triggerFollowsPrecedesClause(): TriggerFollowsPrecedesClauseContext {
		let localctx: TriggerFollowsPrecedesClauseContext = new TriggerFollowsPrecedesClauseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 170, MySQLParser.RULE_triggerFollowsPrecedesClause);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2356;
			if (!(this.serverVersion >= 50700)) {
				throw this.createFailedPredicateException("this.serverVersion >= 50700");
			}
			this.state = 2357;
			localctx._ordering = this._input.LT(1);
			_la = this._input.LA(1);
			if(!(_la===19 || _la===34)) {
			    localctx._ordering = this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			this.state = 2358;
			this.textOrIdentifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public createEvent(): CreateEventContext {
		let localctx: CreateEventContext = new CreateEventContext(this, this._ctx, this.state);
		this.enterRule(localctx, 172, MySQLParser.RULE_createEvent);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2361;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===115) {
				{
				this.state = 2360;
				this.definerClause();
				}
			}

			this.state = 2363;
			this.match(MySQLParser.EVENT_SYMBOL);
			this.state = 2365;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 182, this._ctx) ) {
			case 1:
				{
				this.state = 2364;
				this.ifNotExists();
				}
				break;
			}
			this.state = 2367;
			this.eventName();
			this.state = 2368;
			this.match(MySQLParser.ON_SYMBOL);
			this.state = 2369;
			this.match(MySQLParser.SCHEDULE_SYMBOL);
			this.state = 2370;
			this.schedule();
			this.state = 2377;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===579) {
				{
				this.state = 2371;
				this.match(MySQLParser.ON_SYMBOL);
				this.state = 2372;
				this.match(MySQLParser.COMPLETION_SYMBOL);
				this.state = 2374;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===573) {
					{
					this.state = 2373;
					this.match(MySQLParser.NOT_SYMBOL);
					}
				}

				this.state = 2376;
				this.match(MySQLParser.PRESERVE_SYMBOL);
				}
			}

			this.state = 2385;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 143:
				{
				this.state = 2379;
				this.match(MySQLParser.ENABLE_SYMBOL);
				}
				break;
			case 120:
				{
				this.state = 2380;
				this.match(MySQLParser.DISABLE_SYMBOL);
				this.state = 2383;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===579) {
					{
					this.state = 2381;
					this.match(MySQLParser.ON_SYMBOL);
					this.state = 2382;
					this.match(MySQLParser.SLAVE_SYMBOL);
					}
				}

				}
				break;
			case 11:
			case 15:
				break;
			default:
				break;
			}
			this.state = 2389;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===11) {
				{
				this.state = 2387;
				this.match(MySQLParser.COMMENT_SYMBOL);
				this.state = 2388;
				this.textLiteral();
				}
			}

			this.state = 2391;
			this.match(MySQLParser.DO_SYMBOL);
			this.state = 2392;
			this.compoundStatement();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public createRole(): CreateRoleContext {
		let localctx: CreateRoleContext = new CreateRoleContext(this, this._ctx, this.state);
		this.enterRule(localctx, 174, MySQLParser.RULE_createRole);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2394;
			this.match(MySQLParser.ROLE_SYMBOL);
			this.state = 2396;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 188, this._ctx) ) {
			case 1:
				{
				this.state = 2395;
				this.ifNotExists();
				}
				break;
			}
			this.state = 2398;
			this.roleList();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public createSpatialReference(): CreateSpatialReferenceContext {
		let localctx: CreateSpatialReferenceContext = new CreateSpatialReferenceContext(this, this._ctx, this.state);
		this.enterRule(localctx, 176, MySQLParser.RULE_createSpatialReference);
		let _la: number;
		try {
			this.state = 2425;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 587:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 2400;
				this.match(MySQLParser.OR_SYMBOL);
				this.state = 2401;
				this.match(MySQLParser.REPLACE_SYMBOL);
				this.state = 2402;
				this.match(MySQLParser.SPATIAL_SYMBOL);
				this.state = 2403;
				this.match(MySQLParser.REFERENCE_SYMBOL);
				this.state = 2404;
				this.match(MySQLParser.SYSTEM_SYMBOL);
				this.state = 2405;
				this.real_ulonglong_number();
				this.state = 2409;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la===229 || ((((_la - 745)) & ~0x1F) === 0 && ((1 << (_la - 745)) & 7) !== 0)) {
					{
					{
					this.state = 2406;
					this.srsAttribute();
					}
					}
					this.state = 2411;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;
			case 624:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 2412;
				this.match(MySQLParser.SPATIAL_SYMBOL);
				this.state = 2413;
				this.match(MySQLParser.REFERENCE_SYMBOL);
				this.state = 2414;
				this.match(MySQLParser.SYSTEM_SYMBOL);
				this.state = 2416;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 190, this._ctx) ) {
				case 1:
					{
					this.state = 2415;
					this.ifNotExists();
					}
					break;
				}
				this.state = 2418;
				this.real_ulonglong_number();
				this.state = 2422;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la===229 || ((((_la - 745)) & ~0x1F) === 0 && ((1 << (_la - 745)) & 7) !== 0)) {
					{
					{
					this.state = 2419;
					this.srsAttribute();
					}
					}
					this.state = 2424;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public srsAttribute(): SrsAttributeContext {
		let localctx: SrsAttributeContext = new SrsAttributeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 178, MySQLParser.RULE_srsAttribute);
		try {
			this.state = 2442;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 229:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 2427;
				this.match(MySQLParser.NAME_SYMBOL);
				this.state = 2428;
				this.match(MySQLParser.TEXT_SYMBOL);
				this.state = 2429;
				this.textStringNoLinebreak();
				}
				break;
			case 745:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 2430;
				this.match(MySQLParser.DEFINITION_SYMBOL);
				this.state = 2431;
				this.match(MySQLParser.TEXT_SYMBOL);
				this.state = 2432;
				this.textStringNoLinebreak();
				}
				break;
			case 747:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 2433;
				this.match(MySQLParser.ORGANIZATION_SYMBOL);
				this.state = 2434;
				this.textStringNoLinebreak();
				this.state = 2435;
				this.match(MySQLParser.IDENTIFIED_SYMBOL);
				this.state = 2436;
				this.match(MySQLParser.BY_SYMBOL);
				this.state = 2437;
				this.real_ulonglong_number();
				}
				break;
			case 746:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 2439;
				this.match(MySQLParser.DESCRIPTION_SYMBOL);
				this.state = 2440;
				this.match(MySQLParser.TEXT_SYMBOL);
				this.state = 2441;
				this.textStringNoLinebreak();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public dropStatement(): DropStatementContext {
		let localctx: DropStatementContext = new DropStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 180, MySQLParser.RULE_dropStatement);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2444;
			this.match(MySQLParser.DROP_SYMBOL);
			this.state = 2462;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 194, this._ctx) ) {
			case 1:
				{
				this.state = 2445;
				this.dropDatabase();
				}
				break;
			case 2:
				{
				this.state = 2446;
				this.dropEvent();
				}
				break;
			case 3:
				{
				this.state = 2447;
				this.dropFunction();
				}
				break;
			case 4:
				{
				this.state = 2448;
				this.dropProcedure();
				}
				break;
			case 5:
				{
				this.state = 2449;
				this.dropIndex();
				}
				break;
			case 6:
				{
				this.state = 2450;
				this.dropLogfileGroup();
				}
				break;
			case 7:
				{
				this.state = 2451;
				this.dropServer();
				}
				break;
			case 8:
				{
				this.state = 2452;
				this.dropTable();
				}
				break;
			case 9:
				{
				this.state = 2453;
				this.dropTableSpace();
				}
				break;
			case 10:
				{
				this.state = 2454;
				this.dropTrigger();
				}
				break;
			case 11:
				{
				this.state = 2455;
				this.dropView();
				}
				break;
			case 12:
				{
				this.state = 2456;
				if (!(this.serverVersion >= 80000)) {
					throw this.createFailedPredicateException("this.serverVersion >= 80000");
				}
				this.state = 2457;
				this.dropRole();
				}
				break;
			case 13:
				{
				this.state = 2458;
				if (!(this.serverVersion >= 80011)) {
					throw this.createFailedPredicateException("this.serverVersion >= 80011");
				}
				this.state = 2459;
				this.dropSpatialReference();
				}
				break;
			case 14:
				{
				this.state = 2460;
				if (!(this.serverVersion >= 80014)) {
					throw this.createFailedPredicateException("this.serverVersion >= 80014");
				}
				this.state = 2461;
				this.dropUndoTablespace();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public dropDatabase(): DropDatabaseContext {
		let localctx: DropDatabaseContext = new DropDatabaseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 182, MySQLParser.RULE_dropDatabase);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2464;
			this.match(MySQLParser.DATABASE_SYMBOL);
			this.state = 2466;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 195, this._ctx) ) {
			case 1:
				{
				this.state = 2465;
				this.ifExists();
				}
				break;
			}
			this.state = 2468;
			this.schemaRef();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public dropEvent(): DropEventContext {
		let localctx: DropEventContext = new DropEventContext(this, this._ctx, this.state);
		this.enterRule(localctx, 184, MySQLParser.RULE_dropEvent);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2470;
			this.match(MySQLParser.EVENT_SYMBOL);
			this.state = 2472;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 196, this._ctx) ) {
			case 1:
				{
				this.state = 2471;
				this.ifExists();
				}
				break;
			}
			this.state = 2474;
			this.eventRef();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public dropFunction(): DropFunctionContext {
		let localctx: DropFunctionContext = new DropFunctionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 186, MySQLParser.RULE_dropFunction);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2476;
			this.match(MySQLParser.FUNCTION_SYMBOL);
			this.state = 2478;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 197, this._ctx) ) {
			case 1:
				{
				this.state = 2477;
				this.ifExists();
				}
				break;
			}
			this.state = 2480;
			this.functionRef();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public dropProcedure(): DropProcedureContext {
		let localctx: DropProcedureContext = new DropProcedureContext(this, this._ctx, this.state);
		this.enterRule(localctx, 188, MySQLParser.RULE_dropProcedure);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2482;
			this.match(MySQLParser.PROCEDURE_SYMBOL);
			this.state = 2484;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 198, this._ctx) ) {
			case 1:
				{
				this.state = 2483;
				this.ifExists();
				}
				break;
			}
			this.state = 2486;
			this.procedureRef();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public dropIndex(): DropIndexContext {
		let localctx: DropIndexContext = new DropIndexContext(this, this._ctx, this.state);
		this.enterRule(localctx, 190, MySQLParser.RULE_dropIndex);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2489;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===578 || _la===580) {
				{
				this.state = 2488;
				this.onlineOption();
				}
			}

			this.state = 2491;
			localctx._type_ = this.match(MySQLParser.INDEX_SYMBOL);
			this.state = 2492;
			this.indexRef();
			this.state = 2493;
			this.match(MySQLParser.ON_SYMBOL);
			this.state = 2494;
			this.tableRef();
			this.state = 2496;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===62 || _la===548) {
				{
				this.state = 2495;
				this.indexLockAndAlgorithm();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public dropLogfileGroup(): DropLogfileGroupContext {
		let localctx: DropLogfileGroupContext = new DropLogfileGroupContext(this, this._ctx, this.state);
		this.enterRule(localctx, 192, MySQLParser.RULE_dropLogfileGroup);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2498;
			this.match(MySQLParser.LOGFILE_SYMBOL);
			this.state = 2499;
			this.match(MySQLParser.GROUP_SYMBOL);
			this.state = 2500;
			this.logfileGroupRef();
			this.state = 2511;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===128 || _la===237 || _la===328 || _la===370) {
				{
				this.state = 2501;
				this.dropLogfileGroupOption();
				this.state = 2508;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la===128 || _la===237 || _la===328 || _la===370 || _la===406) {
					{
					{
					this.state = 2503;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la===406) {
						{
						this.state = 2502;
						this.match(MySQLParser.COMMA_SYMBOL);
						}
					}

					this.state = 2505;
					this.dropLogfileGroupOption();
					}
					}
					this.state = 2510;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public dropLogfileGroupOption(): DropLogfileGroupOptionContext {
		let localctx: DropLogfileGroupOptionContext = new DropLogfileGroupOptionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 194, MySQLParser.RULE_dropLogfileGroupOption);
		try {
			this.state = 2515;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 237:
			case 370:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 2513;
				this.tsOptionWait();
				}
				break;
			case 128:
			case 328:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 2514;
				this.tsOptionEngine();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public dropServer(): DropServerContext {
		let localctx: DropServerContext = new DropServerContext(this, this._ctx, this.state);
		this.enterRule(localctx, 196, MySQLParser.RULE_dropServer);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2517;
			this.match(MySQLParser.SERVER_SYMBOL);
			this.state = 2519;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 205, this._ctx) ) {
			case 1:
				{
				this.state = 2518;
				this.ifExists();
				}
				break;
			}
			this.state = 2521;
			this.serverRef();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public dropTable(): DropTableContext {
		let localctx: DropTableContext = new DropTableContext(this, this._ctx, this.state);
		this.enterRule(localctx, 198, MySQLParser.RULE_dropTable);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2524;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===343) {
				{
				this.state = 2523;
				this.match(MySQLParser.TEMPORARY_SYMBOL);
				}
			}

			this.state = 2526;
			localctx._type_ = this._input.LT(1);
			_la = this._input.LA(1);
			if(!(_la===340 || _la===647)) {
			    localctx._type_ = this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			this.state = 2528;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 207, this._ctx) ) {
			case 1:
				{
				this.state = 2527;
				this.ifExists();
				}
				break;
			}
			this.state = 2530;
			this.tableRefList();
			this.state = 2532;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===446 || _la===609) {
				{
				this.state = 2531;
				_la = this._input.LA(1);
				if(!(_la===446 || _la===609)) {
				this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public dropTableSpace(): DropTableSpaceContext {
		let localctx: DropTableSpaceContext = new DropTableSpaceContext(this, this._ctx, this.state);
		this.enterRule(localctx, 200, MySQLParser.RULE_dropTableSpace);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2534;
			this.match(MySQLParser.TABLESPACE_SYMBOL);
			this.state = 2535;
			this.tablespaceRef();
			this.state = 2546;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===128 || _la===237 || _la===328 || _la===370) {
				{
				this.state = 2536;
				this.dropLogfileGroupOption();
				this.state = 2543;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la===128 || _la===237 || _la===328 || _la===370 || _la===406) {
					{
					{
					this.state = 2538;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la===406) {
						{
						this.state = 2537;
						this.match(MySQLParser.COMMA_SYMBOL);
						}
					}

					this.state = 2540;
					this.dropLogfileGroupOption();
					}
					}
					this.state = 2545;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public dropTrigger(): DropTriggerContext {
		let localctx: DropTriggerContext = new DropTriggerContext(this, this._ctx, this.state);
		this.enterRule(localctx, 202, MySQLParser.RULE_dropTrigger);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2548;
			this.match(MySQLParser.TRIGGER_SYMBOL);
			this.state = 2550;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 212, this._ctx) ) {
			case 1:
				{
				this.state = 2549;
				this.ifExists();
				}
				break;
			}
			this.state = 2552;
			this.triggerRef();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public dropView(): DropViewContext {
		let localctx: DropViewContext = new DropViewContext(this, this._ctx, this.state);
		this.enterRule(localctx, 204, MySQLParser.RULE_dropView);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2554;
			this.match(MySQLParser.VIEW_SYMBOL);
			this.state = 2556;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 213, this._ctx) ) {
			case 1:
				{
				this.state = 2555;
				this.ifExists();
				}
				break;
			}
			this.state = 2558;
			this.viewRefList();
			this.state = 2560;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===446 || _la===609) {
				{
				this.state = 2559;
				_la = this._input.LA(1);
				if(!(_la===446 || _la===609)) {
				this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public dropRole(): DropRoleContext {
		let localctx: DropRoleContext = new DropRoleContext(this, this._ctx, this.state);
		this.enterRule(localctx, 206, MySQLParser.RULE_dropRole);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2562;
			this.match(MySQLParser.ROLE_SYMBOL);
			this.state = 2564;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 215, this._ctx) ) {
			case 1:
				{
				this.state = 2563;
				this.ifExists();
				}
				break;
			}
			this.state = 2566;
			this.roleList();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public dropSpatialReference(): DropSpatialReferenceContext {
		let localctx: DropSpatialReferenceContext = new DropSpatialReferenceContext(this, this._ctx, this.state);
		this.enterRule(localctx, 208, MySQLParser.RULE_dropSpatialReference);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2568;
			this.match(MySQLParser.SPATIAL_SYMBOL);
			this.state = 2569;
			this.match(MySQLParser.REFERENCE_SYMBOL);
			this.state = 2570;
			this.match(MySQLParser.SYSTEM_SYMBOL);
			this.state = 2572;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 216, this._ctx) ) {
			case 1:
				{
				this.state = 2571;
				this.ifExists();
				}
				break;
			}
			this.state = 2574;
			this.real_ulonglong_number();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public dropUndoTablespace(): DropUndoTablespaceContext {
		let localctx: DropUndoTablespaceContext = new DropUndoTablespaceContext(this, this._ctx, this.state);
		this.enterRule(localctx, 210, MySQLParser.RULE_dropUndoTablespace);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2576;
			this.match(MySQLParser.UNDO_SYMBOL);
			this.state = 2577;
			this.match(MySQLParser.TABLESPACE_SYMBOL);
			this.state = 2578;
			this.tablespaceRef();
			this.state = 2580;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===128 || _la===328) {
				{
				this.state = 2579;
				this.undoTableSpaceOptions();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public renameTableStatement(): RenameTableStatementContext {
		let localctx: RenameTableStatementContext = new RenameTableStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 212, MySQLParser.RULE_renameTableStatement);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2582;
			this.match(MySQLParser.RENAME_SYMBOL);
			this.state = 2583;
			_la = this._input.LA(1);
			if(!(_la===340 || _la===647)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			this.state = 2584;
			this.renamePair();
			this.state = 2589;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===406) {
				{
				{
				this.state = 2585;
				this.match(MySQLParser.COMMA_SYMBOL);
				this.state = 2586;
				this.renamePair();
				}
				}
				this.state = 2591;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public renamePair(): RenamePairContext {
		let localctx: RenamePairContext = new RenamePairContext(this, this._ctx, this.state);
		this.enterRule(localctx, 214, MySQLParser.RULE_renamePair);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2592;
			this.tableRef();
			this.state = 2593;
			this.match(MySQLParser.TO_SYMBOL);
			this.state = 2594;
			this.tableName();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public truncateTableStatement(): TruncateTableStatementContext {
		let localctx: TruncateTableStatementContext = new TruncateTableStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 216, MySQLParser.RULE_truncateTableStatement);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2596;
			this.match(MySQLParser.TRUNCATE_SYMBOL);
			this.state = 2598;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 219, this._ctx) ) {
			case 1:
				{
				this.state = 2597;
				this.match(MySQLParser.TABLE_SYMBOL);
				}
				break;
			}
			this.state = 2600;
			this.tableRef();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public importStatement(): ImportStatementContext {
		let localctx: ImportStatementContext = new ImportStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 218, MySQLParser.RULE_importStatement);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2602;
			this.match(MySQLParser.IMPORT_SYMBOL);
			this.state = 2603;
			this.match(MySQLParser.TABLE_SYMBOL);
			this.state = 2604;
			this.match(MySQLParser.FROM_SYMBOL);
			this.state = 2605;
			this.textStringLiteralList();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public callStatement(): CallStatementContext {
		let localctx: CallStatementContext = new CallStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 220, MySQLParser.RULE_callStatement);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2607;
			this.match(MySQLParser.CALL_SYMBOL);
			this.state = 2608;
			this.procedureRef();
			this.state = 2614;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===409) {
				{
				this.state = 2609;
				this.match(MySQLParser.OPEN_PAR_SYMBOL);
				this.state = 2611;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 220, this._ctx) ) {
				case 1:
					{
					this.state = 2610;
					this.exprList();
					}
					break;
				}
				this.state = 2613;
				this.match(MySQLParser.CLOSE_PAR_SYMBOL);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public deleteStatement(): DeleteStatementContext {
		let localctx: DeleteStatementContext = new DeleteStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 222, MySQLParser.RULE_deleteStatement);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2618;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 222, this._ctx) ) {
			case 1:
				{
				this.state = 2616;
				if (!(this.serverVersion >= 80000)) {
					throw this.createFailedPredicateException("this.serverVersion >= 80000");
				}
				this.state = 2617;
				this.withClause();
				}
				break;
			}
			this.state = 2620;
			this.match(MySQLParser.DELETE_SYMBOL);
			this.state = 2624;
			this._errHandler.sync(this);
			_alt = this._interp.adaptivePredict(this._input, 223, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2621;
					this.deleteStatementOption();
					}
					}
				}
				this.state = 2626;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 223, this._ctx);
			}
			this.state = 2659;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 232, this._ctx) ) {
			case 1:
				{
				this.state = 2627;
				this.match(MySQLParser.FROM_SYMBOL);
				this.state = 2651;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 230, this._ctx) ) {
				case 1:
					{
					this.state = 2628;
					this.tableAliasRefList();
					this.state = 2629;
					this.match(MySQLParser.USING_SYMBOL);
					this.state = 2630;
					this.tableReferenceList();
					this.state = 2632;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la===680) {
						{
						this.state = 2631;
						this.whereClause();
						}
					}

					}
					break;
				case 2:
					{
					this.state = 2634;
					this.tableRef();
					this.state = 2637;
					this._errHandler.sync(this);
					switch ( this._interp.adaptivePredict(this._input, 225, this._ctx) ) {
					case 1:
						{
						this.state = 2635;
						if (!(this.serverVersion >= 80017)) {
							throw this.createFailedPredicateException("this.serverVersion >= 80017");
						}
						this.state = 2636;
						this.tableAlias();
						}
						break;
					}
					this.state = 2640;
					this._errHandler.sync(this);
					switch ( this._interp.adaptivePredict(this._input, 226, this._ctx) ) {
					case 1:
						{
						this.state = 2639;
						this.partitionDelete();
						}
						break;
					}
					this.state = 2643;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la===680) {
						{
						this.state = 2642;
						this.whereClause();
						}
					}

					this.state = 2646;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la===586) {
						{
						this.state = 2645;
						this.orderClause();
						}
					}

					this.state = 2649;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la===543) {
						{
						this.state = 2648;
						this.simpleLimitClause();
						}
					}

					}
					break;
				}
				}
				break;
			case 2:
				{
				this.state = 2653;
				this.tableAliasRefList();
				this.state = 2654;
				this.match(MySQLParser.FROM_SYMBOL);
				this.state = 2655;
				this.tableReferenceList();
				this.state = 2657;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===680) {
					{
					this.state = 2656;
					this.whereClause();
					}
				}

				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public partitionDelete(): PartitionDeleteContext {
		let localctx: PartitionDeleteContext = new PartitionDeleteContext(this, this._ctx, this.state);
		this.enterRule(localctx, 224, MySQLParser.RULE_partitionDelete);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2661;
			if (!(this.serverVersion >= 50602)) {
				throw this.createFailedPredicateException("this.serverVersion >= 50602");
			}
			this.state = 2662;
			this.match(MySQLParser.PARTITION_SYMBOL);
			this.state = 2663;
			this.match(MySQLParser.OPEN_PAR_SYMBOL);
			this.state = 2664;
			this.identifierList();
			this.state = 2665;
			this.match(MySQLParser.CLOSE_PAR_SYMBOL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public deleteStatementOption(): DeleteStatementOptionContext {
		let localctx: DeleteStatementOptionContext = new DeleteStatementOptionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 226, MySQLParser.RULE_deleteStatementOption);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2667;
			_la = this._input.LA(1);
			if(!(_la===268 || _la===520 || _la===554)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public doStatement(): DoStatementContext {
		let localctx: DoStatementContext = new DoStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 228, MySQLParser.RULE_doStatement);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2669;
			this.match(MySQLParser.DO_SYMBOL);
			this.state = 2674;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 233, this._ctx) ) {
			case 1:
				{
				this.state = 2670;
				if (!(this.serverVersion < 50709)) {
					throw this.createFailedPredicateException("this.serverVersion < 50709");
				}
				this.state = 2671;
				this.exprList();
				}
				break;
			case 2:
				{
				this.state = 2672;
				if (!(this.serverVersion >= 50709)) {
					throw this.createFailedPredicateException("this.serverVersion >= 50709");
				}
				this.state = 2673;
				this.selectItemList();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public handlerStatement(): HandlerStatementContext {
		let localctx: HandlerStatementContext = new HandlerStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 230, MySQLParser.RULE_handlerStatement);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2676;
			this.match(MySQLParser.HANDLER_SYMBOL);
			this.state = 2694;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 238, this._ctx) ) {
			case 1:
				{
				this.state = 2677;
				this.tableRef();
				this.state = 2678;
				this.match(MySQLParser.OPEN_SYMBOL);
				this.state = 2680;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 234, this._ctx) ) {
				case 1:
					{
					this.state = 2679;
					this.tableAlias();
					}
					break;
				}
				}
				break;
			case 2:
				{
				this.state = 2682;
				this.identifier();
				this.state = 2692;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case 10:
					{
					this.state = 2683;
					this.match(MySQLParser.CLOSE_SYMBOL);
					}
					break;
				case 598:
					{
					this.state = 2684;
					this.match(MySQLParser.READ_SYMBOL);
					this.state = 2685;
					this.handlerReadOrScan();
					this.state = 2687;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la===680) {
						{
						this.state = 2686;
						this.whereClause();
						}
					}

					this.state = 2690;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la===543) {
						{
						this.state = 2689;
						this.limitClause();
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public handlerReadOrScan(): HandlerReadOrScanContext {
		let localctx: HandlerReadOrScanContext = new HandlerReadOrScanContext(this, this._ctx, this.state);
		this.enterRule(localctx, 232, MySQLParser.RULE_handlerReadOrScan);
		let _la: number;
		try {
			this.state = 2706;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 240, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 2696;
				_la = this._input.LA(1);
				if(!(_la===148 || _la===235)) {
				this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 2697;
				this.identifier();
				this.state = 2704;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case 148:
				case 174:
				case 235:
				case 259:
					{
					this.state = 2698;
					_la = this._input.LA(1);
					if(!(_la===148 || _la===174 || _la===235 || _la===259)) {
					this._errHandler.recoverInline(this);
					}
					else {
						this._errHandler.reportMatch(this);
					    this.consume();
					}
					}
					break;
				case 383:
				case 386:
				case 387:
				case 388:
				case 389:
					{
					this.state = 2699;
					_la = this._input.LA(1);
					if(!(((((_la - 383)) & ~0x1F) === 0 && ((1 << (_la - 383)) & 121) !== 0))) {
					this._errHandler.recoverInline(this);
					}
					else {
						this._errHandler.reportMatch(this);
					    this.consume();
					}
					this.state = 2700;
					this.match(MySQLParser.OPEN_PAR_SYMBOL);
					this.state = 2701;
					this.values();
					this.state = 2702;
					this.match(MySQLParser.CLOSE_PAR_SYMBOL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public insertStatement(): InsertStatementContext {
		let localctx: InsertStatementContext = new InsertStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 234, MySQLParser.RULE_insertStatement);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2708;
			this.match(MySQLParser.INSERT_SYMBOL);
			this.state = 2710;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 241, this._ctx) ) {
			case 1:
				{
				this.state = 2709;
				this.insertLockOption();
				}
				break;
			}
			this.state = 2713;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 242, this._ctx) ) {
			case 1:
				{
				this.state = 2712;
				this.match(MySQLParser.IGNORE_SYMBOL);
				}
				break;
			}
			this.state = 2716;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 243, this._ctx) ) {
			case 1:
				{
				this.state = 2715;
				this.match(MySQLParser.INTO_SYMBOL);
				}
				break;
			}
			this.state = 2718;
			this.tableRef();
			this.state = 2720;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 244, this._ctx) ) {
			case 1:
				{
				this.state = 2719;
				this.usePartition();
				}
				break;
			}
			this.state = 2734;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 247, this._ctx) ) {
			case 1:
				{
				this.state = 2722;
				this.insertFromConstructor();
				this.state = 2725;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 245, this._ctx) ) {
				case 1:
					{
					this.state = 2723;
					if (!( this.serverVersion >= 80018)) {
						throw this.createFailedPredicateException(" this.serverVersion >= 80018");
					}
					this.state = 2724;
					this.valuesReference();
					}
					break;
				}
				}
				break;
			case 2:
				{
				this.state = 2727;
				this.match(MySQLParser.SET_SYMBOL);
				this.state = 2728;
				this.updateList();
				this.state = 2731;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 246, this._ctx) ) {
				case 1:
					{
					this.state = 2729;
					if (!( this.serverVersion >= 80018)) {
						throw this.createFailedPredicateException(" this.serverVersion >= 80018");
					}
					this.state = 2730;
					this.valuesReference();
					}
					break;
				}
				}
				break;
			case 3:
				{
				this.state = 2733;
				this.insertQueryExpression();
				}
				break;
			}
			this.state = 2737;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===579) {
				{
				this.state = 2736;
				this.insertUpdateList();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public insertLockOption(): InsertLockOptionContext {
		let localctx: InsertLockOptionContext = new InsertLockOptionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 236, MySQLParser.RULE_insertLockOption);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2739;
			_la = this._input.LA(1);
			if(!(_la===479 || _la===515 || _la===554)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public insertFromConstructor(): InsertFromConstructorContext {
		let localctx: InsertFromConstructorContext = new InsertFromConstructorContext(this, this._ctx, this.state);
		this.enterRule(localctx, 238, MySQLParser.RULE_insertFromConstructor);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2746;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===409) {
				{
				this.state = 2741;
				this.match(MySQLParser.OPEN_PAR_SYMBOL);
				this.state = 2743;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 249, this._ctx) ) {
				case 1:
					{
					this.state = 2742;
					this.fields();
					}
					break;
				}
				this.state = 2745;
				this.match(MySQLParser.CLOSE_PAR_SYMBOL);
				}
			}

			this.state = 2748;
			this.insertValues();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public fields(): FieldsContext {
		let localctx: FieldsContext = new FieldsContext(this, this._ctx, this.state);
		this.enterRule(localctx, 240, MySQLParser.RULE_fields);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2750;
			this.insertIdentifier();
			this.state = 2755;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===406) {
				{
				{
				this.state = 2751;
				this.match(MySQLParser.COMMA_SYMBOL);
				this.state = 2752;
				this.insertIdentifier();
				}
				}
				this.state = 2757;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public insertValues(): InsertValuesContext {
		let localctx: InsertValuesContext = new InsertValuesContext(this, this._ctx, this.state);
		this.enterRule(localctx, 242, MySQLParser.RULE_insertValues);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2758;
			_la = this._input.LA(1);
			if(!(_la===368 || _la===671)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			this.state = 2759;
			this.valueList();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public insertQueryExpression(): InsertQueryExpressionContext {
		let localctx: InsertQueryExpressionContext = new InsertQueryExpressionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 244, MySQLParser.RULE_insertQueryExpression);
		try {
			this.state = 2768;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 253, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 2761;
				this.queryExpressionOrParens();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 2762;
				this.match(MySQLParser.OPEN_PAR_SYMBOL);
				this.state = 2764;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 252, this._ctx) ) {
				case 1:
					{
					this.state = 2763;
					this.fields();
					}
					break;
				}
				this.state = 2766;
				this.match(MySQLParser.CLOSE_PAR_SYMBOL);
				this.state = 2767;
				this.queryExpressionOrParens();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public valueList(): ValueListContext {
		let localctx: ValueListContext = new ValueListContext(this, this._ctx, this.state);
		this.enterRule(localctx, 246, MySQLParser.RULE_valueList);
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2770;
			this.match(MySQLParser.OPEN_PAR_SYMBOL);
			this.state = 2772;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 254, this._ctx) ) {
			case 1:
				{
				this.state = 2771;
				this.values();
				}
				break;
			}
			this.state = 2774;
			this.match(MySQLParser.CLOSE_PAR_SYMBOL);
			this.state = 2783;
			this._errHandler.sync(this);
			_alt = this._interp.adaptivePredict(this._input, 256, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2775;
					this.match(MySQLParser.COMMA_SYMBOL);
					this.state = 2776;
					this.match(MySQLParser.OPEN_PAR_SYMBOL);
					this.state = 2778;
					this._errHandler.sync(this);
					switch ( this._interp.adaptivePredict(this._input, 255, this._ctx) ) {
					case 1:
						{
						this.state = 2777;
						this.values();
						}
						break;
					}
					this.state = 2780;
					this.match(MySQLParser.CLOSE_PAR_SYMBOL);
					}
					}
				}
				this.state = 2785;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 256, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public values(): ValuesContext {
		let localctx: ValuesContext = new ValuesContext(this, this._ctx, this.state);
		this.enterRule(localctx, 248, MySQLParser.RULE_values);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2788;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 257, this._ctx) ) {
			case 1:
				{
				this.state = 2786;
				this.expr(0);
				}
				break;
			case 2:
				{
				this.state = 2787;
				this.match(MySQLParser.DEFAULT_SYMBOL);
				}
				break;
			}
			this.state = 2797;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===406) {
				{
				{
				this.state = 2790;
				this.match(MySQLParser.COMMA_SYMBOL);
				this.state = 2793;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 258, this._ctx) ) {
				case 1:
					{
					this.state = 2791;
					this.expr(0);
					}
					break;
				case 2:
					{
					this.state = 2792;
					this.match(MySQLParser.DEFAULT_SYMBOL);
					}
					break;
				}
				}
				}
				this.state = 2799;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public valuesReference(): ValuesReferenceContext {
		let localctx: ValuesReferenceContext = new ValuesReferenceContext(this, this._ctx, this.state);
		this.enterRule(localctx, 250, MySQLParser.RULE_valuesReference);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2800;
			this.match(MySQLParser.AS_SYMBOL);
			this.state = 2801;
			this.identifier();
			this.state = 2803;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===409) {
				{
				this.state = 2802;
				this.columnInternalRefList();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public insertUpdateList(): InsertUpdateListContext {
		let localctx: InsertUpdateListContext = new InsertUpdateListContext(this, this._ctx, this.state);
		this.enterRule(localctx, 252, MySQLParser.RULE_insertUpdateList);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2805;
			this.match(MySQLParser.ON_SYMBOL);
			this.state = 2806;
			this.match(MySQLParser.DUPLICATE_SYMBOL);
			this.state = 2807;
			this.match(MySQLParser.KEY_SYMBOL);
			this.state = 2808;
			this.match(MySQLParser.UPDATE_SYMBOL);
			this.state = 2809;
			this.updateList();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public loadStatement(): LoadStatementContext {
		let localctx: LoadStatementContext = new LoadStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 254, MySQLParser.RULE_loadStatement);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2811;
			this.match(MySQLParser.LOAD_SYMBOL);
			this.state = 2812;
			this.dataOrXml();
			this.state = 2814;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===97 || _la===554) {
				{
				this.state = 2813;
				_la = this._input.LA(1);
				if(!(_la===97 || _la===554)) {
				this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				}
			}

			this.state = 2817;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===180) {
				{
				this.state = 2816;
				this.match(MySQLParser.LOCAL_SYMBOL);
				}
			}

			this.state = 2819;
			this.match(MySQLParser.INFILE_SYMBOL);
			this.state = 2820;
			this.textLiteral();
			this.state = 2822;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===520 || _la===606) {
				{
				this.state = 2821;
				_la = this._input.LA(1);
				if(!(_la===520 || _la===606)) {
				this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				}
			}

			this.state = 2824;
			this.match(MySQLParser.INTO_SYMBOL);
			this.state = 2825;
			this.match(MySQLParser.TABLE_SYMBOL);
			this.state = 2826;
			this.tableRef();
			this.state = 2828;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 264, this._ctx) ) {
			case 1:
				{
				this.state = 2827;
				this.usePartition();
				}
				break;
			}
			this.state = 2831;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===8 || _la===450) {
				{
				this.state = 2830;
				this.charsetClause();
				}
			}

			this.state = 2834;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===298) {
				{
				this.state = 2833;
				this.xmlRowsIdentifiedBy();
				}
			}

			this.state = 2837;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===90) {
				{
				this.state = 2836;
				this.fieldsClause();
				}
			}

			this.state = 2840;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===545) {
				{
				this.state = 2839;
				this.linesClause();
				}
			}

			this.state = 2842;
			this.loadDataFileTail();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public dataOrXml(): DataOrXmlContext {
		let localctx: DataOrXmlContext = new DataOrXmlContext(this, this._ctx, this.state);
		this.enterRule(localctx, 256, MySQLParser.RULE_dataOrXml);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2844;
			_la = this._input.LA(1);
			if(!(_la===109 || _la===376)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public xmlRowsIdentifiedBy(): XmlRowsIdentifiedByContext {
		let localctx: XmlRowsIdentifiedByContext = new XmlRowsIdentifiedByContext(this, this._ctx, this.state);
		this.enterRule(localctx, 258, MySQLParser.RULE_xmlRowsIdentifiedBy);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2846;
			this.match(MySQLParser.ROWS_SYMBOL);
			this.state = 2847;
			this.match(MySQLParser.IDENTIFIED_SYMBOL);
			this.state = 2848;
			this.match(MySQLParser.BY_SYMBOL);
			this.state = 2849;
			this.textString();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public loadDataFileTail(): LoadDataFileTailContext {
		let localctx: LoadDataFileTailContext = new LoadDataFileTailContext(this, this._ctx, this.state);
		this.enterRule(localctx, 260, MySQLParser.RULE_loadDataFileTail);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2854;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===520) {
				{
				this.state = 2851;
				this.match(MySQLParser.IGNORE_SYMBOL);
				this.state = 2852;
				this.match(MySQLParser.INT_NUMBER);
				this.state = 2853;
				_la = this._input.LA(1);
				if(!(_la===298 || _la===545)) {
				this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				}
			}

			this.state = 2857;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===409) {
				{
				this.state = 2856;
				this.loadDataFileTargetList();
				}
			}

			this.state = 2861;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===619) {
				{
				this.state = 2859;
				this.match(MySQLParser.SET_SYMBOL);
				this.state = 2860;
				this.updateList();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public loadDataFileTargetList(): LoadDataFileTargetListContext {
		let localctx: LoadDataFileTargetListContext = new LoadDataFileTargetListContext(this, this._ctx, this.state);
		this.enterRule(localctx, 262, MySQLParser.RULE_loadDataFileTargetList);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2863;
			this.match(MySQLParser.OPEN_PAR_SYMBOL);
			this.state = 2865;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 272, this._ctx) ) {
			case 1:
				{
				this.state = 2864;
				this.fieldOrVariableList();
				}
				break;
			}
			this.state = 2867;
			this.match(MySQLParser.CLOSE_PAR_SYMBOL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public fieldOrVariableList(): FieldOrVariableListContext {
		let localctx: FieldOrVariableListContext = new FieldOrVariableListContext(this, this._ctx, this.state);
		this.enterRule(localctx, 264, MySQLParser.RULE_fieldOrVariableList);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2871;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 273, this._ctx) ) {
			case 1:
				{
				this.state = 2869;
				this.columnRef();
				}
				break;
			case 2:
				{
				this.state = 2870;
				this.userVariable();
				}
				break;
			}
			this.state = 2880;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===406) {
				{
				{
				this.state = 2873;
				this.match(MySQLParser.COMMA_SYMBOL);
				this.state = 2876;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 274, this._ctx) ) {
				case 1:
					{
					this.state = 2874;
					this.columnRef();
					}
					break;
				case 2:
					{
					this.state = 2875;
					this.userVariable();
					}
					break;
				}
				}
				}
				this.state = 2882;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public replaceStatement(): ReplaceStatementContext {
		let localctx: ReplaceStatementContext = new ReplaceStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 266, MySQLParser.RULE_replaceStatement);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2883;
			this.match(MySQLParser.REPLACE_SYMBOL);
			this.state = 2885;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 276, this._ctx) ) {
			case 1:
				{
				this.state = 2884;
				_la = this._input.LA(1);
				if(!(_la===479 || _la===554)) {
				this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				}
				break;
			}
			this.state = 2888;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 277, this._ctx) ) {
			case 1:
				{
				this.state = 2887;
				this.match(MySQLParser.INTO_SYMBOL);
				}
				break;
			}
			this.state = 2890;
			this.tableRef();
			this.state = 2892;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 278, this._ctx) ) {
			case 1:
				{
				this.state = 2891;
				this.usePartition();
				}
				break;
			}
			this.state = 2898;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 279, this._ctx) ) {
			case 1:
				{
				this.state = 2894;
				this.insertFromConstructor();
				}
				break;
			case 2:
				{
				this.state = 2895;
				this.match(MySQLParser.SET_SYMBOL);
				this.state = 2896;
				this.updateList();
				}
				break;
			case 3:
				{
				this.state = 2897;
				this.insertQueryExpression();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public selectStatement(): SelectStatementContext {
		let localctx: SelectStatementContext = new SelectStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 268, MySQLParser.RULE_selectStatement);
		try {
			this.state = 2903;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 280, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 2900;
				this.queryExpression();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 2901;
				this.queryExpressionParens();
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 2902;
				this.selectStatementWithInto();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public selectStatementWithInto(): SelectStatementWithIntoContext {
		let localctx: SelectStatementWithIntoContext = new SelectStatementWithIntoContext(this, this._ctx, this.state);
		this.enterRule(localctx, 270, MySQLParser.RULE_selectStatementWithInto);
		try {
			this.state = 2912;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 281, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 2905;
				this.match(MySQLParser.OPEN_PAR_SYMBOL);
				this.state = 2906;
				this.selectStatementWithInto();
				this.state = 2907;
				this.match(MySQLParser.CLOSE_PAR_SYMBOL);
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 2909;
				this.queryExpression();
				this.state = 2910;
				this.intoClause();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public queryExpression(): QueryExpressionContext {
		let localctx: QueryExpressionContext = new QueryExpressionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 272, MySQLParser.RULE_queryExpression);
		let _la: number;
		try {
			this.state = 2948;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 291, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 2916;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 282, this._ctx) ) {
				case 1:
					{
					this.state = 2914;
					if (!(this.serverVersion >= 80000)) {
						throw this.createFailedPredicateException("this.serverVersion >= 80000");
					}
					this.state = 2915;
					this.withClause();
					}
					break;
				}
				this.state = 2933;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 287, this._ctx) ) {
				case 1:
					{
					this.state = 2918;
					this.queryExpressionBody(0);
					this.state = 2920;
					this._errHandler.sync(this);
					switch ( this._interp.adaptivePredict(this._input, 283, this._ctx) ) {
					case 1:
						{
						this.state = 2919;
						this.orderClause();
						}
						break;
					}
					this.state = 2923;
					this._errHandler.sync(this);
					switch ( this._interp.adaptivePredict(this._input, 284, this._ctx) ) {
					case 1:
						{
						this.state = 2922;
						this.limitClause();
						}
						break;
					}
					}
					break;
				case 2:
					{
					this.state = 2925;
					this.queryExpressionParens();
					this.state = 2931;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
					case 586:
						{
						this.state = 2926;
						this.orderClause();
						this.state = 2928;
						this._errHandler.sync(this);
						switch ( this._interp.adaptivePredict(this._input, 285, this._ctx) ) {
						case 1:
							{
							this.state = 2927;
							this.limitClause();
							}
							break;
						}
						}
						break;
					case 543:
						{
						this.state = 2930;
						this.limitClause();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				}
				this.state = 2937;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 288, this._ctx) ) {
				case 1:
					{
					this.state = 2935;
					if (!(this.serverVersion < 80000)) {
						throw this.createFailedPredicateException("this.serverVersion < 80000");
					}
					this.state = 2936;
					this.procedureAnalyseClause();
					}
					break;
				}
				this.state = 2940;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===506 || _la===548) {
					{
					this.state = 2939;
					this.lockingClause();
					}
				}

				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 2942;
				if (!(this.serverVersion >= 80000)) {
					throw this.createFailedPredicateException("this.serverVersion >= 80000");
				}
				this.state = 2943;
				this.withClause();
				this.state = 2944;
				this.queryExpressionParens();
				this.state = 2946;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===506 || _la===548) {
					{
					this.state = 2945;
					this.lockingClause();
					}
				}

				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}

	public queryExpressionBody(): QueryExpressionBodyContext;
	public queryExpressionBody(_p: number): QueryExpressionBodyContext;
	// @RuleVersion(0)
	public queryExpressionBody(_p?: number): QueryExpressionBodyContext {
		if (_p === undefined) {
			_p = 0;
		}

		let _parentctx: ParserRuleContext = this._ctx;
		let _parentState: number = this.state;
		let localctx: QueryExpressionBodyContext = new QueryExpressionBodyContext(this, this._ctx, _parentState);
		let _prevctx: QueryExpressionBodyContext = localctx;
		let _startState: number = 274;
		this.enterRecursionRule(localctx, 274, MySQLParser.RULE_queryExpressionBody, _p);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2961;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 614:
				{
				this.state = 2951;
				this.querySpecification();
				}
				break;
			case 409:
				{
				this.state = 2952;
				this.queryExpressionParens();
				this.state = 2953;
				this.match(MySQLParser.UNION_SYMBOL);
				this.state = 2955;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===427 || _la===484) {
					{
					this.state = 2954;
					this.unionOption();
					}
				}

				this.state = 2959;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case 614:
					{
					this.state = 2957;
					this.querySpecification();
					}
					break;
				case 409:
					{
					this.state = 2958;
					this.queryExpressionParens();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this._ctx.stop = this._input.LT(-1);
			this.state = 2974;
			this._errHandler.sync(this);
			_alt = this._interp.adaptivePredict(this._input, 297, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					if (this._parseListeners != null) {
						this.triggerExitRuleEvent();
					}
					_prevctx = localctx;
					{
					{
					localctx = new QueryExpressionBodyContext(this, _parentctx, _parentState);
					this.pushNewRecursionContext(localctx, _startState, MySQLParser.RULE_queryExpressionBody);
					this.state = 2963;
					if (!(this.precpred(this._ctx, 2))) {
						throw this.createFailedPredicateException("this.precpred(this._ctx, 2)");
					}
					this.state = 2964;
					this.match(MySQLParser.UNION_SYMBOL);
					this.state = 2966;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la===427 || _la===484) {
						{
						this.state = 2965;
						this.unionOption();
						}
					}

					this.state = 2970;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
					case 614:
						{
						this.state = 2968;
						this.querySpecification();
						}
						break;
					case 409:
						{
						this.state = 2969;
						this.queryExpressionParens();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					}
				}
				this.state = 2976;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 297, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.unrollRecursionContexts(_parentctx);
		}
		return localctx;
	}
	// @RuleVersion(0)
	public queryExpressionParens(): QueryExpressionParensContext {
		let localctx: QueryExpressionParensContext = new QueryExpressionParensContext(this, this._ctx, this.state);
		this.enterRule(localctx, 276, MySQLParser.RULE_queryExpressionParens);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2977;
			this.match(MySQLParser.OPEN_PAR_SYMBOL);
			this.state = 2980;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 298, this._ctx) ) {
			case 1:
				{
				this.state = 2978;
				this.queryExpressionParens();
				}
				break;
			case 2:
				{
				this.state = 2979;
				this.queryExpression();
				}
				break;
			}
			this.state = 2982;
			this.match(MySQLParser.CLOSE_PAR_SYMBOL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public querySpecification(): QuerySpecificationContext {
		let localctx: QuerySpecificationContext = new QuerySpecificationContext(this, this._ctx, this.state);
		this.enterRule(localctx, 278, MySQLParser.RULE_querySpecification);
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2984;
			this.match(MySQLParser.SELECT_SYMBOL);
			this.state = 2988;
			this._errHandler.sync(this);
			_alt = this._interp.adaptivePredict(this._input, 299, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2985;
					this.selectOption();
					}
					}
				}
				this.state = 2990;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 299, this._ctx);
			}
			this.state = 2991;
			this.selectItemList();
			this.state = 2993;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 300, this._ctx) ) {
			case 1:
				{
				this.state = 2992;
				this.intoClause();
				}
				break;
			}
			this.state = 2996;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 301, this._ctx) ) {
			case 1:
				{
				this.state = 2995;
				this.fromClause();
				}
				break;
			}
			this.state = 2999;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 302, this._ctx) ) {
			case 1:
				{
				this.state = 2998;
				this.whereClause();
				}
				break;
			}
			this.state = 3002;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 303, this._ctx) ) {
			case 1:
				{
				this.state = 3001;
				this.groupByClause();
				}
				break;
			}
			this.state = 3005;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 304, this._ctx) ) {
			case 1:
				{
				this.state = 3004;
				this.havingClause();
				}
				break;
			}
			this.state = 3009;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 305, this._ctx) ) {
			case 1:
				{
				this.state = 3007;
				if (!(this.serverVersion >= 80000)) {
					throw this.createFailedPredicateException("this.serverVersion >= 80000");
				}
				this.state = 3008;
				this.windowClause();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public subquery(): SubqueryContext {
		let localctx: SubqueryContext = new SubqueryContext(this, this._ctx, this.state);
		this.enterRule(localctx, 280, MySQLParser.RULE_subquery);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3011;
			this.queryExpressionParens();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public querySpecOption(): QuerySpecOptionContext {
		let localctx: QuerySpecOptionContext = new QuerySpecOptionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 282, MySQLParser.RULE_querySpecOption);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3013;
			_la = this._input.LA(1);
			if(!(_la===319 || _la===427 || _la===484 || _la===515 || ((((_la - 629)) & ~0x1F) === 0 && ((1 << (_la - 629)) & 2055) !== 0))) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public limitClause(): LimitClauseContext {
		let localctx: LimitClauseContext = new LimitClauseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 284, MySQLParser.RULE_limitClause);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3015;
			this.match(MySQLParser.LIMIT_SYMBOL);
			this.state = 3016;
			this.limitOptions();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public simpleLimitClause(): SimpleLimitClauseContext {
		let localctx: SimpleLimitClauseContext = new SimpleLimitClauseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 286, MySQLParser.RULE_simpleLimitClause);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3018;
			this.match(MySQLParser.LIMIT_SYMBOL);
			this.state = 3019;
			this.limitOption();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public limitOptions(): LimitOptionsContext {
		let localctx: LimitOptionsContext = new LimitOptionsContext(this, this._ctx, this.state);
		this.enterRule(localctx, 288, MySQLParser.RULE_limitOptions);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3021;
			this.limitOption();
			this.state = 3024;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 306, this._ctx) ) {
			case 1:
				{
				this.state = 3022;
				_la = this._input.LA(1);
				if(!(_la===242 || _la===406)) {
				this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				this.state = 3023;
				this.limitOption();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public limitOption(): LimitOptionContext {
		let localctx: LimitOptionContext = new LimitOptionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 290, MySQLParser.RULE_limitOption);
		let _la: number;
		try {
			this.state = 3028;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 307, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 3026;
				this.identifier();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 3027;
				_la = this._input.LA(1);
				if(!(((((_la - 380)) & ~0x1F) === 0 && ((1 << (_la - 380)) & 7) !== 0) || _la===420)) {
				this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public intoClause(): IntoClauseContext {
		let localctx: IntoClauseContext = new IntoClauseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 292, MySQLParser.RULE_intoClause);
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3030;
			this.match(MySQLParser.INTO_SYMBOL);
			this.state = 3058;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 314, this._ctx) ) {
			case 1:
				{
				this.state = 3031;
				this.match(MySQLParser.OUTFILE_SYMBOL);
				this.state = 3032;
				this.textStringLiteral();
				this.state = 3034;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 308, this._ctx) ) {
				case 1:
					{
					this.state = 3033;
					this.charsetClause();
					}
					break;
				}
				this.state = 3037;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 309, this._ctx) ) {
				case 1:
					{
					this.state = 3036;
					this.fieldsClause();
					}
					break;
				}
				this.state = 3040;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 310, this._ctx) ) {
				case 1:
					{
					this.state = 3039;
					this.linesClause();
					}
					break;
				}
				}
				break;
			case 2:
				{
				this.state = 3042;
				this.match(MySQLParser.DUMPFILE_SYMBOL);
				this.state = 3043;
				this.textStringLiteral();
				}
				break;
			case 3:
				{
				this.state = 3046;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 311, this._ctx) ) {
				case 1:
					{
					this.state = 3044;
					this.textOrIdentifier();
					}
					break;
				case 2:
					{
					this.state = 3045;
					this.userVariable();
					}
					break;
				}
				this.state = 3055;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 313, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 3048;
						this.match(MySQLParser.COMMA_SYMBOL);
						this.state = 3051;
						this._errHandler.sync(this);
						switch ( this._interp.adaptivePredict(this._input, 312, this._ctx) ) {
						case 1:
							{
							this.state = 3049;
							this.textOrIdentifier();
							}
							break;
						case 2:
							{
							this.state = 3050;
							this.userVariable();
							}
							break;
						}
						}
						}
					}
					this.state = 3057;
					this._errHandler.sync(this);
					_alt = this._interp.adaptivePredict(this._input, 313, this._ctx);
				}
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public procedureAnalyseClause(): ProcedureAnalyseClauseContext {
		let localctx: ProcedureAnalyseClauseContext = new ProcedureAnalyseClauseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 294, MySQLParser.RULE_procedureAnalyseClause);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3060;
			this.match(MySQLParser.PROCEDURE_SYMBOL);
			this.state = 3061;
			this.match(MySQLParser.ANALYSE_SYMBOL);
			this.state = 3062;
			this.match(MySQLParser.OPEN_PAR_SYMBOL);
			this.state = 3068;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===380) {
				{
				this.state = 3063;
				this.match(MySQLParser.INT_NUMBER);
				this.state = 3066;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===406) {
					{
					this.state = 3064;
					this.match(MySQLParser.COMMA_SYMBOL);
					this.state = 3065;
					this.match(MySQLParser.INT_NUMBER);
					}
				}

				}
			}

			this.state = 3070;
			this.match(MySQLParser.CLOSE_PAR_SYMBOL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public havingClause(): HavingClauseContext {
		let localctx: HavingClauseContext = new HavingClauseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 296, MySQLParser.RULE_havingClause);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3072;
			this.match(MySQLParser.HAVING_SYMBOL);
			this.state = 3073;
			this.expr(0);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public windowClause(): WindowClauseContext {
		let localctx: WindowClauseContext = new WindowClauseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 298, MySQLParser.RULE_windowClause);
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3075;
			this.match(MySQLParser.WINDOW_SYMBOL);
			this.state = 3076;
			this.windowDefinition();
			this.state = 3081;
			this._errHandler.sync(this);
			_alt = this._interp.adaptivePredict(this._input, 317, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3077;
					this.match(MySQLParser.COMMA_SYMBOL);
					this.state = 3078;
					this.windowDefinition();
					}
					}
				}
				this.state = 3083;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 317, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public windowDefinition(): WindowDefinitionContext {
		let localctx: WindowDefinitionContext = new WindowDefinitionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 300, MySQLParser.RULE_windowDefinition);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3084;
			this.windowName();
			this.state = 3085;
			this.match(MySQLParser.AS_SYMBOL);
			this.state = 3086;
			this.windowSpec();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public windowSpec(): WindowSpecContext {
		let localctx: WindowSpecContext = new WindowSpecContext(this, this._ctx, this.state);
		this.enterRule(localctx, 302, MySQLParser.RULE_windowSpec);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3088;
			this.match(MySQLParser.OPEN_PAR_SYMBOL);
			this.state = 3089;
			this.windowSpecDetails();
			this.state = 3090;
			this.match(MySQLParser.CLOSE_PAR_SYMBOL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public windowSpecDetails(): WindowSpecDetailsContext {
		let localctx: WindowSpecDetailsContext = new WindowSpecDetailsContext(this, this._ctx, this.state);
		this.enterRule(localctx, 304, MySQLParser.RULE_windowSpecDetails);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3093;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 318, this._ctx) ) {
			case 1:
				{
				this.state = 3092;
				this.windowName();
				}
				break;
			}
			this.state = 3098;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===32) {
				{
				this.state = 3095;
				this.match(MySQLParser.PARTITION_SYMBOL);
				this.state = 3096;
				this.match(MySQLParser.BY_SYMBOL);
				this.state = 3097;
				this.orderList();
				}
			}

			this.state = 3101;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===586) {
				{
				this.state = 3100;
				this.orderClause();
				}
			}

			this.state = 3104;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===298 || _la===596 || _la===713) {
				{
				this.state = 3103;
				this.windowFrameClause();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public windowFrameClause(): WindowFrameClauseContext {
		let localctx: WindowFrameClauseContext = new WindowFrameClauseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 306, MySQLParser.RULE_windowFrameClause);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3106;
			this.windowFrameUnits();
			this.state = 3107;
			this.windowFrameExtent();
			this.state = 3109;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===710) {
				{
				this.state = 3108;
				this.windowFrameExclusion();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public windowFrameUnits(): WindowFrameUnitsContext {
		let localctx: WindowFrameUnitsContext = new WindowFrameUnitsContext(this, this._ctx, this.state);
		this.enterRule(localctx, 308, MySQLParser.RULE_windowFrameUnits);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3111;
			_la = this._input.LA(1);
			if(!(_la===298 || _la===596 || _la===713)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public windowFrameExtent(): WindowFrameExtentContext {
		let localctx: WindowFrameExtentContext = new WindowFrameExtentContext(this, this._ctx, this.state);
		this.enterRule(localctx, 310, MySQLParser.RULE_windowFrameExtent);
		try {
			this.state = 3115;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 107:
			case 380:
			case 381:
			case 382:
			case 420:
			case 423:
			case 424:
			case 527:
			case 728:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 3113;
				this.windowFrameStart();
				}
				break;
			case 435:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 3114;
				this.windowFrameBetween();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public windowFrameStart(): WindowFrameStartContext {
		let localctx: WindowFrameStartContext = new WindowFrameStartContext(this, this._ctx, this.state);
		this.enterRule(localctx, 312, MySQLParser.RULE_windowFrameStart);
		try {
			this.state = 3131;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 728:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 3117;
				this.match(MySQLParser.UNBOUNDED_SYMBOL);
				this.state = 3118;
				this.match(MySQLParser.PRECEDING_SYMBOL);
				}
				break;
			case 380:
			case 381:
			case 382:
			case 423:
			case 424:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 3119;
				this.ulonglong_number();
				this.state = 3120;
				this.match(MySQLParser.PRECEDING_SYMBOL);
				}
				break;
			case 420:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 3122;
				this.match(MySQLParser.PARAM_MARKER);
				this.state = 3123;
				this.match(MySQLParser.PRECEDING_SYMBOL);
				}
				break;
			case 527:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 3124;
				this.match(MySQLParser.INTERVAL_SYMBOL);
				this.state = 3125;
				this.expr(0);
				this.state = 3126;
				this.interval();
				this.state = 3127;
				this.match(MySQLParser.PRECEDING_SYMBOL);
				}
				break;
			case 107:
				this.enterOuterAlt(localctx, 5);
				{
				this.state = 3129;
				this.match(MySQLParser.CURRENT_SYMBOL);
				this.state = 3130;
				this.match(MySQLParser.ROW_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public windowFrameBetween(): WindowFrameBetweenContext {
		let localctx: WindowFrameBetweenContext = new WindowFrameBetweenContext(this, this._ctx, this.state);
		this.enterRule(localctx, 314, MySQLParser.RULE_windowFrameBetween);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3133;
			this.match(MySQLParser.BETWEEN_SYMBOL);
			this.state = 3134;
			this.windowFrameBound();
			this.state = 3135;
			this.match(MySQLParser.AND_SYMBOL);
			this.state = 3136;
			this.windowFrameBound();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public windowFrameBound(): WindowFrameBoundContext {
		let localctx: WindowFrameBoundContext = new WindowFrameBoundContext(this, this._ctx, this.state);
		this.enterRule(localctx, 316, MySQLParser.RULE_windowFrameBound);
		try {
			this.state = 3151;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 325, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 3138;
				this.windowFrameStart();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 3139;
				this.match(MySQLParser.UNBOUNDED_SYMBOL);
				this.state = 3140;
				this.match(MySQLParser.FOLLOWING_SYMBOL);
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 3141;
				this.ulonglong_number();
				this.state = 3142;
				this.match(MySQLParser.FOLLOWING_SYMBOL);
				}
				break;
			case 4:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 3144;
				this.match(MySQLParser.PARAM_MARKER);
				this.state = 3145;
				this.match(MySQLParser.FOLLOWING_SYMBOL);
				}
				break;
			case 5:
				this.enterOuterAlt(localctx, 5);
				{
				this.state = 3146;
				this.match(MySQLParser.INTERVAL_SYMBOL);
				this.state = 3147;
				this.expr(0);
				this.state = 3148;
				this.interval();
				this.state = 3149;
				this.match(MySQLParser.FOLLOWING_SYMBOL);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public windowFrameExclusion(): WindowFrameExclusionContext {
		let localctx: WindowFrameExclusionContext = new WindowFrameExclusionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 318, MySQLParser.RULE_windowFrameExclusion);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3153;
			this.match(MySQLParser.EXCLUDE_SYMBOL);
			this.state = 3160;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 107:
				{
				this.state = 3154;
				this.match(MySQLParser.CURRENT_SYMBOL);
				this.state = 3155;
				this.match(MySQLParser.ROW_SYMBOL);
				}
				break;
			case 512:
				{
				this.state = 3156;
				this.match(MySQLParser.GROUP_SYMBOL);
				}
				break;
			case 727:
				{
				this.state = 3157;
				this.match(MySQLParser.TIES_SYMBOL);
				}
				break;
			case 27:
				{
				this.state = 3158;
				this.match(MySQLParser.NO_SYMBOL);
				this.state = 3159;
				this.match(MySQLParser.OTHERS_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public withClause(): WithClauseContext {
		let localctx: WithClauseContext = new WithClauseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 320, MySQLParser.RULE_withClause);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3162;
			this.match(MySQLParser.WITH_SYMBOL);
			this.state = 3164;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 327, this._ctx) ) {
			case 1:
				{
				this.state = 3163;
				this.match(MySQLParser.RECURSIVE_SYMBOL);
				}
				break;
			}
			this.state = 3166;
			this.commonTableExpression();
			this.state = 3171;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===406) {
				{
				{
				this.state = 3167;
				this.match(MySQLParser.COMMA_SYMBOL);
				this.state = 3168;
				this.commonTableExpression();
				}
				}
				this.state = 3173;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public commonTableExpression(): CommonTableExpressionContext {
		let localctx: CommonTableExpressionContext = new CommonTableExpressionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 322, MySQLParser.RULE_commonTableExpression);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3174;
			this.identifier();
			this.state = 3176;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===409) {
				{
				this.state = 3175;
				this.columnInternalRefList();
				}
			}

			this.state = 3178;
			this.match(MySQLParser.AS_SYMBOL);
			this.state = 3179;
			this.subquery();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public groupByClause(): GroupByClauseContext {
		let localctx: GroupByClauseContext = new GroupByClauseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 324, MySQLParser.RULE_groupByClause);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3181;
			this.match(MySQLParser.GROUP_SYMBOL);
			this.state = 3182;
			this.match(MySQLParser.BY_SYMBOL);
			this.state = 3183;
			this.orderList();
			this.state = 3185;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 330, this._ctx) ) {
			case 1:
				{
				this.state = 3184;
				this.olapOption();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public olapOption(): OlapOptionContext {
		let localctx: OlapOptionContext = new OlapOptionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 326, MySQLParser.RULE_olapOption);
		try {
			this.state = 3192;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 331, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 3187;
				this.match(MySQLParser.WITH_SYMBOL);
				this.state = 3188;
				this.match(MySQLParser.ROLLUP_SYMBOL);
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 3189;
				if (!(this.serverVersion < 80000)) {
					throw this.createFailedPredicateException("this.serverVersion < 80000");
				}
				this.state = 3190;
				this.match(MySQLParser.WITH_SYMBOL);
				this.state = 3191;
				this.match(MySQLParser.CUBE_SYMBOL);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public orderClause(): OrderClauseContext {
		let localctx: OrderClauseContext = new OrderClauseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 328, MySQLParser.RULE_orderClause);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3194;
			this.match(MySQLParser.ORDER_SYMBOL);
			this.state = 3195;
			this.match(MySQLParser.BY_SYMBOL);
			this.state = 3196;
			this.orderList();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public direction(): DirectionContext {
		let localctx: DirectionContext = new DirectionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 330, MySQLParser.RULE_direction);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3198;
			_la = this._input.LA(1);
			if(!(_la===432 || _la===481)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public fromClause(): FromClauseContext {
		let localctx: FromClauseContext = new FromClauseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 332, MySQLParser.RULE_fromClause);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3200;
			this.match(MySQLParser.FROM_SYMBOL);
			this.state = 3203;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 332, this._ctx) ) {
			case 1:
				{
				this.state = 3201;
				this.match(MySQLParser.DUAL_SYMBOL);
				}
				break;
			case 2:
				{
				this.state = 3202;
				this.tableReferenceList();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public tableReferenceList(): TableReferenceListContext {
		let localctx: TableReferenceListContext = new TableReferenceListContext(this, this._ctx, this.state);
		this.enterRule(localctx, 334, MySQLParser.RULE_tableReferenceList);
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3205;
			this.tableReference();
			this.state = 3210;
			this._errHandler.sync(this);
			_alt = this._interp.adaptivePredict(this._input, 333, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3206;
					this.match(MySQLParser.COMMA_SYMBOL);
					this.state = 3207;
					this.tableReference();
					}
					}
				}
				this.state = 3212;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 333, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public selectOption(): SelectOptionContext {
		let localctx: SelectOptionContext = new SelectOptionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 336, MySQLParser.RULE_selectOption);
		try {
			this.state = 3221;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 334, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 3213;
				this.querySpecOption();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 3214;
				this.match(MySQLParser.SQL_NO_CACHE_SYMBOL);
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 3215;
				if (!(this.serverVersion < 80000)) {
					throw this.createFailedPredicateException("this.serverVersion < 80000");
				}
				this.state = 3216;
				this.match(MySQLParser.SQL_CACHE_SYMBOL);
				}
				break;
			case 4:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 3217;
				if (!(this.serverVersion >= 50704 && this.serverVersion < 50708)) {
					throw this.createFailedPredicateException("this.serverVersion >= 50704 && this.serverVersion < 50708");
				}
				this.state = 3218;
				this.match(MySQLParser.MAX_STATEMENT_TIME_SYMBOL);
				this.state = 3219;
				this.match(MySQLParser.EQUAL_OPERATOR);
				this.state = 3220;
				this.real_ulong_number();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public lockingClause(): LockingClauseContext {
		let localctx: LockingClauseContext = new LockingClauseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 338, MySQLParser.RULE_lockingClause);
		try {
			this.state = 3238;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 506:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 3223;
				this.match(MySQLParser.FOR_SYMBOL);
				this.state = 3224;
				this.lockStrengh();
				this.state = 3228;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 335, this._ctx) ) {
				case 1:
					{
					this.state = 3225;
					if (!(this.serverVersion >= 80000)) {
						throw this.createFailedPredicateException("this.serverVersion >= 80000");
					}
					this.state = 3226;
					this.match(MySQLParser.OF_SYMBOL);
					this.state = 3227;
					this.tableAliasRefList();
					}
					break;
				}
				this.state = 3232;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 336, this._ctx) ) {
				case 1:
					{
					this.state = 3230;
					if (!(this.serverVersion >= 80000)) {
						throw this.createFailedPredicateException("this.serverVersion >= 80000");
					}
					this.state = 3231;
					this.lockedRowAction();
					}
					break;
				}
				}
				break;
			case 548:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 3234;
				this.match(MySQLParser.LOCK_SYMBOL);
				this.state = 3235;
				this.match(MySQLParser.IN_SYMBOL);
				this.state = 3236;
				this.match(MySQLParser.SHARE_SYMBOL);
				this.state = 3237;
				this.match(MySQLParser.MODE_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public lockStrengh(): LockStrenghContext {
		let localctx: LockStrenghContext = new LockStrenghContext(this, this._ctx, this.state);
		this.enterRule(localctx, 340, MySQLParser.RULE_lockStrengh);
		try {
			this.state = 3243;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 338, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 3240;
				this.match(MySQLParser.UPDATE_SYMBOL);
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 3241;
				if (!(this.serverVersion >= 80000)) {
					throw this.createFailedPredicateException("this.serverVersion >= 80000");
				}
				this.state = 3242;
				this.match(MySQLParser.SHARE_SYMBOL);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public lockedRowAction(): LockedRowActionContext {
		let localctx: LockedRowActionContext = new LockedRowActionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 342, MySQLParser.RULE_lockedRowAction);
		try {
			this.state = 3248;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 699:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 3245;
				this.match(MySQLParser.SKIP_SYMBOL);
				this.state = 3246;
				this.match(MySQLParser.LOCKED_SYMBOL);
				}
				break;
			case 701:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 3247;
				this.match(MySQLParser.NOWAIT_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public selectItemList(): SelectItemListContext {
		let localctx: SelectItemListContext = new SelectItemListContext(this, this._ctx, this.state);
		this.enterRule(localctx, 344, MySQLParser.RULE_selectItemList);
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3252;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 340, this._ctx) ) {
			case 1:
				{
				this.state = 3250;
				this.selectItem();
				}
				break;
			case 2:
				{
				this.state = 3251;
				this.match(MySQLParser.MULT_OPERATOR);
				}
				break;
			}
			this.state = 3258;
			this._errHandler.sync(this);
			_alt = this._interp.adaptivePredict(this._input, 341, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3254;
					this.match(MySQLParser.COMMA_SYMBOL);
					this.state = 3255;
					this.selectItem();
					}
					}
				}
				this.state = 3260;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 341, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public selectItem(): SelectItemContext {
		let localctx: SelectItemContext = new SelectItemContext(this, this._ctx, this.state);
		this.enterRule(localctx, 346, MySQLParser.RULE_selectItem);
		try {
			this.state = 3266;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 343, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 3261;
				this.tableWild();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 3262;
				this.expr(0);
				this.state = 3264;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 342, this._ctx) ) {
				case 1:
					{
					this.state = 3263;
					this.selectAlias();
					}
					break;
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public selectAlias(): SelectAliasContext {
		let localctx: SelectAliasContext = new SelectAliasContext(this, this._ctx, this.state);
		this.enterRule(localctx, 348, MySQLParser.RULE_selectAlias);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3269;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 344, this._ctx) ) {
			case 1:
				{
				this.state = 3268;
				this.match(MySQLParser.AS_SYMBOL);
				}
				break;
			}
			this.state = 3273;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 345, this._ctx) ) {
			case 1:
				{
				this.state = 3271;
				this.identifier();
				}
				break;
			case 2:
				{
				this.state = 3272;
				this.textStringLiteral();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public whereClause(): WhereClauseContext {
		let localctx: WhereClauseContext = new WhereClauseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 350, MySQLParser.RULE_whereClause);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3275;
			this.match(MySQLParser.WHERE_SYMBOL);
			this.state = 3276;
			this.expr(0);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public tableReference(): TableReferenceContext {
		let localctx: TableReferenceContext = new TableReferenceContext(this, this._ctx, this.state);
		this.enterRule(localctx, 352, MySQLParser.RULE_tableReference);
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3288;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 347, this._ctx) ) {
			case 1:
				{
				this.state = 3278;
				this.tableFactor();
				}
				break;
			case 2:
				{
				this.state = 3279;
				this.match(MySQLParser.OPEN_CURLY_SYMBOL);
				this.state = 3283;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 346, this._ctx) ) {
				case 1:
					{
					this.state = 3280;
					if (!(this.serverVersion < 80017)) {
						throw this.createFailedPredicateException("this.serverVersion < 80017");
					}
					this.state = 3281;
					this.identifier();
					}
					break;
				case 2:
					{
					this.state = 3282;
					this.match(MySQLParser.OJ_SYMBOL);
					}
					break;
				}
				this.state = 3285;
				this.escapedTableReference();
				this.state = 3286;
				this.match(MySQLParser.CLOSE_CURLY_SYMBOL);
				}
				break;
			}
			this.state = 3293;
			this._errHandler.sync(this);
			_alt = this._interp.adaptivePredict(this._input, 348, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3290;
					this.joinedTable();
					}
					}
				}
				this.state = 3295;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 348, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public escapedTableReference(): EscapedTableReferenceContext {
		let localctx: EscapedTableReferenceContext = new EscapedTableReferenceContext(this, this._ctx, this.state);
		this.enterRule(localctx, 354, MySQLParser.RULE_escapedTableReference);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3296;
			this.tableFactor();
			this.state = 3300;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===460 || ((((_la - 523)) & ~0x1F) === 0 && ((1 << (_la - 523)) & 266241) !== 0) || _la===569 || _la===612 || _la===640) {
				{
				{
				this.state = 3297;
				this.joinedTable();
				}
				}
				this.state = 3302;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public joinedTable(): JoinedTableContext {
		let localctx: JoinedTableContext = new JoinedTableContext(this, this._ctx, this.state);
		this.enterRule(localctx, 356, MySQLParser.RULE_joinedTable);
		try {
			this.state = 3322;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 460:
			case 523:
			case 535:
			case 640:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 3303;
				this.innerJoinType();
				this.state = 3304;
				this.tableReference();
				this.state = 3309;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 350, this._ctx) ) {
				case 1:
					{
					this.state = 3305;
					this.match(MySQLParser.ON_SYMBOL);
					this.state = 3306;
					this.expr(0);
					}
					break;
				case 2:
					{
					this.state = 3307;
					this.match(MySQLParser.USING_SYMBOL);
					this.state = 3308;
					this.identifierListWithParentheses();
					}
					break;
				}
				}
				break;
			case 541:
			case 612:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 3311;
				this.outerJoinType();
				this.state = 3312;
				this.tableReference();
				this.state = 3317;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case 579:
					{
					this.state = 3313;
					this.match(MySQLParser.ON_SYMBOL);
					this.state = 3314;
					this.expr(0);
					}
					break;
				case 666:
					{
					this.state = 3315;
					this.match(MySQLParser.USING_SYMBOL);
					this.state = 3316;
					this.identifierListWithParentheses();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 569:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 3319;
				this.naturalJoinType();
				this.state = 3320;
				this.tableFactor();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public naturalJoinType(): NaturalJoinTypeContext {
		let localctx: NaturalJoinTypeContext = new NaturalJoinTypeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 358, MySQLParser.RULE_naturalJoinType);
		let _la: number;
		try {
			this.state = 3335;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 355, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 3324;
				this.match(MySQLParser.NATURAL_SYMBOL);
				this.state = 3326;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===523) {
					{
					this.state = 3325;
					this.match(MySQLParser.INNER_SYMBOL);
					}
				}

				this.state = 3328;
				this.match(MySQLParser.JOIN_SYMBOL);
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 3329;
				this.match(MySQLParser.NATURAL_SYMBOL);
				this.state = 3330;
				_la = this._input.LA(1);
				if(!(_la===541 || _la===612)) {
				this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				this.state = 3332;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===588) {
					{
					this.state = 3331;
					this.match(MySQLParser.OUTER_SYMBOL);
					}
				}

				this.state = 3334;
				this.match(MySQLParser.JOIN_SYMBOL);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public innerJoinType(): InnerJoinTypeContext {
		let localctx: InnerJoinTypeContext = new InnerJoinTypeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 360, MySQLParser.RULE_innerJoinType);
		let _la: number;
		try {
			this.state = 3342;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 460:
			case 523:
			case 535:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 3338;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===460 || _la===523) {
					{
					this.state = 3337;
					localctx._type_ = this._input.LT(1);
					_la = this._input.LA(1);
					if(!(_la===460 || _la===523)) {
					    localctx._type_ = this._errHandler.recoverInline(this);
					}
					else {
						this._errHandler.reportMatch(this);
					    this.consume();
					}
					}
				}

				this.state = 3340;
				this.match(MySQLParser.JOIN_SYMBOL);
				}
				break;
			case 640:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 3341;
				localctx._type_ = this.match(MySQLParser.STRAIGHT_JOIN_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public outerJoinType(): OuterJoinTypeContext {
		let localctx: OuterJoinTypeContext = new OuterJoinTypeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 362, MySQLParser.RULE_outerJoinType);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3344;
			localctx._type_ = this._input.LT(1);
			_la = this._input.LA(1);
			if(!(_la===541 || _la===612)) {
			    localctx._type_ = this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			this.state = 3346;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===588) {
				{
				this.state = 3345;
				this.match(MySQLParser.OUTER_SYMBOL);
				}
			}

			this.state = 3348;
			this.match(MySQLParser.JOIN_SYMBOL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public tableFactor(): TableFactorContext {
		let localctx: TableFactorContext = new TableFactorContext(this, this._ctx, this.state);
		this.enterRule(localctx, 364, MySQLParser.RULE_tableFactor);
		try {
			this.state = 3356;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 359, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 3350;
				this.singleTable();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 3351;
				this.singleTableParens();
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 3352;
				this.derivedTable();
				}
				break;
			case 4:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 3353;
				this.tableReferenceListParens();
				}
				break;
			case 5:
				this.enterOuterAlt(localctx, 5);
				{
				this.state = 3354;
				if (!(this.serverVersion >= 80004)) {
					throw this.createFailedPredicateException("this.serverVersion >= 80004");
				}
				this.state = 3355;
				this.tableFunction();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public singleTable(): SingleTableContext {
		let localctx: SingleTableContext = new SingleTableContext(this, this._ctx, this.state);
		this.enterRule(localctx, 366, MySQLParser.RULE_singleTable);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3358;
			this.tableRef();
			this.state = 3360;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 360, this._ctx) ) {
			case 1:
				{
				this.state = 3359;
				this.usePartition();
				}
				break;
			}
			this.state = 3363;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 361, this._ctx) ) {
			case 1:
				{
				this.state = 3362;
				this.tableAlias();
				}
				break;
			}
			this.state = 3366;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 362, this._ctx) ) {
			case 1:
				{
				this.state = 3365;
				this.indexHintList();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public singleTableParens(): SingleTableParensContext {
		let localctx: SingleTableParensContext = new SingleTableParensContext(this, this._ctx, this.state);
		this.enterRule(localctx, 368, MySQLParser.RULE_singleTableParens);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3368;
			this.match(MySQLParser.OPEN_PAR_SYMBOL);
			this.state = 3371;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 363, this._ctx) ) {
			case 1:
				{
				this.state = 3369;
				this.singleTable();
				}
				break;
			case 2:
				{
				this.state = 3370;
				this.singleTableParens();
				}
				break;
			}
			this.state = 3373;
			this.match(MySQLParser.CLOSE_PAR_SYMBOL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public derivedTable(): DerivedTableContext {
		let localctx: DerivedTableContext = new DerivedTableContext(this, this._ctx, this.state);
		this.enterRule(localctx, 370, MySQLParser.RULE_derivedTable);
		try {
			this.state = 3392;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 368, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 3375;
				this.subquery();
				this.state = 3377;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 364, this._ctx) ) {
				case 1:
					{
					this.state = 3376;
					this.tableAlias();
					}
					break;
				}
				this.state = 3381;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 365, this._ctx) ) {
				case 1:
					{
					this.state = 3379;
					if (!(this.serverVersion >= 80000)) {
						throw this.createFailedPredicateException("this.serverVersion >= 80000");
					}
					this.state = 3380;
					this.columnInternalRefList();
					}
					break;
				}
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 3383;
				if (!(this.serverVersion >= 80014)) {
					throw this.createFailedPredicateException("this.serverVersion >= 80014");
				}
				this.state = 3384;
				this.match(MySQLParser.LATERAL_SYMBOL);
				this.state = 3385;
				this.subquery();
				this.state = 3387;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 366, this._ctx) ) {
				case 1:
					{
					this.state = 3386;
					this.tableAlias();
					}
					break;
				}
				this.state = 3390;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 367, this._ctx) ) {
				case 1:
					{
					this.state = 3389;
					this.columnInternalRefList();
					}
					break;
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public tableReferenceListParens(): TableReferenceListParensContext {
		let localctx: TableReferenceListParensContext = new TableReferenceListParensContext(this, this._ctx, this.state);
		this.enterRule(localctx, 372, MySQLParser.RULE_tableReferenceListParens);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3394;
			this.match(MySQLParser.OPEN_PAR_SYMBOL);
			this.state = 3397;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 369, this._ctx) ) {
			case 1:
				{
				this.state = 3395;
				this.tableReferenceList();
				}
				break;
			case 2:
				{
				this.state = 3396;
				this.tableReferenceListParens();
				}
				break;
			}
			this.state = 3399;
			this.match(MySQLParser.CLOSE_PAR_SYMBOL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public tableFunction(): TableFunctionContext {
		let localctx: TableFunctionContext = new TableFunctionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 374, MySQLParser.RULE_tableFunction);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3401;
			this.match(MySQLParser.JSON_TABLE_SYMBOL);
			this.state = 3402;
			this.match(MySQLParser.OPEN_PAR_SYMBOL);
			this.state = 3403;
			this.expr(0);
			this.state = 3404;
			this.match(MySQLParser.COMMA_SYMBOL);
			this.state = 3405;
			this.textStringLiteral();
			this.state = 3406;
			this.columnsClause();
			this.state = 3407;
			this.match(MySQLParser.CLOSE_PAR_SYMBOL);
			this.state = 3409;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 370, this._ctx) ) {
			case 1:
				{
				this.state = 3408;
				this.tableAlias();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public columnsClause(): ColumnsClauseContext {
		let localctx: ColumnsClauseContext = new ColumnsClauseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 376, MySQLParser.RULE_columnsClause);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3411;
			this.match(MySQLParser.COLUMNS_SYMBOL);
			this.state = 3412;
			this.match(MySQLParser.OPEN_PAR_SYMBOL);
			this.state = 3413;
			this.jtColumn();
			this.state = 3418;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===406) {
				{
				{
				this.state = 3414;
				this.match(MySQLParser.COMMA_SYMBOL);
				this.state = 3415;
				this.jtColumn();
				}
				}
				this.state = 3420;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 3421;
			this.match(MySQLParser.CLOSE_PAR_SYMBOL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public jtColumn(): JtColumnContext {
		let localctx: JtColumnContext = new JtColumnContext(this, this._ctx, this.state);
		this.enterRule(localctx, 378, MySQLParser.RULE_jtColumn);
		let _la: number;
		try {
			this.state = 3446;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 375, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 3423;
				this.identifier();
				this.state = 3424;
				this.match(MySQLParser.FOR_SYMBOL);
				this.state = 3425;
				this.match(MySQLParser.ORDINALITY_SYMBOL);
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 3427;
				this.identifier();
				this.state = 3428;
				this.dataType();
				this.state = 3431;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 372, this._ctx) ) {
				case 1:
					{
					this.state = 3429;
					if (!(this.serverVersion >= 80014)) {
						throw this.createFailedPredicateException("this.serverVersion >= 80014");
					}
					this.state = 3430;
					this.collate();
					}
					break;
				}
				this.state = 3434;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===496) {
					{
					this.state = 3433;
					this.match(MySQLParser.EXISTS_SYMBOL);
					}
				}

				this.state = 3436;
				this.match(MySQLParser.PATH_SYMBOL);
				this.state = 3437;
				this.textStringLiteral();
				this.state = 3439;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===130 || _la===478 || _la===576) {
					{
					this.state = 3438;
					this.onEmptyOrError();
					}
				}

				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 3441;
				this.match(MySQLParser.NESTED_SYMBOL);
				this.state = 3442;
				this.match(MySQLParser.PATH_SYMBOL);
				this.state = 3443;
				this.textStringLiteral();
				this.state = 3444;
				this.columnsClause();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public onEmptyOrError(): OnEmptyOrErrorContext {
		let localctx: OnEmptyOrErrorContext = new OnEmptyOrErrorContext(this, this._ctx, this.state);
		this.enterRule(localctx, 380, MySQLParser.RULE_onEmptyOrError);
		let _la: number;
		try {
			this.state = 3456;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 378, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 3448;
				this.onEmpty();
				this.state = 3450;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===130 || _la===478 || _la===576) {
					{
					this.state = 3449;
					this.onError();
					}
				}

				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 3452;
				this.onError();
				this.state = 3454;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===130 || _la===478 || _la===576) {
					{
					this.state = 3453;
					this.onEmpty();
					}
				}

				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public onEmpty(): OnEmptyContext {
		let localctx: OnEmptyContext = new OnEmptyContext(this, this._ctx, this.state);
		this.enterRule(localctx, 382, MySQLParser.RULE_onEmpty);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3458;
			this.jtOnResponse();
			this.state = 3459;
			this.match(MySQLParser.ON_SYMBOL);
			this.state = 3460;
			this.match(MySQLParser.EMPTY_SYMBOL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public onError(): OnErrorContext {
		let localctx: OnErrorContext = new OnErrorContext(this, this._ctx, this.state);
		this.enterRule(localctx, 384, MySQLParser.RULE_onError);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3462;
			this.jtOnResponse();
			this.state = 3463;
			this.match(MySQLParser.ON_SYMBOL);
			this.state = 3464;
			this.match(MySQLParser.ERROR_SYMBOL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public jtOnResponse(): JtOnResponseContext {
		let localctx: JtOnResponseContext = new JtOnResponseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 386, MySQLParser.RULE_jtOnResponse);
		try {
			this.state = 3470;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 130:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 3466;
				this.match(MySQLParser.ERROR_SYMBOL);
				}
				break;
			case 576:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 3467;
				this.match(MySQLParser.NULL_SYMBOL);
				}
				break;
			case 478:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 3468;
				this.match(MySQLParser.DEFAULT_SYMBOL);
				this.state = 3469;
				this.textStringLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public unionOption(): UnionOptionContext {
		let localctx: UnionOptionContext = new UnionOptionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 388, MySQLParser.RULE_unionOption);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3472;
			_la = this._input.LA(1);
			if(!(_la===427 || _la===484)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public tableAlias(): TableAliasContext {
		let localctx: TableAliasContext = new TableAliasContext(this, this._ctx, this.state);
		this.enterRule(localctx, 390, MySQLParser.RULE_tableAlias);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3477;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 380, this._ctx) ) {
			case 1:
				{
				this.state = 3474;
				this.match(MySQLParser.AS_SYMBOL);
				}
				break;
			case 2:
				{
				this.state = 3475;
				if (!(this.serverVersion < 80017)) {
					throw this.createFailedPredicateException("this.serverVersion < 80017");
				}
				this.state = 3476;
				this.match(MySQLParser.EQUAL_OPERATOR);
				}
				break;
			}
			this.state = 3479;
			this.identifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public indexHintList(): IndexHintListContext {
		let localctx: IndexHintListContext = new IndexHintListContext(this, this._ctx, this.state);
		this.enterRule(localctx, 392, MySQLParser.RULE_indexHintList);
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3481;
			this.indexHint();
			this.state = 3486;
			this._errHandler.sync(this);
			_alt = this._interp.adaptivePredict(this._input, 381, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3482;
					this.match(MySQLParser.COMMA_SYMBOL);
					this.state = 3483;
					this.indexHint();
					}
					}
				}
				this.state = 3488;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 381, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public indexHint(): IndexHintContext {
		let localctx: IndexHintContext = new IndexHintContext(this, this._ctx, this.state);
		this.enterRule(localctx, 394, MySQLParser.RULE_indexHint);
		let _la: number;
		try {
			this.state = 3509;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 504:
			case 520:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 3489;
				this.indexHintType();
				this.state = 3490;
				this.keyOrIndex();
				this.state = 3492;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===506) {
					{
					this.state = 3491;
					this.indexHintClause();
					}
				}

				this.state = 3494;
				this.match(MySQLParser.OPEN_PAR_SYMBOL);
				this.state = 3495;
				this.indexList();
				this.state = 3496;
				this.match(MySQLParser.CLOSE_PAR_SYMBOL);
				}
				break;
			case 665:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 3498;
				this.match(MySQLParser.USE_SYMBOL);
				this.state = 3499;
				this.keyOrIndex();
				this.state = 3501;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===506) {
					{
					this.state = 3500;
					this.indexHintClause();
					}
				}

				this.state = 3503;
				this.match(MySQLParser.OPEN_PAR_SYMBOL);
				this.state = 3505;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 384, this._ctx) ) {
				case 1:
					{
					this.state = 3504;
					this.indexList();
					}
					break;
				}
				this.state = 3507;
				this.match(MySQLParser.CLOSE_PAR_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public indexHintType(): IndexHintTypeContext {
		let localctx: IndexHintTypeContext = new IndexHintTypeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 396, MySQLParser.RULE_indexHintType);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3511;
			_la = this._input.LA(1);
			if(!(_la===504 || _la===520)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public keyOrIndex(): KeyOrIndexContext {
		let localctx: KeyOrIndexContext = new KeyOrIndexContext(this, this._ctx, this.state);
		this.enterRule(localctx, 398, MySQLParser.RULE_keyOrIndex);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3513;
			_la = this._input.LA(1);
			if(!(_la===521 || _la===537)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public constraintKeyType(): ConstraintKeyTypeContext {
		let localctx: ConstraintKeyTypeContext = new ConstraintKeyTypeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 400, MySQLParser.RULE_constraintKeyType);
		let _la: number;
		try {
			this.state = 3521;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 593:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 3515;
				this.match(MySQLParser.PRIMARY_SYMBOL);
				this.state = 3516;
				this.match(MySQLParser.KEY_SYMBOL);
				}
				break;
			case 660:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 3517;
				this.match(MySQLParser.UNIQUE_SYMBOL);
				this.state = 3519;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===521 || _la===537) {
					{
					this.state = 3518;
					this.keyOrIndex();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public indexHintClause(): IndexHintClauseContext {
		let localctx: IndexHintClauseContext = new IndexHintClauseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 402, MySQLParser.RULE_indexHintClause);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3523;
			this.match(MySQLParser.FOR_SYMBOL);
			this.state = 3529;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 535:
				{
				this.state = 3524;
				this.match(MySQLParser.JOIN_SYMBOL);
				}
				break;
			case 586:
				{
				this.state = 3525;
				this.match(MySQLParser.ORDER_SYMBOL);
				this.state = 3526;
				this.match(MySQLParser.BY_SYMBOL);
				}
				break;
			case 512:
				{
				this.state = 3527;
				this.match(MySQLParser.GROUP_SYMBOL);
				this.state = 3528;
				this.match(MySQLParser.BY_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public indexList(): IndexListContext {
		let localctx: IndexListContext = new IndexListContext(this, this._ctx, this.state);
		this.enterRule(localctx, 404, MySQLParser.RULE_indexList);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3531;
			this.indexListElement();
			this.state = 3536;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===406) {
				{
				{
				this.state = 3532;
				this.match(MySQLParser.COMMA_SYMBOL);
				this.state = 3533;
				this.indexListElement();
				}
				}
				this.state = 3538;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public indexListElement(): IndexListElementContext {
		let localctx: IndexListElementContext = new IndexListElementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 406, MySQLParser.RULE_indexListElement);
		try {
			this.state = 3541;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 390, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 3539;
				this.identifier();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 3540;
				this.match(MySQLParser.PRIMARY_SYMBOL);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public updateStatement(): UpdateStatementContext {
		let localctx: UpdateStatementContext = new UpdateStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 408, MySQLParser.RULE_updateStatement);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3545;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 391, this._ctx) ) {
			case 1:
				{
				this.state = 3543;
				if (!(this.serverVersion >= 80000)) {
					throw this.createFailedPredicateException("this.serverVersion >= 80000");
				}
				this.state = 3544;
				this.withClause();
				}
				break;
			}
			this.state = 3547;
			this.match(MySQLParser.UPDATE_SYMBOL);
			this.state = 3549;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 392, this._ctx) ) {
			case 1:
				{
				this.state = 3548;
				this.match(MySQLParser.LOW_PRIORITY_SYMBOL);
				}
				break;
			}
			this.state = 3552;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 393, this._ctx) ) {
			case 1:
				{
				this.state = 3551;
				this.match(MySQLParser.IGNORE_SYMBOL);
				}
				break;
			}
			this.state = 3554;
			this.tableReferenceList();
			this.state = 3555;
			this.match(MySQLParser.SET_SYMBOL);
			this.state = 3556;
			this.updateList();
			this.state = 3558;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===680) {
				{
				this.state = 3557;
				this.whereClause();
				}
			}

			this.state = 3561;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===586) {
				{
				this.state = 3560;
				this.orderClause();
				}
			}

			this.state = 3564;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===543) {
				{
				this.state = 3563;
				this.simpleLimitClause();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public transactionOrLockingStatement(): TransactionOrLockingStatementContext {
		let localctx: TransactionOrLockingStatementContext = new TransactionOrLockingStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 410, MySQLParser.RULE_transactionOrLockingStatement);
		try {
			this.state = 3570;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 397, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 3566;
				this.transactionStatement();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 3567;
				this.savepointStatement();
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 3568;
				this.lockStatement();
				}
				break;
			case 4:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 3569;
				this.xaStatement();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public transactionStatement(): TransactionStatementContext {
		let localctx: TransactionStatementContext = new TransactionStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 412, MySQLParser.RULE_transactionStatement);
		let _la: number;
		try {
			let _alt: number;
			this.state = 3597;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 48:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 3572;
				this.match(MySQLParser.START_SYMBOL);
				this.state = 3573;
				this.match(MySQLParser.TRANSACTION_SYMBOL);
				this.state = 3577;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 398, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 3574;
						this.transactionCharacteristic();
						}
						}
					}
					this.state = 3579;
					this._errHandler.sync(this);
					_alt = this._interp.adaptivePredict(this._input, 398, this._ctx);
				}
				}
				break;
			case 12:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 3580;
				this.match(MySQLParser.COMMIT_SYMBOL);
				this.state = 3582;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===372) {
					{
					this.state = 3581;
					this.match(MySQLParser.WORK_SYMBOL);
					}
				}

				this.state = 3589;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===430) {
					{
					this.state = 3584;
					this.match(MySQLParser.AND_SYMBOL);
					this.state = 3586;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la===27) {
						{
						this.state = 3585;
						this.match(MySQLParser.NO_SYMBOL);
						}
					}

					this.state = 3588;
					this.match(MySQLParser.CHAIN_SYMBOL);
					}
				}

				this.state = 3595;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===27 || _la===603) {
					{
					this.state = 3592;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la===27) {
						{
						this.state = 3591;
						this.match(MySQLParser.NO_SYMBOL);
						}
					}

					this.state = 3594;
					this.match(MySQLParser.RELEASE_SYMBOL);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public beginWork(): BeginWorkContext {
		let localctx: BeginWorkContext = new BeginWorkContext(this, this._ctx, this.state);
		this.enterRule(localctx, 414, MySQLParser.RULE_beginWork);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3599;
			this.match(MySQLParser.BEGIN_SYMBOL);
			this.state = 3601;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===372) {
				{
				this.state = 3600;
				this.match(MySQLParser.WORK_SYMBOL);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public transactionCharacteristic(): TransactionCharacteristicContext {
		let localctx: TransactionCharacteristicContext = new TransactionCharacteristicContext(this, this._ctx, this.state);
		this.enterRule(localctx, 416, MySQLParser.RULE_transactionCharacteristic);
		let _la: number;
		try {
			this.state = 3609;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 406, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 3603;
				this.match(MySQLParser.WITH_SYMBOL);
				this.state = 3604;
				this.match(MySQLParser.CONSISTENT_SYMBOL);
				this.state = 3605;
				this.match(MySQLParser.SNAPSHOT_SYMBOL);
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 3606;
				if (!(this.serverVersion >= 50605)) {
					throw this.createFailedPredicateException("this.serverVersion >= 50605");
				}
				this.state = 3607;
				this.match(MySQLParser.READ_SYMBOL);
				this.state = 3608;
				_la = this._input.LA(1);
				if(!(_la===581 || _la===684)) {
				this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public savepointStatement(): SavepointStatementContext {
		let localctx: SavepointStatementContext = new SavepointStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 418, MySQLParser.RULE_savepointStatement);
		let _la: number;
		try {
			this.state = 3640;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 41:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 3611;
				this.match(MySQLParser.SAVEPOINT_SYMBOL);
				this.state = 3612;
				this.identifier();
				}
				break;
			case 40:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 3613;
				this.match(MySQLParser.ROLLBACK_SYMBOL);
				this.state = 3615;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===372) {
					{
					this.state = 3614;
					this.match(MySQLParser.WORK_SYMBOL);
					}
				}

				this.state = 3635;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case 653:
					{
					this.state = 3617;
					this.match(MySQLParser.TO_SYMBOL);
					this.state = 3619;
					this._errHandler.sync(this);
					switch ( this._interp.adaptivePredict(this._input, 408, this._ctx) ) {
					case 1:
						{
						this.state = 3618;
						this.match(MySQLParser.SAVEPOINT_SYMBOL);
						}
						break;
					}
					this.state = 3621;
					this.identifier();
					}
					break;
				case -1:
				case 27:
				case 407:
				case 430:
				case 603:
					{
					this.state = 3627;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la===430) {
						{
						this.state = 3622;
						this.match(MySQLParser.AND_SYMBOL);
						this.state = 3624;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la===27) {
							{
							this.state = 3623;
							this.match(MySQLParser.NO_SYMBOL);
							}
						}

						this.state = 3626;
						this.match(MySQLParser.CHAIN_SYMBOL);
						}
					}

					this.state = 3633;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la===27 || _la===603) {
						{
						this.state = 3630;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la===27) {
							{
							this.state = 3629;
							this.match(MySQLParser.NO_SYMBOL);
							}
						}

						this.state = 3632;
						this.match(MySQLParser.RELEASE_SYMBOL);
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 603:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 3637;
				this.match(MySQLParser.RELEASE_SYMBOL);
				this.state = 3638;
				this.match(MySQLParser.SAVEPOINT_SYMBOL);
				this.state = 3639;
				this.identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public lockStatement(): LockStatementContext {
		let localctx: LockStatementContext = new LockStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 420, MySQLParser.RULE_lockStatement);
		let _la: number;
		try {
			this.state = 3664;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 417, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 3642;
				this.match(MySQLParser.LOCK_SYMBOL);
				this.state = 3643;
				_la = this._input.LA(1);
				if(!(_la===340 || _la===647)) {
				this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				this.state = 3644;
				this.lockItem();
				this.state = 3649;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la===406) {
					{
					{
					this.state = 3645;
					this.match(MySQLParser.COMMA_SYMBOL);
					this.state = 3646;
					this.lockItem();
					}
					}
					this.state = 3651;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 3652;
				if (!(this.serverVersion >= 80000)) {
					throw this.createFailedPredicateException("this.serverVersion >= 80000");
				}
				this.state = 3653;
				this.match(MySQLParser.LOCK_SYMBOL);
				this.state = 3654;
				this.match(MySQLParser.INSTANCE_SYMBOL);
				this.state = 3655;
				this.match(MySQLParser.FOR_SYMBOL);
				this.state = 3656;
				this.match(MySQLParser.BACKUP_SYMBOL);
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 3657;
				this.match(MySQLParser.UNLOCK_SYMBOL);
				this.state = 3662;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 416, this._ctx) ) {
				case 1:
					{
					this.state = 3658;
					this.match(MySQLParser.TABLES_SYMBOL);
					}
					break;
				case 2:
					{
					this.state = 3659;
					this.match(MySQLParser.TABLE_SYMBOL);
					}
					break;
				case 3:
					{
					this.state = 3660;
					if (!(this.serverVersion >= 80000)) {
						throw this.createFailedPredicateException("this.serverVersion >= 80000");
					}
					this.state = 3661;
					this.match(MySQLParser.INSTANCE_SYMBOL);
					}
					break;
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public lockItem(): LockItemContext {
		let localctx: LockItemContext = new LockItemContext(this, this._ctx, this.state);
		this.enterRule(localctx, 422, MySQLParser.RULE_lockItem);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3666;
			this.tableRef();
			this.state = 3668;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 418, this._ctx) ) {
			case 1:
				{
				this.state = 3667;
				this.tableAlias();
				}
				break;
			}
			this.state = 3670;
			this.lockOption();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public lockOption(): LockOptionContext {
		let localctx: LockOptionContext = new LockOptionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 424, MySQLParser.RULE_lockOption);
		let _la: number;
		try {
			this.state = 3680;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 598:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 3672;
				this.match(MySQLParser.READ_SYMBOL);
				this.state = 3674;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===180) {
					{
					this.state = 3673;
					this.match(MySQLParser.LOCAL_SYMBOL);
					}
				}

				}
				break;
			case 554:
			case 684:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 3677;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===554) {
					{
					this.state = 3676;
					this.match(MySQLParser.LOW_PRIORITY_SYMBOL);
					}
				}

				this.state = 3679;
				this.match(MySQLParser.WRITE_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public xaStatement(): XaStatementContext {
		let localctx: XaStatementContext = new XaStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 426, MySQLParser.RULE_xaStatement);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3682;
			this.match(MySQLParser.XA_SYMBOL);
			this.state = 3709;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 5:
			case 48:
				{
				this.state = 3683;
				_la = this._input.LA(1);
				if(!(_la===5 || _la===48)) {
				this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				this.state = 3684;
				this.xid();
				this.state = 3686;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===291 || _la===535) {
					{
					this.state = 3685;
					_la = this._input.LA(1);
					if(!(_la===291 || _la===535)) {
					this._errHandler.recoverInline(this);
					}
					else {
						this._errHandler.reportMatch(this);
					    this.consume();
					}
					}
				}

				}
				break;
			case 16:
				{
				this.state = 3688;
				this.match(MySQLParser.END_SYMBOL);
				this.state = 3689;
				this.xid();
				this.state = 3695;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===336) {
					{
					this.state = 3690;
					this.match(MySQLParser.SUSPEND_SYMBOL);
					this.state = 3693;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la===506) {
						{
						this.state = 3691;
						this.match(MySQLParser.FOR_SYMBOL);
						this.state = 3692;
						this.match(MySQLParser.MIGRATE_SYMBOL);
						}
					}

					}
				}

				}
				break;
			case 35:
				{
				this.state = 3697;
				this.match(MySQLParser.PREPARE_SYMBOL);
				this.state = 3698;
				this.xid();
				}
				break;
			case 12:
				{
				this.state = 3699;
				this.match(MySQLParser.COMMIT_SYMBOL);
				this.state = 3700;
				this.xid();
				this.state = 3703;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===245) {
					{
					this.state = 3701;
					this.match(MySQLParser.ONE_SYMBOL);
					this.state = 3702;
					this.match(MySQLParser.PHASE_SYMBOL);
					}
				}

				}
				break;
			case 40:
				{
				this.state = 3705;
				this.match(MySQLParser.ROLLBACK_SYMBOL);
				this.state = 3706;
				this.xid();
				}
				break;
			case 271:
				{
				this.state = 3707;
				this.match(MySQLParser.RECOVER_SYMBOL);
				this.state = 3708;
				this.xaConvert();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public xaConvert(): XaConvertContext {
		let localctx: XaConvertContext = new XaConvertContext(this, this._ctx, this.state);
		this.enterRule(localctx, 428, MySQLParser.RULE_xaConvert);
		let _la: number;
		try {
			this.state = 3717;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 428, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 3711;
				if (!(this.serverVersion >= 50704)) {
					throw this.createFailedPredicateException("this.serverVersion >= 50704");
				}
				this.state = 3714;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===457) {
					{
					this.state = 3712;
					this.match(MySQLParser.CONVERT_SYMBOL);
					this.state = 3713;
					this.match(MySQLParser.XID_SYMBOL);
					}
				}

				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				// tslint:disable-next-line:no-empty
				{
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public xid(): XidContext {
		let localctx: XidContext = new XidContext(this, this._ctx, this.state);
		this.enterRule(localctx, 430, MySQLParser.RULE_xid);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3719;
			this.textString();
			this.state = 3726;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===406) {
				{
				this.state = 3720;
				this.match(MySQLParser.COMMA_SYMBOL);
				this.state = 3721;
				this.textString();
				this.state = 3724;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===406) {
					{
					this.state = 3722;
					this.match(MySQLParser.COMMA_SYMBOL);
					this.state = 3723;
					this.ulong_number();
					}
				}

				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public replicationStatement(): ReplicationStatementContext {
		let localctx: ReplicationStatementContext = new ReplicationStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 432, MySQLParser.RULE_replicationStatement);
		let _la: number;
		try {
			this.state = 3761;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 434, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 3728;
				this.match(MySQLParser.PURGE_SYMBOL);
				this.state = 3729;
				_la = this._input.LA(1);
				if(!(_la===185 || _la===437)) {
				this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				this.state = 3730;
				this.match(MySQLParser.LOGS_SYMBOL);
				this.state = 3735;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case 653:
					{
					this.state = 3731;
					this.match(MySQLParser.TO_SYMBOL);
					this.state = 3732;
					this.textLiteral();
					}
					break;
				case 434:
					{
					this.state = 3733;
					this.match(MySQLParser.BEFORE_SYMBOL);
					this.state = 3734;
					this.expr(0);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 3737;
				this.changeMaster();
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 3738;
				this.match(MySQLParser.RESET_SYMBOL);
				this.state = 3739;
				this.resetOption();
				this.state = 3744;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la===406) {
					{
					{
					this.state = 3740;
					this.match(MySQLParser.COMMA_SYMBOL);
					this.state = 3741;
					this.resetOption();
					}
					}
					this.state = 3746;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;
			case 4:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 3747;
				if (!(this.serverVersion > 80000)) {
					throw this.createFailedPredicateException("this.serverVersion > 80000");
				}
				this.state = 3748;
				this.match(MySQLParser.RESET_SYMBOL);
				this.state = 3749;
				this.match(MySQLParser.PERSIST_SYMBOL);
				this.state = 3753;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===519) {
					{
					this.state = 3750;
					this.ifExists();
					this.state = 3751;
					this.identifier();
					}
				}

				}
				break;
			case 5:
				this.enterOuterAlt(localctx, 5);
				{
				this.state = 3755;
				this.slave();
				}
				break;
			case 6:
				this.enterOuterAlt(localctx, 6);
				{
				this.state = 3756;
				if (!(this.serverVersion >= 50700)) {
					throw this.createFailedPredicateException("this.serverVersion >= 50700");
				}
				this.state = 3757;
				this.changeReplication();
				}
				break;
			case 7:
				this.enterOuterAlt(localctx, 7);
				{
				this.state = 3758;
				this.replicationLoad();
				}
				break;
			case 8:
				this.enterOuterAlt(localctx, 8);
				{
				this.state = 3759;
				if (!(this.serverVersion > 50706)) {
					throw this.createFailedPredicateException("this.serverVersion > 50706");
				}
				this.state = 3760;
				this.groupReplication();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public resetOption(): ResetOptionContext {
		let localctx: ResetOptionContext = new ResetOptionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 434, MySQLParser.RULE_resetOption);
		try {
			this.state = 3777;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 438, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 3763;
				localctx._option = this.match(MySQLParser.MASTER_SYMBOL);
				this.state = 3765;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 435, this._ctx) ) {
				case 1:
					{
					this.state = 3764;
					this.masterResetOptions();
					}
					break;
				}
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 3767;
				if (!(this.serverVersion < 80000)) {
					throw this.createFailedPredicateException("this.serverVersion < 80000");
				}
				this.state = 3768;
				localctx._option = this.match(MySQLParser.QUERY_SYMBOL);
				this.state = 3769;
				this.match(MySQLParser.CACHE_SYMBOL);
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 3770;
				localctx._option = this.match(MySQLParser.SLAVE_SYMBOL);
				this.state = 3772;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 436, this._ctx) ) {
				case 1:
					{
					this.state = 3771;
					this.match(MySQLParser.ALL_SYMBOL);
					}
					break;
				}
				this.state = 3775;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 437, this._ctx) ) {
				case 1:
					{
					this.state = 3774;
					this.channel();
					}
					break;
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public masterResetOptions(): MasterResetOptionsContext {
		let localctx: MasterResetOptionsContext = new MasterResetOptionsContext(this, this._ctx, this.state);
		this.enterRule(localctx, 436, MySQLParser.RULE_masterResetOptions);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3779;
			if (!(this.serverVersion >= 80000)) {
				throw this.createFailedPredicateException("this.serverVersion >= 80000");
			}
			this.state = 3780;
			this.match(MySQLParser.TO_SYMBOL);
			this.state = 3785;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 439, this._ctx) ) {
			case 1:
				{
				this.state = 3781;
				if (!(this.serverVersion < 80017)) {
					throw this.createFailedPredicateException("this.serverVersion < 80017");
				}
				this.state = 3782;
				this.real_ulong_number();
				}
				break;
			case 2:
				{
				this.state = 3783;
				if (!(this.serverVersion >= 80017)) {
					throw this.createFailedPredicateException("this.serverVersion >= 80017");
				}
				this.state = 3784;
				this.real_ulonglong_number();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public replicationLoad(): ReplicationLoadContext {
		let localctx: ReplicationLoadContext = new ReplicationLoadContext(this, this._ctx, this.state);
		this.enterRule(localctx, 438, MySQLParser.RULE_replicationLoad);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3787;
			this.match(MySQLParser.LOAD_SYMBOL);
			this.state = 3791;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 109:
				{
				this.state = 3788;
				this.match(MySQLParser.DATA_SYMBOL);
				}
				break;
			case 647:
				{
				this.state = 3789;
				this.match(MySQLParser.TABLE_SYMBOL);
				this.state = 3790;
				this.tableRef();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 3793;
			this.match(MySQLParser.FROM_SYMBOL);
			this.state = 3794;
			this.match(MySQLParser.MASTER_SYMBOL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public changeMaster(): ChangeMasterContext {
		let localctx: ChangeMasterContext = new ChangeMasterContext(this, this._ctx, this.state);
		this.enterRule(localctx, 440, MySQLParser.RULE_changeMaster);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3796;
			this.match(MySQLParser.CHANGE_SYMBOL);
			this.state = 3797;
			this.match(MySQLParser.MASTER_SYMBOL);
			this.state = 3798;
			this.match(MySQLParser.TO_SYMBOL);
			this.state = 3799;
			this.changeMasterOptions();
			this.state = 3801;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 441, this._ctx) ) {
			case 1:
				{
				this.state = 3800;
				this.channel();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public changeMasterOptions(): ChangeMasterOptionsContext {
		let localctx: ChangeMasterOptionsContext = new ChangeMasterOptionsContext(this, this._ctx, this.state);
		this.enterRule(localctx, 442, MySQLParser.RULE_changeMasterOptions);
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3803;
			this.masterOption();
			this.state = 3808;
			this._errHandler.sync(this);
			_alt = this._interp.adaptivePredict(this._input, 442, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3804;
					this.match(MySQLParser.COMMA_SYMBOL);
					this.state = 3805;
					this.masterOption();
					}
					}
				}
				this.state = 3810;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 442, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public masterOption(): MasterOptionContext {
		let localctx: MasterOptionContext = new MasterOptionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 444, MySQLParser.RULE_masterOption);
		try {
			this.state = 3896;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 187:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 3811;
				this.match(MySQLParser.MASTER_HOST_SYMBOL);
				this.state = 3812;
				this.match(MySQLParser.EQUAL_OPERATOR);
				this.state = 3813;
				this.textStringNoLinebreak();
				}
				break;
			case 759:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 3814;
				this.match(MySQLParser.NETWORK_NAMESPACE_SYMBOL);
				this.state = 3815;
				this.match(MySQLParser.EQUAL_OPERATOR);
				this.state = 3816;
				this.textStringNoLinebreak();
				}
				break;
			case 555:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 3817;
				this.match(MySQLParser.MASTER_BIND_SYMBOL);
				this.state = 3818;
				this.match(MySQLParser.EQUAL_OPERATOR);
				this.state = 3819;
				this.textStringNoLinebreak();
				}
				break;
			case 191:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 3820;
				this.match(MySQLParser.MASTER_USER_SYMBOL);
				this.state = 3821;
				this.match(MySQLParser.EQUAL_OPERATOR);
				this.state = 3822;
				this.textStringNoLinebreak();
				}
				break;
			case 192:
				this.enterOuterAlt(localctx, 5);
				{
				this.state = 3823;
				this.match(MySQLParser.MASTER_PASSWORD_SYMBOL);
				this.state = 3824;
				this.match(MySQLParser.EQUAL_OPERATOR);
				this.state = 3825;
				this.textStringNoLinebreak();
				}
				break;
			case 188:
				this.enterOuterAlt(localctx, 6);
				{
				this.state = 3826;
				this.match(MySQLParser.MASTER_PORT_SYMBOL);
				this.state = 3827;
				this.match(MySQLParser.EQUAL_OPERATOR);
				this.state = 3828;
				this.ulong_number();
				}
				break;
			case 194:
				this.enterOuterAlt(localctx, 7);
				{
				this.state = 3829;
				this.match(MySQLParser.MASTER_CONNECT_RETRY_SYMBOL);
				this.state = 3830;
				this.match(MySQLParser.EQUAL_OPERATOR);
				this.state = 3831;
				this.ulong_number();
				}
				break;
			case 195:
				this.enterOuterAlt(localctx, 8);
				{
				this.state = 3832;
				this.match(MySQLParser.MASTER_RETRY_COUNT_SYMBOL);
				this.state = 3833;
				this.match(MySQLParser.EQUAL_OPERATOR);
				this.state = 3834;
				this.ulong_number();
				}
				break;
			case 196:
				this.enterOuterAlt(localctx, 9);
				{
				this.state = 3835;
				this.match(MySQLParser.MASTER_DELAY_SYMBOL);
				this.state = 3836;
				this.match(MySQLParser.EQUAL_OPERATOR);
				this.state = 3837;
				this.ulong_number();
				}
				break;
			case 197:
				this.enterOuterAlt(localctx, 10);
				{
				this.state = 3838;
				this.match(MySQLParser.MASTER_SSL_SYMBOL);
				this.state = 3839;
				this.match(MySQLParser.EQUAL_OPERATOR);
				this.state = 3840;
				this.ulong_number();
				}
				break;
			case 198:
				this.enterOuterAlt(localctx, 11);
				{
				this.state = 3841;
				this.match(MySQLParser.MASTER_SSL_CA_SYMBOL);
				this.state = 3842;
				this.match(MySQLParser.EQUAL_OPERATOR);
				this.state = 3843;
				this.textStringNoLinebreak();
				}
				break;
			case 199:
				this.enterOuterAlt(localctx, 12);
				{
				this.state = 3844;
				this.match(MySQLParser.MASTER_SSL_CAPATH_SYMBOL);
				this.state = 3845;
				this.match(MySQLParser.EQUAL_OPERATOR);
				this.state = 3846;
				this.textStringNoLinebreak();
				}
				break;
			case 200:
				this.enterOuterAlt(localctx, 13);
				{
				this.state = 3847;
				this.match(MySQLParser.MASTER_TLS_VERSION_SYMBOL);
				this.state = 3848;
				this.match(MySQLParser.EQUAL_OPERATOR);
				this.state = 3849;
				this.textStringNoLinebreak();
				}
				break;
			case 201:
				this.enterOuterAlt(localctx, 14);
				{
				this.state = 3850;
				this.match(MySQLParser.MASTER_SSL_CERT_SYMBOL);
				this.state = 3851;
				this.match(MySQLParser.EQUAL_OPERATOR);
				this.state = 3852;
				this.textStringNoLinebreak();
				}
				break;
			case 768:
				this.enterOuterAlt(localctx, 15);
				{
				this.state = 3853;
				this.match(MySQLParser.MASTER_TLS_CIPHERSUITES_SYMBOL);
				this.state = 3854;
				this.match(MySQLParser.EQUAL_OPERATOR);
				this.state = 3855;
				this.masterTlsCiphersuitesDef();
				}
				break;
			case 202:
				this.enterOuterAlt(localctx, 16);
				{
				this.state = 3856;
				this.match(MySQLParser.MASTER_SSL_CIPHER_SYMBOL);
				this.state = 3857;
				this.match(MySQLParser.EQUAL_OPERATOR);
				this.state = 3858;
				this.textStringNoLinebreak();
				}
				break;
			case 205:
				this.enterOuterAlt(localctx, 17);
				{
				this.state = 3859;
				this.match(MySQLParser.MASTER_SSL_KEY_SYMBOL);
				this.state = 3860;
				this.match(MySQLParser.EQUAL_OPERATOR);
				this.state = 3861;
				this.textStringNoLinebreak();
				}
				break;
			case 556:
				this.enterOuterAlt(localctx, 18);
				{
				this.state = 3862;
				this.match(MySQLParser.MASTER_SSL_VERIFY_SERVER_CERT_SYMBOL);
				this.state = 3863;
				this.match(MySQLParser.EQUAL_OPERATOR);
				this.state = 3864;
				this.ulong_number();
				}
				break;
			case 203:
				this.enterOuterAlt(localctx, 19);
				{
				this.state = 3865;
				this.match(MySQLParser.MASTER_SSL_CRL_SYMBOL);
				this.state = 3866;
				this.match(MySQLParser.EQUAL_OPERATOR);
				this.state = 3867;
				this.textLiteral();
				}
				break;
			case 204:
				this.enterOuterAlt(localctx, 20);
				{
				this.state = 3868;
				this.match(MySQLParser.MASTER_SSL_CRLPATH_SYMBOL);
				this.state = 3869;
				this.match(MySQLParser.EQUAL_OPERATOR);
				this.state = 3870;
				this.textStringNoLinebreak();
				}
				break;
			case 742:
				this.enterOuterAlt(localctx, 21);
				{
				this.state = 3871;
				this.match(MySQLParser.MASTER_PUBLIC_KEY_PATH_SYMBOL);
				this.state = 3872;
				this.match(MySQLParser.EQUAL_OPERATOR);
				this.state = 3873;
				this.textStringNoLinebreak();
				}
				break;
			case 743:
				this.enterOuterAlt(localctx, 22);
				{
				this.state = 3874;
				this.match(MySQLParser.GET_MASTER_PUBLIC_KEY_SYMBOL);
				this.state = 3875;
				this.match(MySQLParser.EQUAL_OPERATOR);
				this.state = 3876;
				this.ulong_number();
				}
				break;
			case 186:
				this.enterOuterAlt(localctx, 23);
				{
				this.state = 3877;
				this.match(MySQLParser.MASTER_HEARTBEAT_PERIOD_SYMBOL);
				this.state = 3878;
				this.match(MySQLParser.EQUAL_OPERATOR);
				this.state = 3879;
				this.ulong_number();
				}
				break;
			case 160:
				this.enterOuterAlt(localctx, 24);
				{
				this.state = 3880;
				this.match(MySQLParser.IGNORE_SERVER_IDS_SYMBOL);
				this.state = 3881;
				this.match(MySQLParser.EQUAL_OPERATOR);
				this.state = 3882;
				this.serverIdList();
				}
				break;
			case 765:
				this.enterOuterAlt(localctx, 25);
				{
				this.state = 3883;
				this.match(MySQLParser.MASTER_COMPRESSION_ALGORITHM_SYMBOL);
				this.state = 3884;
				this.match(MySQLParser.EQUAL_OPERATOR);
				this.state = 3885;
				this.textStringLiteral();
				}
				break;
			case 766:
				this.enterOuterAlt(localctx, 26);
				{
				this.state = 3886;
				this.match(MySQLParser.MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL);
				this.state = 3887;
				this.match(MySQLParser.EQUAL_OPERATOR);
				this.state = 3888;
				this.ulong_number();
				}
				break;
			case 206:
				this.enterOuterAlt(localctx, 27);
				{
				this.state = 3889;
				this.match(MySQLParser.MASTER_AUTO_POSITION_SYMBOL);
				this.state = 3890;
				this.match(MySQLParser.EQUAL_OPERATOR);
				this.state = 3891;
				this.ulong_number();
				}
				break;
			case 767:
				this.enterOuterAlt(localctx, 28);
				{
				this.state = 3892;
				this.match(MySQLParser.PRIVILEGE_CHECKS_USER_SYMBOL);
				this.state = 3893;
				this.match(MySQLParser.EQUAL_OPERATOR);
				this.state = 3894;
				this.privilegeCheckDef();
				}
				break;
			case 189:
			case 190:
			case 277:
			case 278:
				this.enterOuterAlt(localctx, 29);
				{
				this.state = 3895;
				this.masterFileDef();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public privilegeCheckDef(): PrivilegeCheckDefContext {
		let localctx: PrivilegeCheckDefContext = new PrivilegeCheckDefContext(this, this._ctx, this.state);
		this.enterRule(localctx, 446, MySQLParser.RULE_privilegeCheckDef);
		try {
			this.state = 3900;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 444, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 3898;
				this.userIdentifierOrText();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 3899;
				this.match(MySQLParser.NULL_SYMBOL);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public masterTlsCiphersuitesDef(): MasterTlsCiphersuitesDefContext {
		let localctx: MasterTlsCiphersuitesDefContext = new MasterTlsCiphersuitesDefContext(this, this._ctx, this.state);
		this.enterRule(localctx, 448, MySQLParser.RULE_masterTlsCiphersuitesDef);
		try {
			this.state = 3904;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 445, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 3902;
				this.textStringNoLinebreak();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 3903;
				this.match(MySQLParser.NULL_SYMBOL);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public masterFileDef(): MasterFileDefContext {
		let localctx: MasterFileDefContext = new MasterFileDefContext(this, this._ctx, this.state);
		this.enterRule(localctx, 450, MySQLParser.RULE_masterFileDef);
		try {
			this.state = 3918;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 189:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 3906;
				this.match(MySQLParser.MASTER_LOG_FILE_SYMBOL);
				this.state = 3907;
				this.match(MySQLParser.EQUAL_OPERATOR);
				this.state = 3908;
				this.textStringNoLinebreak();
				}
				break;
			case 190:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 3909;
				this.match(MySQLParser.MASTER_LOG_POS_SYMBOL);
				this.state = 3910;
				this.match(MySQLParser.EQUAL_OPERATOR);
				this.state = 3911;
				this.ulonglong_number();
				}
				break;
			case 277:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 3912;
				this.match(MySQLParser.RELAY_LOG_FILE_SYMBOL);
				this.state = 3913;
				this.match(MySQLParser.EQUAL_OPERATOR);
				this.state = 3914;
				this.textStringNoLinebreak();
				}
				break;
			case 278:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 3915;
				this.match(MySQLParser.RELAY_LOG_POS_SYMBOL);
				this.state = 3916;
				this.match(MySQLParser.EQUAL_OPERATOR);
				this.state = 3917;
				this.ulong_number();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public serverIdList(): ServerIdListContext {
		let localctx: ServerIdListContext = new ServerIdListContext(this, this._ctx, this.state);
		this.enterRule(localctx, 452, MySQLParser.RULE_serverIdList);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3920;
			this.match(MySQLParser.OPEN_PAR_SYMBOL);
			this.state = 3929;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 380)) & ~0x1F) === 0 && ((1 << (_la - 380)) & 7) !== 0) || ((((_la - 421)) & ~0x1F) === 0 && ((1 << (_la - 421)) & 13) !== 0)) {
				{
				this.state = 3921;
				this.ulong_number();
				this.state = 3926;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la===406) {
					{
					{
					this.state = 3922;
					this.match(MySQLParser.COMMA_SYMBOL);
					this.state = 3923;
					this.ulong_number();
					}
					}
					this.state = 3928;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
			}

			this.state = 3931;
			this.match(MySQLParser.CLOSE_PAR_SYMBOL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public changeReplication(): ChangeReplicationContext {
		let localctx: ChangeReplicationContext = new ChangeReplicationContext(this, this._ctx, this.state);
		this.enterRule(localctx, 454, MySQLParser.RULE_changeReplication);
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3933;
			this.match(MySQLParser.CHANGE_SYMBOL);
			this.state = 3934;
			this.match(MySQLParser.REPLICATION_SYMBOL);
			this.state = 3935;
			this.match(MySQLParser.FILTER_SYMBOL);
			this.state = 3936;
			this.filterDefinition();
			this.state = 3941;
			this._errHandler.sync(this);
			_alt = this._interp.adaptivePredict(this._input, 449, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3937;
					this.match(MySQLParser.COMMA_SYMBOL);
					this.state = 3938;
					this.filterDefinition();
					}
					}
				}
				this.state = 3943;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 449, this._ctx);
			}
			this.state = 3946;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 450, this._ctx) ) {
			case 1:
				{
				this.state = 3944;
				if (!(this.serverVersion >= 80000)) {
					throw this.createFailedPredicateException("this.serverVersion >= 80000");
				}
				this.state = 3945;
				this.channel();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public filterDefinition(): FilterDefinitionContext {
		let localctx: FilterDefinitionContext = new FilterDefinitionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 456, MySQLParser.RULE_filterDefinition);
		let _la: number;
		try {
			this.state = 3997;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 284:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 3948;
				this.match(MySQLParser.REPLICATE_DO_DB_SYMBOL);
				this.state = 3949;
				this.match(MySQLParser.EQUAL_OPERATOR);
				this.state = 3950;
				this.match(MySQLParser.OPEN_PAR_SYMBOL);
				this.state = 3952;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 451, this._ctx) ) {
				case 1:
					{
					this.state = 3951;
					this.filterDbList();
					}
					break;
				}
				this.state = 3954;
				this.match(MySQLParser.CLOSE_PAR_SYMBOL);
				}
				break;
			case 285:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 3955;
				this.match(MySQLParser.REPLICATE_IGNORE_DB_SYMBOL);
				this.state = 3956;
				this.match(MySQLParser.EQUAL_OPERATOR);
				this.state = 3957;
				this.match(MySQLParser.OPEN_PAR_SYMBOL);
				this.state = 3959;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 452, this._ctx) ) {
				case 1:
					{
					this.state = 3958;
					this.filterDbList();
					}
					break;
				}
				this.state = 3961;
				this.match(MySQLParser.CLOSE_PAR_SYMBOL);
				}
				break;
			case 286:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 3962;
				this.match(MySQLParser.REPLICATE_DO_TABLE_SYMBOL);
				this.state = 3963;
				this.match(MySQLParser.EQUAL_OPERATOR);
				this.state = 3964;
				this.match(MySQLParser.OPEN_PAR_SYMBOL);
				this.state = 3966;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 453, this._ctx) ) {
				case 1:
					{
					this.state = 3965;
					this.filterTableList();
					}
					break;
				}
				this.state = 3968;
				this.match(MySQLParser.CLOSE_PAR_SYMBOL);
				}
				break;
			case 287:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 3969;
				this.match(MySQLParser.REPLICATE_IGNORE_TABLE_SYMBOL);
				this.state = 3970;
				this.match(MySQLParser.EQUAL_OPERATOR);
				this.state = 3971;
				this.match(MySQLParser.OPEN_PAR_SYMBOL);
				this.state = 3973;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 454, this._ctx) ) {
				case 1:
					{
					this.state = 3972;
					this.filterTableList();
					}
					break;
				}
				this.state = 3975;
				this.match(MySQLParser.CLOSE_PAR_SYMBOL);
				}
				break;
			case 288:
				this.enterOuterAlt(localctx, 5);
				{
				this.state = 3976;
				this.match(MySQLParser.REPLICATE_WILD_DO_TABLE_SYMBOL);
				this.state = 3977;
				this.match(MySQLParser.EQUAL_OPERATOR);
				this.state = 3978;
				this.match(MySQLParser.OPEN_PAR_SYMBOL);
				this.state = 3980;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 455, this._ctx) ) {
				case 1:
					{
					this.state = 3979;
					this.filterStringList();
					}
					break;
				}
				this.state = 3982;
				this.match(MySQLParser.CLOSE_PAR_SYMBOL);
				}
				break;
			case 289:
				this.enterOuterAlt(localctx, 6);
				{
				this.state = 3983;
				this.match(MySQLParser.REPLICATE_WILD_IGNORE_TABLE_SYMBOL);
				this.state = 3984;
				this.match(MySQLParser.EQUAL_OPERATOR);
				this.state = 3985;
				this.match(MySQLParser.OPEN_PAR_SYMBOL);
				this.state = 3987;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 456, this._ctx) ) {
				case 1:
					{
					this.state = 3986;
					this.filterStringList();
					}
					break;
				}
				this.state = 3989;
				this.match(MySQLParser.CLOSE_PAR_SYMBOL);
				}
				break;
			case 290:
				this.enterOuterAlt(localctx, 7);
				{
				this.state = 3990;
				this.match(MySQLParser.REPLICATE_REWRITE_DB_SYMBOL);
				this.state = 3991;
				this.match(MySQLParser.EQUAL_OPERATOR);
				this.state = 3992;
				this.match(MySQLParser.OPEN_PAR_SYMBOL);
				this.state = 3994;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===409) {
					{
					this.state = 3993;
					this.filterDbPairList();
					}
				}

				this.state = 3996;
				this.match(MySQLParser.CLOSE_PAR_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public filterDbList(): FilterDbListContext {
		let localctx: FilterDbListContext = new FilterDbListContext(this, this._ctx, this.state);
		this.enterRule(localctx, 458, MySQLParser.RULE_filterDbList);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3999;
			this.schemaRef();
			this.state = 4004;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===406) {
				{
				{
				this.state = 4000;
				this.match(MySQLParser.COMMA_SYMBOL);
				this.state = 4001;
				this.schemaRef();
				}
				}
				this.state = 4006;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public filterTableList(): FilterTableListContext {
		let localctx: FilterTableListContext = new FilterTableListContext(this, this._ctx, this.state);
		this.enterRule(localctx, 460, MySQLParser.RULE_filterTableList);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4007;
			this.filterTableRef();
			this.state = 4012;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===406) {
				{
				{
				this.state = 4008;
				this.match(MySQLParser.COMMA_SYMBOL);
				this.state = 4009;
				this.filterTableRef();
				}
				}
				this.state = 4014;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public filterStringList(): FilterStringListContext {
		let localctx: FilterStringListContext = new FilterStringListContext(this, this._ctx, this.state);
		this.enterRule(localctx, 462, MySQLParser.RULE_filterStringList);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4015;
			this.filterWildDbTableString();
			this.state = 4020;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===406) {
				{
				{
				this.state = 4016;
				this.match(MySQLParser.COMMA_SYMBOL);
				this.state = 4017;
				this.filterWildDbTableString();
				}
				}
				this.state = 4022;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public filterWildDbTableString(): FilterWildDbTableStringContext {
		let localctx: FilterWildDbTableStringContext = new FilterWildDbTableStringContext(this, this._ctx, this.state);
		this.enterRule(localctx, 464, MySQLParser.RULE_filterWildDbTableString);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4023;
			this.textStringNoLinebreak();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public filterDbPairList(): FilterDbPairListContext {
		let localctx: FilterDbPairListContext = new FilterDbPairListContext(this, this._ctx, this.state);
		this.enterRule(localctx, 466, MySQLParser.RULE_filterDbPairList);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4025;
			this.schemaIdentifierPair();
			this.state = 4030;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===406) {
				{
				{
				this.state = 4026;
				this.match(MySQLParser.COMMA_SYMBOL);
				this.state = 4027;
				this.schemaIdentifierPair();
				}
				}
				this.state = 4032;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public slave(): SlaveContext {
		let localctx: SlaveContext = new SlaveContext(this, this._ctx, this.state);
		this.enterRule(localctx, 468, MySQLParser.RULE_slave);
		try {
			this.state = 4054;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 48:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4033;
				this.match(MySQLParser.START_SYMBOL);
				this.state = 4034;
				this.match(MySQLParser.SLAVE_SYMBOL);
				this.state = 4036;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 463, this._ctx) ) {
				case 1:
					{
					this.state = 4035;
					this.slaveThreadOptions();
					}
					break;
				}
				this.state = 4040;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 464, this._ctx) ) {
				case 1:
					{
					this.state = 4038;
					this.match(MySQLParser.UNTIL_SYMBOL);
					this.state = 4039;
					this.slaveUntilOptions();
					}
					break;
				}
				this.state = 4042;
				this.slaveConnectionOptions();
				this.state = 4044;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 465, this._ctx) ) {
				case 1:
					{
					this.state = 4043;
					this.channel();
					}
					break;
				}
				}
				break;
			case 49:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 4046;
				this.match(MySQLParser.STOP_SYMBOL);
				this.state = 4047;
				this.match(MySQLParser.SLAVE_SYMBOL);
				this.state = 4049;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 466, this._ctx) ) {
				case 1:
					{
					this.state = 4048;
					this.slaveThreadOptions();
					}
					break;
				}
				this.state = 4052;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 467, this._ctx) ) {
				case 1:
					{
					this.state = 4051;
					this.channel();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public slaveUntilOptions(): SlaveUntilOptionsContext {
		let localctx: SlaveUntilOptionsContext = new SlaveUntilOptionsContext(this, this._ctx, this.state);
		this.enterRule(localctx, 470, MySQLParser.RULE_slaveUntilOptions);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4063;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 469, this._ctx) ) {
			case 1:
				{
				this.state = 4056;
				this.masterFileDef();
				}
				break;
			case 2:
				{
				this.state = 4057;
				if (!(this.serverVersion >= 50606)) {
					throw this.createFailedPredicateException("this.serverVersion >= 50606");
				}
				this.state = 4058;
				_la = this._input.LA(1);
				if(!(_la===315 || _la===317)) {
				this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				this.state = 4059;
				this.match(MySQLParser.EQUAL_OPERATOR);
				this.state = 4060;
				this.textString();
				}
				break;
			case 3:
				{
				this.state = 4061;
				if (!(this.serverVersion >= 50606)) {
					throw this.createFailedPredicateException("this.serverVersion >= 50606");
				}
				this.state = 4062;
				this.match(MySQLParser.SQL_AFTER_MTS_GAPS_SYMBOL);
				}
				break;
			}
			this.state = 4069;
			this._errHandler.sync(this);
			_alt = this._interp.adaptivePredict(this._input, 470, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 4065;
					this.match(MySQLParser.COMMA_SYMBOL);
					this.state = 4066;
					this.masterFileDef();
					}
					}
				}
				this.state = 4071;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 470, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public slaveConnectionOptions(): SlaveConnectionOptionsContext {
		let localctx: SlaveConnectionOptionsContext = new SlaveConnectionOptionsContext(this, this._ctx, this.state);
		this.enterRule(localctx, 472, MySQLParser.RULE_slaveConnectionOptions);
		try {
			this.state = 4094;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 475, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4072;
				if (!(this.serverVersion >= 50604)) {
					throw this.createFailedPredicateException("this.serverVersion >= 50604");
				}
				this.state = 4076;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 471, this._ctx) ) {
				case 1:
					{
					this.state = 4073;
					this.match(MySQLParser.USER_SYMBOL);
					this.state = 4074;
					this.match(MySQLParser.EQUAL_OPERATOR);
					this.state = 4075;
					this.textString();
					}
					break;
				}
				this.state = 4081;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 472, this._ctx) ) {
				case 1:
					{
					this.state = 4078;
					this.match(MySQLParser.PASSWORD_SYMBOL);
					this.state = 4079;
					this.match(MySQLParser.EQUAL_OPERATOR);
					this.state = 4080;
					this.textString();
					}
					break;
				}
				this.state = 4086;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 473, this._ctx) ) {
				case 1:
					{
					this.state = 4083;
					this.match(MySQLParser.DEFAULT_AUTH_SYMBOL);
					this.state = 4084;
					this.match(MySQLParser.EQUAL_OPERATOR);
					this.state = 4085;
					this.textString();
					}
					break;
				}
				this.state = 4091;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 474, this._ctx) ) {
				case 1:
					{
					this.state = 4088;
					this.match(MySQLParser.PLUGIN_DIR_SYMBOL);
					this.state = 4089;
					this.match(MySQLParser.EQUAL_OPERATOR);
					this.state = 4090;
					this.textString();
					}
					break;
				}
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				// tslint:disable-next-line:no-empty
				{
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public slaveThreadOptions(): SlaveThreadOptionsContext {
		let localctx: SlaveThreadOptionsContext = new SlaveThreadOptionsContext(this, this._ctx, this.state);
		this.enterRule(localctx, 474, MySQLParser.RULE_slaveThreadOptions);
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4096;
			this.slaveThreadOption();
			this.state = 4101;
			this._errHandler.sync(this);
			_alt = this._interp.adaptivePredict(this._input, 476, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 4097;
					this.match(MySQLParser.COMMA_SYMBOL);
					this.state = 4098;
					this.slaveThreadOption();
					}
					}
				}
				this.state = 4103;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 476, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public slaveThreadOption(): SlaveThreadOptionContext {
		let localctx: SlaveThreadOptionContext = new SlaveThreadOptionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 476, MySQLParser.RULE_slaveThreadOption);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4104;
			_la = this._input.LA(1);
			if(!(_la===279 || _la===321)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public groupReplication(): GroupReplicationContext {
		let localctx: GroupReplicationContext = new GroupReplicationContext(this, this._ctx, this.state);
		this.enterRule(localctx, 478, MySQLParser.RULE_groupReplication);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4106;
			_la = this._input.LA(1);
			if(!(_la===48 || _la===49)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			this.state = 4107;
			this.match(MySQLParser.GROUP_REPLICATION_SYMBOL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public preparedStatement(): PreparedStatementContext {
		let localctx: PreparedStatementContext = new PreparedStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 480, MySQLParser.RULE_preparedStatement);
		let _la: number;
		try {
			this.state = 4120;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 35:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4109;
				localctx._type_ = this.match(MySQLParser.PREPARE_SYMBOL);
				this.state = 4110;
				this.identifier();
				this.state = 4111;
				this.match(MySQLParser.FROM_SYMBOL);
				this.state = 4114;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 477, this._ctx) ) {
				case 1:
					{
					this.state = 4112;
					this.textLiteral();
					}
					break;
				case 2:
					{
					this.state = 4113;
					this.userVariable();
					}
					break;
				}
				}
				break;
			case 17:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 4116;
				this.executeStatement();
				}
				break;
			case 14:
			case 487:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 4117;
				localctx._type_ = this._input.LT(1);
				_la = this._input.LA(1);
				if(!(_la===14 || _la===487)) {
				    localctx._type_ = this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				this.state = 4118;
				this.match(MySQLParser.PREPARE_SYMBOL);
				this.state = 4119;
				this.identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public executeStatement(): ExecuteStatementContext {
		let localctx: ExecuteStatementContext = new ExecuteStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 482, MySQLParser.RULE_executeStatement);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4122;
			this.match(MySQLParser.EXECUTE_SYMBOL);
			this.state = 4123;
			this.identifier();
			this.state = 4126;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===666) {
				{
				this.state = 4124;
				this.match(MySQLParser.USING_SYMBOL);
				this.state = 4125;
				this.executeVarList();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public executeVarList(): ExecuteVarListContext {
		let localctx: ExecuteVarListContext = new ExecuteVarListContext(this, this._ctx, this.state);
		this.enterRule(localctx, 484, MySQLParser.RULE_executeVarList);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4128;
			this.userVariable();
			this.state = 4133;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===406) {
				{
				{
				this.state = 4129;
				this.match(MySQLParser.COMMA_SYMBOL);
				this.state = 4130;
				this.userVariable();
				}
				}
				this.state = 4135;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public cloneStatement(): CloneStatementContext {
		let localctx: CloneStatementContext = new CloneStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 486, MySQLParser.RULE_cloneStatement);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4136;
			this.match(MySQLParser.CLONE_SYMBOL);
			this.state = 4161;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 484, this._ctx) ) {
			case 1:
				{
				this.state = 4137;
				this.match(MySQLParser.LOCAL_SYMBOL);
				this.state = 4138;
				this.match(MySQLParser.DATA_SYMBOL);
				this.state = 4139;
				this.match(MySQLParser.DIRECTORY_SYMBOL);
				this.state = 4141;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 481, this._ctx) ) {
				case 1:
					{
					this.state = 4140;
					this.equal();
					}
					break;
				}
				this.state = 4143;
				this.textStringLiteral();
				}
				break;
			case 2:
				{
				this.state = 4144;
				this.match(MySQLParser.REMOTE_SYMBOL);
				this.state = 4147;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===506) {
					{
					this.state = 4145;
					this.match(MySQLParser.FOR_SYMBOL);
					this.state = 4146;
					this.match(MySQLParser.REPLICATION_SYMBOL);
					}
				}

				}
				break;
			case 3:
				{
				this.state = 4149;
				if (!(this.serverVersion >= 80014)) {
					throw this.createFailedPredicateException("this.serverVersion >= 80014");
				}
				this.state = 4150;
				this.match(MySQLParser.INSTANCE_SYMBOL);
				this.state = 4151;
				this.match(MySQLParser.FROM_SYMBOL);
				this.state = 4152;
				this.user();
				this.state = 4153;
				this.match(MySQLParser.COLON_SYMBOL);
				this.state = 4154;
				this.ulong_number();
				this.state = 4155;
				this.match(MySQLParser.IDENTIFIED_SYMBOL);
				this.state = 4156;
				this.match(MySQLParser.BY_SYMBOL);
				this.state = 4157;
				this.textStringLiteral();
				this.state = 4159;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===109 || _la===607) {
					{
					this.state = 4158;
					this.dataDirSSL();
					}
				}

				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public dataDirSSL(): DataDirSSLContext {
		let localctx: DataDirSSLContext = new DataDirSSLContext(this, this._ctx, this.state);
		this.enterRule(localctx, 488, MySQLParser.RULE_dataDirSSL);
		let _la: number;
		try {
			this.state = 4173;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 607:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4163;
				this.ssl();
				}
				break;
			case 109:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 4164;
				this.match(MySQLParser.DATA_SYMBOL);
				this.state = 4165;
				this.match(MySQLParser.DIRECTORY_SYMBOL);
				this.state = 4167;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 485, this._ctx) ) {
				case 1:
					{
					this.state = 4166;
					this.equal();
					}
					break;
				}
				this.state = 4169;
				this.textStringLiteral();
				this.state = 4171;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===607) {
					{
					this.state = 4170;
					this.ssl();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public ssl(): SslContext {
		let localctx: SslContext = new SslContext(this, this._ctx, this.state);
		this.enterRule(localctx, 490, MySQLParser.RULE_ssl);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4175;
			this.match(MySQLParser.REQUIRE_SYMBOL);
			this.state = 4177;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===27) {
				{
				this.state = 4176;
				this.match(MySQLParser.NO_SYMBOL);
				}
			}

			this.state = 4179;
			this.match(MySQLParser.SSL_SYMBOL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public accountManagementStatement(): AccountManagementStatementContext {
		let localctx: AccountManagementStatementContext = new AccountManagementStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 492, MySQLParser.RULE_accountManagementStatement);
		try {
			this.state = 4190;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 489, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4181;
				if (!(this.serverVersion >= 50606)) {
					throw this.createFailedPredicateException("this.serverVersion >= 50606");
				}
				this.state = 4182;
				this.alterUser();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 4183;
				this.createUser();
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 4184;
				this.dropUser();
				}
				break;
			case 4:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 4185;
				this.grant();
				}
				break;
			case 5:
				this.enterOuterAlt(localctx, 5);
				{
				this.state = 4186;
				this.renameUser();
				}
				break;
			case 6:
				this.enterOuterAlt(localctx, 6);
				{
				this.state = 4187;
				this.revoke();
				}
				break;
			case 7:
				this.enterOuterAlt(localctx, 7);
				{
				this.state = 4188;
				if (!(this.serverVersion >= 80000)) {
					throw this.createFailedPredicateException("this.serverVersion >= 80000");
				}
				this.state = 4189;
				this.setRole();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public alterUser(): AlterUserContext {
		let localctx: AlterUserContext = new AlterUserContext(this, this._ctx, this.state);
		this.enterRule(localctx, 494, MySQLParser.RULE_alterUser);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4192;
			this.match(MySQLParser.ALTER_SYMBOL);
			this.state = 4193;
			this.match(MySQLParser.USER_SYMBOL);
			this.state = 4196;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 490, this._ctx) ) {
			case 1:
				{
				this.state = 4194;
				if (!(this.serverVersion >= 50706)) {
					throw this.createFailedPredicateException("this.serverVersion >= 50706");
				}
				this.state = 4195;
				this.ifExists();
				}
				break;
			}
			this.state = 4198;
			this.alterUserTail();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public alterUserTail(): AlterUserTailContext {
		let localctx: AlterUserTailContext = new AlterUserTailContext(this, this._ctx, this.state);
		this.enterRule(localctx, 496, MySQLParser.RULE_alterUserTail);
		let _la: number;
		try {
			this.state = 4247;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 497, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4204;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 491, this._ctx) ) {
				case 1:
					{
					this.state = 4200;
					if (!(this.serverVersion < 80014)) {
						throw this.createFailedPredicateException("this.serverVersion < 80014");
					}
					this.state = 4201;
					this.createUserList();
					}
					break;
				case 2:
					{
					this.state = 4202;
					if (!(this.serverVersion >= 80014)) {
						throw this.createFailedPredicateException("this.serverVersion >= 80014");
					}
					this.state = 4203;
					this.alterUserList();
					}
					break;
				}
				this.state = 4206;
				this.createUserTail();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 4208;
				if (!(this.serverVersion >= 50706)) {
					throw this.createFailedPredicateException("this.serverVersion >= 50706");
				}
				this.state = 4209;
				this.user();
				this.state = 4210;
				this.match(MySQLParser.IDENTIFIED_SYMBOL);
				this.state = 4211;
				this.match(MySQLParser.BY_SYMBOL);
				this.state = 4212;
				this.textString();
				this.state = 4215;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 492, this._ctx) ) {
				case 1:
					{
					this.state = 4213;
					if (!(this.serverVersion >= 80014)) {
						throw this.createFailedPredicateException("this.serverVersion >= 80014");
					}
					this.state = 4214;
					this.replacePassword();
					}
					break;
				}
				this.state = 4219;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 493, this._ctx) ) {
				case 1:
					{
					this.state = 4217;
					if (!(this.serverVersion >= 80014)) {
						throw this.createFailedPredicateException("this.serverVersion >= 80014");
					}
					this.state = 4218;
					this.retainCurrentPassword();
					}
					break;
				}
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 4221;
				if (!(this.serverVersion >= 80014)) {
					throw this.createFailedPredicateException("this.serverVersion >= 80014");
				}
				this.state = 4222;
				this.user();
				this.state = 4223;
				this.discardOldPassword();
				}
				break;
			case 4:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 4225;
				if (!(this.serverVersion >= 80000)) {
					throw this.createFailedPredicateException("this.serverVersion >= 80000");
				}
				this.state = 4226;
				this.user();
				this.state = 4227;
				this.match(MySQLParser.DEFAULT_SYMBOL);
				this.state = 4228;
				this.match(MySQLParser.ROLE_SYMBOL);
				this.state = 4232;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 494, this._ctx) ) {
				case 1:
					{
					this.state = 4229;
					this.match(MySQLParser.ALL_SYMBOL);
					}
					break;
				case 2:
					{
					this.state = 4230;
					this.match(MySQLParser.NONE_SYMBOL);
					}
					break;
				case 3:
					{
					this.state = 4231;
					this.roleList();
					}
					break;
				}
				}
				break;
			case 5:
				this.enterOuterAlt(localctx, 5);
				{
				this.state = 4234;
				if (!(this.serverVersion >= 80018)) {
					throw this.createFailedPredicateException("this.serverVersion >= 80018");
				}
				this.state = 4235;
				this.user();
				this.state = 4236;
				this.match(MySQLParser.IDENTIFIED_SYMBOL);
				this.state = 4239;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===682) {
					{
					this.state = 4237;
					this.match(MySQLParser.WITH_SYMBOL);
					this.state = 4238;
					this.textOrIdentifier();
					}
				}

				this.state = 4241;
				this.match(MySQLParser.BY_SYMBOL);
				this.state = 4242;
				this.match(MySQLParser.RANDOM_SYMBOL);
				this.state = 4243;
				this.match(MySQLParser.PASSWORD_SYMBOL);
				this.state = 4245;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===757) {
					{
					this.state = 4244;
					this.retainCurrentPassword();
					}
				}

				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public userFunction(): UserFunctionContext {
		let localctx: UserFunctionContext = new UserFunctionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 498, MySQLParser.RULE_userFunction);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4249;
			this.match(MySQLParser.USER_SYMBOL);
			this.state = 4250;
			this.parentheses();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public createUser(): CreateUserContext {
		let localctx: CreateUserContext = new CreateUserContext(this, this._ctx, this.state);
		this.enterRule(localctx, 500, MySQLParser.RULE_createUser);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4252;
			this.match(MySQLParser.CREATE_SYMBOL);
			this.state = 4253;
			this.match(MySQLParser.USER_SYMBOL);
			this.state = 4257;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 498, this._ctx) ) {
			case 1:
				{
				this.state = 4254;
				if (!(this.serverVersion >= 50706)) {
					throw this.createFailedPredicateException("this.serverVersion >= 50706");
				}
				this.state = 4255;
				this.ifNotExists();
				}
				break;
			case 2:
				// tslint:disable-next-line:no-empty
				{
				}
				break;
			}
			this.state = 4259;
			this.createUserList();
			this.state = 4260;
			this.defaultRoleClause();
			this.state = 4261;
			this.createUserTail();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public createUserTail(): CreateUserTailContext {
		let localctx: CreateUserTailContext = new CreateUserTailContext(this, this._ctx, this.state);
		this.enterRule(localctx, 502, MySQLParser.RULE_createUserTail);
		let _la: number;
		try {
			this.state = 4277;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 502, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4263;
				if (!(this.serverVersion >= 50706)) {
					throw this.createFailedPredicateException("this.serverVersion >= 50706");
				}
				this.state = 4265;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===607) {
					{
					this.state = 4264;
					this.requireClause();
					}
				}

				this.state = 4268;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===682) {
					{
					this.state = 4267;
					this.connectOptions();
					}
				}

				this.state = 4273;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la===1 || _la===251) {
					{
					{
					this.state = 4270;
					this.accountLockPasswordExpireOptions();
					}
					}
					this.state = 4275;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				// tslint:disable-next-line:no-empty
				{
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public defaultRoleClause(): DefaultRoleClauseContext {
		let localctx: DefaultRoleClauseContext = new DefaultRoleClauseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 504, MySQLParser.RULE_defaultRoleClause);
		try {
			this.state = 4286;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 504, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4279;
				if (!(this.serverVersion >= 80000)) {
					throw this.createFailedPredicateException("this.serverVersion >= 80000");
				}
				this.state = 4283;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 503, this._ctx) ) {
				case 1:
					{
					this.state = 4280;
					this.match(MySQLParser.DEFAULT_SYMBOL);
					this.state = 4281;
					this.match(MySQLParser.ROLE_SYMBOL);
					this.state = 4282;
					this.roleList();
					}
					break;
				}
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				// tslint:disable-next-line:no-empty
				{
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public requireClause(): RequireClauseContext {
		let localctx: RequireClauseContext = new RequireClauseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 506, MySQLParser.RULE_requireClause);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4288;
			this.match(MySQLParser.REQUIRE_SYMBOL);
			this.state = 4291;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 82:
			case 170:
			case 332:
				{
				this.state = 4289;
				this.requireList();
				}
				break;
			case 239:
			case 374:
			case 633:
				{
				this.state = 4290;
				localctx._option = this._input.LT(1);
				_la = this._input.LA(1);
				if(!(_la===239 || _la===374 || _la===633)) {
				    localctx._option = this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public connectOptions(): ConnectOptionsContext {
		let localctx: ConnectOptionsContext = new ConnectOptionsContext(this, this._ctx, this.state);
		this.enterRule(localctx, 508, MySQLParser.RULE_connectOptions);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4293;
			this.match(MySQLParser.WITH_SYMBOL);
			this.state = 4302;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				this.state = 4302;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case 208:
					{
					this.state = 4294;
					this.match(MySQLParser.MAX_QUERIES_PER_HOUR_SYMBOL);
					this.state = 4295;
					this.ulong_number();
					}
					break;
				case 211:
					{
					this.state = 4296;
					this.match(MySQLParser.MAX_UPDATES_PER_HOUR_SYMBOL);
					this.state = 4297;
					this.ulong_number();
					}
					break;
				case 207:
					{
					this.state = 4298;
					this.match(MySQLParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL);
					this.state = 4299;
					this.ulong_number();
					}
					break;
				case 212:
					{
					this.state = 4300;
					this.match(MySQLParser.MAX_USER_CONNECTIONS_SYMBOL);
					this.state = 4301;
					this.ulong_number();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				this.state = 4304;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 207)) & ~0x1F) === 0 && ((1 << (_la - 207)) & 51) !== 0));
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public accountLockPasswordExpireOptions(): AccountLockPasswordExpireOptionsContext {
		let localctx: AccountLockPasswordExpireOptionsContext = new AccountLockPasswordExpireOptionsContext(this, this._ctx, this.state);
		this.enterRule(localctx, 510, MySQLParser.RULE_accountLockPasswordExpireOptions);
		let _la: number;
		try {
			this.state = 4339;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4306;
				this.match(MySQLParser.ACCOUNT_SYMBOL);
				this.state = 4307;
				_la = this._input.LA(1);
				if(!(_la===548 || _la===661)) {
				this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				}
				break;
			case 251:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 4308;
				this.match(MySQLParser.PASSWORD_SYMBOL);
				this.state = 4337;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 512, this._ctx) ) {
				case 1:
					{
					this.state = 4309;
					this.match(MySQLParser.EXPIRE_SYMBOL);
					this.state = 4316;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
					case 527:
						{
						this.state = 4310;
						this.match(MySQLParser.INTERVAL_SYMBOL);
						this.state = 4311;
						this.real_ulong_number();
						this.state = 4312;
						this.match(MySQLParser.DAY_SYMBOL);
						}
						break;
					case 234:
						{
						this.state = 4314;
						this.match(MySQLParser.NEVER_SYMBOL);
						}
						break;
					case 478:
						{
						this.state = 4315;
						this.match(MySQLParser.DEFAULT_SYMBOL);
						}
						break;
					case -1:
					case 1:
					case 251:
					case 407:
						break;
					default:
						break;
					}
					}
					break;
				case 2:
					{
					this.state = 4318;
					this.match(MySQLParser.HISTORY_SYMBOL);
					this.state = 4321;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
					case 380:
					case 381:
					case 382:
					case 421:
						{
						this.state = 4319;
						this.real_ulong_number();
						}
						break;
					case 478:
						{
						this.state = 4320;
						this.match(MySQLParser.DEFAULT_SYMBOL);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				case 3:
					{
					this.state = 4323;
					this.match(MySQLParser.REUSE_SYMBOL);
					this.state = 4324;
					this.match(MySQLParser.INTERVAL_SYMBOL);
					this.state = 4329;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
					case 380:
					case 381:
					case 382:
					case 421:
						{
						this.state = 4325;
						this.real_ulong_number();
						this.state = 4326;
						this.match(MySQLParser.DAY_SYMBOL);
						}
						break;
					case 478:
						{
						this.state = 4328;
						this.match(MySQLParser.DEFAULT_SYMBOL);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				case 4:
					{
					this.state = 4331;
					if (!(this.serverVersion >= 80014)) {
						throw this.createFailedPredicateException("this.serverVersion >= 80014");
					}
					this.state = 4332;
					this.match(MySQLParser.REQUIRE_SYMBOL);
					this.state = 4333;
					this.match(MySQLParser.CURRENT_SYMBOL);
					this.state = 4335;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la===478 || _la===749) {
						{
						this.state = 4334;
						_la = this._input.LA(1);
						if(!(_la===478 || _la===749)) {
						this._errHandler.recoverInline(this);
						}
						else {
							this._errHandler.reportMatch(this);
						    this.consume();
						}
						}
					}

					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public dropUser(): DropUserContext {
		let localctx: DropUserContext = new DropUserContext(this, this._ctx, this.state);
		this.enterRule(localctx, 512, MySQLParser.RULE_dropUser);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4341;
			this.match(MySQLParser.DROP_SYMBOL);
			this.state = 4342;
			this.match(MySQLParser.USER_SYMBOL);
			this.state = 4345;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 514, this._ctx) ) {
			case 1:
				{
				this.state = 4343;
				if (!(this.serverVersion >= 50706)) {
					throw this.createFailedPredicateException("this.serverVersion >= 50706");
				}
				this.state = 4344;
				this.ifExists();
				}
				break;
			}
			this.state = 4347;
			this.userList();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public grant(): GrantContext {
		let localctx: GrantContext = new GrantContext(this, this._ctx, this.state);
		this.enterRule(localctx, 514, MySQLParser.RULE_grant);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4349;
			this.match(MySQLParser.GRANT_SYMBOL);
			this.state = 4392;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 523, this._ctx) ) {
			case 1:
				{
				this.state = 4350;
				if (!(this.serverVersion >= 80000)) {
					throw this.createFailedPredicateException("this.serverVersion >= 80000");
				}
				this.state = 4351;
				this.roleOrPrivilegesList();
				this.state = 4352;
				this.match(MySQLParser.TO_SYMBOL);
				this.state = 4353;
				this.userList();
				this.state = 4357;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===682) {
					{
					this.state = 4354;
					this.match(MySQLParser.WITH_SYMBOL);
					this.state = 4355;
					this.match(MySQLParser.ADMIN_SYMBOL);
					this.state = 4356;
					this.match(MySQLParser.OPTION_SYMBOL);
					}
				}

				}
				break;
			case 2:
				{
				this.state = 4364;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 517, this._ctx) ) {
				case 1:
					{
					this.state = 4359;
					this.roleOrPrivilegesList();
					}
					break;
				case 2:
					{
					this.state = 4360;
					this.match(MySQLParser.ALL_SYMBOL);
					this.state = 4362;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la===260) {
						{
						this.state = 4361;
						this.match(MySQLParser.PRIVILEGES_SYMBOL);
						}
					}

					}
					break;
				}
				this.state = 4366;
				this.match(MySQLParser.ON_SYMBOL);
				this.state = 4368;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 518, this._ctx) ) {
				case 1:
					{
					this.state = 4367;
					this.aclType();
					}
					break;
				}
				this.state = 4370;
				this.grantIdentifier();
				this.state = 4371;
				this.match(MySQLParser.TO_SYMBOL);
				this.state = 4372;
				this.grantTargetList();
				this.state = 4374;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 519, this._ctx) ) {
				case 1:
					{
					this.state = 4373;
					this.versionedRequireClause();
					}
					break;
				}
				this.state = 4377;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 520, this._ctx) ) {
				case 1:
					{
					this.state = 4376;
					this.grantOptions();
					}
					break;
				}
				this.state = 4380;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===431) {
					{
					this.state = 4379;
					this.grantAs();
					}
				}

				}
				break;
			case 3:
				{
				this.state = 4382;
				this.match(MySQLParser.PROXY_SYMBOL);
				this.state = 4383;
				this.match(MySQLParser.ON_SYMBOL);
				this.state = 4384;
				this.user();
				this.state = 4385;
				this.match(MySQLParser.TO_SYMBOL);
				this.state = 4386;
				this.grantTargetList();
				this.state = 4390;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===682) {
					{
					this.state = 4387;
					this.match(MySQLParser.WITH_SYMBOL);
					this.state = 4388;
					this.match(MySQLParser.GRANT_SYMBOL);
					this.state = 4389;
					this.match(MySQLParser.OPTION_SYMBOL);
					}
				}

				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public grantTargetList(): GrantTargetListContext {
		let localctx: GrantTargetListContext = new GrantTargetListContext(this, this._ctx, this.state);
		this.enterRule(localctx, 516, MySQLParser.RULE_grantTargetList);
		try {
			this.state = 4398;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 524, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4394;
				if (!(this.serverVersion < 80011)) {
					throw this.createFailedPredicateException("this.serverVersion < 80011");
				}
				this.state = 4395;
				this.createUserList();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 4396;
				if (!(this.serverVersion >= 80011)) {
					throw this.createFailedPredicateException("this.serverVersion >= 80011");
				}
				this.state = 4397;
				this.userList();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public grantOptions(): GrantOptionsContext {
		let localctx: GrantOptionsContext = new GrantOptionsContext(this, this._ctx, this.state);
		this.enterRule(localctx, 518, MySQLParser.RULE_grantOptions);
		let _la: number;
		try {
			this.state = 4411;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 526, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4400;
				if (!(this.serverVersion < 80011)) {
					throw this.createFailedPredicateException("this.serverVersion < 80011");
				}
				this.state = 4401;
				this.match(MySQLParser.WITH_SYMBOL);
				this.state = 4403;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4402;
					this.grantOption();
					}
					}
					this.state = 4405;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 207)) & ~0x1F) === 0 && ((1 << (_la - 207)) & 51) !== 0) || _la===511);
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 4407;
				if (!(this.serverVersion >= 80011)) {
					throw this.createFailedPredicateException("this.serverVersion >= 80011");
				}
				this.state = 4408;
				this.match(MySQLParser.WITH_SYMBOL);
				this.state = 4409;
				this.match(MySQLParser.GRANT_SYMBOL);
				this.state = 4410;
				this.match(MySQLParser.OPTION_SYMBOL);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public exceptRoleList(): ExceptRoleListContext {
		let localctx: ExceptRoleListContext = new ExceptRoleListContext(this, this._ctx, this.state);
		this.enterRule(localctx, 520, MySQLParser.RULE_exceptRoleList);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4413;
			this.match(MySQLParser.EXCEPT_SYMBOL);
			this.state = 4414;
			this.roleList();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public withRoles(): WithRolesContext {
		let localctx: WithRolesContext = new WithRolesContext(this, this._ctx, this.state);
		this.enterRule(localctx, 522, MySQLParser.RULE_withRoles);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4416;
			this.match(MySQLParser.WITH_SYMBOL);
			this.state = 4417;
			this.match(MySQLParser.ROLE_SYMBOL);
			this.state = 4425;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 528, this._ctx) ) {
			case 1:
				{
				this.state = 4418;
				this.roleList();
				}
				break;
			case 2:
				{
				this.state = 4419;
				this.match(MySQLParser.ALL_SYMBOL);
				this.state = 4421;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===693) {
					{
					this.state = 4420;
					this.exceptRoleList();
					}
				}

				}
				break;
			case 3:
				{
				this.state = 4423;
				this.match(MySQLParser.NONE_SYMBOL);
				}
				break;
			case 4:
				{
				this.state = 4424;
				this.match(MySQLParser.DEFAULT_SYMBOL);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public grantAs(): GrantAsContext {
		let localctx: GrantAsContext = new GrantAsContext(this, this._ctx, this.state);
		this.enterRule(localctx, 524, MySQLParser.RULE_grantAs);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4427;
			this.match(MySQLParser.AS_SYMBOL);
			this.state = 4428;
			this.match(MySQLParser.USER_SYMBOL);
			this.state = 4430;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===682) {
				{
				this.state = 4429;
				this.withRoles();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public versionedRequireClause(): VersionedRequireClauseContext {
		let localctx: VersionedRequireClauseContext = new VersionedRequireClauseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 526, MySQLParser.RULE_versionedRequireClause);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4432;
			if (!(this.serverVersion < 80011)) {
				throw this.createFailedPredicateException("this.serverVersion < 80011");
			}
			this.state = 4433;
			this.requireClause();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public renameUser(): RenameUserContext {
		let localctx: RenameUserContext = new RenameUserContext(this, this._ctx, this.state);
		this.enterRule(localctx, 528, MySQLParser.RULE_renameUser);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4435;
			this.match(MySQLParser.RENAME_SYMBOL);
			this.state = 4436;
			this.match(MySQLParser.USER_SYMBOL);
			this.state = 4437;
			this.user();
			this.state = 4438;
			this.match(MySQLParser.TO_SYMBOL);
			this.state = 4439;
			this.user();
			this.state = 4447;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===406) {
				{
				{
				this.state = 4440;
				this.match(MySQLParser.COMMA_SYMBOL);
				this.state = 4441;
				this.user();
				this.state = 4442;
				this.match(MySQLParser.TO_SYMBOL);
				this.state = 4443;
				this.user();
				}
				}
				this.state = 4449;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public revoke(): RevokeContext {
		let localctx: RevokeContext = new RevokeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 530, MySQLParser.RULE_revoke);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4450;
			this.match(MySQLParser.REVOKE_SYMBOL);
			this.state = 4484;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 534, this._ctx) ) {
			case 1:
				{
				this.state = 4451;
				if (!(this.serverVersion >= 80000)) {
					throw this.createFailedPredicateException("this.serverVersion >= 80000");
				}
				this.state = 4452;
				this.roleOrPrivilegesList();
				this.state = 4453;
				this.match(MySQLParser.FROM_SYMBOL);
				this.state = 4454;
				this.userList();
				}
				break;
			case 2:
				{
				this.state = 4456;
				this.roleOrPrivilegesList();
				this.state = 4457;
				this.onTypeTo();
				this.state = 4458;
				this.match(MySQLParser.FROM_SYMBOL);
				this.state = 4459;
				this.userList();
				}
				break;
			case 3:
				{
				this.state = 4461;
				this.match(MySQLParser.ALL_SYMBOL);
				this.state = 4463;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 531, this._ctx) ) {
				case 1:
					{
					this.state = 4462;
					this.match(MySQLParser.PRIVILEGES_SYMBOL);
					}
					break;
				}
				this.state = 4476;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 533, this._ctx) ) {
				case 1:
					{
					this.state = 4465;
					if (!(this.serverVersion >= 80000)) {
						throw this.createFailedPredicateException("this.serverVersion >= 80000");
					}
					this.state = 4466;
					this.match(MySQLParser.ON_SYMBOL);
					this.state = 4468;
					this._errHandler.sync(this);
					switch ( this._interp.adaptivePredict(this._input, 532, this._ctx) ) {
					case 1:
						{
						this.state = 4467;
						this.aclType();
						}
						break;
					}
					this.state = 4470;
					this.grantIdentifier();
					}
					break;
				case 2:
					{
					this.state = 4471;
					this.match(MySQLParser.COMMA_SYMBOL);
					this.state = 4472;
					this.match(MySQLParser.GRANT_SYMBOL);
					this.state = 4473;
					this.match(MySQLParser.OPTION_SYMBOL);
					this.state = 4474;
					this.match(MySQLParser.FROM_SYMBOL);
					this.state = 4475;
					this.userList();
					}
					break;
				}
				}
				break;
			case 4:
				{
				this.state = 4478;
				this.match(MySQLParser.PROXY_SYMBOL);
				this.state = 4479;
				this.match(MySQLParser.ON_SYMBOL);
				this.state = 4480;
				this.user();
				this.state = 4481;
				this.match(MySQLParser.FROM_SYMBOL);
				this.state = 4482;
				this.userList();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public onTypeTo(): OnTypeToContext {
		let localctx: OnTypeToContext = new OnTypeToContext(this, this._ctx, this.state);
		this.enterRule(localctx, 532, MySQLParser.RULE_onTypeTo);
		let _la: number;
		try {
			this.state = 4500;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 538, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4486;
				if (!(this.serverVersion < 80000)) {
					throw this.createFailedPredicateException("this.serverVersion < 80000");
				}
				this.state = 4487;
				this.match(MySQLParser.ON_SYMBOL);
				this.state = 4489;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 535, this._ctx) ) {
				case 1:
					{
					this.state = 4488;
					this.aclType();
					}
					break;
				}
				this.state = 4491;
				this.grantIdentifier();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 4492;
				if (!(this.serverVersion >= 80000)) {
					throw this.createFailedPredicateException("this.serverVersion >= 80000");
				}
				this.state = 4498;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===579) {
					{
					this.state = 4493;
					this.match(MySQLParser.ON_SYMBOL);
					this.state = 4495;
					this._errHandler.sync(this);
					switch ( this._interp.adaptivePredict(this._input, 536, this._ctx) ) {
					case 1:
						{
						this.state = 4494;
						this.aclType();
						}
						break;
					}
					this.state = 4497;
					this.grantIdentifier();
					}
				}

				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public aclType(): AclTypeContext {
		let localctx: AclTypeContext = new AclTypeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 534, MySQLParser.RULE_aclType);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4502;
			_la = this._input.LA(1);
			if(!(_la===356 || _la===594 || _la===647)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public roleOrPrivilegesList(): RoleOrPrivilegesListContext {
		let localctx: RoleOrPrivilegesListContext = new RoleOrPrivilegesListContext(this, this._ctx, this.state);
		this.enterRule(localctx, 536, MySQLParser.RULE_roleOrPrivilegesList);
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4504;
			this.roleOrPrivilege();
			this.state = 4509;
			this._errHandler.sync(this);
			_alt = this._interp.adaptivePredict(this._input, 539, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 4505;
					this.match(MySQLParser.COMMA_SYMBOL);
					this.state = 4506;
					this.roleOrPrivilege();
					}
					}
				}
				this.state = 4511;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 539, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public roleOrPrivilege(): RoleOrPrivilegeContext {
		let localctx: RoleOrPrivilegeContext = new RoleOrPrivilegeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 538, MySQLParser.RULE_roleOrPrivilege);
		let _la: number;
		try {
			this.state = 4553;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 546, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4512;
				if (!(this.serverVersion > 80000)) {
					throw this.createFailedPredicateException("this.serverVersion > 80000");
				}
				this.state = 4523;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 542, this._ctx) ) {
				case 1:
					{
					this.state = 4513;
					this.roleIdentifierOrText();
					this.state = 4515;
					this._errHandler.sync(this);
					switch ( this._interp.adaptivePredict(this._input, 540, this._ctx) ) {
					case 1:
						{
						this.state = 4514;
						this.columnInternalRefList();
						}
						break;
					}
					}
					break;
				case 2:
					{
					this.state = 4517;
					this.roleIdentifierOrText();
					this.state = 4521;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
					case 417:
						{
						this.state = 4518;
						this.match(MySQLParser.AT_TEXT_SUFFIX);
						}
						break;
					case 416:
						{
						this.state = 4519;
						this.match(MySQLParser.AT_SIGN_SYMBOL);
						this.state = 4520;
						this.textOrIdentifier();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				}
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 4525;
				_la = this._input.LA(1);
				if(!(_la===526 || _la===601 || _la===614 || _la===663)) {
				this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				this.state = 4527;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 543, this._ctx) ) {
				case 1:
					{
					this.state = 4526;
					this.columnInternalRefList();
					}
					break;
				}
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 4529;
				_la = this._input.LA(1);
				if(!(_la===17 || _la===56 || _la===133 || _la===145 || ((((_la - 261)) & ~0x1F) === 0 && ((1 << (_la - 261)) & 524305) !== 0) || _la===335 || _la===480 || _la===487 || _la===521 || _la===655 || _la===664)) {
				this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				}
				break;
			case 4:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 4530;
				this.match(MySQLParser.GRANT_SYMBOL);
				this.state = 4531;
				this.match(MySQLParser.OPTION_SYMBOL);
				}
				break;
			case 5:
				this.enterOuterAlt(localctx, 5);
				{
				this.state = 4532;
				this.match(MySQLParser.SHOW_SYMBOL);
				this.state = 4533;
				this.match(MySQLParser.DATABASES_SYMBOL);
				}
				break;
			case 6:
				this.enterOuterAlt(localctx, 6);
				{
				this.state = 4534;
				this.match(MySQLParser.CREATE_SYMBOL);
				this.state = 4538;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 544, this._ctx) ) {
				case 1:
					{
					this.state = 4535;
					this.match(MySQLParser.TEMPORARY_SYMBOL);
					this.state = 4536;
					localctx._object = this.match(MySQLParser.TABLES_SYMBOL);
					}
					break;
				case 2:
					{
					this.state = 4537;
					localctx._object = this._input.LT(1);
					_la = this._input.LA(1);
					if(!(_la===297 || ((((_la - 342)) & ~0x1F) === 0 && ((1 << (_la - 342)) & 37748737) !== 0))) {
					    localctx._object = this._errHandler.recoverInline(this);
					}
					else {
						this._errHandler.reportMatch(this);
					    this.consume();
					}
					}
					break;
				}
				}
				break;
			case 7:
				this.enterOuterAlt(localctx, 7);
				{
				this.state = 4540;
				this.match(MySQLParser.LOCK_SYMBOL);
				this.state = 4541;
				this.match(MySQLParser.TABLES_SYMBOL);
				}
				break;
			case 8:
				this.enterOuterAlt(localctx, 8);
				{
				this.state = 4542;
				this.match(MySQLParser.REPLICATION_SYMBOL);
				this.state = 4543;
				localctx._object = this._input.LT(1);
				_la = this._input.LA(1);
				if(!(_la===45 || _la===83)) {
				    localctx._object = this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				}
				break;
			case 9:
				this.enterOuterAlt(localctx, 9);
				{
				this.state = 4544;
				this.match(MySQLParser.SHOW_SYMBOL);
				this.state = 4545;
				this.match(MySQLParser.VIEW_SYMBOL);
				}
				break;
			case 10:
				this.enterOuterAlt(localctx, 10);
				{
				this.state = 4546;
				this.match(MySQLParser.ALTER_SYMBOL);
				this.state = 4548;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 545, this._ctx) ) {
				case 1:
					{
					this.state = 4547;
					this.match(MySQLParser.ROUTINE_SYMBOL);
					}
					break;
				}
				}
				break;
			case 11:
				this.enterOuterAlt(localctx, 11);
				{
				this.state = 4550;
				if (!(this.serverVersion > 80000)) {
					throw this.createFailedPredicateException("this.serverVersion > 80000");
				}
				this.state = 4551;
				_la = this._input.LA(1);
				if(!(_la===459 || _la===487)) {
				this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				this.state = 4552;
				this.match(MySQLParser.ROLE_SYMBOL);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public grantIdentifier(): GrantIdentifierContext {
		let localctx: GrantIdentifierContext = new GrantIdentifierContext(this, this._ctx, this.state);
		this.enterRule(localctx, 540, MySQLParser.RULE_grantIdentifier);
		let _la: number;
		try {
			this.state = 4571;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 549, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4555;
				this.match(MySQLParser.MULT_OPERATOR);
				this.state = 4558;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===405) {
					{
					this.state = 4556;
					this.match(MySQLParser.DOT_SYMBOL);
					this.state = 4557;
					this.match(MySQLParser.MULT_OPERATOR);
					}
				}

				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 4560;
				this.schemaRef();
				this.state = 4563;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===405) {
					{
					this.state = 4561;
					this.match(MySQLParser.DOT_SYMBOL);
					this.state = 4562;
					this.match(MySQLParser.MULT_OPERATOR);
					}
				}

				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 4565;
				this.tableRef();
				}
				break;
			case 4:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 4566;
				if (!(this.serverVersion >= 80017)) {
					throw this.createFailedPredicateException("this.serverVersion >= 80017");
				}
				this.state = 4567;
				this.schemaRef();
				this.state = 4568;
				this.match(MySQLParser.DOT_SYMBOL);
				this.state = 4569;
				this.tableRef();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public requireList(): RequireListContext {
		let localctx: RequireListContext = new RequireListContext(this, this._ctx, this.state);
		this.enterRule(localctx, 542, MySQLParser.RULE_requireList);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4573;
			this.requireListElement();
			this.state = 4580;
			this._errHandler.sync(this);
			_alt = this._interp.adaptivePredict(this._input, 551, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 4575;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la===430) {
						{
						this.state = 4574;
						this.match(MySQLParser.AND_SYMBOL);
						}
					}

					this.state = 4577;
					this.requireListElement();
					}
					}
				}
				this.state = 4582;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 551, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public requireListElement(): RequireListElementContext {
		let localctx: RequireListElementContext = new RequireListElementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 544, MySQLParser.RULE_requireListElement);
		try {
			this.state = 4589;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 82:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4583;
				localctx._element = this.match(MySQLParser.CIPHER_SYMBOL);
				this.state = 4584;
				this.textString();
				}
				break;
			case 170:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 4585;
				localctx._element = this.match(MySQLParser.ISSUER_SYMBOL);
				this.state = 4586;
				this.textString();
				}
				break;
			case 332:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 4587;
				localctx._element = this.match(MySQLParser.SUBJECT_SYMBOL);
				this.state = 4588;
				this.textString();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public grantOption(): GrantOptionContext {
		let localctx: GrantOptionContext = new GrantOptionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 546, MySQLParser.RULE_grantOption);
		try {
			this.state = 4601;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 511:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4591;
				localctx._option = this.match(MySQLParser.GRANT_SYMBOL);
				this.state = 4592;
				this.match(MySQLParser.OPTION_SYMBOL);
				}
				break;
			case 208:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 4593;
				localctx._option = this.match(MySQLParser.MAX_QUERIES_PER_HOUR_SYMBOL);
				this.state = 4594;
				this.ulong_number();
				}
				break;
			case 211:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 4595;
				localctx._option = this.match(MySQLParser.MAX_UPDATES_PER_HOUR_SYMBOL);
				this.state = 4596;
				this.ulong_number();
				}
				break;
			case 207:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 4597;
				localctx._option = this.match(MySQLParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL);
				this.state = 4598;
				this.ulong_number();
				}
				break;
			case 212:
				this.enterOuterAlt(localctx, 5);
				{
				this.state = 4599;
				localctx._option = this.match(MySQLParser.MAX_USER_CONNECTIONS_SYMBOL);
				this.state = 4600;
				this.ulong_number();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public setRole(): SetRoleContext {
		let localctx: SetRoleContext = new SetRoleContext(this, this._ctx, this.state);
		this.enterRule(localctx, 548, MySQLParser.RULE_setRole);
		let _la: number;
		try {
			this.state = 4626;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 556, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4603;
				this.match(MySQLParser.SET_SYMBOL);
				this.state = 4604;
				this.match(MySQLParser.ROLE_SYMBOL);
				this.state = 4605;
				this.roleList();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 4606;
				this.match(MySQLParser.SET_SYMBOL);
				this.state = 4607;
				this.match(MySQLParser.ROLE_SYMBOL);
				this.state = 4608;
				_la = this._input.LA(1);
				if(!(_la===239 || _la===478)) {
				this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 4609;
				this.match(MySQLParser.SET_SYMBOL);
				this.state = 4610;
				this.match(MySQLParser.DEFAULT_SYMBOL);
				this.state = 4611;
				this.match(MySQLParser.ROLE_SYMBOL);
				this.state = 4615;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 554, this._ctx) ) {
				case 1:
					{
					this.state = 4612;
					this.roleList();
					}
					break;
				case 2:
					{
					this.state = 4613;
					this.match(MySQLParser.NONE_SYMBOL);
					}
					break;
				case 3:
					{
					this.state = 4614;
					this.match(MySQLParser.ALL_SYMBOL);
					}
					break;
				}
				this.state = 4617;
				this.match(MySQLParser.TO_SYMBOL);
				this.state = 4618;
				this.roleList();
				}
				break;
			case 4:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 4619;
				this.match(MySQLParser.SET_SYMBOL);
				this.state = 4620;
				this.match(MySQLParser.ROLE_SYMBOL);
				this.state = 4621;
				this.match(MySQLParser.ALL_SYMBOL);
				this.state = 4624;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===693) {
					{
					this.state = 4622;
					this.match(MySQLParser.EXCEPT_SYMBOL);
					this.state = 4623;
					this.roleList();
					}
				}

				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public roleList(): RoleListContext {
		let localctx: RoleListContext = new RoleListContext(this, this._ctx, this.state);
		this.enterRule(localctx, 550, MySQLParser.RULE_roleList);
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4628;
			this.role();
			this.state = 4633;
			this._errHandler.sync(this);
			_alt = this._interp.adaptivePredict(this._input, 557, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 4629;
					this.match(MySQLParser.COMMA_SYMBOL);
					this.state = 4630;
					this.role();
					}
					}
				}
				this.state = 4635;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 557, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public role(): RoleContext {
		let localctx: RoleContext = new RoleContext(this, this._ctx, this.state);
		this.enterRule(localctx, 552, MySQLParser.RULE_role);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4636;
			this.roleIdentifierOrText();
			this.state = 4640;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 558, this._ctx) ) {
			case 1:
				{
				this.state = 4637;
				this.match(MySQLParser.AT_SIGN_SYMBOL);
				this.state = 4638;
				this.textOrIdentifier();
				}
				break;
			case 2:
				{
				this.state = 4639;
				this.match(MySQLParser.AT_TEXT_SUFFIX);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public tableAdministrationStatement(): TableAdministrationStatementContext {
		let localctx: TableAdministrationStatementContext = new TableAdministrationStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 554, MySQLParser.RULE_tableAdministrationStatement);
		let _la: number;
		try {
			this.state = 4685;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 63:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4642;
				localctx._type_ = this.match(MySQLParser.ANALYZE_SYMBOL);
				this.state = 4644;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===180 || _la===575) {
					{
					this.state = 4643;
					this.noWriteToBinLog();
					}
				}

				this.state = 4646;
				this.match(MySQLParser.TABLE_SYMBOL);
				this.state = 4647;
				this.tableRefList();
				this.state = 4650;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 560, this._ctx) ) {
				case 1:
					{
					this.state = 4648;
					if (!(this.serverVersion >= 80000)) {
						throw this.createFailedPredicateException("this.serverVersion >= 80000");
					}
					this.state = 4649;
					this.histogram();
					}
					break;
				}
				}
				break;
			case 451:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 4652;
				localctx._type_ = this.match(MySQLParser.CHECK_SYMBOL);
				this.state = 4653;
				this.match(MySQLParser.TABLE_SYMBOL);
				this.state = 4654;
				this.tableRefList();
				this.state = 4658;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la===80 || _la===138 || _la===141 || _la===213 || _la===268 || _la===506) {
					{
					{
					this.state = 4655;
					this.checkOption();
					}
					}
					this.state = 4660;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;
			case 9:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 4661;
				localctx._type_ = this.match(MySQLParser.CHECKSUM_SYMBOL);
				this.state = 4662;
				this.match(MySQLParser.TABLE_SYMBOL);
				this.state = 4663;
				this.tableRefList();
				this.state = 4665;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===138 || _la===268) {
					{
					this.state = 4664;
					_la = this._input.LA(1);
					if(!(_la===138 || _la===268)) {
					this._errHandler.recoverInline(this);
					}
					else {
						this._errHandler.reportMatch(this);
					    this.consume();
					}
					}
				}

				}
				break;
			case 582:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 4667;
				localctx._type_ = this.match(MySQLParser.OPTIMIZE_SYMBOL);
				this.state = 4669;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===180 || _la===575) {
					{
					this.state = 4668;
					this.noWriteToBinLog();
					}
				}

				this.state = 4671;
				this.match(MySQLParser.TABLE_SYMBOL);
				this.state = 4672;
				this.tableRefList();
				}
				break;
			case 37:
				this.enterOuterAlt(localctx, 5);
				{
				this.state = 4673;
				localctx._type_ = this.match(MySQLParser.REPAIR_SYMBOL);
				this.state = 4675;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===180 || _la===575) {
					{
					this.state = 4674;
					this.noWriteToBinLog();
					}
				}

				this.state = 4677;
				this.match(MySQLParser.TABLE_SYMBOL);
				this.state = 4678;
				this.tableRefList();
				this.state = 4682;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la===138 || _la===268 || _la===365) {
					{
					{
					this.state = 4679;
					this.repairType();
					}
					}
					this.state = 4684;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public histogram(): HistogramContext {
		let localctx: HistogramContext = new HistogramContext(this, this._ctx, this.state);
		this.enterRule(localctx, 556, MySQLParser.RULE_histogram);
		let _la: number;
		try {
			this.state = 4700;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 663:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4687;
				this.match(MySQLParser.UPDATE_SYMBOL);
				this.state = 4688;
				this.match(MySQLParser.HISTOGRAM_SYMBOL);
				this.state = 4689;
				this.match(MySQLParser.ON_SYMBOL);
				this.state = 4690;
				this.identifierList();
				this.state = 4694;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===682) {
					{
					this.state = 4691;
					this.match(MySQLParser.WITH_SYMBOL);
					this.state = 4692;
					this.match(MySQLParser.INT_NUMBER);
					this.state = 4693;
					this.match(MySQLParser.BUCKETS_SYMBOL);
					}
				}

				}
				break;
			case 487:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 4696;
				this.match(MySQLParser.DROP_SYMBOL);
				this.state = 4697;
				this.match(MySQLParser.HISTOGRAM_SYMBOL);
				this.state = 4698;
				this.match(MySQLParser.ON_SYMBOL);
				this.state = 4699;
				this.identifierList();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public checkOption(): CheckOptionContext {
		let localctx: CheckOptionContext = new CheckOptionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 558, MySQLParser.RULE_checkOption);
		let _la: number;
		try {
			this.state = 4705;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 506:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4702;
				this.match(MySQLParser.FOR_SYMBOL);
				this.state = 4703;
				this.match(MySQLParser.UPGRADE_SYMBOL);
				}
				break;
			case 80:
			case 138:
			case 141:
			case 213:
			case 268:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 4704;
				_la = this._input.LA(1);
				if(!(_la===80 || _la===138 || _la===141 || _la===213 || _la===268)) {
				this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public repairType(): RepairTypeContext {
		let localctx: RepairTypeContext = new RepairTypeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 560, MySQLParser.RULE_repairType);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4707;
			_la = this._input.LA(1);
			if(!(_la===138 || _la===268 || _la===365)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public installUninstallStatment(): InstallUninstallStatmentContext {
		let localctx: InstallUninstallStatmentContext = new InstallUninstallStatmentContext(this, this._ctx, this.state);
		this.enterRule(localctx, 562, MySQLParser.RULE_installUninstallStatment);
		let _la: number;
		try {
			this.state = 4731;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 571, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4709;
				localctx._action = this.match(MySQLParser.INSTALL_SYMBOL);
				this.state = 4710;
				localctx._type_ = this.match(MySQLParser.PLUGIN_SYMBOL);
				this.state = 4711;
				this.identifier();
				this.state = 4712;
				this.match(MySQLParser.SONAME_SYMBOL);
				this.state = 4713;
				this.textStringLiteral();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 4715;
				localctx._action = this.match(MySQLParser.INSTALL_SYMBOL);
				this.state = 4716;
				localctx._type_ = this.match(MySQLParser.COMPONENT_SYMBOL);
				this.state = 4717;
				this.textStringLiteralList();
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 4718;
				localctx._action = this.match(MySQLParser.UNINSTALL_SYMBOL);
				this.state = 4719;
				localctx._type_ = this.match(MySQLParser.PLUGIN_SYMBOL);
				this.state = 4720;
				this.pluginRef();
				}
				break;
			case 4:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 4721;
				localctx._action = this.match(MySQLParser.UNINSTALL_SYMBOL);
				this.state = 4722;
				localctx._type_ = this.match(MySQLParser.COMPONENT_SYMBOL);
				this.state = 4723;
				this.componentRef();
				this.state = 4728;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la===406) {
					{
					{
					this.state = 4724;
					this.match(MySQLParser.COMMA_SYMBOL);
					this.state = 4725;
					this.componentRef();
					}
					}
					this.state = 4730;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public setStatement(): SetStatementContext {
		let localctx: SetStatementContext = new SetStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 564, MySQLParser.RULE_setStatement);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4733;
			this.match(MySQLParser.SET_SYMBOL);
			this.state = 4734;
			this.startOptionValueList();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public startOptionValueList(): StartOptionValueListContext {
		let localctx: StartOptionValueListContext = new StartOptionValueListContext(this, this._ctx, this.state);
		this.enterRule(localctx, 566, MySQLParser.RULE_startOptionValueList);
		let _la: number;
		try {
			this.state = 4792;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 581, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4736;
				this.optionValueNoOptionType();
				this.state = 4737;
				this.optionValueListContinued();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 4739;
				this.match(MySQLParser.TRANSACTION_SYMBOL);
				this.state = 4740;
				this.transactionCharacteristics();
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 4741;
				this.optionType();
				this.state = 4742;
				this.startOptionValueListFollowingOptionType();
				}
				break;
			case 4:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 4744;
				this.match(MySQLParser.PASSWORD_SYMBOL);
				this.state = 4747;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===506) {
					{
					this.state = 4745;
					this.match(MySQLParser.FOR_SYMBOL);
					this.state = 4746;
					this.user();
					}
				}

				this.state = 4749;
				this.equal();
				this.state = 4776;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 577, this._ctx) ) {
				case 1:
					{
					this.state = 4750;
					this.textString();
					this.state = 4752;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la===606) {
						{
						this.state = 4751;
						this.replacePassword();
						}
					}

					this.state = 4755;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la===757) {
						{
						this.state = 4754;
						this.retainCurrentPassword();
						}
					}

					}
					break;
				case 2:
					{
					this.state = 4757;
					this.textString();
					this.state = 4759;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la===606) {
						{
						this.state = 4758;
						this.replacePassword();
						}
					}

					this.state = 4762;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la===757) {
						{
						this.state = 4761;
						this.retainCurrentPassword();
						}
					}

					}
					break;
				case 3:
					{
					this.state = 4764;
					if (!(this.serverVersion < 50706)) {
						throw this.createFailedPredicateException("this.serverVersion < 50706");
					}
					this.state = 4765;
					this.match(MySQLParser.OLD_PASSWORD_SYMBOL);
					this.state = 4766;
					this.match(MySQLParser.OPEN_PAR_SYMBOL);
					this.state = 4767;
					this.textString();
					this.state = 4768;
					this.match(MySQLParser.CLOSE_PAR_SYMBOL);
					}
					break;
				case 4:
					{
					this.state = 4770;
					if (!(this.serverVersion < 80014)) {
						throw this.createFailedPredicateException("this.serverVersion < 80014");
					}
					this.state = 4771;
					this.match(MySQLParser.PASSWORD_SYMBOL);
					this.state = 4772;
					this.match(MySQLParser.OPEN_PAR_SYMBOL);
					this.state = 4773;
					this.textString();
					this.state = 4774;
					this.match(MySQLParser.CLOSE_PAR_SYMBOL);
					}
					break;
				}
				}
				break;
			case 5:
				this.enterOuterAlt(localctx, 5);
				{
				this.state = 4778;
				if (!(this.serverVersion >= 80018)) {
					throw this.createFailedPredicateException("this.serverVersion >= 80018");
				}
				this.state = 4779;
				this.match(MySQLParser.PASSWORD_SYMBOL);
				this.state = 4782;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===506) {
					{
					this.state = 4780;
					this.match(MySQLParser.FOR_SYMBOL);
					this.state = 4781;
					this.user();
					}
				}

				this.state = 4784;
				this.match(MySQLParser.TO_SYMBOL);
				this.state = 4785;
				this.match(MySQLParser.RANDOM_SYMBOL);
				this.state = 4787;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===606) {
					{
					this.state = 4786;
					this.replacePassword();
					}
				}

				this.state = 4790;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===757) {
					{
					this.state = 4789;
					this.retainCurrentPassword();
					}
				}

				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public transactionCharacteristics(): TransactionCharacteristicsContext {
		let localctx: TransactionCharacteristicsContext = new TransactionCharacteristicsContext(this, this._ctx, this.state);
		this.enterRule(localctx, 568, MySQLParser.RULE_transactionCharacteristics);
		let _la: number;
		try {
			this.state = 4803;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 598:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4794;
				this.transactionAccessMode();
				this.state = 4796;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===169) {
					{
					this.state = 4795;
					this.isolationLevel();
					}
				}

				}
				break;
			case 169:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 4798;
				this.isolationLevel();
				this.state = 4801;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===406) {
					{
					this.state = 4799;
					this.match(MySQLParser.COMMA_SYMBOL);
					this.state = 4800;
					this.transactionAccessMode();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public transactionAccessMode(): TransactionAccessModeContext {
		let localctx: TransactionAccessModeContext = new TransactionAccessModeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 570, MySQLParser.RULE_transactionAccessMode);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4805;
			this.match(MySQLParser.READ_SYMBOL);
			this.state = 4806;
			_la = this._input.LA(1);
			if(!(_la===581 || _la===684)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public isolationLevel(): IsolationLevelContext {
		let localctx: IsolationLevelContext = new IsolationLevelContext(this, this._ctx, this.state);
		this.enterRule(localctx, 572, MySQLParser.RULE_isolationLevel);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4808;
			this.match(MySQLParser.ISOLATION_SYMBOL);
			this.state = 4809;
			this.match(MySQLParser.LEVEL_SYMBOL);
			this.state = 4815;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 282:
				{
				this.state = 4810;
				this.match(MySQLParser.REPEATABLE_SYMBOL);
				this.state = 4811;
				this.match(MySQLParser.READ_SYMBOL);
				}
				break;
			case 598:
				{
				this.state = 4812;
				this.match(MySQLParser.READ_SYMBOL);
				this.state = 4813;
				_la = this._input.LA(1);
				if(!(_la===91 || _la===357)) {
				this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				}
				break;
			case 307:
				{
				this.state = 4814;
				this.match(MySQLParser.SERIALIZABLE_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public optionValueListContinued(): OptionValueListContinuedContext {
		let localctx: OptionValueListContinuedContext = new OptionValueListContinuedContext(this, this._ctx, this.state);
		this.enterRule(localctx, 574, MySQLParser.RULE_optionValueListContinued);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4821;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===406) {
				{
				{
				this.state = 4817;
				this.match(MySQLParser.COMMA_SYMBOL);
				this.state = 4818;
				this.optionValue();
				}
				}
				this.state = 4823;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public optionValueNoOptionType(): OptionValueNoOptionTypeContext {
		let localctx: OptionValueNoOptionTypeContext = new OptionValueNoOptionTypeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 576, MySQLParser.RULE_optionValueNoOptionType);
		let _la: number;
		try {
			this.state = 4849;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 589, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4824;
				this.internalVariableName();
				this.state = 4825;
				this.equal();
				this.state = 4826;
				this.setExprOrDefault();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 4828;
				this.charsetClause();
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 4829;
				this.userVariable();
				this.state = 4830;
				this.equal();
				this.state = 4831;
				this.expr(0);
				}
				break;
			case 4:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 4833;
				this.setSystemVariable();
				this.state = 4834;
				this.equal();
				this.state = 4835;
				this.setExprOrDefault();
				}
				break;
			case 5:
				this.enterOuterAlt(localctx, 5);
				{
				this.state = 4837;
				this.match(MySQLParser.NAMES_SYMBOL);
				this.state = 4847;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 588, this._ctx) ) {
				case 1:
					{
					this.state = 4838;
					this.equal();
					this.state = 4839;
					this.expr(0);
					}
					break;
				case 2:
					{
					this.state = 4841;
					this.charsetName();
					this.state = 4843;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la===452) {
						{
						this.state = 4842;
						this.collate();
						}
					}

					}
					break;
				case 3:
					{
					this.state = 4845;
					if (!(this.serverVersion >= 80011)) {
						throw this.createFailedPredicateException("this.serverVersion >= 80011");
					}
					this.state = 4846;
					this.match(MySQLParser.DEFAULT_SYMBOL);
					}
					break;
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public optionValue(): OptionValueContext {
		let localctx: OptionValueContext = new OptionValueContext(this, this._ctx, this.state);
		this.enterRule(localctx, 578, MySQLParser.RULE_optionValue);
		try {
			this.state = 4857;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 590, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4851;
				this.optionType();
				this.state = 4852;
				this.internalVariableName();
				this.state = 4853;
				this.equal();
				this.state = 4854;
				this.setExprOrDefault();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 4856;
				this.optionValueNoOptionType();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public setSystemVariable(): SetSystemVariableContext {
		let localctx: SetSystemVariableContext = new SetSystemVariableContext(this, this._ctx, this.state);
		this.enterRule(localctx, 580, MySQLParser.RULE_setSystemVariable);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4859;
			this.match(MySQLParser.AT_AT_SIGN_SYMBOL);
			this.state = 4861;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 591, this._ctx) ) {
			case 1:
				{
				this.state = 4860;
				this.setVarIdentType();
				}
				break;
			}
			this.state = 4863;
			this.internalVariableName();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public startOptionValueListFollowingOptionType(): StartOptionValueListFollowingOptionTypeContext {
		let localctx: StartOptionValueListFollowingOptionTypeContext = new StartOptionValueListFollowingOptionTypeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 582, MySQLParser.RULE_startOptionValueListFollowingOptionType);
		try {
			this.state = 4870;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 592, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4865;
				this.optionValueFollowingOptionType();
				this.state = 4866;
				this.optionValueListContinued();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 4868;
				this.match(MySQLParser.TRANSACTION_SYMBOL);
				this.state = 4869;
				this.transactionCharacteristics();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public optionValueFollowingOptionType(): OptionValueFollowingOptionTypeContext {
		let localctx: OptionValueFollowingOptionTypeContext = new OptionValueFollowingOptionTypeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 584, MySQLParser.RULE_optionValueFollowingOptionType);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4872;
			this.internalVariableName();
			this.state = 4873;
			this.equal();
			this.state = 4874;
			this.setExprOrDefault();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public setExprOrDefault(): SetExprOrDefaultContext {
		let localctx: SetExprOrDefaultContext = new SetExprOrDefaultContext(this, this._ctx, this.state);
		this.enterRule(localctx, 586, MySQLParser.RULE_setExprOrDefault);
		let _la: number;
		try {
			this.state = 4880;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 593, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4876;
				this.expr(0);
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 4877;
				_la = this._input.LA(1);
				if(!(_la===427 || _la===437 || _la===478 || _la===579)) {
				this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 4878;
				if (!(this.serverVersion >= 80000)) {
					throw this.createFailedPredicateException("this.serverVersion >= 80000");
				}
				this.state = 4879;
				_la = this._input.LA(1);
				if(!(_la===301 || _la===740)) {
				this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public showStatement(): ShowStatementContext {
		let localctx: ShowStatementContext = new ShowStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 588, MySQLParser.RULE_showStatement);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4882;
			this.match(MySQLParser.SHOW_SYMBOL);
			this.state = 5102;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 637, this._ctx) ) {
			case 1:
				{
				this.state = 4883;
				if (!(this.serverVersion < 50700)) {
					throw this.createFailedPredicateException("this.serverVersion < 50700");
				}
				this.state = 4884;
				localctx._value = this.match(MySQLParser.AUTHORS_SYMBOL);
				}
				break;
			case 2:
				{
				this.state = 4885;
				localctx._value = this.match(MySQLParser.DATABASES_SYMBOL);
				this.state = 4887;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===542 || _la===680) {
					{
					this.state = 4886;
					this.likeOrWhere();
					}
				}

				}
				break;
			case 3:
				{
				this.state = 4890;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 595, this._ctx) ) {
				case 1:
					{
					this.state = 4889;
					this.showCommandType();
					}
					break;
				}
				this.state = 4892;
				localctx._value = this.match(MySQLParser.TABLES_SYMBOL);
				this.state = 4894;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===507 || _la===530) {
					{
					this.state = 4893;
					this.inDb();
					}
				}

				this.state = 4897;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===542 || _la===680) {
					{
					this.state = 4896;
					this.likeOrWhere();
					}
				}

				}
				break;
			case 4:
				{
				this.state = 4900;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===144) {
					{
					this.state = 4899;
					this.match(MySQLParser.FULL_SYMBOL);
					}
				}

				this.state = 4902;
				localctx._value = this.match(MySQLParser.TRIGGERS_SYMBOL);
				this.state = 4904;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===507 || _la===530) {
					{
					this.state = 4903;
					this.inDb();
					}
				}

				this.state = 4907;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===542 || _la===680) {
					{
					this.state = 4906;
					this.likeOrWhere();
					}
				}

				}
				break;
			case 5:
				{
				this.state = 4909;
				localctx._value = this.match(MySQLParser.EVENTS_SYMBOL);
				this.state = 4911;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===507 || _la===530) {
					{
					this.state = 4910;
					this.inDb();
					}
				}

				this.state = 4914;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===542 || _la===680) {
					{
					this.state = 4913;
					this.likeOrWhere();
					}
				}

				}
				break;
			case 6:
				{
				this.state = 4916;
				localctx._value = this.match(MySQLParser.TABLE_SYMBOL);
				this.state = 4917;
				this.match(MySQLParser.STATUS_SYMBOL);
				this.state = 4919;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===507 || _la===530) {
					{
					this.state = 4918;
					this.inDb();
					}
				}

				this.state = 4922;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===542 || _la===680) {
					{
					this.state = 4921;
					this.likeOrWhere();
					}
				}

				}
				break;
			case 7:
				{
				this.state = 4924;
				localctx._value = this.match(MySQLParser.OPEN_SYMBOL);
				this.state = 4925;
				this.match(MySQLParser.TABLES_SYMBOL);
				this.state = 4927;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===507 || _la===530) {
					{
					this.state = 4926;
					this.inDb();
					}
				}

				this.state = 4930;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===542 || _la===680) {
					{
					this.state = 4929;
					this.likeOrWhere();
					}
				}

				}
				break;
			case 8:
				{
				this.state = 4932;
				localctx._value = this.match(MySQLParser.PLUGINS_SYMBOL);
				}
				break;
			case 9:
				{
				this.state = 4933;
				localctx._value = this.match(MySQLParser.ENGINE_SYMBOL);
				this.state = 4936;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 607, this._ctx) ) {
				case 1:
					{
					this.state = 4934;
					this.engineRef();
					}
					break;
				case 2:
					{
					this.state = 4935;
					this.match(MySQLParser.ALL_SYMBOL);
					}
					break;
				}
				this.state = 4938;
				_la = this._input.LA(1);
				if(!(_la===183 || _la===227 || _la===327)) {
				this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				}
				break;
			case 10:
				{
				this.state = 4940;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 608, this._ctx) ) {
				case 1:
					{
					this.state = 4939;
					this.showCommandType();
					}
					break;
				}
				this.state = 4942;
				localctx._value = this.match(MySQLParser.COLUMNS_SYMBOL);
				this.state = 4943;
				_la = this._input.LA(1);
				if(!(_la===507 || _la===530)) {
				this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				this.state = 4944;
				this.tableRef();
				this.state = 4946;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===507 || _la===530) {
					{
					this.state = 4945;
					this.inDb();
					}
				}

				this.state = 4949;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===542 || _la===680) {
					{
					this.state = 4948;
					this.likeOrWhere();
					}
				}

				}
				break;
			case 11:
				{
				this.state = 4951;
				_la = this._input.LA(1);
				if(!(_la===185 || _la===437)) {
				this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				this.state = 4952;
				localctx._value = this.match(MySQLParser.LOGS_SYMBOL);
				}
				break;
			case 12:
				{
				this.state = 4953;
				localctx._value = this.match(MySQLParser.SLAVE_SYMBOL);
				this.state = 4960;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case 157:
					{
					this.state = 4954;
					this.match(MySQLParser.HOSTS_SYMBOL);
					}
					break;
				case 327:
					{
					this.state = 4955;
					this.match(MySQLParser.STATUS_SYMBOL);
					this.state = 4956;
					this.nonBlocking();
					this.state = 4958;
					this._errHandler.sync(this);
					switch ( this._interp.adaptivePredict(this._input, 611, this._ctx) ) {
					case 1:
						{
						this.state = 4957;
						this.channel();
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 13:
				{
				this.state = 4962;
				localctx._value = this._input.LT(1);
				_la = this._input.LA(1);
				if(!(_la===71 || _la===276)) {
				    localctx._value = this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				this.state = 4963;
				this.match(MySQLParser.EVENTS_SYMBOL);
				this.state = 4966;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 613, this._ctx) ) {
				case 1:
					{
					this.state = 4964;
					this.match(MySQLParser.IN_SYMBOL);
					this.state = 4965;
					this.textString();
					}
					break;
				}
				this.state = 4970;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 614, this._ctx) ) {
				case 1:
					{
					this.state = 4968;
					this.match(MySQLParser.FROM_SYMBOL);
					this.state = 4969;
					this.ulonglong_number();
					}
					break;
				}
				this.state = 4973;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 615, this._ctx) ) {
				case 1:
					{
					this.state = 4972;
					this.limitClause();
					}
					break;
				}
				this.state = 4976;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 616, this._ctx) ) {
				case 1:
					{
					this.state = 4975;
					this.channel();
					}
					break;
				}
				}
				break;
			case 14:
				{
				this.state = 4980;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 617, this._ctx) ) {
				case 1:
					{
					this.state = 4978;
					if (!(this.serverVersion >= 80000)) {
						throw this.createFailedPredicateException("this.serverVersion >= 80000");
					}
					this.state = 4979;
					this.match(MySQLParser.EXTENDED_SYMBOL);
					}
					break;
				}
				this.state = 4982;
				localctx._value = this._input.LT(1);
				_la = this._input.LA(1);
				if(!(_la===163 || _la===521 || _la===536)) {
				    localctx._value = this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				this.state = 4983;
				this.fromOrIn();
				this.state = 4984;
				this.tableRef();
				this.state = 4986;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===507 || _la===530) {
					{
					this.state = 4985;
					this.inDb();
					}
				}

				this.state = 4989;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===680) {
					{
					this.state = 4988;
					this.whereClause();
					}
				}

				}
				break;
			case 15:
				{
				this.state = 4992;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===328) {
					{
					this.state = 4991;
					this.match(MySQLParser.STORAGE_SYMBOL);
					}
				}

				this.state = 4994;
				localctx._value = this.match(MySQLParser.ENGINES_SYMBOL);
				}
				break;
			case 16:
				{
				this.state = 4995;
				this.match(MySQLParser.COUNT_SYMBOL);
				this.state = 4996;
				this.match(MySQLParser.OPEN_PAR_SYMBOL);
				this.state = 4997;
				this.match(MySQLParser.MULT_OPERATOR);
				this.state = 4998;
				this.match(MySQLParser.CLOSE_PAR_SYMBOL);
				this.state = 4999;
				localctx._value = this._input.LT(1);
				_la = this._input.LA(1);
				if(!(_la===131 || _la===369)) {
				    localctx._value = this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				}
				break;
			case 17:
				{
				this.state = 5000;
				localctx._value = this.match(MySQLParser.WARNINGS_SYMBOL);
				this.state = 5002;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===543) {
					{
					this.state = 5001;
					this.limitClause();
					}
				}

				}
				break;
			case 18:
				{
				this.state = 5004;
				localctx._value = this.match(MySQLParser.ERRORS_SYMBOL);
				this.state = 5006;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===543) {
					{
					this.state = 5005;
					this.limitClause();
					}
				}

				}
				break;
			case 19:
				{
				this.state = 5008;
				localctx._value = this.match(MySQLParser.PROFILES_SYMBOL);
				}
				break;
			case 20:
				{
				this.state = 5009;
				localctx._value = this.match(MySQLParser.PROFILE_SYMBOL);
				this.state = 5018;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===73 || _la===103 || _la===105 || _la===168 || _la===214 || _la===247 || _la===314 || _la===337 || _la===427) {
					{
					this.state = 5010;
					this.profileType();
					this.state = 5015;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la===406) {
						{
						{
						this.state = 5011;
						this.match(MySQLParser.COMMA_SYMBOL);
						this.state = 5012;
						this.profileType();
						}
						}
						this.state = 5017;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					}
				}

				this.state = 5023;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===506) {
					{
					this.state = 5020;
					this.match(MySQLParser.FOR_SYMBOL);
					this.state = 5021;
					this.match(MySQLParser.QUERY_SYMBOL);
					this.state = 5022;
					this.match(MySQLParser.INT_NUMBER);
					}
				}

				this.state = 5026;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===543) {
					{
					this.state = 5025;
					this.limitClause();
					}
				}

				}
				break;
			case 21:
				{
				this.state = 5029;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===155 || _la===180 || _la===308 || _la===688 || _la===703) {
					{
					this.state = 5028;
					this.optionType();
					}
				}

				this.state = 5031;
				localctx._value = this._input.LT(1);
				_la = this._input.LA(1);
				if(!(_la===327 || _la===366)) {
				    localctx._value = this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				this.state = 5033;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===542 || _la===680) {
					{
					this.state = 5032;
					this.likeOrWhere();
					}
				}

				}
				break;
			case 22:
				{
				this.state = 5036;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===144) {
					{
					this.state = 5035;
					this.match(MySQLParser.FULL_SYMBOL);
					}
				}

				this.state = 5038;
				localctx._value = this.match(MySQLParser.PROCESSLIST_SYMBOL);
				}
				break;
			case 23:
				{
				this.state = 5039;
				this.charset();
				this.state = 5041;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===542 || _la===680) {
					{
					this.state = 5040;
					this.likeOrWhere();
					}
				}

				}
				break;
			case 24:
				{
				this.state = 5043;
				localctx._value = this.match(MySQLParser.COLLATION_SYMBOL);
				this.state = 5045;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===542 || _la===680) {
					{
					this.state = 5044;
					this.likeOrWhere();
					}
				}

				}
				break;
			case 25:
				{
				this.state = 5047;
				if (!(this.serverVersion < 50700)) {
					throw this.createFailedPredicateException("this.serverVersion < 50700");
				}
				this.state = 5048;
				localctx._value = this.match(MySQLParser.CONTRIBUTORS_SYMBOL);
				}
				break;
			case 26:
				{
				this.state = 5049;
				localctx._value = this.match(MySQLParser.PRIVILEGES_SYMBOL);
				}
				break;
			case 27:
				{
				this.state = 5050;
				localctx._value = this.match(MySQLParser.GRANTS_SYMBOL);
				this.state = 5053;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===506) {
					{
					this.state = 5051;
					this.match(MySQLParser.FOR_SYMBOL);
					this.state = 5052;
					this.user();
					}
				}

				}
				break;
			case 28:
				{
				this.state = 5055;
				localctx._value = this.match(MySQLParser.GRANTS_SYMBOL);
				this.state = 5056;
				this.match(MySQLParser.FOR_SYMBOL);
				this.state = 5057;
				this.user();
				this.state = 5058;
				this.match(MySQLParser.USING_SYMBOL);
				this.state = 5059;
				this.userList();
				}
				break;
			case 29:
				{
				this.state = 5061;
				localctx._value = this.match(MySQLParser.MASTER_SYMBOL);
				this.state = 5062;
				this.match(MySQLParser.STATUS_SYMBOL);
				}
				break;
			case 30:
				{
				this.state = 5063;
				localctx._value = this.match(MySQLParser.CREATE_SYMBOL);
				this.state = 5084;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 634, this._ctx) ) {
				case 1:
					{
					this.state = 5064;
					localctx._object = this.match(MySQLParser.DATABASE_SYMBOL);
					this.state = 5066;
					this._errHandler.sync(this);
					switch ( this._interp.adaptivePredict(this._input, 633, this._ctx) ) {
					case 1:
						{
						this.state = 5065;
						this.ifNotExists();
						}
						break;
					}
					this.state = 5068;
					this.schemaRef();
					}
					break;
				case 2:
					{
					this.state = 5069;
					localctx._object = this.match(MySQLParser.EVENT_SYMBOL);
					this.state = 5070;
					this.eventRef();
					}
					break;
				case 3:
					{
					this.state = 5071;
					localctx._object = this.match(MySQLParser.FUNCTION_SYMBOL);
					this.state = 5072;
					this.functionRef();
					}
					break;
				case 4:
					{
					this.state = 5073;
					localctx._object = this.match(MySQLParser.PROCEDURE_SYMBOL);
					this.state = 5074;
					this.procedureRef();
					}
					break;
				case 5:
					{
					this.state = 5075;
					localctx._object = this.match(MySQLParser.TABLE_SYMBOL);
					this.state = 5076;
					this.tableRef();
					}
					break;
				case 6:
					{
					this.state = 5077;
					localctx._object = this.match(MySQLParser.TRIGGER_SYMBOL);
					this.state = 5078;
					this.triggerRef();
					}
					break;
				case 7:
					{
					this.state = 5079;
					localctx._object = this.match(MySQLParser.VIEW_SYMBOL);
					this.state = 5080;
					this.viewRef();
					}
					break;
				case 8:
					{
					this.state = 5081;
					if (!(this.serverVersion >= 50704)) {
						throw this.createFailedPredicateException("this.serverVersion >= 50704");
					}
					this.state = 5082;
					localctx._object = this.match(MySQLParser.USER_SYMBOL);
					this.state = 5083;
					this.user();
					}
					break;
				}
				}
				break;
			case 31:
				{
				this.state = 5086;
				localctx._value = this.match(MySQLParser.PROCEDURE_SYMBOL);
				this.state = 5087;
				this.match(MySQLParser.STATUS_SYMBOL);
				this.state = 5089;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===542 || _la===680) {
					{
					this.state = 5088;
					this.likeOrWhere();
					}
				}

				}
				break;
			case 32:
				{
				this.state = 5091;
				localctx._value = this.match(MySQLParser.FUNCTION_SYMBOL);
				this.state = 5092;
				this.match(MySQLParser.STATUS_SYMBOL);
				this.state = 5094;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===542 || _la===680) {
					{
					this.state = 5093;
					this.likeOrWhere();
					}
				}

				}
				break;
			case 33:
				{
				this.state = 5096;
				localctx._value = this.match(MySQLParser.PROCEDURE_SYMBOL);
				this.state = 5097;
				this.match(MySQLParser.CODE_SYMBOL);
				this.state = 5098;
				this.procedureRef();
				}
				break;
			case 34:
				{
				this.state = 5099;
				localctx._value = this.match(MySQLParser.FUNCTION_SYMBOL);
				this.state = 5100;
				this.match(MySQLParser.CODE_SYMBOL);
				this.state = 5101;
				this.functionRef();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public showCommandType(): ShowCommandTypeContext {
		let localctx: ShowCommandTypeContext = new ShowCommandTypeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 590, MySQLParser.RULE_showCommandType);
		let _la: number;
		try {
			this.state = 5110;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 639, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 5104;
				this.match(MySQLParser.FULL_SYMBOL);
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 5105;
				if (!(this.serverVersion >= 80000)) {
					throw this.createFailedPredicateException("this.serverVersion >= 80000");
				}
				this.state = 5106;
				this.match(MySQLParser.EXTENDED_SYMBOL);
				this.state = 5108;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===144) {
					{
					this.state = 5107;
					this.match(MySQLParser.FULL_SYMBOL);
					}
				}

				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public nonBlocking(): NonBlockingContext {
		let localctx: NonBlockingContext = new NonBlockingContext(this, this._ctx, this.state);
		this.enterRule(localctx, 592, MySQLParser.RULE_nonBlocking);
		try {
			this.state = 5117;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 641, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 5112;
				if (!(this.serverVersion >= 50700 && this.serverVersion < 50706)) {
					throw this.createFailedPredicateException("this.serverVersion >= 50700 && this.serverVersion < 50706");
				}
				this.state = 5114;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 640, this._ctx) ) {
				case 1:
					{
					this.state = 5113;
					this.match(MySQLParser.NONBLOCKING_SYMBOL);
					}
					break;
				}
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				// tslint:disable-next-line:no-empty
				{
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public fromOrIn(): FromOrInContext {
		let localctx: FromOrInContext = new FromOrInContext(this, this._ctx, this.state);
		this.enterRule(localctx, 594, MySQLParser.RULE_fromOrIn);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5119;
			_la = this._input.LA(1);
			if(!(_la===507 || _la===530)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public inDb(): InDbContext {
		let localctx: InDbContext = new InDbContext(this, this._ctx, this.state);
		this.enterRule(localctx, 596, MySQLParser.RULE_inDb);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5121;
			this.fromOrIn();
			this.state = 5122;
			this.identifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public profileType(): ProfileTypeContext {
		let localctx: ProfileTypeContext = new ProfileTypeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 598, MySQLParser.RULE_profileType);
		let _la: number;
		try {
			this.state = 5131;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 73:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 5124;
				this.match(MySQLParser.BLOCK_SYMBOL);
				this.state = 5125;
				this.match(MySQLParser.IO_SYMBOL);
				}
				break;
			case 103:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 5126;
				this.match(MySQLParser.CONTEXT_SYMBOL);
				this.state = 5127;
				this.match(MySQLParser.SWITCHES_SYMBOL);
				}
				break;
			case 247:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 5128;
				this.match(MySQLParser.PAGE_SYMBOL);
				this.state = 5129;
				this.match(MySQLParser.FAULTS_SYMBOL);
				}
				break;
			case 105:
			case 168:
			case 214:
			case 314:
			case 337:
			case 427:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 5130;
				_la = this._input.LA(1);
				if(!(_la===105 || _la===168 || _la===214 || _la===314 || _la===337 || _la===427)) {
				this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public otherAdministrativeStatement(): OtherAdministrativeStatementContext {
		let localctx: OtherAdministrativeStatementContext = new OtherAdministrativeStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 600, MySQLParser.RULE_otherAdministrativeStatement);
		let _la: number;
		try {
			this.state = 5170;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 648, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 5133;
				localctx._type_ = this.match(MySQLParser.BINLOG_SYMBOL);
				this.state = 5134;
				this.textLiteral();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 5135;
				localctx._type_ = this.match(MySQLParser.CACHE_SYMBOL);
				this.state = 5136;
				this.match(MySQLParser.INDEX_SYMBOL);
				this.state = 5137;
				this.keyCacheListOrParts();
				this.state = 5138;
				this.match(MySQLParser.IN_SYMBOL);
				this.state = 5141;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 643, this._ctx) ) {
				case 1:
					{
					this.state = 5139;
					this.identifier();
					}
					break;
				case 2:
					{
					this.state = 5140;
					this.match(MySQLParser.DEFAULT_SYMBOL);
					}
					break;
				}
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 5143;
				localctx._type_ = this.match(MySQLParser.FLUSH_SYMBOL);
				this.state = 5145;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 644, this._ctx) ) {
				case 1:
					{
					this.state = 5144;
					this.noWriteToBinLog();
					}
					break;
				}
				this.state = 5156;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 646, this._ctx) ) {
				case 1:
					{
					this.state = 5147;
					this.flushTables();
					}
					break;
				case 2:
					{
					this.state = 5148;
					this.flushOption();
					this.state = 5153;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la===406) {
						{
						{
						this.state = 5149;
						this.match(MySQLParser.COMMA_SYMBOL);
						this.state = 5150;
						this.flushOption();
						}
						}
						this.state = 5155;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					}
					break;
				}
				}
				break;
			case 4:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 5158;
				localctx._type_ = this.match(MySQLParser.KILL_SYMBOL);
				this.state = 5160;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 647, this._ctx) ) {
				case 1:
					{
					this.state = 5159;
					_la = this._input.LA(1);
					if(!(_la===98 || _la===267)) {
					this._errHandler.recoverInline(this);
					}
					else {
						this._errHandler.reportMatch(this);
					    this.consume();
					}
					}
					break;
				}
				this.state = 5162;
				this.expr(0);
				}
				break;
			case 5:
				this.enterOuterAlt(localctx, 5);
				{
				this.state = 5163;
				localctx._type_ = this.match(MySQLParser.LOAD_SYMBOL);
				this.state = 5164;
				this.match(MySQLParser.INDEX_SYMBOL);
				this.state = 5165;
				this.match(MySQLParser.INTO_SYMBOL);
				this.state = 5166;
				this.match(MySQLParser.CACHE_SYMBOL);
				this.state = 5167;
				this.preloadTail();
				}
				break;
			case 6:
				this.enterOuterAlt(localctx, 6);
				{
				this.state = 5168;
				if (!(this.serverVersion >= 50709)) {
					throw this.createFailedPredicateException("this.serverVersion >= 50709");
				}
				this.state = 5169;
				localctx._type_ = this.match(MySQLParser.SHUTDOWN_SYMBOL);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public keyCacheListOrParts(): KeyCacheListOrPartsContext {
		let localctx: KeyCacheListOrPartsContext = new KeyCacheListOrPartsContext(this, this._ctx, this.state);
		this.enterRule(localctx, 602, MySQLParser.RULE_keyCacheListOrParts);
		try {
			this.state = 5174;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 649, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 5172;
				this.keyCacheList();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 5173;
				this.assignToKeycachePartition();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public keyCacheList(): KeyCacheListContext {
		let localctx: KeyCacheListContext = new KeyCacheListContext(this, this._ctx, this.state);
		this.enterRule(localctx, 604, MySQLParser.RULE_keyCacheList);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5176;
			this.assignToKeycache();
			this.state = 5181;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===406) {
				{
				{
				this.state = 5177;
				this.match(MySQLParser.COMMA_SYMBOL);
				this.state = 5178;
				this.assignToKeycache();
				}
				}
				this.state = 5183;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public assignToKeycache(): AssignToKeycacheContext {
		let localctx: AssignToKeycacheContext = new AssignToKeycacheContext(this, this._ctx, this.state);
		this.enterRule(localctx, 606, MySQLParser.RULE_assignToKeycache);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5184;
			this.tableRef();
			this.state = 5186;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===521 || _la===537) {
				{
				this.state = 5185;
				this.cacheKeyList();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public assignToKeycachePartition(): AssignToKeycachePartitionContext {
		let localctx: AssignToKeycachePartitionContext = new AssignToKeycachePartitionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 608, MySQLParser.RULE_assignToKeycachePartition);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5188;
			this.tableRef();
			this.state = 5189;
			this.match(MySQLParser.PARTITION_SYMBOL);
			this.state = 5190;
			this.match(MySQLParser.OPEN_PAR_SYMBOL);
			this.state = 5191;
			this.allOrPartitionNameList();
			this.state = 5192;
			this.match(MySQLParser.CLOSE_PAR_SYMBOL);
			this.state = 5194;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===521 || _la===537) {
				{
				this.state = 5193;
				this.cacheKeyList();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public cacheKeyList(): CacheKeyListContext {
		let localctx: CacheKeyListContext = new CacheKeyListContext(this, this._ctx, this.state);
		this.enterRule(localctx, 610, MySQLParser.RULE_cacheKeyList);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5196;
			this.keyOrIndex();
			this.state = 5197;
			this.match(MySQLParser.OPEN_PAR_SYMBOL);
			this.state = 5199;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 653, this._ctx) ) {
			case 1:
				{
				this.state = 5198;
				this.keyUsageList();
				}
				break;
			}
			this.state = 5201;
			this.match(MySQLParser.CLOSE_PAR_SYMBOL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public keyUsageElement(): KeyUsageElementContext {
		let localctx: KeyUsageElementContext = new KeyUsageElementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 612, MySQLParser.RULE_keyUsageElement);
		try {
			this.state = 5205;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 654, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 5203;
				this.identifier();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 5204;
				this.match(MySQLParser.PRIMARY_SYMBOL);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public keyUsageList(): KeyUsageListContext {
		let localctx: KeyUsageListContext = new KeyUsageListContext(this, this._ctx, this.state);
		this.enterRule(localctx, 614, MySQLParser.RULE_keyUsageList);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5207;
			this.keyUsageElement();
			this.state = 5212;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===406) {
				{
				{
				this.state = 5208;
				this.match(MySQLParser.COMMA_SYMBOL);
				this.state = 5209;
				this.keyUsageElement();
				}
				}
				this.state = 5214;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public flushOption(): FlushOptionContext {
		let localctx: FlushOptionContext = new FlushOptionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 616, MySQLParser.RULE_flushOption);
		let _la: number;
		try {
			this.state = 5230;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 658, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 5215;
				localctx._option = this._input.LT(1);
				_la = this._input.LA(1);
				if(!(_la===117 || _la===157 || _la===260 || _la===327 || _la===363)) {
				    localctx._option = this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 5217;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & 4194309) !== 0) || _la===311 || _la===437) {
					{
					this.state = 5216;
					this.logType();
					}
				}

				this.state = 5219;
				localctx._option = this.match(MySQLParser.LOGS_SYMBOL);
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 5220;
				localctx._option = this.match(MySQLParser.RELAY_SYMBOL);
				this.state = 5221;
				this.match(MySQLParser.LOGS_SYMBOL);
				this.state = 5223;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 657, this._ctx) ) {
				case 1:
					{
					this.state = 5222;
					this.channel();
					}
					break;
				}
				}
				break;
			case 4:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 5225;
				if (!(this.serverVersion < 80000)) {
					throw this.createFailedPredicateException("this.serverVersion < 80000");
				}
				this.state = 5226;
				localctx._option = this.match(MySQLParser.QUERY_SYMBOL);
				this.state = 5227;
				this.match(MySQLParser.CACHE_SYMBOL);
				}
				break;
			case 5:
				this.enterOuterAlt(localctx, 5);
				{
				this.state = 5228;
				if (!(this.serverVersion >= 50706)) {
					throw this.createFailedPredicateException("this.serverVersion >= 50706");
				}
				this.state = 5229;
				localctx._option = this.match(MySQLParser.OPTIMIZER_COSTS_SYMBOL);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public logType(): LogTypeContext {
		let localctx: LogTypeContext = new LogTypeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 618, MySQLParser.RULE_logType);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5232;
			_la = this._input.LA(1);
			if(!(((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & 4194309) !== 0) || _la===311 || _la===437)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public flushTables(): FlushTablesContext {
		let localctx: FlushTablesContext = new FlushTablesContext(this, this._ctx, this.state);
		this.enterRule(localctx, 620, MySQLParser.RULE_flushTables);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5234;
			_la = this._input.LA(1);
			if(!(_la===340 || _la===647)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			this.state = 5242;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 660, this._ctx) ) {
			case 1:
				{
				this.state = 5235;
				this.match(MySQLParser.WITH_SYMBOL);
				this.state = 5236;
				this.match(MySQLParser.READ_SYMBOL);
				this.state = 5237;
				this.match(MySQLParser.LOCK_SYMBOL);
				}
				break;
			case 2:
				{
				this.state = 5238;
				this.identifierList();
				this.state = 5240;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 659, this._ctx) ) {
				case 1:
					{
					this.state = 5239;
					this.flushTablesOptions();
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public flushTablesOptions(): FlushTablesOptionsContext {
		let localctx: FlushTablesOptionsContext = new FlushTablesOptionsContext(this, this._ctx, this.state);
		this.enterRule(localctx, 622, MySQLParser.RULE_flushTablesOptions);
		try {
			this.state = 5250;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 661, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 5244;
				if (!(this.serverVersion >= 50606)) {
					throw this.createFailedPredicateException("this.serverVersion >= 50606");
				}
				this.state = 5245;
				this.match(MySQLParser.FOR_SYMBOL);
				this.state = 5246;
				this.match(MySQLParser.EXPORT_SYMBOL);
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 5247;
				this.match(MySQLParser.WITH_SYMBOL);
				this.state = 5248;
				this.match(MySQLParser.READ_SYMBOL);
				this.state = 5249;
				this.match(MySQLParser.LOCK_SYMBOL);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public preloadTail(): PreloadTailContext {
		let localctx: PreloadTailContext = new PreloadTailContext(this, this._ctx, this.state);
		this.enterRule(localctx, 624, MySQLParser.RULE_preloadTail);
		let _la: number;
		try {
			this.state = 5262;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 664, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 5252;
				this.tableRef();
				this.state = 5253;
				this.adminPartition();
				this.state = 5255;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===521 || _la===537) {
					{
					this.state = 5254;
					this.cacheKeyList();
					}
				}

				this.state = 5259;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===520) {
					{
					this.state = 5257;
					this.match(MySQLParser.IGNORE_SYMBOL);
					this.state = 5258;
					this.match(MySQLParser.LEAVES_SYMBOL);
					}
				}

				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 5261;
				this.preloadList();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public preloadList(): PreloadListContext {
		let localctx: PreloadListContext = new PreloadListContext(this, this._ctx, this.state);
		this.enterRule(localctx, 626, MySQLParser.RULE_preloadList);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5264;
			this.preloadKeys();
			this.state = 5269;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===406) {
				{
				{
				this.state = 5265;
				this.match(MySQLParser.COMMA_SYMBOL);
				this.state = 5266;
				this.preloadKeys();
				}
				}
				this.state = 5271;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public preloadKeys(): PreloadKeysContext {
		let localctx: PreloadKeysContext = new PreloadKeysContext(this, this._ctx, this.state);
		this.enterRule(localctx, 628, MySQLParser.RULE_preloadKeys);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5272;
			this.tableRef();
			this.state = 5274;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===521 || _la===537) {
				{
				this.state = 5273;
				this.cacheKeyList();
				}
			}

			this.state = 5278;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===520) {
				{
				this.state = 5276;
				this.match(MySQLParser.IGNORE_SYMBOL);
				this.state = 5277;
				this.match(MySQLParser.LEAVES_SYMBOL);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public adminPartition(): AdminPartitionContext {
		let localctx: AdminPartitionContext = new AdminPartitionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 630, MySQLParser.RULE_adminPartition);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5280;
			this.match(MySQLParser.PARTITION_SYMBOL);
			this.state = 5281;
			this.match(MySQLParser.OPEN_PAR_SYMBOL);
			this.state = 5282;
			this.allOrPartitionNameList();
			this.state = 5283;
			this.match(MySQLParser.CLOSE_PAR_SYMBOL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public resourceGroupManagement(): ResourceGroupManagementContext {
		let localctx: ResourceGroupManagementContext = new ResourceGroupManagementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 632, MySQLParser.RULE_resourceGroupManagement);
		try {
			this.state = 5289;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 459:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 5285;
				this.createResourceGroup();
				}
				break;
			case 428:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 5286;
				this.alterResourceGroup();
				}
				break;
			case 619:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 5287;
				this.setResourceGroup();
				}
				break;
			case 487:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 5288;
				this.dropResourceGroup();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public createResourceGroup(): CreateResourceGroupContext {
		let localctx: CreateResourceGroupContext = new CreateResourceGroupContext(this, this._ctx, this.state);
		this.enterRule(localctx, 634, MySQLParser.RULE_createResourceGroup);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5291;
			this.match(MySQLParser.CREATE_SYMBOL);
			this.state = 5292;
			this.match(MySQLParser.RESOURCE_SYMBOL);
			this.state = 5293;
			this.match(MySQLParser.GROUP_SYMBOL);
			this.state = 5294;
			this.identifier();
			this.state = 5295;
			this.match(MySQLParser.TYPE_SYMBOL);
			this.state = 5297;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===383 || _la===384) {
				{
				this.state = 5296;
				this.equal();
				}
			}

			this.state = 5299;
			_la = this._input.LA(1);
			if(!(_la===364 || _la===740)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			this.state = 5301;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===741) {
				{
				this.state = 5300;
				this.resourceGroupVcpuList();
				}
			}

			this.state = 5304;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===738) {
				{
				this.state = 5303;
				this.resourceGroupPriority();
				}
			}

			this.state = 5307;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===120 || _la===143) {
				{
				this.state = 5306;
				this.resourceGroupEnableDisable();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public resourceGroupVcpuList(): ResourceGroupVcpuListContext {
		let localctx: ResourceGroupVcpuListContext = new ResourceGroupVcpuListContext(this, this._ctx, this.state);
		this.enterRule(localctx, 636, MySQLParser.RULE_resourceGroupVcpuList);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5309;
			this.match(MySQLParser.VCPU_SYMBOL);
			this.state = 5311;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===383 || _la===384) {
				{
				this.state = 5310;
				this.equal();
				}
			}

			this.state = 5313;
			this.vcpuNumOrRange();
			this.state = 5320;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===380 || _la===406) {
				{
				{
				this.state = 5315;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===406) {
					{
					this.state = 5314;
					this.match(MySQLParser.COMMA_SYMBOL);
					}
				}

				this.state = 5317;
				this.vcpuNumOrRange();
				}
				}
				this.state = 5322;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public vcpuNumOrRange(): VcpuNumOrRangeContext {
		let localctx: VcpuNumOrRangeContext = new VcpuNumOrRangeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 638, MySQLParser.RULE_vcpuNumOrRange);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5323;
			this.match(MySQLParser.INT_NUMBER);
			this.state = 5326;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===392) {
				{
				this.state = 5324;
				this.match(MySQLParser.MINUS_OPERATOR);
				this.state = 5325;
				this.match(MySQLParser.INT_NUMBER);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public resourceGroupPriority(): ResourceGroupPriorityContext {
		let localctx: ResourceGroupPriorityContext = new ResourceGroupPriorityContext(this, this._ctx, this.state);
		this.enterRule(localctx, 640, MySQLParser.RULE_resourceGroupPriority);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5328;
			this.match(MySQLParser.THREAD_PRIORITY_SYMBOL);
			this.state = 5330;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===383 || _la===384) {
				{
				this.state = 5329;
				this.equal();
				}
			}

			this.state = 5332;
			this.match(MySQLParser.INT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public resourceGroupEnableDisable(): ResourceGroupEnableDisableContext {
		let localctx: ResourceGroupEnableDisableContext = new ResourceGroupEnableDisableContext(this, this._ctx, this.state);
		this.enterRule(localctx, 642, MySQLParser.RULE_resourceGroupEnableDisable);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5334;
			_la = this._input.LA(1);
			if(!(_la===120 || _la===143)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public alterResourceGroup(): AlterResourceGroupContext {
		let localctx: AlterResourceGroupContext = new AlterResourceGroupContext(this, this._ctx, this.state);
		this.enterRule(localctx, 644, MySQLParser.RULE_alterResourceGroup);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5336;
			this.match(MySQLParser.ALTER_SYMBOL);
			this.state = 5337;
			this.match(MySQLParser.RESOURCE_SYMBOL);
			this.state = 5338;
			this.match(MySQLParser.GROUP_SYMBOL);
			this.state = 5339;
			this.resourceGroupRef();
			this.state = 5341;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===741) {
				{
				this.state = 5340;
				this.resourceGroupVcpuList();
				}
			}

			this.state = 5344;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===738) {
				{
				this.state = 5343;
				this.resourceGroupPriority();
				}
			}

			this.state = 5347;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===120 || _la===143) {
				{
				this.state = 5346;
				this.resourceGroupEnableDisable();
				}
			}

			this.state = 5350;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===504) {
				{
				this.state = 5349;
				this.match(MySQLParser.FORCE_SYMBOL);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public setResourceGroup(): SetResourceGroupContext {
		let localctx: SetResourceGroupContext = new SetResourceGroupContext(this, this._ctx, this.state);
		this.enterRule(localctx, 646, MySQLParser.RULE_setResourceGroup);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5352;
			this.match(MySQLParser.SET_SYMBOL);
			this.state = 5353;
			this.match(MySQLParser.RESOURCE_SYMBOL);
			this.state = 5354;
			this.match(MySQLParser.GROUP_SYMBOL);
			this.state = 5355;
			this.identifier();
			this.state = 5358;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===506) {
				{
				this.state = 5356;
				this.match(MySQLParser.FOR_SYMBOL);
				this.state = 5357;
				this.threadIdList();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public threadIdList(): ThreadIdListContext {
		let localctx: ThreadIdListContext = new ThreadIdListContext(this, this._ctx, this.state);
		this.enterRule(localctx, 648, MySQLParser.RULE_threadIdList);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5360;
			this.real_ulong_number();
			this.state = 5367;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 380)) & ~0x1F) === 0 && ((1 << (_la - 380)) & 67108871) !== 0) || _la===421) {
				{
				{
				this.state = 5362;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===406) {
					{
					this.state = 5361;
					this.match(MySQLParser.COMMA_SYMBOL);
					}
				}

				this.state = 5364;
				this.real_ulong_number();
				}
				}
				this.state = 5369;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public dropResourceGroup(): DropResourceGroupContext {
		let localctx: DropResourceGroupContext = new DropResourceGroupContext(this, this._ctx, this.state);
		this.enterRule(localctx, 650, MySQLParser.RULE_dropResourceGroup);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5370;
			this.match(MySQLParser.DROP_SYMBOL);
			this.state = 5371;
			this.match(MySQLParser.RESOURCE_SYMBOL);
			this.state = 5372;
			this.match(MySQLParser.GROUP_SYMBOL);
			this.state = 5373;
			this.resourceGroupRef();
			this.state = 5375;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===504) {
				{
				this.state = 5374;
				this.match(MySQLParser.FORCE_SYMBOL);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public utilityStatement(): UtilityStatementContext {
		let localctx: UtilityStatementContext = new UtilityStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 652, MySQLParser.RULE_utilityStatement);
		try {
			this.state = 5383;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 686, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 5377;
				this.describeCommand();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 5378;
				this.explainCommand();
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 5379;
				this.helpCommand();
				}
				break;
			case 4:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 5380;
				this.useCommand();
				}
				break;
			case 5:
				this.enterOuterAlt(localctx, 5);
				{
				this.state = 5381;
				if (!(this.serverVersion >= 80011)) {
					throw this.createFailedPredicateException("this.serverVersion >= 80011");
				}
				this.state = 5382;
				this.restartServer();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public describeCommand(): DescribeCommandContext {
		let localctx: DescribeCommandContext = new DescribeCommandContext(this, this._ctx, this.state);
		this.enterRule(localctx, 654, MySQLParser.RULE_describeCommand);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5385;
			_la = this._input.LA(1);
			if(!(((((_la - 481)) & ~0x1F) === 0 && ((1 << (_la - 481)) & 262147) !== 0))) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			this.state = 5386;
			this.tableRef();
			this.state = 5389;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 687, this._ctx) ) {
			case 1:
				{
				this.state = 5387;
				this.textString();
				}
				break;
			case 2:
				{
				this.state = 5388;
				this.columnRef();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public explainCommand(): ExplainCommandContext {
		let localctx: ExplainCommandContext = new ExplainCommandContext(this, this._ctx, this.state);
		this.enterRule(localctx, 656, MySQLParser.RULE_explainCommand);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5391;
			_la = this._input.LA(1);
			if(!(((((_la - 481)) & ~0x1F) === 0 && ((1 << (_la - 481)) & 262147) !== 0))) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			this.state = 5402;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 688, this._ctx) ) {
			case 1:
				{
				this.state = 5392;
				if (!(this.serverVersion < 80000)) {
					throw this.createFailedPredicateException("this.serverVersion < 80000");
				}
				this.state = 5393;
				this.match(MySQLParser.EXTENDED_SYMBOL);
				}
				break;
			case 2:
				{
				this.state = 5394;
				if (!(this.serverVersion < 80000)) {
					throw this.createFailedPredicateException("this.serverVersion < 80000");
				}
				this.state = 5395;
				this.match(MySQLParser.PARTITIONS_SYMBOL);
				}
				break;
			case 3:
				{
				this.state = 5396;
				if (!(this.serverVersion >= 50605)) {
					throw this.createFailedPredicateException("this.serverVersion >= 50605");
				}
				this.state = 5397;
				this.match(MySQLParser.FORMAT_SYMBOL);
				this.state = 5398;
				this.match(MySQLParser.EQUAL_OPERATOR);
				this.state = 5399;
				this.textOrIdentifier();
				}
				break;
			case 4:
				{
				this.state = 5400;
				if (!(this.serverVersion >= 80018)) {
					throw this.createFailedPredicateException("this.serverVersion >= 80018");
				}
				this.state = 5401;
				this.match(MySQLParser.ANALYZE_SYMBOL);
				}
				break;
			}
			this.state = 5404;
			this.explainableStatement();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public explainableStatement(): ExplainableStatementContext {
		let localctx: ExplainableStatementContext = new ExplainableStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 658, MySQLParser.RULE_explainableStatement);
		try {
			this.state = 5418;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 690, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 5406;
				this.selectStatement();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 5407;
				if (!(this.serverVersion >= 50603)) {
					throw this.createFailedPredicateException("this.serverVersion >= 50603");
				}
				this.state = 5412;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 689, this._ctx) ) {
				case 1:
					{
					this.state = 5408;
					this.deleteStatement();
					}
					break;
				case 2:
					{
					this.state = 5409;
					this.insertStatement();
					}
					break;
				case 3:
					{
					this.state = 5410;
					this.replaceStatement();
					}
					break;
				case 4:
					{
					this.state = 5411;
					this.updateStatement();
					}
					break;
				}
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 5414;
				if (!(this.serverVersion >= 50700)) {
					throw this.createFailedPredicateException("this.serverVersion >= 50700");
				}
				this.state = 5415;
				this.match(MySQLParser.FOR_SYMBOL);
				this.state = 5416;
				this.match(MySQLParser.CONNECTION_SYMBOL);
				this.state = 5417;
				this.real_ulong_number();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public helpCommand(): HelpCommandContext {
		let localctx: HelpCommandContext = new HelpCommandContext(this, this._ctx, this.state);
		this.enterRule(localctx, 660, MySQLParser.RULE_helpCommand);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5420;
			this.match(MySQLParser.HELP_SYMBOL);
			this.state = 5421;
			this.textOrIdentifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public useCommand(): UseCommandContext {
		let localctx: UseCommandContext = new UseCommandContext(this, this._ctx, this.state);
		this.enterRule(localctx, 662, MySQLParser.RULE_useCommand);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5423;
			this.match(MySQLParser.USE_SYMBOL);
			this.state = 5424;
			this.identifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public restartServer(): RestartServerContext {
		let localctx: RestartServerContext = new RestartServerContext(this, this._ctx, this.state);
		this.enterRule(localctx, 664, MySQLParser.RULE_restartServer);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5426;
			this.match(MySQLParser.RESTART_SYMBOL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}

	public expr(): ExprContext;
	public expr(_p: number): ExprContext;
	// @RuleVersion(0)
	public expr(_p?: number): ExprContext {
		if (_p === undefined) {
			_p = 0;
		}

		let _parentctx: ParserRuleContext = this._ctx;
		let _parentState: number = this.state;
		let localctx: ExprContext = new ExprContext(this, this._ctx, _parentState);
		let _prevctx: ExprContext = localctx;
		let _startState: number = 666;
		this.enterRecursionRule(localctx, 666, MySQLParser.RULE_expr, _p);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5439;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 693, this._ctx) ) {
			case 1:
				{
				localctx = new ExprIsContext(this, localctx);
				this._ctx = localctx;
				_prevctx = localctx;

				this.state = 5429;
				this.boolPri(0);
				this.state = 5435;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 692, this._ctx) ) {
				case 1:
					{
					this.state = 5430;
					this.match(MySQLParser.IS_SYMBOL);
					this.state = 5432;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la===378 || _la===573) {
						{
						this.state = 5431;
						this.notRule();
						}
					}

					this.state = 5434;
					(localctx as ExprIsContext)._type_ = this._input.LT(1);
					_la = this._input.LA(1);
					if(!(_la===361 || _la===501 || _la===657)) {
					    (localctx as ExprIsContext)._type_ = this._errHandler.recoverInline(this);
					}
					else {
						this._errHandler.reportMatch(this);
					    this.consume();
					}
					}
					break;
				}
				}
				break;
			case 2:
				{
				localctx = new ExprNotContext(this, localctx);
				this._ctx = localctx;
				_prevctx = localctx;
				this.state = 5437;
				this.match(MySQLParser.NOT_SYMBOL);
				this.state = 5438;
				this.expr(4);
				}
				break;
			}
			this._ctx.stop = this._input.LT(-1);
			this.state = 5452;
			this._errHandler.sync(this);
			_alt = this._interp.adaptivePredict(this._input, 695, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					if (this._parseListeners != null) {
						this.triggerExitRuleEvent();
					}
					_prevctx = localctx;
					{
					this.state = 5450;
					this._errHandler.sync(this);
					switch ( this._interp.adaptivePredict(this._input, 694, this._ctx) ) {
					case 1:
						{
						localctx = new ExprAndContext(this, new ExprContext(this, _parentctx, _parentState));
						this.pushNewRecursionContext(localctx, _startState, MySQLParser.RULE_expr);
						this.state = 5441;
						if (!(this.precpred(this._ctx, 3))) {
							throw this.createFailedPredicateException("this.precpred(this._ctx, 3)");
						}
						this.state = 5442;
						(localctx as ExprAndContext)._op = this._input.LT(1);
						_la = this._input.LA(1);
						if(!(_la===400 || _la===430)) {
						    (localctx as ExprAndContext)._op = this._errHandler.recoverInline(this);
						}
						else {
							this._errHandler.reportMatch(this);
						    this.consume();
						}
						this.state = 5443;
						this.expr(4);
						}
						break;
					case 2:
						{
						localctx = new ExprXorContext(this, new ExprContext(this, _parentctx, _parentState));
						this.pushNewRecursionContext(localctx, _startState, MySQLParser.RULE_expr);
						this.state = 5444;
						if (!(this.precpred(this._ctx, 2))) {
							throw this.createFailedPredicateException("this.precpred(this._ctx, 2)");
						}
						this.state = 5445;
						this.match(MySQLParser.XOR_SYMBOL);
						this.state = 5446;
						this.expr(3);
						}
						break;
					case 3:
						{
						localctx = new ExprOrContext(this, new ExprContext(this, _parentctx, _parentState));
						this.pushNewRecursionContext(localctx, _startState, MySQLParser.RULE_expr);
						this.state = 5447;
						if (!(this.precpred(this._ctx, 1))) {
							throw this.createFailedPredicateException("this.precpred(this._ctx, 1)");
						}
						this.state = 5448;
						(localctx as ExprOrContext)._op = this._input.LT(1);
						_la = this._input.LA(1);
						if(!(_la===403 || _la===587)) {
						    (localctx as ExprOrContext)._op = this._errHandler.recoverInline(this);
						}
						else {
							this._errHandler.reportMatch(this);
						    this.consume();
						}
						this.state = 5449;
						this.expr(2);
						}
						break;
					}
					}
				}
				this.state = 5454;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 695, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.unrollRecursionContexts(_parentctx);
		}
		return localctx;
	}

	public boolPri(): BoolPriContext;
	public boolPri(_p: number): BoolPriContext;
	// @RuleVersion(0)
	public boolPri(_p?: number): BoolPriContext {
		if (_p === undefined) {
			_p = 0;
		}

		let _parentctx: ParserRuleContext = this._ctx;
		let _parentState: number = this.state;
		let localctx: BoolPriContext = new BoolPriContext(this, this._ctx, _parentState);
		let _prevctx: BoolPriContext = localctx;
		let _startState: number = 668;
		this.enterRecursionRule(localctx, 668, MySQLParser.RULE_boolPri, _p);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			{
			localctx = new PrimaryExprPredicateContext(this, localctx);
			this._ctx = localctx;
			_prevctx = localctx;

			this.state = 5456;
			this.predicate();
			}
			this._ctx.stop = this._input.LT(-1);
			this.state = 5475;
			this._errHandler.sync(this);
			_alt = this._interp.adaptivePredict(this._input, 698, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					if (this._parseListeners != null) {
						this.triggerExitRuleEvent();
					}
					_prevctx = localctx;
					{
					this.state = 5473;
					this._errHandler.sync(this);
					switch ( this._interp.adaptivePredict(this._input, 697, this._ctx) ) {
					case 1:
						{
						localctx = new PrimaryExprIsNullContext(this, new BoolPriContext(this, _parentctx, _parentState));
						this.pushNewRecursionContext(localctx, _startState, MySQLParser.RULE_boolPri);
						this.state = 5458;
						if (!(this.precpred(this._ctx, 3))) {
							throw this.createFailedPredicateException("this.precpred(this._ctx, 3)");
						}
						this.state = 5459;
						this.match(MySQLParser.IS_SYMBOL);
						this.state = 5461;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la===378 || _la===573) {
							{
							this.state = 5460;
							this.notRule();
							}
						}

						this.state = 5463;
						this.match(MySQLParser.NULL_SYMBOL);
						}
						break;
					case 2:
						{
						localctx = new PrimaryExprCompareContext(this, new BoolPriContext(this, _parentctx, _parentState));
						this.pushNewRecursionContext(localctx, _startState, MySQLParser.RULE_boolPri);
						this.state = 5464;
						if (!(this.precpred(this._ctx, 2))) {
							throw this.createFailedPredicateException("this.precpred(this._ctx, 2)");
						}
						this.state = 5465;
						this.compOp();
						this.state = 5466;
						this.predicate();
						}
						break;
					case 3:
						{
						localctx = new PrimaryExprAllAnyContext(this, new BoolPriContext(this, _parentctx, _parentState));
						this.pushNewRecursionContext(localctx, _startState, MySQLParser.RULE_boolPri);
						this.state = 5468;
						if (!(this.precpred(this._ctx, 1))) {
							throw this.createFailedPredicateException("this.precpred(this._ctx, 1)");
						}
						this.state = 5469;
						this.compOp();
						this.state = 5470;
						_la = this._input.LA(1);
						if(!(_la===64 || _la===427)) {
						this._errHandler.recoverInline(this);
						}
						else {
							this._errHandler.reportMatch(this);
						    this.consume();
						}
						this.state = 5471;
						this.subquery();
						}
						break;
					}
					}
				}
				this.state = 5477;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 698, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.unrollRecursionContexts(_parentctx);
		}
		return localctx;
	}
	// @RuleVersion(0)
	public compOp(): CompOpContext {
		let localctx: CompOpContext = new CompOpContext(this, this._ctx, this.state);
		this.enterRule(localctx, 670, MySQLParser.RULE_compOp);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5478;
			_la = this._input.LA(1);
			if(!(((((_la - 383)) & ~0x1F) === 0 && ((1 << (_la - 383)) & 253) !== 0))) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public predicate(): PredicateContext {
		let localctx: PredicateContext = new PredicateContext(this, this._ctx, this.state);
		this.enterRule(localctx, 672, MySQLParser.RULE_predicate);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5480;
			this.bitExpr(0);
			this.state = 5494;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 701, this._ctx) ) {
			case 1:
				{
				this.state = 5482;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===378 || _la===573) {
					{
					this.state = 5481;
					this.notRule();
					}
				}

				this.state = 5484;
				this.predicateOperations();
				}
				break;
			case 2:
				{
				this.state = 5485;
				if (!(this.serverVersion >= 80017)) {
					throw this.createFailedPredicateException("this.serverVersion >= 80017");
				}
				this.state = 5486;
				this.match(MySQLParser.MEMBER_SYMBOL);
				this.state = 5488;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===698) {
					{
					this.state = 5487;
					this.match(MySQLParser.OF_SYMBOL);
					}
				}

				this.state = 5490;
				this.simpleExprWithParentheses();
				}
				break;
			case 3:
				{
				this.state = 5491;
				this.match(MySQLParser.SOUNDS_SYMBOL);
				this.state = 5492;
				this.match(MySQLParser.LIKE_SYMBOL);
				this.state = 5493;
				this.bitExpr(0);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public predicateOperations(): PredicateOperationsContext {
		let localctx: PredicateOperationsContext = new PredicateOperationsContext(this, this._ctx, this.state);
		this.enterRule(localctx, 674, MySQLParser.RULE_predicateOperations);
		try {
			this.state = 5517;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 530:
				localctx = new PredicateExprInContext(this, localctx);
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 5496;
				this.match(MySQLParser.IN_SYMBOL);
				this.state = 5502;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 702, this._ctx) ) {
				case 1:
					{
					this.state = 5497;
					this.subquery();
					}
					break;
				case 2:
					{
					this.state = 5498;
					this.match(MySQLParser.OPEN_PAR_SYMBOL);
					this.state = 5499;
					this.exprList();
					this.state = 5500;
					this.match(MySQLParser.CLOSE_PAR_SYMBOL);
					}
					break;
				}
				}
				break;
			case 435:
				localctx = new PredicateExprBetweenContext(this, localctx);
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 5504;
				this.match(MySQLParser.BETWEEN_SYMBOL);
				this.state = 5505;
				this.bitExpr(0);
				this.state = 5506;
				this.match(MySQLParser.AND_SYMBOL);
				this.state = 5507;
				this.predicate();
				}
				break;
			case 542:
				localctx = new PredicateExprLikeContext(this, localctx);
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 5509;
				this.match(MySQLParser.LIKE_SYMBOL);
				this.state = 5510;
				this.simpleExpr(0);
				this.state = 5513;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 703, this._ctx) ) {
				case 1:
					{
					this.state = 5511;
					this.match(MySQLParser.ESCAPE_SYMBOL);
					this.state = 5512;
					this.simpleExpr(0);
					}
					break;
				}
				}
				break;
			case 602:
				localctx = new PredicateExprRegexContext(this, localctx);
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 5515;
				this.match(MySQLParser.REGEXP_SYMBOL);
				this.state = 5516;
				this.bitExpr(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}

	public bitExpr(): BitExprContext;
	public bitExpr(_p: number): BitExprContext;
	// @RuleVersion(0)
	public bitExpr(_p?: number): BitExprContext {
		if (_p === undefined) {
			_p = 0;
		}

		let _parentctx: ParserRuleContext = this._ctx;
		let _parentState: number = this.state;
		let localctx: BitExprContext = new BitExprContext(this, this._ctx, _parentState);
		let _prevctx: BitExprContext = localctx;
		let _startState: number = 676;
		this.enterRecursionRule(localctx, 676, MySQLParser.RULE_bitExpr, _p);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			{
			this.state = 5520;
			this.simpleExpr(0);
			}
			this._ctx.stop = this._input.LT(-1);
			this.state = 5548;
			this._errHandler.sync(this);
			_alt = this._interp.adaptivePredict(this._input, 706, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					if (this._parseListeners != null) {
						this.triggerExitRuleEvent();
					}
					_prevctx = localctx;
					{
					this.state = 5546;
					this._errHandler.sync(this);
					switch ( this._interp.adaptivePredict(this._input, 705, this._ctx) ) {
					case 1:
						{
						localctx = new BitExprContext(this, _parentctx, _parentState);
						this.pushNewRecursionContext(localctx, _startState, MySQLParser.RULE_bitExpr);
						this.state = 5522;
						if (!(this.precpred(this._ctx, 7))) {
							throw this.createFailedPredicateException("this.precpred(this._ctx, 7)");
						}
						this.state = 5523;
						localctx._op = this.match(MySQLParser.BITWISE_XOR_OPERATOR);
						this.state = 5524;
						this.bitExpr(8);
						}
						break;
					case 2:
						{
						localctx = new BitExprContext(this, _parentctx, _parentState);
						this.pushNewRecursionContext(localctx, _startState, MySQLParser.RULE_bitExpr);
						this.state = 5525;
						if (!(this.precpred(this._ctx, 6))) {
							throw this.createFailedPredicateException("this.precpred(this._ctx, 6)");
						}
						this.state = 5526;
						localctx._op = this._input.LT(1);
						_la = this._input.LA(1);
						if(!(((((_la - 393)) & ~0x1F) === 0 && ((1 << (_la - 393)) & 7) !== 0) || _la===485 || _la===568)) {
						    localctx._op = this._errHandler.recoverInline(this);
						}
						else {
							this._errHandler.reportMatch(this);
						    this.consume();
						}
						this.state = 5527;
						this.bitExpr(7);
						}
						break;
					case 3:
						{
						localctx = new BitExprContext(this, _parentctx, _parentState);
						this.pushNewRecursionContext(localctx, _startState, MySQLParser.RULE_bitExpr);
						this.state = 5528;
						if (!(this.precpred(this._ctx, 5))) {
							throw this.createFailedPredicateException("this.precpred(this._ctx, 5)");
						}
						this.state = 5529;
						localctx._op = this._input.LT(1);
						_la = this._input.LA(1);
						if(!(_la===391 || _la===392)) {
						    localctx._op = this._errHandler.recoverInline(this);
						}
						else {
							this._errHandler.reportMatch(this);
						    this.consume();
						}
						this.state = 5530;
						this.bitExpr(6);
						}
						break;
					case 4:
						{
						localctx = new BitExprContext(this, _parentctx, _parentState);
						this.pushNewRecursionContext(localctx, _startState, MySQLParser.RULE_bitExpr);
						this.state = 5531;
						if (!(this.precpred(this._ctx, 3))) {
							throw this.createFailedPredicateException("this.precpred(this._ctx, 3)");
						}
						this.state = 5532;
						localctx._op = this._input.LT(1);
						_la = this._input.LA(1);
						if(!(_la===398 || _la===399)) {
						    localctx._op = this._errHandler.recoverInline(this);
						}
						else {
							this._errHandler.reportMatch(this);
						    this.consume();
						}
						this.state = 5533;
						this.bitExpr(4);
						}
						break;
					case 5:
						{
						localctx = new BitExprContext(this, _parentctx, _parentState);
						this.pushNewRecursionContext(localctx, _startState, MySQLParser.RULE_bitExpr);
						this.state = 5534;
						if (!(this.precpred(this._ctx, 2))) {
							throw this.createFailedPredicateException("this.precpred(this._ctx, 2)");
						}
						this.state = 5535;
						localctx._op = this.match(MySQLParser.BITWISE_AND_OPERATOR);
						this.state = 5536;
						this.bitExpr(3);
						}
						break;
					case 6:
						{
						localctx = new BitExprContext(this, _parentctx, _parentState);
						this.pushNewRecursionContext(localctx, _startState, MySQLParser.RULE_bitExpr);
						this.state = 5537;
						if (!(this.precpred(this._ctx, 1))) {
							throw this.createFailedPredicateException("this.precpred(this._ctx, 1)");
						}
						this.state = 5538;
						localctx._op = this.match(MySQLParser.BITWISE_OR_OPERATOR);
						this.state = 5539;
						this.bitExpr(2);
						}
						break;
					case 7:
						{
						localctx = new BitExprContext(this, _parentctx, _parentState);
						this.pushNewRecursionContext(localctx, _startState, MySQLParser.RULE_bitExpr);
						this.state = 5540;
						if (!(this.precpred(this._ctx, 4))) {
							throw this.createFailedPredicateException("this.precpred(this._ctx, 4)");
						}
						this.state = 5541;
						localctx._op = this._input.LT(1);
						_la = this._input.LA(1);
						if(!(_la===391 || _la===392)) {
						    localctx._op = this._errHandler.recoverInline(this);
						}
						else {
							this._errHandler.reportMatch(this);
						    this.consume();
						}
						this.state = 5542;
						this.match(MySQLParser.INTERVAL_SYMBOL);
						this.state = 5543;
						this.expr(0);
						this.state = 5544;
						this.interval();
						}
						break;
					}
					}
				}
				this.state = 5550;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 706, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.unrollRecursionContexts(_parentctx);
		}
		return localctx;
	}

	public simpleExpr(): SimpleExprContext;
	public simpleExpr(_p: number): SimpleExprContext;
	// @RuleVersion(0)
	public simpleExpr(_p?: number): SimpleExprContext {
		if (_p === undefined) {
			_p = 0;
		}

		let _parentctx: ParserRuleContext = this._ctx;
		let _parentState: number = this.state;
		let localctx: SimpleExprContext = new SimpleExprContext(this, this._ctx, _parentState);
		let _prevctx: SimpleExprContext = localctx;
		let _startState: number = 678;
		this.enterRecursionRule(localctx, 678, MySQLParser.RULE_simpleExpr, _p);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5655;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 715, this._ctx) ) {
			case 1:
				{
				localctx = new SimpleExprVariableContext(this, localctx);
				this._ctx = localctx;
				_prevctx = localctx;

				this.state = 5552;
				this.variable();
				}
				break;
			case 2:
				{
				localctx = new SimpleExprColumnRefContext(this, localctx);
				this._ctx = localctx;
				_prevctx = localctx;
				this.state = 5553;
				this.columnRef();
				this.state = 5555;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 707, this._ctx) ) {
				case 1:
					{
					this.state = 5554;
					this.jsonOperator();
					}
					break;
				}
				}
				break;
			case 3:
				{
				localctx = new SimpleExprRuntimeFunctionContext(this, localctx);
				this._ctx = localctx;
				_prevctx = localctx;
				this.state = 5557;
				this.runtimeFunctionCall();
				}
				break;
			case 4:
				{
				localctx = new SimpleExprFunctionContext(this, localctx);
				this._ctx = localctx;
				_prevctx = localctx;
				this.state = 5558;
				this.functionCall();
				}
				break;
			case 5:
				{
				localctx = new SimpleExprLiteralContext(this, localctx);
				this._ctx = localctx;
				_prevctx = localctx;
				this.state = 5559;
				this.literal();
				}
				break;
			case 6:
				{
				localctx = new SimpleExprParamMarkerContext(this, localctx);
				this._ctx = localctx;
				_prevctx = localctx;
				this.state = 5560;
				this.match(MySQLParser.PARAM_MARKER);
				}
				break;
			case 7:
				{
				localctx = new SimpleExprSumContext(this, localctx);
				this._ctx = localctx;
				_prevctx = localctx;
				this.state = 5561;
				this.sumExpr();
				}
				break;
			case 8:
				{
				localctx = new SimpleExprGroupingOperationContext(this, localctx);
				this._ctx = localctx;
				_prevctx = localctx;
				this.state = 5562;
				if (!(this.serverVersion >= 80000)) {
					throw this.createFailedPredicateException("this.serverVersion >= 80000");
				}
				this.state = 5563;
				this.groupingOperation();
				}
				break;
			case 9:
				{
				localctx = new SimpleExprWindowingFunctionContext(this, localctx);
				this._ctx = localctx;
				_prevctx = localctx;
				this.state = 5564;
				if (!(this.serverVersion >= 80000)) {
					throw this.createFailedPredicateException("this.serverVersion >= 80000");
				}
				this.state = 5565;
				this.windowFunctionCall();
				}
				break;
			case 10:
				{
				localctx = new SimpleExprUnaryContext(this, localctx);
				this._ctx = localctx;
				_prevctx = localctx;
				this.state = 5566;
				(localctx as SimpleExprUnaryContext)._op = this._input.LT(1);
				_la = this._input.LA(1);
				if(!(((((_la - 391)) & ~0x1F) === 0 && ((1 << (_la - 391)) & 67) !== 0))) {
				    (localctx as SimpleExprUnaryContext)._op = this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				this.state = 5567;
				this.simpleExpr(14);
				}
				break;
			case 11:
				{
				localctx = new SimpleExprNotContext(this, localctx);
				this._ctx = localctx;
				_prevctx = localctx;
				this.state = 5568;
				this.not2Rule();
				this.state = 5569;
				this.simpleExpr(13);
				}
				break;
			case 12:
				{
				localctx = new SimpleExprListContext(this, localctx);
				this._ctx = localctx;
				_prevctx = localctx;
				this.state = 5572;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===301) {
					{
					this.state = 5571;
					this.match(MySQLParser.ROW_SYMBOL);
					}
				}

				this.state = 5574;
				this.match(MySQLParser.OPEN_PAR_SYMBOL);
				this.state = 5575;
				this.exprList();
				this.state = 5576;
				this.match(MySQLParser.CLOSE_PAR_SYMBOL);
				}
				break;
			case 13:
				{
				localctx = new SimpleExprSubQueryContext(this, localctx);
				this._ctx = localctx;
				_prevctx = localctx;
				this.state = 5579;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===496) {
					{
					this.state = 5578;
					this.match(MySQLParser.EXISTS_SYMBOL);
					}
				}

				this.state = 5581;
				this.subquery();
				}
				break;
			case 14:
				{
				localctx = new SimpleExprOdbcContext(this, localctx);
				this._ctx = localctx;
				_prevctx = localctx;
				this.state = 5582;
				this.match(MySQLParser.OPEN_CURLY_SYMBOL);
				this.state = 5583;
				this.identifier();
				this.state = 5584;
				this.expr(0);
				this.state = 5585;
				this.match(MySQLParser.CLOSE_CURLY_SYMBOL);
				}
				break;
			case 15:
				{
				localctx = new SimpleExprMatchContext(this, localctx);
				this._ctx = localctx;
				_prevctx = localctx;
				this.state = 5587;
				this.match(MySQLParser.MATCH_SYMBOL);
				this.state = 5588;
				this.identListArg();
				this.state = 5589;
				this.match(MySQLParser.AGAINST_SYMBOL);
				this.state = 5590;
				this.match(MySQLParser.OPEN_PAR_SYMBOL);
				this.state = 5591;
				this.bitExpr(0);
				this.state = 5593;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===530 || _la===682) {
					{
					this.state = 5592;
					this.fulltextOptions();
					}
				}

				this.state = 5595;
				this.match(MySQLParser.CLOSE_PAR_SYMBOL);
				}
				break;
			case 16:
				{
				localctx = new SimpleExprBinaryContext(this, localctx);
				this._ctx = localctx;
				_prevctx = localctx;
				this.state = 5597;
				this.match(MySQLParser.BINARY_SYMBOL);
				this.state = 5598;
				this.simpleExpr(8);
				}
				break;
			case 17:
				{
				localctx = new SimpleExprCastContext(this, localctx);
				this._ctx = localctx;
				_prevctx = localctx;
				this.state = 5599;
				this.match(MySQLParser.CAST_SYMBOL);
				this.state = 5600;
				this.match(MySQLParser.OPEN_PAR_SYMBOL);
				this.state = 5601;
				this.expr(0);
				this.state = 5602;
				this.match(MySQLParser.AS_SYMBOL);
				this.state = 5603;
				this.castType();
				this.state = 5605;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 711, this._ctx) ) {
				case 1:
					{
					this.state = 5604;
					this.arrayCast();
					}
					break;
				}
				this.state = 5607;
				this.match(MySQLParser.CLOSE_PAR_SYMBOL);
				}
				break;
			case 18:
				{
				localctx = new SimpleExprCaseContext(this, localctx);
				this._ctx = localctx;
				_prevctx = localctx;
				this.state = 5609;
				this.match(MySQLParser.CASE_SYMBOL);
				this.state = 5611;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 712, this._ctx) ) {
				case 1:
					{
					this.state = 5610;
					this.expr(0);
					}
					break;
				}
				this.state = 5616;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 5613;
					this.whenExpression();
					this.state = 5614;
					this.thenExpression();
					}
					}
					this.state = 5618;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (_la===679);
				this.state = 5621;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===490) {
					{
					this.state = 5620;
					this.elseExpression();
					}
				}

				this.state = 5623;
				this.match(MySQLParser.END_SYMBOL);
				}
				break;
			case 19:
				{
				localctx = new SimpleExprConvertContext(this, localctx);
				this._ctx = localctx;
				_prevctx = localctx;
				this.state = 5625;
				this.match(MySQLParser.CONVERT_SYMBOL);
				this.state = 5626;
				this.match(MySQLParser.OPEN_PAR_SYMBOL);
				this.state = 5627;
				this.expr(0);
				this.state = 5628;
				this.match(MySQLParser.COMMA_SYMBOL);
				this.state = 5629;
				this.castType();
				this.state = 5630;
				this.match(MySQLParser.CLOSE_PAR_SYMBOL);
				}
				break;
			case 20:
				{
				localctx = new SimpleExprConvertUsingContext(this, localctx);
				this._ctx = localctx;
				_prevctx = localctx;
				this.state = 5632;
				this.match(MySQLParser.CONVERT_SYMBOL);
				this.state = 5633;
				this.match(MySQLParser.OPEN_PAR_SYMBOL);
				this.state = 5634;
				this.expr(0);
				this.state = 5635;
				this.match(MySQLParser.USING_SYMBOL);
				this.state = 5636;
				this.charsetName();
				this.state = 5637;
				this.match(MySQLParser.CLOSE_PAR_SYMBOL);
				}
				break;
			case 21:
				{
				localctx = new SimpleExprDefaultContext(this, localctx);
				this._ctx = localctx;
				_prevctx = localctx;
				this.state = 5639;
				this.match(MySQLParser.DEFAULT_SYMBOL);
				this.state = 5640;
				this.match(MySQLParser.OPEN_PAR_SYMBOL);
				this.state = 5641;
				this.simpleIdentifier();
				this.state = 5642;
				this.match(MySQLParser.CLOSE_PAR_SYMBOL);
				}
				break;
			case 22:
				{
				localctx = new SimpleExprValuesContext(this, localctx);
				this._ctx = localctx;
				_prevctx = localctx;
				this.state = 5644;
				this.match(MySQLParser.VALUES_SYMBOL);
				this.state = 5645;
				this.match(MySQLParser.OPEN_PAR_SYMBOL);
				this.state = 5646;
				this.simpleIdentifier();
				this.state = 5647;
				this.match(MySQLParser.CLOSE_PAR_SYMBOL);
				}
				break;
			case 23:
				{
				localctx = new SimpleExprIntervalContext(this, localctx);
				this._ctx = localctx;
				_prevctx = localctx;
				this.state = 5649;
				this.match(MySQLParser.INTERVAL_SYMBOL);
				this.state = 5650;
				this.expr(0);
				this.state = 5651;
				this.interval();
				this.state = 5652;
				this.match(MySQLParser.PLUS_OPERATOR);
				this.state = 5653;
				this.expr(0);
				}
				break;
			}
			this._ctx.stop = this._input.LT(-1);
			this.state = 5665;
			this._errHandler.sync(this);
			_alt = this._interp.adaptivePredict(this._input, 717, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					if (this._parseListeners != null) {
						this.triggerExitRuleEvent();
					}
					_prevctx = localctx;
					{
					this.state = 5663;
					this._errHandler.sync(this);
					switch ( this._interp.adaptivePredict(this._input, 716, this._ctx) ) {
					case 1:
						{
						localctx = new SimpleExprConcatContext(this, new SimpleExprContext(this, _parentctx, _parentState));
						this.pushNewRecursionContext(localctx, _startState, MySQLParser.RULE_simpleExpr);
						this.state = 5657;
						if (!(this.precpred(this._ctx, 15))) {
							throw this.createFailedPredicateException("this.precpred(this._ctx, 15)");
						}
						this.state = 5658;
						this.match(MySQLParser.CONCAT_PIPES_SYMBOL);
						this.state = 5659;
						this.simpleExpr(16);
						}
						break;
					case 2:
						{
						localctx = new SimpleExprCollateContext(this, new SimpleExprContext(this, _parentctx, _parentState));
						this.pushNewRecursionContext(localctx, _startState, MySQLParser.RULE_simpleExpr);
						this.state = 5660;
						if (!(this.precpred(this._ctx, 21))) {
							throw this.createFailedPredicateException("this.precpred(this._ctx, 21)");
						}
						this.state = 5661;
						this.match(MySQLParser.COLLATE_SYMBOL);
						this.state = 5662;
						this.textOrIdentifier();
						}
						break;
					}
					}
				}
				this.state = 5667;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 717, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.unrollRecursionContexts(_parentctx);
		}
		return localctx;
	}
	// @RuleVersion(0)
	public arrayCast(): ArrayCastContext {
		let localctx: ArrayCastContext = new ArrayCastContext(this, this._ctx, this.state);
		this.enterRule(localctx, 680, MySQLParser.RULE_arrayCast);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5668;
			if (!(this.serverVersion >= 80017)) {
				throw this.createFailedPredicateException("this.serverVersion >= 80017");
			}
			this.state = 5669;
			this.match(MySQLParser.ARRAY_SYMBOL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public jsonOperator(): JsonOperatorContext {
		let localctx: JsonOperatorContext = new JsonOperatorContext(this, this._ctx, this.state);
		this.enterRule(localctx, 682, MySQLParser.RULE_jsonOperator);
		try {
			this.state = 5677;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 718, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 5671;
				if (!(this.serverVersion >= 50708)) {
					throw this.createFailedPredicateException("this.serverVersion >= 50708");
				}
				this.state = 5672;
				this.match(MySQLParser.JSON_SEPARATOR_SYMBOL);
				this.state = 5673;
				this.textStringLiteral();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 5674;
				if (!(this.serverVersion >= 50713)) {
					throw this.createFailedPredicateException("this.serverVersion >= 50713");
				}
				this.state = 5675;
				this.match(MySQLParser.JSON_UNQUOTED_SEPARATOR_SYMBOL);
				this.state = 5676;
				this.textStringLiteral();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public sumExpr(): SumExprContext {
		let localctx: SumExprContext = new SumExprContext(this, this._ctx, this.state);
		this.enterRule(localctx, 684, MySQLParser.RULE_sumExpr);
		let _la: number;
		try {
			this.state = 5810;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 741, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 5679;
				localctx._name = this.match(MySQLParser.AVG_SYMBOL);
				this.state = 5680;
				this.match(MySQLParser.OPEN_PAR_SYMBOL);
				this.state = 5682;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 719, this._ctx) ) {
				case 1:
					{
					this.state = 5681;
					this.match(MySQLParser.DISTINCT_SYMBOL);
					}
					break;
				}
				this.state = 5684;
				this.inSumExpr();
				this.state = 5685;
				this.match(MySQLParser.CLOSE_PAR_SYMBOL);
				this.state = 5688;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 720, this._ctx) ) {
				case 1:
					{
					this.state = 5686;
					if (!(this.serverVersion >= 80000)) {
						throw this.createFailedPredicateException("this.serverVersion >= 80000");
					}
					this.state = 5687;
					this.windowingClause();
					}
					break;
				}
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 5690;
				localctx._name = this._input.LT(1);
				_la = this._input.LA(1);
				if(!(((((_la - 439)) & ~0x1F) === 0 && ((1 << (_la - 439)) & 7) !== 0))) {
				    localctx._name = this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				this.state = 5691;
				this.match(MySQLParser.OPEN_PAR_SYMBOL);
				this.state = 5692;
				this.inSumExpr();
				this.state = 5693;
				this.match(MySQLParser.CLOSE_PAR_SYMBOL);
				this.state = 5696;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 721, this._ctx) ) {
				case 1:
					{
					this.state = 5694;
					if (!(this.serverVersion >= 80000)) {
						throw this.createFailedPredicateException("this.serverVersion >= 80000");
					}
					this.state = 5695;
					this.windowingClause();
					}
					break;
				}
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 5698;
				if (!(this.serverVersion >= 80000)) {
					throw this.createFailedPredicateException("this.serverVersion >= 80000");
				}
				this.state = 5699;
				this.jsonFunction();
				}
				break;
			case 4:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 5700;
				localctx._name = this.match(MySQLParser.COUNT_SYMBOL);
				this.state = 5701;
				this.match(MySQLParser.OPEN_PAR_SYMBOL);
				this.state = 5703;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===427) {
					{
					this.state = 5702;
					this.match(MySQLParser.ALL_SYMBOL);
					}
				}

				this.state = 5705;
				this.match(MySQLParser.MULT_OPERATOR);
				this.state = 5706;
				this.match(MySQLParser.CLOSE_PAR_SYMBOL);
				this.state = 5709;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 723, this._ctx) ) {
				case 1:
					{
					this.state = 5707;
					if (!(this.serverVersion >= 80000)) {
						throw this.createFailedPredicateException("this.serverVersion >= 80000");
					}
					this.state = 5708;
					this.windowingClause();
					}
					break;
				}
				}
				break;
			case 5:
				this.enterOuterAlt(localctx, 5);
				{
				this.state = 5711;
				localctx._name = this.match(MySQLParser.COUNT_SYMBOL);
				this.state = 5712;
				this.match(MySQLParser.OPEN_PAR_SYMBOL);
				this.state = 5720;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 725, this._ctx) ) {
				case 1:
					{
					this.state = 5714;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la===427) {
						{
						this.state = 5713;
						this.match(MySQLParser.ALL_SYMBOL);
						}
					}

					this.state = 5716;
					this.match(MySQLParser.MULT_OPERATOR);
					}
					break;
				case 2:
					{
					this.state = 5717;
					this.inSumExpr();
					}
					break;
				case 3:
					{
					this.state = 5718;
					this.match(MySQLParser.DISTINCT_SYMBOL);
					this.state = 5719;
					this.exprList();
					}
					break;
				}
				this.state = 5722;
				this.match(MySQLParser.CLOSE_PAR_SYMBOL);
				this.state = 5725;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 726, this._ctx) ) {
				case 1:
					{
					this.state = 5723;
					if (!(this.serverVersion >= 80000)) {
						throw this.createFailedPredicateException("this.serverVersion >= 80000");
					}
					this.state = 5724;
					this.windowingClause();
					}
					break;
				}
				}
				break;
			case 6:
				this.enterOuterAlt(localctx, 6);
				{
				this.state = 5727;
				localctx._name = this.match(MySQLParser.MIN_SYMBOL);
				this.state = 5728;
				this.match(MySQLParser.OPEN_PAR_SYMBOL);
				this.state = 5730;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 727, this._ctx) ) {
				case 1:
					{
					this.state = 5729;
					this.match(MySQLParser.DISTINCT_SYMBOL);
					}
					break;
				}
				this.state = 5732;
				this.inSumExpr();
				this.state = 5733;
				this.match(MySQLParser.CLOSE_PAR_SYMBOL);
				this.state = 5736;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 728, this._ctx) ) {
				case 1:
					{
					this.state = 5734;
					if (!(this.serverVersion >= 80000)) {
						throw this.createFailedPredicateException("this.serverVersion >= 80000");
					}
					this.state = 5735;
					this.windowingClause();
					}
					break;
				}
				}
				break;
			case 7:
				this.enterOuterAlt(localctx, 7);
				{
				this.state = 5738;
				localctx._name = this.match(MySQLParser.MAX_SYMBOL);
				this.state = 5739;
				this.match(MySQLParser.OPEN_PAR_SYMBOL);
				this.state = 5741;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 729, this._ctx) ) {
				case 1:
					{
					this.state = 5740;
					this.match(MySQLParser.DISTINCT_SYMBOL);
					}
					break;
				}
				this.state = 5743;
				this.inSumExpr();
				this.state = 5744;
				this.match(MySQLParser.CLOSE_PAR_SYMBOL);
				this.state = 5747;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 730, this._ctx) ) {
				case 1:
					{
					this.state = 5745;
					if (!(this.serverVersion >= 80000)) {
						throw this.createFailedPredicateException("this.serverVersion >= 80000");
					}
					this.state = 5746;
					this.windowingClause();
					}
					break;
				}
				}
				break;
			case 8:
				this.enterOuterAlt(localctx, 8);
				{
				this.state = 5749;
				localctx._name = this.match(MySQLParser.STD_SYMBOL);
				this.state = 5750;
				this.match(MySQLParser.OPEN_PAR_SYMBOL);
				this.state = 5751;
				this.inSumExpr();
				this.state = 5752;
				this.match(MySQLParser.CLOSE_PAR_SYMBOL);
				this.state = 5755;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 731, this._ctx) ) {
				case 1:
					{
					this.state = 5753;
					if (!(this.serverVersion >= 80000)) {
						throw this.createFailedPredicateException("this.serverVersion >= 80000");
					}
					this.state = 5754;
					this.windowingClause();
					}
					break;
				}
				}
				break;
			case 9:
				this.enterOuterAlt(localctx, 9);
				{
				this.state = 5757;
				localctx._name = this.match(MySQLParser.VARIANCE_SYMBOL);
				this.state = 5758;
				this.match(MySQLParser.OPEN_PAR_SYMBOL);
				this.state = 5759;
				this.inSumExpr();
				this.state = 5760;
				this.match(MySQLParser.CLOSE_PAR_SYMBOL);
				this.state = 5763;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 732, this._ctx) ) {
				case 1:
					{
					this.state = 5761;
					if (!(this.serverVersion >= 80000)) {
						throw this.createFailedPredicateException("this.serverVersion >= 80000");
					}
					this.state = 5762;
					this.windowingClause();
					}
					break;
				}
				}
				break;
			case 10:
				this.enterOuterAlt(localctx, 10);
				{
				this.state = 5765;
				localctx._name = this.match(MySQLParser.STDDEV_SAMP_SYMBOL);
				this.state = 5766;
				this.match(MySQLParser.OPEN_PAR_SYMBOL);
				this.state = 5767;
				this.inSumExpr();
				this.state = 5768;
				this.match(MySQLParser.CLOSE_PAR_SYMBOL);
				this.state = 5771;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 733, this._ctx) ) {
				case 1:
					{
					this.state = 5769;
					if (!(this.serverVersion >= 80000)) {
						throw this.createFailedPredicateException("this.serverVersion >= 80000");
					}
					this.state = 5770;
					this.windowingClause();
					}
					break;
				}
				}
				break;
			case 11:
				this.enterOuterAlt(localctx, 11);
				{
				this.state = 5773;
				localctx._name = this.match(MySQLParser.VAR_SAMP_SYMBOL);
				this.state = 5774;
				this.match(MySQLParser.OPEN_PAR_SYMBOL);
				this.state = 5775;
				this.inSumExpr();
				this.state = 5776;
				this.match(MySQLParser.CLOSE_PAR_SYMBOL);
				this.state = 5779;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 734, this._ctx) ) {
				case 1:
					{
					this.state = 5777;
					if (!(this.serverVersion >= 80000)) {
						throw this.createFailedPredicateException("this.serverVersion >= 80000");
					}
					this.state = 5778;
					this.windowingClause();
					}
					break;
				}
				}
				break;
			case 12:
				this.enterOuterAlt(localctx, 12);
				{
				this.state = 5781;
				localctx._name = this.match(MySQLParser.SUM_SYMBOL);
				this.state = 5782;
				this.match(MySQLParser.OPEN_PAR_SYMBOL);
				this.state = 5784;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 735, this._ctx) ) {
				case 1:
					{
					this.state = 5783;
					this.match(MySQLParser.DISTINCT_SYMBOL);
					}
					break;
				}
				this.state = 5786;
				this.inSumExpr();
				this.state = 5787;
				this.match(MySQLParser.CLOSE_PAR_SYMBOL);
				this.state = 5790;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 736, this._ctx) ) {
				case 1:
					{
					this.state = 5788;
					if (!(this.serverVersion >= 80000)) {
						throw this.createFailedPredicateException("this.serverVersion >= 80000");
					}
					this.state = 5789;
					this.windowingClause();
					}
					break;
				}
				}
				break;
			case 13:
				this.enterOuterAlt(localctx, 13);
				{
				this.state = 5792;
				localctx._name = this.match(MySQLParser.GROUP_CONCAT_SYMBOL);
				this.state = 5793;
				this.match(MySQLParser.OPEN_PAR_SYMBOL);
				this.state = 5795;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 737, this._ctx) ) {
				case 1:
					{
					this.state = 5794;
					this.match(MySQLParser.DISTINCT_SYMBOL);
					}
					break;
				}
				this.state = 5797;
				this.exprList();
				this.state = 5799;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===586) {
					{
					this.state = 5798;
					this.orderClause();
					}
				}

				this.state = 5803;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===616) {
					{
					this.state = 5801;
					this.match(MySQLParser.SEPARATOR_SYMBOL);
					this.state = 5802;
					this.textString();
					}
				}

				this.state = 5805;
				this.match(MySQLParser.CLOSE_PAR_SYMBOL);
				this.state = 5808;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 740, this._ctx) ) {
				case 1:
					{
					this.state = 5806;
					if (!(this.serverVersion >= 80000)) {
						throw this.createFailedPredicateException("this.serverVersion >= 80000");
					}
					this.state = 5807;
					this.windowingClause();
					}
					break;
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public groupingOperation(): GroupingOperationContext {
		let localctx: GroupingOperationContext = new GroupingOperationContext(this, this._ctx, this.state);
		this.enterRule(localctx, 686, MySQLParser.RULE_groupingOperation);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5812;
			this.match(MySQLParser.GROUPING_SYMBOL);
			this.state = 5813;
			this.match(MySQLParser.OPEN_PAR_SYMBOL);
			this.state = 5814;
			this.exprList();
			this.state = 5815;
			this.match(MySQLParser.CLOSE_PAR_SYMBOL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public windowFunctionCall(): WindowFunctionCallContext {
		let localctx: WindowFunctionCallContext = new WindowFunctionCallContext(this, this._ctx, this.state);
		this.enterRule(localctx, 688, MySQLParser.RULE_windowFunctionCall);
		let _la: number;
		try {
			this.state = 5859;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 708:
			case 709:
			case 722:
			case 724:
			case 726:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 5817;
				_la = this._input.LA(1);
				if(!(((((_la - 708)) & ~0x1F) === 0 && ((1 << (_la - 708)) & 344067) !== 0))) {
				this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				this.state = 5818;
				this.parentheses();
				this.state = 5819;
				this.windowingClause();
				}
				break;
			case 718:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 5821;
				this.match(MySQLParser.NTILE_SYMBOL);
				this.state = 5822;
				this.simpleExprWithParentheses();
				this.state = 5823;
				this.windowingClause();
				}
				break;
			case 714:
			case 716:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 5825;
				_la = this._input.LA(1);
				if(!(_la===714 || _la===716)) {
				this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				this.state = 5826;
				this.match(MySQLParser.OPEN_PAR_SYMBOL);
				this.state = 5827;
				this.expr(0);
				this.state = 5829;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===406) {
					{
					this.state = 5828;
					this.leadLagInfo();
					}
				}

				this.state = 5831;
				this.match(MySQLParser.CLOSE_PAR_SYMBOL);
				this.state = 5833;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===520 || _la===725) {
					{
					this.state = 5832;
					this.nullTreatment();
					}
				}

				this.state = 5835;
				this.windowingClause();
				}
				break;
			case 711:
			case 715:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 5837;
				_la = this._input.LA(1);
				if(!(_la===711 || _la===715)) {
				this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				this.state = 5838;
				this.exprWithParentheses();
				this.state = 5840;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===520 || _la===725) {
					{
					this.state = 5839;
					this.nullTreatment();
					}
				}

				this.state = 5842;
				this.windowingClause();
				}
				break;
			case 717:
				this.enterOuterAlt(localctx, 5);
				{
				this.state = 5844;
				this.match(MySQLParser.NTH_VALUE_SYMBOL);
				this.state = 5845;
				this.match(MySQLParser.OPEN_PAR_SYMBOL);
				this.state = 5846;
				this.expr(0);
				this.state = 5847;
				this.match(MySQLParser.COMMA_SYMBOL);
				this.state = 5848;
				this.simpleExpr(0);
				this.state = 5849;
				this.match(MySQLParser.CLOSE_PAR_SYMBOL);
				this.state = 5852;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===507) {
					{
					this.state = 5850;
					this.match(MySQLParser.FROM_SYMBOL);
					this.state = 5851;
					_la = this._input.LA(1);
					if(!(_la===148 || _la===174)) {
					this._errHandler.recoverInline(this);
					}
					else {
						this._errHandler.reportMatch(this);
					    this.consume();
					}
					}
				}

				this.state = 5855;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===520 || _la===725) {
					{
					this.state = 5854;
					this.nullTreatment();
					}
				}

				this.state = 5857;
				this.windowingClause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public windowingClause(): WindowingClauseContext {
		let localctx: WindowingClauseContext = new WindowingClauseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 690, MySQLParser.RULE_windowingClause);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5861;
			this.match(MySQLParser.OVER_SYMBOL);
			this.state = 5864;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 748, this._ctx) ) {
			case 1:
				{
				this.state = 5862;
				this.windowName();
				}
				break;
			case 2:
				{
				this.state = 5863;
				this.windowSpec();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public leadLagInfo(): LeadLagInfoContext {
		let localctx: LeadLagInfoContext = new LeadLagInfoContext(this, this._ctx, this.state);
		this.enterRule(localctx, 692, MySQLParser.RULE_leadLagInfo);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5866;
			this.match(MySQLParser.COMMA_SYMBOL);
			this.state = 5869;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 380:
			case 381:
			case 382:
			case 423:
			case 424:
				{
				this.state = 5867;
				this.ulonglong_number();
				}
				break;
			case 420:
				{
				this.state = 5868;
				this.match(MySQLParser.PARAM_MARKER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 5873;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===406) {
				{
				this.state = 5871;
				this.match(MySQLParser.COMMA_SYMBOL);
				this.state = 5872;
				this.expr(0);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public nullTreatment(): NullTreatmentContext {
		let localctx: NullTreatmentContext = new NullTreatmentContext(this, this._ctx, this.state);
		this.enterRule(localctx, 694, MySQLParser.RULE_nullTreatment);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5875;
			_la = this._input.LA(1);
			if(!(_la===520 || _la===725)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			this.state = 5876;
			this.match(MySQLParser.NULLS_SYMBOL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public jsonFunction(): JsonFunctionContext {
		let localctx: JsonFunctionContext = new JsonFunctionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 696, MySQLParser.RULE_jsonFunction);
		try {
			this.state = 5894;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 697:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 5878;
				this.match(MySQLParser.JSON_ARRAYAGG_SYMBOL);
				this.state = 5879;
				this.match(MySQLParser.OPEN_PAR_SYMBOL);
				this.state = 5880;
				this.inSumExpr();
				this.state = 5881;
				this.match(MySQLParser.CLOSE_PAR_SYMBOL);
				this.state = 5883;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 751, this._ctx) ) {
				case 1:
					{
					this.state = 5882;
					this.windowingClause();
					}
					break;
				}
				}
				break;
			case 696:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 5885;
				this.match(MySQLParser.JSON_OBJECTAGG_SYMBOL);
				this.state = 5886;
				this.match(MySQLParser.OPEN_PAR_SYMBOL);
				this.state = 5887;
				this.inSumExpr();
				this.state = 5888;
				this.match(MySQLParser.COMMA_SYMBOL);
				this.state = 5889;
				this.inSumExpr();
				this.state = 5890;
				this.match(MySQLParser.CLOSE_PAR_SYMBOL);
				this.state = 5892;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 752, this._ctx) ) {
				case 1:
					{
					this.state = 5891;
					this.windowingClause();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public inSumExpr(): InSumExprContext {
		let localctx: InSumExprContext = new InSumExprContext(this, this._ctx, this.state);
		this.enterRule(localctx, 698, MySQLParser.RULE_inSumExpr);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5897;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 754, this._ctx) ) {
			case 1:
				{
				this.state = 5896;
				this.match(MySQLParser.ALL_SYMBOL);
				}
				break;
			}
			this.state = 5899;
			this.expr(0);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public identListArg(): IdentListArgContext {
		let localctx: IdentListArgContext = new IdentListArgContext(this, this._ctx, this.state);
		this.enterRule(localctx, 700, MySQLParser.RULE_identListArg);
		try {
			this.state = 5906;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 755, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 5901;
				this.identList();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 5902;
				this.match(MySQLParser.OPEN_PAR_SYMBOL);
				this.state = 5903;
				this.identList();
				this.state = 5904;
				this.match(MySQLParser.CLOSE_PAR_SYMBOL);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public identList(): IdentListContext {
		let localctx: IdentListContext = new IdentListContext(this, this._ctx, this.state);
		this.enterRule(localctx, 702, MySQLParser.RULE_identList);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5908;
			this.simpleIdentifier();
			this.state = 5913;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===406) {
				{
				{
				this.state = 5909;
				this.match(MySQLParser.COMMA_SYMBOL);
				this.state = 5910;
				this.simpleIdentifier();
				}
				}
				this.state = 5915;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public fulltextOptions(): FulltextOptionsContext {
		let localctx: FulltextOptionsContext = new FulltextOptionsContext(this, this._ctx, this.state);
		this.enterRule(localctx, 704, MySQLParser.RULE_fulltextOptions);
		let _la: number;
		try {
			this.state = 5931;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 758, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 5916;
				this.match(MySQLParser.IN_SYMBOL);
				this.state = 5917;
				this.match(MySQLParser.BOOLEAN_SYMBOL);
				this.state = 5918;
				this.match(MySQLParser.MODE_SYMBOL);
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 5919;
				this.match(MySQLParser.IN_SYMBOL);
				this.state = 5920;
				this.match(MySQLParser.NATURAL_SYMBOL);
				this.state = 5921;
				this.match(MySQLParser.LANGUAGE_SYMBOL);
				this.state = 5922;
				this.match(MySQLParser.MODE_SYMBOL);
				this.state = 5926;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===682) {
					{
					this.state = 5923;
					this.match(MySQLParser.WITH_SYMBOL);
					this.state = 5924;
					this.match(MySQLParser.QUERY_SYMBOL);
					this.state = 5925;
					this.match(MySQLParser.EXPANSION_SYMBOL);
					}
				}

				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 5928;
				this.match(MySQLParser.WITH_SYMBOL);
				this.state = 5929;
				this.match(MySQLParser.QUERY_SYMBOL);
				this.state = 5930;
				this.match(MySQLParser.EXPANSION_SYMBOL);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public runtimeFunctionCall(): RuntimeFunctionCallContext {
		let localctx: RuntimeFunctionCallContext = new RuntimeFunctionCallContext(this, this._ctx, this.state);
		this.enterRule(localctx, 706, MySQLParser.RULE_runtimeFunctionCall);
		let _la: number;
		try {
			this.state = 6206;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 776, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 5933;
				localctx._name = this.match(MySQLParser.CHAR_SYMBOL);
				this.state = 5934;
				this.match(MySQLParser.OPEN_PAR_SYMBOL);
				this.state = 5935;
				this.exprList();
				this.state = 5938;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===666) {
					{
					this.state = 5936;
					this.match(MySQLParser.USING_SYMBOL);
					this.state = 5937;
					this.charsetName();
					}
				}

				this.state = 5940;
				this.match(MySQLParser.CLOSE_PAR_SYMBOL);
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 5942;
				localctx._name = this.match(MySQLParser.CURRENT_USER_SYMBOL);
				this.state = 5944;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 760, this._ctx) ) {
				case 1:
					{
					this.state = 5943;
					this.parentheses();
					}
					break;
				}
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 5946;
				localctx._name = this.match(MySQLParser.DATE_SYMBOL);
				this.state = 5947;
				this.exprWithParentheses();
				}
				break;
			case 4:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 5948;
				localctx._name = this.match(MySQLParser.DAY_SYMBOL);
				this.state = 5949;
				this.exprWithParentheses();
				}
				break;
			case 5:
				this.enterOuterAlt(localctx, 5);
				{
				this.state = 5950;
				localctx._name = this.match(MySQLParser.HOUR_SYMBOL);
				this.state = 5951;
				this.exprWithParentheses();
				}
				break;
			case 6:
				this.enterOuterAlt(localctx, 6);
				{
				this.state = 5952;
				localctx._name = this.match(MySQLParser.INSERT_SYMBOL);
				this.state = 5953;
				this.match(MySQLParser.OPEN_PAR_SYMBOL);
				this.state = 5954;
				this.expr(0);
				this.state = 5955;
				this.match(MySQLParser.COMMA_SYMBOL);
				this.state = 5956;
				this.expr(0);
				this.state = 5957;
				this.match(MySQLParser.COMMA_SYMBOL);
				this.state = 5958;
				this.expr(0);
				this.state = 5959;
				this.match(MySQLParser.COMMA_SYMBOL);
				this.state = 5960;
				this.expr(0);
				this.state = 5961;
				this.match(MySQLParser.CLOSE_PAR_SYMBOL);
				}
				break;
			case 7:
				this.enterOuterAlt(localctx, 7);
				{
				this.state = 5963;
				localctx._name = this.match(MySQLParser.INTERVAL_SYMBOL);
				this.state = 5964;
				this.match(MySQLParser.OPEN_PAR_SYMBOL);
				this.state = 5965;
				this.expr(0);
				this.state = 5968;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 5966;
					this.match(MySQLParser.COMMA_SYMBOL);
					this.state = 5967;
					this.expr(0);
					}
					}
					this.state = 5970;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (_la===406);
				this.state = 5972;
				this.match(MySQLParser.CLOSE_PAR_SYMBOL);
				}
				break;
			case 8:
				this.enterOuterAlt(localctx, 8);
				{
				this.state = 5974;
				localctx._name = this.match(MySQLParser.LEFT_SYMBOL);
				this.state = 5975;
				this.match(MySQLParser.OPEN_PAR_SYMBOL);
				this.state = 5976;
				this.expr(0);
				this.state = 5977;
				this.match(MySQLParser.COMMA_SYMBOL);
				this.state = 5978;
				this.expr(0);
				this.state = 5979;
				this.match(MySQLParser.CLOSE_PAR_SYMBOL);
				}
				break;
			case 9:
				this.enterOuterAlt(localctx, 9);
				{
				this.state = 5981;
				localctx._name = this.match(MySQLParser.MINUTE_SYMBOL);
				this.state = 5982;
				this.exprWithParentheses();
				}
				break;
			case 10:
				this.enterOuterAlt(localctx, 10);
				{
				this.state = 5983;
				localctx._name = this.match(MySQLParser.MONTH_SYMBOL);
				this.state = 5984;
				this.exprWithParentheses();
				}
				break;
			case 11:
				this.enterOuterAlt(localctx, 11);
				{
				this.state = 5985;
				localctx._name = this.match(MySQLParser.RIGHT_SYMBOL);
				this.state = 5986;
				this.match(MySQLParser.OPEN_PAR_SYMBOL);
				this.state = 5987;
				this.expr(0);
				this.state = 5988;
				this.match(MySQLParser.COMMA_SYMBOL);
				this.state = 5989;
				this.expr(0);
				this.state = 5990;
				this.match(MySQLParser.CLOSE_PAR_SYMBOL);
				}
				break;
			case 12:
				this.enterOuterAlt(localctx, 12);
				{
				this.state = 5992;
				localctx._name = this.match(MySQLParser.SECOND_SYMBOL);
				this.state = 5993;
				this.exprWithParentheses();
				}
				break;
			case 13:
				this.enterOuterAlt(localctx, 13);
				{
				this.state = 5994;
				localctx._name = this.match(MySQLParser.TIME_SYMBOL);
				this.state = 5995;
				this.exprWithParentheses();
				}
				break;
			case 14:
				this.enterOuterAlt(localctx, 14);
				{
				this.state = 5996;
				localctx._name = this.match(MySQLParser.TIMESTAMP_SYMBOL);
				this.state = 5997;
				this.match(MySQLParser.OPEN_PAR_SYMBOL);
				this.state = 5998;
				this.expr(0);
				this.state = 6001;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===406) {
					{
					this.state = 5999;
					this.match(MySQLParser.COMMA_SYMBOL);
					this.state = 6000;
					this.expr(0);
					}
				}

				this.state = 6003;
				this.match(MySQLParser.CLOSE_PAR_SYMBOL);
				}
				break;
			case 15:
				this.enterOuterAlt(localctx, 15);
				{
				this.state = 6005;
				this.trimFunction();
				}
				break;
			case 16:
				this.enterOuterAlt(localctx, 16);
				{
				this.state = 6006;
				localctx._name = this.match(MySQLParser.USER_SYMBOL);
				this.state = 6007;
				this.parentheses();
				}
				break;
			case 17:
				this.enterOuterAlt(localctx, 17);
				{
				this.state = 6008;
				localctx._name = this.match(MySQLParser.VALUES_SYMBOL);
				this.state = 6009;
				this.exprWithParentheses();
				}
				break;
			case 18:
				this.enterOuterAlt(localctx, 18);
				{
				this.state = 6010;
				localctx._name = this.match(MySQLParser.YEAR_SYMBOL);
				this.state = 6011;
				this.exprWithParentheses();
				}
				break;
			case 19:
				this.enterOuterAlt(localctx, 19);
				{
				this.state = 6012;
				localctx._name = this._input.LT(1);
				_la = this._input.LA(1);
				if(!(_la===58 || _la===331)) {
				    localctx._name = this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				this.state = 6013;
				this.match(MySQLParser.OPEN_PAR_SYMBOL);
				this.state = 6014;
				this.expr(0);
				this.state = 6015;
				this.match(MySQLParser.COMMA_SYMBOL);
				this.state = 6021;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 763, this._ctx) ) {
				case 1:
					{
					this.state = 6016;
					this.expr(0);
					}
					break;
				case 2:
					{
					this.state = 6017;
					this.match(MySQLParser.INTERVAL_SYMBOL);
					this.state = 6018;
					this.expr(0);
					this.state = 6019;
					this.interval();
					}
					break;
				}
				this.state = 6023;
				this.match(MySQLParser.CLOSE_PAR_SYMBOL);
				}
				break;
			case 20:
				this.enterOuterAlt(localctx, 20);
				{
				this.state = 6025;
				localctx._name = this.match(MySQLParser.CURDATE_SYMBOL);
				this.state = 6027;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 764, this._ctx) ) {
				case 1:
					{
					this.state = 6026;
					this.parentheses();
					}
					break;
				}
				}
				break;
			case 21:
				this.enterOuterAlt(localctx, 21);
				{
				this.state = 6029;
				localctx._name = this.match(MySQLParser.CURTIME_SYMBOL);
				this.state = 6031;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 765, this._ctx) ) {
				case 1:
					{
					this.state = 6030;
					this.timeFunctionParameters();
					}
					break;
				}
				}
				break;
			case 22:
				this.enterOuterAlt(localctx, 22);
				{
				this.state = 6033;
				localctx._name = this._input.LT(1);
				_la = this._input.LA(1);
				if(!(_la===469 || _la===470)) {
				    localctx._name = this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				this.state = 6034;
				this.match(MySQLParser.OPEN_PAR_SYMBOL);
				this.state = 6035;
				this.expr(0);
				this.state = 6036;
				this.match(MySQLParser.COMMA_SYMBOL);
				this.state = 6037;
				this.match(MySQLParser.INTERVAL_SYMBOL);
				this.state = 6038;
				this.expr(0);
				this.state = 6039;
				this.interval();
				this.state = 6040;
				this.match(MySQLParser.CLOSE_PAR_SYMBOL);
				}
				break;
			case 23:
				this.enterOuterAlt(localctx, 23);
				{
				this.state = 6042;
				localctx._name = this.match(MySQLParser.EXTRACT_SYMBOL);
				this.state = 6043;
				this.match(MySQLParser.OPEN_PAR_SYMBOL);
				this.state = 6044;
				this.interval();
				this.state = 6045;
				this.match(MySQLParser.FROM_SYMBOL);
				this.state = 6046;
				this.expr(0);
				this.state = 6047;
				this.match(MySQLParser.CLOSE_PAR_SYMBOL);
				}
				break;
			case 24:
				this.enterOuterAlt(localctx, 24);
				{
				this.state = 6049;
				localctx._name = this.match(MySQLParser.GET_FORMAT_SYMBOL);
				this.state = 6050;
				this.match(MySQLParser.OPEN_PAR_SYMBOL);
				this.state = 6051;
				this.dateTimeTtype();
				this.state = 6052;
				this.match(MySQLParser.COMMA_SYMBOL);
				this.state = 6053;
				this.expr(0);
				this.state = 6054;
				this.match(MySQLParser.CLOSE_PAR_SYMBOL);
				}
				break;
			case 25:
				this.enterOuterAlt(localctx, 25);
				{
				this.state = 6056;
				localctx._name = this.match(MySQLParser.NOW_SYMBOL);
				this.state = 6058;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 766, this._ctx) ) {
				case 1:
					{
					this.state = 6057;
					this.timeFunctionParameters();
					}
					break;
				}
				}
				break;
			case 26:
				this.enterOuterAlt(localctx, 26);
				{
				this.state = 6060;
				localctx._name = this.match(MySQLParser.POSITION_SYMBOL);
				this.state = 6061;
				this.match(MySQLParser.OPEN_PAR_SYMBOL);
				this.state = 6062;
				this.bitExpr(0);
				this.state = 6063;
				this.match(MySQLParser.IN_SYMBOL);
				this.state = 6064;
				this.expr(0);
				this.state = 6065;
				this.match(MySQLParser.CLOSE_PAR_SYMBOL);
				}
				break;
			case 27:
				this.enterOuterAlt(localctx, 27);
				{
				this.state = 6067;
				this.substringFunction();
				}
				break;
			case 28:
				this.enterOuterAlt(localctx, 28);
				{
				this.state = 6068;
				localctx._name = this.match(MySQLParser.SYSDATE_SYMBOL);
				this.state = 6070;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 767, this._ctx) ) {
				case 1:
					{
					this.state = 6069;
					this.timeFunctionParameters();
					}
					break;
				}
				}
				break;
			case 29:
				this.enterOuterAlt(localctx, 29);
				{
				this.state = 6072;
				localctx._name = this._input.LT(1);
				_la = this._input.LA(1);
				if(!(_la===350 || _la===351)) {
				    localctx._name = this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				this.state = 6073;
				this.match(MySQLParser.OPEN_PAR_SYMBOL);
				this.state = 6074;
				this.intervalTimeStamp();
				this.state = 6075;
				this.match(MySQLParser.COMMA_SYMBOL);
				this.state = 6076;
				this.expr(0);
				this.state = 6077;
				this.match(MySQLParser.COMMA_SYMBOL);
				this.state = 6078;
				this.expr(0);
				this.state = 6079;
				this.match(MySQLParser.CLOSE_PAR_SYMBOL);
				}
				break;
			case 30:
				this.enterOuterAlt(localctx, 30);
				{
				this.state = 6081;
				localctx._name = this.match(MySQLParser.UTC_DATE_SYMBOL);
				this.state = 6083;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 768, this._ctx) ) {
				case 1:
					{
					this.state = 6082;
					this.parentheses();
					}
					break;
				}
				}
				break;
			case 31:
				this.enterOuterAlt(localctx, 31);
				{
				this.state = 6085;
				localctx._name = this.match(MySQLParser.UTC_TIME_SYMBOL);
				this.state = 6087;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 769, this._ctx) ) {
				case 1:
					{
					this.state = 6086;
					this.timeFunctionParameters();
					}
					break;
				}
				}
				break;
			case 32:
				this.enterOuterAlt(localctx, 32);
				{
				this.state = 6089;
				localctx._name = this.match(MySQLParser.UTC_TIMESTAMP_SYMBOL);
				this.state = 6091;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 770, this._ctx) ) {
				case 1:
					{
					this.state = 6090;
					this.timeFunctionParameters();
					}
					break;
				}
				}
				break;
			case 33:
				this.enterOuterAlt(localctx, 33);
				{
				this.state = 6093;
				localctx._name = this.match(MySQLParser.ASCII_SYMBOL);
				this.state = 6094;
				this.exprWithParentheses();
				}
				break;
			case 34:
				this.enterOuterAlt(localctx, 34);
				{
				this.state = 6095;
				localctx._name = this.match(MySQLParser.CHARSET_SYMBOL);
				this.state = 6096;
				this.exprWithParentheses();
				}
				break;
			case 35:
				this.enterOuterAlt(localctx, 35);
				{
				this.state = 6097;
				localctx._name = this.match(MySQLParser.COALESCE_SYMBOL);
				this.state = 6098;
				this.exprListWithParentheses();
				}
				break;
			case 36:
				this.enterOuterAlt(localctx, 36);
				{
				this.state = 6099;
				localctx._name = this.match(MySQLParser.COLLATION_SYMBOL);
				this.state = 6100;
				this.exprWithParentheses();
				}
				break;
			case 37:
				this.enterOuterAlt(localctx, 37);
				{
				this.state = 6101;
				localctx._name = this.match(MySQLParser.DATABASE_SYMBOL);
				this.state = 6102;
				this.parentheses();
				}
				break;
			case 38:
				this.enterOuterAlt(localctx, 38);
				{
				this.state = 6103;
				localctx._name = this.match(MySQLParser.IF_SYMBOL);
				this.state = 6104;
				this.match(MySQLParser.OPEN_PAR_SYMBOL);
				this.state = 6105;
				this.expr(0);
				this.state = 6106;
				this.match(MySQLParser.COMMA_SYMBOL);
				this.state = 6107;
				this.expr(0);
				this.state = 6108;
				this.match(MySQLParser.COMMA_SYMBOL);
				this.state = 6109;
				this.expr(0);
				this.state = 6110;
				this.match(MySQLParser.CLOSE_PAR_SYMBOL);
				}
				break;
			case 39:
				this.enterOuterAlt(localctx, 39);
				{
				this.state = 6112;
				localctx._name = this.match(MySQLParser.FORMAT_SYMBOL);
				this.state = 6113;
				this.match(MySQLParser.OPEN_PAR_SYMBOL);
				this.state = 6114;
				this.expr(0);
				this.state = 6115;
				this.match(MySQLParser.COMMA_SYMBOL);
				this.state = 6116;
				this.expr(0);
				this.state = 6119;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===406) {
					{
					this.state = 6117;
					this.match(MySQLParser.COMMA_SYMBOL);
					this.state = 6118;
					this.expr(0);
					}
				}

				this.state = 6121;
				this.match(MySQLParser.CLOSE_PAR_SYMBOL);
				}
				break;
			case 40:
				this.enterOuterAlt(localctx, 40);
				{
				this.state = 6123;
				localctx._name = this.match(MySQLParser.MICROSECOND_SYMBOL);
				this.state = 6124;
				this.exprWithParentheses();
				}
				break;
			case 41:
				this.enterOuterAlt(localctx, 41);
				{
				this.state = 6125;
				localctx._name = this.match(MySQLParser.MOD_SYMBOL);
				this.state = 6126;
				this.match(MySQLParser.OPEN_PAR_SYMBOL);
				this.state = 6127;
				this.expr(0);
				this.state = 6128;
				this.match(MySQLParser.COMMA_SYMBOL);
				this.state = 6129;
				this.expr(0);
				this.state = 6130;
				this.match(MySQLParser.CLOSE_PAR_SYMBOL);
				}
				break;
			case 42:
				this.enterOuterAlt(localctx, 42);
				{
				this.state = 6132;
				if (!(this.serverVersion < 50607)) {
					throw this.createFailedPredicateException("this.serverVersion < 50607");
				}
				this.state = 6133;
				localctx._name = this.match(MySQLParser.OLD_PASSWORD_SYMBOL);
				this.state = 6134;
				this.match(MySQLParser.OPEN_PAR_SYMBOL);
				this.state = 6135;
				this.textLiteral();
				this.state = 6136;
				this.match(MySQLParser.CLOSE_PAR_SYMBOL);
				}
				break;
			case 43:
				this.enterOuterAlt(localctx, 43);
				{
				this.state = 6138;
				if (!(this.serverVersion < 80011)) {
					throw this.createFailedPredicateException("this.serverVersion < 80011");
				}
				this.state = 6139;
				localctx._name = this.match(MySQLParser.PASSWORD_SYMBOL);
				this.state = 6140;
				this.exprWithParentheses();
				}
				break;
			case 44:
				this.enterOuterAlt(localctx, 44);
				{
				this.state = 6141;
				localctx._name = this.match(MySQLParser.QUARTER_SYMBOL);
				this.state = 6142;
				this.exprWithParentheses();
				}
				break;
			case 45:
				this.enterOuterAlt(localctx, 45);
				{
				this.state = 6143;
				localctx._name = this.match(MySQLParser.REPEAT_SYMBOL);
				this.state = 6144;
				this.match(MySQLParser.OPEN_PAR_SYMBOL);
				this.state = 6145;
				this.expr(0);
				this.state = 6146;
				this.match(MySQLParser.COMMA_SYMBOL);
				this.state = 6147;
				this.expr(0);
				this.state = 6148;
				this.match(MySQLParser.CLOSE_PAR_SYMBOL);
				}
				break;
			case 46:
				this.enterOuterAlt(localctx, 46);
				{
				this.state = 6150;
				localctx._name = this.match(MySQLParser.REPLACE_SYMBOL);
				this.state = 6151;
				this.match(MySQLParser.OPEN_PAR_SYMBOL);
				this.state = 6152;
				this.expr(0);
				this.state = 6153;
				this.match(MySQLParser.COMMA_SYMBOL);
				this.state = 6154;
				this.expr(0);
				this.state = 6155;
				this.match(MySQLParser.COMMA_SYMBOL);
				this.state = 6156;
				this.expr(0);
				this.state = 6157;
				this.match(MySQLParser.CLOSE_PAR_SYMBOL);
				}
				break;
			case 47:
				this.enterOuterAlt(localctx, 47);
				{
				this.state = 6159;
				localctx._name = this.match(MySQLParser.REVERSE_SYMBOL);
				this.state = 6160;
				this.exprWithParentheses();
				}
				break;
			case 48:
				this.enterOuterAlt(localctx, 48);
				{
				this.state = 6161;
				localctx._name = this.match(MySQLParser.ROW_COUNT_SYMBOL);
				this.state = 6162;
				this.parentheses();
				}
				break;
			case 49:
				this.enterOuterAlt(localctx, 49);
				{
				this.state = 6163;
				localctx._name = this.match(MySQLParser.TRUNCATE_SYMBOL);
				this.state = 6164;
				this.match(MySQLParser.OPEN_PAR_SYMBOL);
				this.state = 6165;
				this.expr(0);
				this.state = 6166;
				this.match(MySQLParser.COMMA_SYMBOL);
				this.state = 6167;
				this.expr(0);
				this.state = 6168;
				this.match(MySQLParser.CLOSE_PAR_SYMBOL);
				}
				break;
			case 50:
				this.enterOuterAlt(localctx, 50);
				{
				this.state = 6170;
				localctx._name = this.match(MySQLParser.WEEK_SYMBOL);
				this.state = 6171;
				this.match(MySQLParser.OPEN_PAR_SYMBOL);
				this.state = 6172;
				this.expr(0);
				this.state = 6175;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===406) {
					{
					this.state = 6173;
					this.match(MySQLParser.COMMA_SYMBOL);
					this.state = 6174;
					this.expr(0);
					}
				}

				this.state = 6177;
				this.match(MySQLParser.CLOSE_PAR_SYMBOL);
				}
				break;
			case 51:
				this.enterOuterAlt(localctx, 51);
				{
				this.state = 6179;
				localctx._name = this.match(MySQLParser.WEIGHT_STRING_SYMBOL);
				this.state = 6180;
				this.match(MySQLParser.OPEN_PAR_SYMBOL);
				this.state = 6181;
				this.expr(0);
				this.state = 6201;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 775, this._ctx) ) {
				case 1:
					{
					this.state = 6185;
					this._errHandler.sync(this);
					switch ( this._interp.adaptivePredict(this._input, 773, this._ctx) ) {
					case 1:
						{
						this.state = 6182;
						this.match(MySQLParser.AS_SYMBOL);
						this.state = 6183;
						this.match(MySQLParser.CHAR_SYMBOL);
						this.state = 6184;
						this.wsNumCodepoints();
						}
						break;
					}
					this.state = 6189;
					this._errHandler.sync(this);
					switch ( this._interp.adaptivePredict(this._input, 774, this._ctx) ) {
					case 1:
						{
						this.state = 6187;
						if (!(this.serverVersion < 80000)) {
							throw this.createFailedPredicateException("this.serverVersion < 80000");
						}
						this.state = 6188;
						this.weightStringLevels();
						}
						break;
					}
					}
					break;
				case 2:
					{
					this.state = 6191;
					this.match(MySQLParser.AS_SYMBOL);
					this.state = 6192;
					this.match(MySQLParser.BINARY_SYMBOL);
					this.state = 6193;
					this.wsNumCodepoints();
					}
					break;
				case 3:
					{
					this.state = 6194;
					this.match(MySQLParser.COMMA_SYMBOL);
					this.state = 6195;
					this.ulong_number();
					this.state = 6196;
					this.match(MySQLParser.COMMA_SYMBOL);
					this.state = 6197;
					this.ulong_number();
					this.state = 6198;
					this.match(MySQLParser.COMMA_SYMBOL);
					this.state = 6199;
					this.ulong_number();
					}
					break;
				}
				this.state = 6203;
				this.match(MySQLParser.CLOSE_PAR_SYMBOL);
				}
				break;
			case 52:
				this.enterOuterAlt(localctx, 52);
				{
				this.state = 6205;
				this.geometryFunction();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public geometryFunction(): GeometryFunctionContext {
		let localctx: GeometryFunctionContext = new GeometryFunctionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 708, MySQLParser.RULE_geometryFunction);
		try {
			this.state = 6239;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 778, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 6208;
				if (!(this.serverVersion < 50706)) {
					throw this.createFailedPredicateException("this.serverVersion < 50706");
				}
				this.state = 6209;
				localctx._name = this.match(MySQLParser.CONTAINS_SYMBOL);
				this.state = 6210;
				this.match(MySQLParser.OPEN_PAR_SYMBOL);
				this.state = 6211;
				this.expr(0);
				this.state = 6212;
				this.match(MySQLParser.COMMA_SYMBOL);
				this.state = 6213;
				this.expr(0);
				this.state = 6214;
				this.match(MySQLParser.CLOSE_PAR_SYMBOL);
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 6216;
				localctx._name = this.match(MySQLParser.GEOMETRYCOLLECTION_SYMBOL);
				this.state = 6217;
				this.match(MySQLParser.OPEN_PAR_SYMBOL);
				this.state = 6219;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 777, this._ctx) ) {
				case 1:
					{
					this.state = 6218;
					this.exprList();
					}
					break;
				}
				this.state = 6221;
				this.match(MySQLParser.CLOSE_PAR_SYMBOL);
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 6222;
				localctx._name = this.match(MySQLParser.LINESTRING_SYMBOL);
				this.state = 6223;
				this.exprListWithParentheses();
				}
				break;
			case 4:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 6224;
				localctx._name = this.match(MySQLParser.MULTILINESTRING_SYMBOL);
				this.state = 6225;
				this.exprListWithParentheses();
				}
				break;
			case 5:
				this.enterOuterAlt(localctx, 5);
				{
				this.state = 6226;
				localctx._name = this.match(MySQLParser.MULTIPOINT_SYMBOL);
				this.state = 6227;
				this.exprListWithParentheses();
				}
				break;
			case 6:
				this.enterOuterAlt(localctx, 6);
				{
				this.state = 6228;
				localctx._name = this.match(MySQLParser.MULTIPOLYGON_SYMBOL);
				this.state = 6229;
				this.exprListWithParentheses();
				}
				break;
			case 7:
				this.enterOuterAlt(localctx, 7);
				{
				this.state = 6230;
				localctx._name = this.match(MySQLParser.POINT_SYMBOL);
				this.state = 6231;
				this.match(MySQLParser.OPEN_PAR_SYMBOL);
				this.state = 6232;
				this.expr(0);
				this.state = 6233;
				this.match(MySQLParser.COMMA_SYMBOL);
				this.state = 6234;
				this.expr(0);
				this.state = 6235;
				this.match(MySQLParser.CLOSE_PAR_SYMBOL);
				}
				break;
			case 8:
				this.enterOuterAlt(localctx, 8);
				{
				this.state = 6237;
				localctx._name = this.match(MySQLParser.POLYGON_SYMBOL);
				this.state = 6238;
				this.exprListWithParentheses();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public timeFunctionParameters(): TimeFunctionParametersContext {
		let localctx: TimeFunctionParametersContext = new TimeFunctionParametersContext(this, this._ctx, this.state);
		this.enterRule(localctx, 710, MySQLParser.RULE_timeFunctionParameters);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6241;
			this.match(MySQLParser.OPEN_PAR_SYMBOL);
			this.state = 6243;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 779, this._ctx) ) {
			case 1:
				{
				this.state = 6242;
				this.fractionalPrecision();
				}
				break;
			}
			this.state = 6245;
			this.match(MySQLParser.CLOSE_PAR_SYMBOL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public fractionalPrecision(): FractionalPrecisionContext {
		let localctx: FractionalPrecisionContext = new FractionalPrecisionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 712, MySQLParser.RULE_fractionalPrecision);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6247;
			if (!(this.serverVersion >= 50604)) {
				throw this.createFailedPredicateException("this.serverVersion >= 50604");
			}
			this.state = 6248;
			this.match(MySQLParser.INT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public weightStringLevels(): WeightStringLevelsContext {
		let localctx: WeightStringLevelsContext = new WeightStringLevelsContext(this, this._ctx, this.state);
		this.enterRule(localctx, 714, MySQLParser.RULE_weightStringLevels);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6250;
			this.match(MySQLParser.LEVEL_SYMBOL);
			this.state = 6263;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 781, this._ctx) ) {
			case 1:
				{
				this.state = 6251;
				this.real_ulong_number();
				this.state = 6252;
				this.match(MySQLParser.MINUS_OPERATOR);
				this.state = 6253;
				this.real_ulong_number();
				}
				break;
			case 2:
				{
				this.state = 6255;
				this.weightStringLevelListItem();
				this.state = 6260;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la===406) {
					{
					{
					this.state = 6256;
					this.match(MySQLParser.COMMA_SYMBOL);
					this.state = 6257;
					this.weightStringLevelListItem();
					}
					}
					this.state = 6262;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public weightStringLevelListItem(): WeightStringLevelListItemContext {
		let localctx: WeightStringLevelListItemContext = new WeightStringLevelListItemContext(this, this._ctx, this.state);
		this.enterRule(localctx, 716, MySQLParser.RULE_weightStringLevelListItem);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6265;
			this.real_ulong_number();
			this.state = 6271;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 432:
			case 481:
				{
				this.state = 6266;
				_la = this._input.LA(1);
				if(!(_la===432 || _la===481)) {
				this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				this.state = 6268;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===294) {
					{
					this.state = 6267;
					this.match(MySQLParser.REVERSE_SYMBOL);
					}
				}

				}
				break;
			case 294:
				{
				this.state = 6270;
				this.match(MySQLParser.REVERSE_SYMBOL);
				}
				break;
			case 406:
			case 410:
				break;
			default:
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public dateTimeTtype(): DateTimeTtypeContext {
		let localctx: DateTimeTtypeContext = new DateTimeTtypeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 718, MySQLParser.RULE_dateTimeTtype);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6273;
			_la = this._input.LA(1);
			if(!(_la===111 || _la===112 || _la===349 || _la===352)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public trimFunction(): TrimFunctionContext {
		let localctx: TrimFunctionContext = new TrimFunctionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 720, MySQLParser.RULE_trimFunction);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6275;
			this.match(MySQLParser.TRIM_SYMBOL);
			this.state = 6276;
			this.match(MySQLParser.OPEN_PAR_SYMBOL);
			this.state = 6300;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 788, this._ctx) ) {
			case 1:
				{
				this.state = 6277;
				this.expr(0);
				this.state = 6280;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===507) {
					{
					this.state = 6278;
					this.match(MySQLParser.FROM_SYMBOL);
					this.state = 6279;
					this.expr(0);
					}
				}

				}
				break;
			case 2:
				{
				this.state = 6282;
				this.match(MySQLParser.LEADING_SYMBOL);
				this.state = 6284;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 785, this._ctx) ) {
				case 1:
					{
					this.state = 6283;
					this.expr(0);
					}
					break;
				}
				this.state = 6286;
				this.match(MySQLParser.FROM_SYMBOL);
				this.state = 6287;
				this.expr(0);
				}
				break;
			case 3:
				{
				this.state = 6288;
				this.match(MySQLParser.TRAILING_SYMBOL);
				this.state = 6290;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 786, this._ctx) ) {
				case 1:
					{
					this.state = 6289;
					this.expr(0);
					}
					break;
				}
				this.state = 6292;
				this.match(MySQLParser.FROM_SYMBOL);
				this.state = 6293;
				this.expr(0);
				}
				break;
			case 4:
				{
				this.state = 6294;
				this.match(MySQLParser.BOTH_SYMBOL);
				this.state = 6296;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 787, this._ctx) ) {
				case 1:
					{
					this.state = 6295;
					this.expr(0);
					}
					break;
				}
				this.state = 6298;
				this.match(MySQLParser.FROM_SYMBOL);
				this.state = 6299;
				this.expr(0);
				}
				break;
			}
			this.state = 6302;
			this.match(MySQLParser.CLOSE_PAR_SYMBOL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public substringFunction(): SubstringFunctionContext {
		let localctx: SubstringFunctionContext = new SubstringFunctionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 722, MySQLParser.RULE_substringFunction);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6304;
			this.match(MySQLParser.SUBSTRING_SYMBOL);
			this.state = 6305;
			this.match(MySQLParser.OPEN_PAR_SYMBOL);
			this.state = 6306;
			this.expr(0);
			this.state = 6319;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 406:
				{
				this.state = 6307;
				this.match(MySQLParser.COMMA_SYMBOL);
				this.state = 6308;
				this.expr(0);
				this.state = 6311;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===406) {
					{
					this.state = 6309;
					this.match(MySQLParser.COMMA_SYMBOL);
					this.state = 6310;
					this.expr(0);
					}
				}

				}
				break;
			case 507:
				{
				this.state = 6313;
				this.match(MySQLParser.FROM_SYMBOL);
				this.state = 6314;
				this.expr(0);
				this.state = 6317;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===506) {
					{
					this.state = 6315;
					this.match(MySQLParser.FOR_SYMBOL);
					this.state = 6316;
					this.expr(0);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 6321;
			this.match(MySQLParser.CLOSE_PAR_SYMBOL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public functionCall(): FunctionCallContext {
		let localctx: FunctionCallContext = new FunctionCallContext(this, this._ctx, this.state);
		this.enterRule(localctx, 724, MySQLParser.RULE_functionCall);
		try {
			this.state = 6337;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 794, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 6323;
				this.pureIdentifier();
				this.state = 6324;
				this.match(MySQLParser.OPEN_PAR_SYMBOL);
				this.state = 6326;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 792, this._ctx) ) {
				case 1:
					{
					this.state = 6325;
					this.udfExprList();
					}
					break;
				}
				this.state = 6328;
				this.match(MySQLParser.CLOSE_PAR_SYMBOL);
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 6330;
				this.qualifiedIdentifier();
				this.state = 6331;
				this.match(MySQLParser.OPEN_PAR_SYMBOL);
				this.state = 6333;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 793, this._ctx) ) {
				case 1:
					{
					this.state = 6332;
					this.exprList();
					}
					break;
				}
				this.state = 6335;
				this.match(MySQLParser.CLOSE_PAR_SYMBOL);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public udfExprList(): UdfExprListContext {
		let localctx: UdfExprListContext = new UdfExprListContext(this, this._ctx, this.state);
		this.enterRule(localctx, 726, MySQLParser.RULE_udfExprList);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6339;
			this.udfExpr();
			this.state = 6344;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===406) {
				{
				{
				this.state = 6340;
				this.match(MySQLParser.COMMA_SYMBOL);
				this.state = 6341;
				this.udfExpr();
				}
				}
				this.state = 6346;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public udfExpr(): UdfExprContext {
		let localctx: UdfExprContext = new UdfExprContext(this, this._ctx, this.state);
		this.enterRule(localctx, 728, MySQLParser.RULE_udfExpr);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6347;
			this.expr(0);
			this.state = 6349;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 796, this._ctx) ) {
			case 1:
				{
				this.state = 6348;
				this.selectAlias();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public variable(): VariableContext {
		let localctx: VariableContext = new VariableContext(this, this._ctx, this.state);
		this.enterRule(localctx, 730, MySQLParser.RULE_variable);
		try {
			this.state = 6357;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 416:
			case 417:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 6351;
				this.userVariable();
				this.state = 6354;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 797, this._ctx) ) {
				case 1:
					{
					this.state = 6352;
					this.match(MySQLParser.ASSIGN_OPERATOR);
					this.state = 6353;
					this.expr(0);
					}
					break;
				}
				}
				break;
			case 418:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 6356;
				this.systemVariable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public userVariable(): UserVariableContext {
		let localctx: UserVariableContext = new UserVariableContext(this, this._ctx, this.state);
		this.enterRule(localctx, 732, MySQLParser.RULE_userVariable);
		try {
			this.state = 6362;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 416:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 6359;
				this.match(MySQLParser.AT_SIGN_SYMBOL);
				this.state = 6360;
				this.textOrIdentifier();
				}
				break;
			case 417:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 6361;
				this.match(MySQLParser.AT_TEXT_SUFFIX);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public systemVariable(): SystemVariableContext {
		let localctx: SystemVariableContext = new SystemVariableContext(this, this._ctx, this.state);
		this.enterRule(localctx, 734, MySQLParser.RULE_systemVariable);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6364;
			this.match(MySQLParser.AT_AT_SIGN_SYMBOL);
			this.state = 6366;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 800, this._ctx) ) {
			case 1:
				{
				this.state = 6365;
				this.varIdentType();
				}
				break;
			}
			this.state = 6368;
			this.textOrIdentifier();
			this.state = 6370;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 801, this._ctx) ) {
			case 1:
				{
				this.state = 6369;
				this.dotIdentifier();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public internalVariableName(): InternalVariableNameContext {
		let localctx: InternalVariableNameContext = new InternalVariableNameContext(this, this._ctx, this.state);
		this.enterRule(localctx, 736, MySQLParser.RULE_internalVariableName);
		let _la: number;
		try {
			this.state = 6386;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 805, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 6382;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 804, this._ctx) ) {
				case 1:
					{
					this.state = 6372;
					if (!(this.serverVersion < 80017)) {
						throw this.createFailedPredicateException("this.serverVersion < 80017");
					}
					this.state = 6373;
					this.identifier();
					this.state = 6375;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la===405) {
						{
						this.state = 6374;
						this.dotIdentifier();
						}
					}

					}
					break;
				case 2:
					{
					this.state = 6377;
					if (!(this.serverVersion >= 80017)) {
						throw this.createFailedPredicateException("this.serverVersion >= 80017");
					}
					this.state = 6378;
					this.lValueIdentifier();
					this.state = 6380;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la===405) {
						{
						this.state = 6379;
						this.dotIdentifier();
						}
					}

					}
					break;
				}
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 6384;
				this.match(MySQLParser.DEFAULT_SYMBOL);
				this.state = 6385;
				this.dotIdentifier();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public whenExpression(): WhenExpressionContext {
		let localctx: WhenExpressionContext = new WhenExpressionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 738, MySQLParser.RULE_whenExpression);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6388;
			this.match(MySQLParser.WHEN_SYMBOL);
			this.state = 6389;
			this.expr(0);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public thenExpression(): ThenExpressionContext {
		let localctx: ThenExpressionContext = new ThenExpressionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 740, MySQLParser.RULE_thenExpression);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6391;
			this.match(MySQLParser.THEN_SYMBOL);
			this.state = 6392;
			this.expr(0);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public elseExpression(): ElseExpressionContext {
		let localctx: ElseExpressionContext = new ElseExpressionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 742, MySQLParser.RULE_elseExpression);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6394;
			this.match(MySQLParser.ELSE_SYMBOL);
			this.state = 6395;
			this.expr(0);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public castType(): CastTypeContext {
		let localctx: CastTypeContext = new CastTypeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 744, MySQLParser.RULE_castType);
		try {
			this.state = 6442;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 816, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 6397;
				this.match(MySQLParser.BINARY_SYMBOL);
				this.state = 6399;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 806, this._ctx) ) {
				case 1:
					{
					this.state = 6398;
					this.fieldLength();
					}
					break;
				}
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 6401;
				this.match(MySQLParser.CHAR_SYMBOL);
				this.state = 6403;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 807, this._ctx) ) {
				case 1:
					{
					this.state = 6402;
					this.fieldLength();
					}
					break;
				}
				this.state = 6406;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 808, this._ctx) ) {
				case 1:
					{
					this.state = 6405;
					this.charsetWithOptBinary();
					}
					break;
				}
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 6408;
				this.nchar();
				this.state = 6410;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 809, this._ctx) ) {
				case 1:
					{
					this.state = 6409;
					this.fieldLength();
					}
					break;
				}
				}
				break;
			case 4:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 6412;
				this.match(MySQLParser.SIGNED_SYMBOL);
				this.state = 6414;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 810, this._ctx) ) {
				case 1:
					{
					this.state = 6413;
					this.match(MySQLParser.INT_SYMBOL);
					}
					break;
				}
				}
				break;
			case 5:
				this.enterOuterAlt(localctx, 5);
				{
				this.state = 6416;
				this.match(MySQLParser.UNSIGNED_SYMBOL);
				this.state = 6418;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 811, this._ctx) ) {
				case 1:
					{
					this.state = 6417;
					this.match(MySQLParser.INT_SYMBOL);
					}
					break;
				}
				}
				break;
			case 6:
				this.enterOuterAlt(localctx, 6);
				{
				this.state = 6420;
				this.match(MySQLParser.DATE_SYMBOL);
				}
				break;
			case 7:
				this.enterOuterAlt(localctx, 7);
				{
				this.state = 6421;
				this.match(MySQLParser.TIME_SYMBOL);
				this.state = 6423;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 812, this._ctx) ) {
				case 1:
					{
					this.state = 6422;
					this.typeDatetimePrecision();
					}
					break;
				}
				}
				break;
			case 8:
				this.enterOuterAlt(localctx, 8);
				{
				this.state = 6425;
				this.match(MySQLParser.DATETIME_SYMBOL);
				this.state = 6427;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 813, this._ctx) ) {
				case 1:
					{
					this.state = 6426;
					this.typeDatetimePrecision();
					}
					break;
				}
				}
				break;
			case 9:
				this.enterOuterAlt(localctx, 9);
				{
				this.state = 6429;
				this.match(MySQLParser.DECIMAL_SYMBOL);
				this.state = 6431;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 814, this._ctx) ) {
				case 1:
					{
					this.state = 6430;
					this.floatOptions();
					}
					break;
				}
				}
				break;
			case 10:
				this.enterOuterAlt(localctx, 10);
				{
				this.state = 6433;
				if (!(this.serverVersion >= 50708)) {
					throw this.createFailedPredicateException("this.serverVersion >= 50708");
				}
				this.state = 6434;
				this.match(MySQLParser.JSON_SYMBOL);
				}
				break;
			case 11:
				this.enterOuterAlt(localctx, 11);
				{
				this.state = 6435;
				if (!(this.serverVersion >= 80017)) {
					throw this.createFailedPredicateException("this.serverVersion >= 80017");
				}
				this.state = 6436;
				this.realType();
				}
				break;
			case 12:
				this.enterOuterAlt(localctx, 12);
				{
				this.state = 6437;
				if (!(this.serverVersion >= 80017)) {
					throw this.createFailedPredicateException("this.serverVersion >= 80017");
				}
				this.state = 6438;
				this.match(MySQLParser.FLOAT_SYMBOL);
				this.state = 6440;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 815, this._ctx) ) {
				case 1:
					{
					this.state = 6439;
					this.standardFloatOptions();
					}
					break;
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public exprList(): ExprListContext {
		let localctx: ExprListContext = new ExprListContext(this, this._ctx, this.state);
		this.enterRule(localctx, 746, MySQLParser.RULE_exprList);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6444;
			this.expr(0);
			this.state = 6449;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===406) {
				{
				{
				this.state = 6445;
				this.match(MySQLParser.COMMA_SYMBOL);
				this.state = 6446;
				this.expr(0);
				}
				}
				this.state = 6451;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public charset(): CharsetContext {
		let localctx: CharsetContext = new CharsetContext(this, this._ctx, this.state);
		this.enterRule(localctx, 748, MySQLParser.RULE_charset);
		try {
			this.state = 6455;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 450:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 6452;
				this.match(MySQLParser.CHAR_SYMBOL);
				this.state = 6453;
				this.match(MySQLParser.SET_SYMBOL);
				}
				break;
			case 8:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 6454;
				this.match(MySQLParser.CHARSET_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public notRule(): NotRuleContext {
		let localctx: NotRuleContext = new NotRuleContext(this, this._ctx, this.state);
		this.enterRule(localctx, 750, MySQLParser.RULE_notRule);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6457;
			_la = this._input.LA(1);
			if(!(_la===378 || _la===573)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public not2Rule(): Not2RuleContext {
		let localctx: Not2RuleContext = new Not2RuleContext(this, this._ctx, this.state);
		this.enterRule(localctx, 752, MySQLParser.RULE_not2Rule);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6459;
			_la = this._input.LA(1);
			if(!(_la===378 || _la===396)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public interval(): IntervalContext {
		let localctx: IntervalContext = new IntervalContext(this, this._ctx, this.state);
		this.enterRule(localctx, 754, MySQLParser.RULE_interval);
		let _la: number;
		try {
			this.state = 6463;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 113:
			case 158:
			case 217:
			case 219:
			case 223:
			case 266:
			case 305:
			case 371:
			case 377:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 6461;
				this.intervalTimeStamp();
				}
				break;
			case 471:
			case 472:
			case 473:
			case 474:
			case 516:
			case 517:
			case 518:
			case 564:
			case 565:
			case 613:
			case 686:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 6462;
				_la = this._input.LA(1);
				if(!(((((_la - 471)) & ~0x1F) === 0 && ((1 << (_la - 471)) & 15) !== 0) || ((((_la - 516)) & ~0x1F) === 0 && ((1 << (_la - 516)) & 7) !== 0) || _la===564 || _la===565 || _la===613 || _la===686)) {
				this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public intervalTimeStamp(): IntervalTimeStampContext {
		let localctx: IntervalTimeStampContext = new IntervalTimeStampContext(this, this._ctx, this.state);
		this.enterRule(localctx, 756, MySQLParser.RULE_intervalTimeStamp);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6465;
			_la = this._input.LA(1);
			if(!(_la===113 || _la===158 || ((((_la - 217)) & ~0x1F) === 0 && ((1 << (_la - 217)) & 69) !== 0) || _la===266 || _la===305 || _la===371 || _la===377)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public exprListWithParentheses(): ExprListWithParenthesesContext {
		let localctx: ExprListWithParenthesesContext = new ExprListWithParenthesesContext(this, this._ctx, this.state);
		this.enterRule(localctx, 758, MySQLParser.RULE_exprListWithParentheses);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6467;
			this.match(MySQLParser.OPEN_PAR_SYMBOL);
			this.state = 6468;
			this.exprList();
			this.state = 6469;
			this.match(MySQLParser.CLOSE_PAR_SYMBOL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public exprWithParentheses(): ExprWithParenthesesContext {
		let localctx: ExprWithParenthesesContext = new ExprWithParenthesesContext(this, this._ctx, this.state);
		this.enterRule(localctx, 760, MySQLParser.RULE_exprWithParentheses);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6471;
			this.match(MySQLParser.OPEN_PAR_SYMBOL);
			this.state = 6472;
			this.expr(0);
			this.state = 6473;
			this.match(MySQLParser.CLOSE_PAR_SYMBOL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public simpleExprWithParentheses(): SimpleExprWithParenthesesContext {
		let localctx: SimpleExprWithParenthesesContext = new SimpleExprWithParenthesesContext(this, this._ctx, this.state);
		this.enterRule(localctx, 762, MySQLParser.RULE_simpleExprWithParentheses);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6475;
			this.match(MySQLParser.OPEN_PAR_SYMBOL);
			this.state = 6476;
			this.simpleExpr(0);
			this.state = 6477;
			this.match(MySQLParser.CLOSE_PAR_SYMBOL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public orderList(): OrderListContext {
		let localctx: OrderListContext = new OrderListContext(this, this._ctx, this.state);
		this.enterRule(localctx, 764, MySQLParser.RULE_orderList);
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6479;
			this.orderExpression();
			this.state = 6484;
			this._errHandler.sync(this);
			_alt = this._interp.adaptivePredict(this._input, 820, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 6480;
					this.match(MySQLParser.COMMA_SYMBOL);
					this.state = 6481;
					this.orderExpression();
					}
					}
				}
				this.state = 6486;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 820, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public orderExpression(): OrderExpressionContext {
		let localctx: OrderExpressionContext = new OrderExpressionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 766, MySQLParser.RULE_orderExpression);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6487;
			this.expr(0);
			this.state = 6489;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 821, this._ctx) ) {
			case 1:
				{
				this.state = 6488;
				this.direction();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public groupList(): GroupListContext {
		let localctx: GroupListContext = new GroupListContext(this, this._ctx, this.state);
		this.enterRule(localctx, 768, MySQLParser.RULE_groupList);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6491;
			this.groupingExpression();
			this.state = 6496;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===406) {
				{
				{
				this.state = 6492;
				this.match(MySQLParser.COMMA_SYMBOL);
				this.state = 6493;
				this.groupingExpression();
				}
				}
				this.state = 6498;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public groupingExpression(): GroupingExpressionContext {
		let localctx: GroupingExpressionContext = new GroupingExpressionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 770, MySQLParser.RULE_groupingExpression);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6499;
			this.expr(0);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public channel(): ChannelContext {
		let localctx: ChannelContext = new ChannelContext(this, this._ctx, this.state);
		this.enterRule(localctx, 772, MySQLParser.RULE_channel);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6501;
			if (!(this.serverVersion >= 50706)) {
				throw this.createFailedPredicateException("this.serverVersion >= 50706");
			}
			this.state = 6502;
			this.match(MySQLParser.FOR_SYMBOL);
			this.state = 6503;
			this.match(MySQLParser.CHANNEL_SYMBOL);
			this.state = 6504;
			this.textStringNoLinebreak();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public compoundStatement(): CompoundStatementContext {
		let localctx: CompoundStatementContext = new CompoundStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 774, MySQLParser.RULE_compoundStatement);
		try {
			this.state = 6519;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 823, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 6506;
				this.simpleStatement();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 6507;
				this.returnStatement();
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 6508;
				this.ifStatement();
				}
				break;
			case 4:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 6509;
				this.caseStatement();
				}
				break;
			case 5:
				this.enterOuterAlt(localctx, 5);
				{
				this.state = 6510;
				this.labeledBlock();
				}
				break;
			case 6:
				this.enterOuterAlt(localctx, 6);
				{
				this.state = 6511;
				this.unlabeledBlock();
				}
				break;
			case 7:
				this.enterOuterAlt(localctx, 7);
				{
				this.state = 6512;
				this.labeledControl();
				}
				break;
			case 8:
				this.enterOuterAlt(localctx, 8);
				{
				this.state = 6513;
				this.unlabeledControl();
				}
				break;
			case 9:
				this.enterOuterAlt(localctx, 9);
				{
				this.state = 6514;
				this.leaveStatement();
				}
				break;
			case 10:
				this.enterOuterAlt(localctx, 10);
				{
				this.state = 6515;
				this.iterateStatement();
				}
				break;
			case 11:
				this.enterOuterAlt(localctx, 11);
				{
				this.state = 6516;
				this.cursorOpen();
				}
				break;
			case 12:
				this.enterOuterAlt(localctx, 12);
				{
				this.state = 6517;
				this.cursorFetch();
				}
				break;
			case 13:
				this.enterOuterAlt(localctx, 13);
				{
				this.state = 6518;
				this.cursorClose();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public returnStatement(): ReturnStatementContext {
		let localctx: ReturnStatementContext = new ReturnStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 776, MySQLParser.RULE_returnStatement);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6521;
			this.match(MySQLParser.RETURN_SYMBOL);
			this.state = 6522;
			this.expr(0);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public ifStatement(): IfStatementContext {
		let localctx: IfStatementContext = new IfStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 778, MySQLParser.RULE_ifStatement);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6524;
			this.match(MySQLParser.IF_SYMBOL);
			this.state = 6525;
			this.ifBody();
			this.state = 6526;
			this.match(MySQLParser.END_SYMBOL);
			this.state = 6527;
			this.match(MySQLParser.IF_SYMBOL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public ifBody(): IfBodyContext {
		let localctx: IfBodyContext = new IfBodyContext(this, this._ctx, this.state);
		this.enterRule(localctx, 780, MySQLParser.RULE_ifBody);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6529;
			this.expr(0);
			this.state = 6530;
			this.thenStatement();
			this.state = 6535;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 491:
				{
				this.state = 6531;
				this.match(MySQLParser.ELSEIF_SYMBOL);
				this.state = 6532;
				this.ifBody();
				}
				break;
			case 490:
				{
				this.state = 6533;
				this.match(MySQLParser.ELSE_SYMBOL);
				this.state = 6534;
				this.compoundStatementList();
				}
				break;
			case 16:
				break;
			default:
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public thenStatement(): ThenStatementContext {
		let localctx: ThenStatementContext = new ThenStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 782, MySQLParser.RULE_thenStatement);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6537;
			this.match(MySQLParser.THEN_SYMBOL);
			this.state = 6538;
			this.compoundStatementList();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public compoundStatementList(): CompoundStatementListContext {
		let localctx: CompoundStatementListContext = new CompoundStatementListContext(this, this._ctx, this.state);
		this.enterRule(localctx, 784, MySQLParser.RULE_compoundStatementList);
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6543;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 6540;
					this.compoundStatement();
					this.state = 6541;
					this.match(MySQLParser.SEMICOLON_SYMBOL);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 6545;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 825, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public caseStatement(): CaseStatementContext {
		let localctx: CaseStatementContext = new CaseStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 786, MySQLParser.RULE_caseStatement);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6547;
			this.match(MySQLParser.CASE_SYMBOL);
			this.state = 6549;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 826, this._ctx) ) {
			case 1:
				{
				this.state = 6548;
				this.expr(0);
				}
				break;
			}
			this.state = 6554;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 6551;
				this.whenExpression();
				this.state = 6552;
				this.thenStatement();
				}
				}
				this.state = 6556;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la===679);
			this.state = 6559;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===490) {
				{
				this.state = 6558;
				this.elseStatement();
				}
			}

			this.state = 6561;
			this.match(MySQLParser.END_SYMBOL);
			this.state = 6562;
			this.match(MySQLParser.CASE_SYMBOL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public elseStatement(): ElseStatementContext {
		let localctx: ElseStatementContext = new ElseStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 788, MySQLParser.RULE_elseStatement);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6564;
			this.match(MySQLParser.ELSE_SYMBOL);
			this.state = 6565;
			this.compoundStatementList();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public labeledBlock(): LabeledBlockContext {
		let localctx: LabeledBlockContext = new LabeledBlockContext(this, this._ctx, this.state);
		this.enterRule(localctx, 790, MySQLParser.RULE_labeledBlock);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6567;
			this.label();
			this.state = 6568;
			this.beginEndBlock();
			this.state = 6570;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 829, this._ctx) ) {
			case 1:
				{
				this.state = 6569;
				this.labelRef();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public unlabeledBlock(): UnlabeledBlockContext {
		let localctx: UnlabeledBlockContext = new UnlabeledBlockContext(this, this._ctx, this.state);
		this.enterRule(localctx, 792, MySQLParser.RULE_unlabeledBlock);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6572;
			this.beginEndBlock();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public label(): LabelContext {
		let localctx: LabelContext = new LabelContext(this, this._ctx, this.state);
		this.enterRule(localctx, 794, MySQLParser.RULE_label);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6574;
			this.labelIdentifier();
			this.state = 6575;
			this.match(MySQLParser.COLON_SYMBOL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public beginEndBlock(): BeginEndBlockContext {
		let localctx: BeginEndBlockContext = new BeginEndBlockContext(this, this._ctx, this.state);
		this.enterRule(localctx, 796, MySQLParser.RULE_beginEndBlock);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6577;
			this.match(MySQLParser.BEGIN_SYMBOL);
			this.state = 6579;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 830, this._ctx) ) {
			case 1:
				{
				this.state = 6578;
				this.spDeclarations();
				}
				break;
			}
			this.state = 6582;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 831, this._ctx) ) {
			case 1:
				{
				this.state = 6581;
				this.compoundStatementList();
				}
				break;
			}
			this.state = 6584;
			this.match(MySQLParser.END_SYMBOL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public labeledControl(): LabeledControlContext {
		let localctx: LabeledControlContext = new LabeledControlContext(this, this._ctx, this.state);
		this.enterRule(localctx, 798, MySQLParser.RULE_labeledControl);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6586;
			this.label();
			this.state = 6587;
			this.unlabeledControl();
			this.state = 6589;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 832, this._ctx) ) {
			case 1:
				{
				this.state = 6588;
				this.labelRef();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public unlabeledControl(): UnlabeledControlContext {
		let localctx: UnlabeledControlContext = new UnlabeledControlContext(this, this._ctx, this.state);
		this.enterRule(localctx, 800, MySQLParser.RULE_unlabeledControl);
		try {
			this.state = 6594;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 553:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 6591;
				this.loopBlock();
				}
				break;
			case 681:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 6592;
				this.whileDoBlock();
				}
				break;
			case 605:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 6593;
				this.repeatUntilBlock();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public loopBlock(): LoopBlockContext {
		let localctx: LoopBlockContext = new LoopBlockContext(this, this._ctx, this.state);
		this.enterRule(localctx, 802, MySQLParser.RULE_loopBlock);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6596;
			this.match(MySQLParser.LOOP_SYMBOL);
			this.state = 6597;
			this.compoundStatementList();
			this.state = 6598;
			this.match(MySQLParser.END_SYMBOL);
			this.state = 6599;
			this.match(MySQLParser.LOOP_SYMBOL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public whileDoBlock(): WhileDoBlockContext {
		let localctx: WhileDoBlockContext = new WhileDoBlockContext(this, this._ctx, this.state);
		this.enterRule(localctx, 804, MySQLParser.RULE_whileDoBlock);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6601;
			this.match(MySQLParser.WHILE_SYMBOL);
			this.state = 6602;
			this.expr(0);
			this.state = 6603;
			this.match(MySQLParser.DO_SYMBOL);
			this.state = 6604;
			this.compoundStatementList();
			this.state = 6605;
			this.match(MySQLParser.END_SYMBOL);
			this.state = 6606;
			this.match(MySQLParser.WHILE_SYMBOL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public repeatUntilBlock(): RepeatUntilBlockContext {
		let localctx: RepeatUntilBlockContext = new RepeatUntilBlockContext(this, this._ctx, this.state);
		this.enterRule(localctx, 806, MySQLParser.RULE_repeatUntilBlock);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6608;
			this.match(MySQLParser.REPEAT_SYMBOL);
			this.state = 6609;
			this.compoundStatementList();
			this.state = 6610;
			this.match(MySQLParser.UNTIL_SYMBOL);
			this.state = 6611;
			this.expr(0);
			this.state = 6612;
			this.match(MySQLParser.END_SYMBOL);
			this.state = 6613;
			this.match(MySQLParser.REPEAT_SYMBOL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public spDeclarations(): SpDeclarationsContext {
		let localctx: SpDeclarationsContext = new SpDeclarationsContext(this, this._ctx, this.state);
		this.enterRule(localctx, 808, MySQLParser.RULE_spDeclarations);
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6618;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 6615;
					this.spDeclaration();
					this.state = 6616;
					this.match(MySQLParser.SEMICOLON_SYMBOL);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 6620;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 834, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public spDeclaration(): SpDeclarationContext {
		let localctx: SpDeclarationContext = new SpDeclarationContext(this, this._ctx, this.state);
		this.enterRule(localctx, 810, MySQLParser.RULE_spDeclaration);
		try {
			this.state = 6626;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 835, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 6622;
				this.variableDeclaration();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 6623;
				this.conditionDeclaration();
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 6624;
				this.handlerDeclaration();
				}
				break;
			case 4:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 6625;
				this.cursorDeclaration();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public variableDeclaration(): VariableDeclarationContext {
		let localctx: VariableDeclarationContext = new VariableDeclarationContext(this, this._ctx, this.state);
		this.enterRule(localctx, 812, MySQLParser.RULE_variableDeclaration);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6628;
			this.match(MySQLParser.DECLARE_SYMBOL);
			this.state = 6629;
			this.identifierList();
			this.state = 6630;
			this.dataType();
			this.state = 6632;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===452) {
				{
				this.state = 6631;
				this.collate();
				}
			}

			this.state = 6636;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===478) {
				{
				this.state = 6634;
				this.match(MySQLParser.DEFAULT_SYMBOL);
				this.state = 6635;
				this.expr(0);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public conditionDeclaration(): ConditionDeclarationContext {
		let localctx: ConditionDeclarationContext = new ConditionDeclarationContext(this, this._ctx, this.state);
		this.enterRule(localctx, 814, MySQLParser.RULE_conditionDeclaration);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6638;
			this.match(MySQLParser.DECLARE_SYMBOL);
			this.state = 6639;
			this.identifier();
			this.state = 6640;
			this.match(MySQLParser.CONDITION_SYMBOL);
			this.state = 6641;
			this.match(MySQLParser.FOR_SYMBOL);
			this.state = 6642;
			this.spCondition();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public spCondition(): SpConditionContext {
		let localctx: SpConditionContext = new SpConditionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 816, MySQLParser.RULE_spCondition);
		try {
			this.state = 6646;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 380:
			case 381:
			case 382:
			case 421:
			case 423:
			case 424:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 6644;
				this.ulong_number();
				}
				break;
			case 627:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 6645;
				this.sqlstate();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public sqlstate(): SqlstateContext {
		let localctx: SqlstateContext = new SqlstateContext(this, this._ctx, this.state);
		this.enterRule(localctx, 818, MySQLParser.RULE_sqlstate);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6648;
			this.match(MySQLParser.SQLSTATE_SYMBOL);
			this.state = 6650;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 839, this._ctx) ) {
			case 1:
				{
				this.state = 6649;
				this.match(MySQLParser.VALUE_SYMBOL);
				}
				break;
			}
			this.state = 6652;
			this.textLiteral();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public handlerDeclaration(): HandlerDeclarationContext {
		let localctx: HandlerDeclarationContext = new HandlerDeclarationContext(this, this._ctx, this.state);
		this.enterRule(localctx, 820, MySQLParser.RULE_handlerDeclaration);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6654;
			this.match(MySQLParser.DECLARE_SYMBOL);
			this.state = 6655;
			_la = this._input.LA(1);
			if(!(_la===456 || _la===497 || _la===658)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			this.state = 6656;
			this.match(MySQLParser.HANDLER_SYMBOL);
			this.state = 6657;
			this.match(MySQLParser.FOR_SYMBOL);
			this.state = 6658;
			this.handlerCondition();
			this.state = 6663;
			this._errHandler.sync(this);
			_alt = this._interp.adaptivePredict(this._input, 840, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 6659;
					this.match(MySQLParser.COMMA_SYMBOL);
					this.state = 6660;
					this.handlerCondition();
					}
					}
				}
				this.state = 6665;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 840, this._ctx);
			}
			this.state = 6666;
			this.compoundStatement();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public handlerCondition(): HandlerConditionContext {
		let localctx: HandlerConditionContext = new HandlerConditionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 822, MySQLParser.RULE_handlerCondition);
		try {
			this.state = 6675;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 841, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 6668;
				this.spCondition();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 6669;
				this.identifier();
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 6670;
				this.match(MySQLParser.SQLWARNING_SYMBOL);
				}
				break;
			case 4:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 6671;
				this.notRule();
				this.state = 6672;
				this.match(MySQLParser.FOUND_SYMBOL);
				}
				break;
			case 5:
				this.enterOuterAlt(localctx, 5);
				{
				this.state = 6674;
				this.match(MySQLParser.SQLEXCEPTION_SYMBOL);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public cursorDeclaration(): CursorDeclarationContext {
		let localctx: CursorDeclarationContext = new CursorDeclarationContext(this, this._ctx, this.state);
		this.enterRule(localctx, 824, MySQLParser.RULE_cursorDeclaration);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6677;
			this.match(MySQLParser.DECLARE_SYMBOL);
			this.state = 6678;
			this.identifier();
			this.state = 6679;
			this.match(MySQLParser.CURSOR_SYMBOL);
			this.state = 6680;
			this.match(MySQLParser.FOR_SYMBOL);
			this.state = 6681;
			this.selectStatement();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public iterateStatement(): IterateStatementContext {
		let localctx: IterateStatementContext = new IterateStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 826, MySQLParser.RULE_iterateStatement);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6683;
			this.match(MySQLParser.ITERATE_SYMBOL);
			this.state = 6684;
			this.labelRef();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public leaveStatement(): LeaveStatementContext {
		let localctx: LeaveStatementContext = new LeaveStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 828, MySQLParser.RULE_leaveStatement);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6686;
			this.match(MySQLParser.LEAVE_SYMBOL);
			this.state = 6687;
			this.labelRef();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public getDiagnostics(): GetDiagnosticsContext {
		let localctx: GetDiagnosticsContext = new GetDiagnosticsContext(this, this._ctx, this.state);
		this.enterRule(localctx, 830, MySQLParser.RULE_getDiagnostics);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6689;
			this.match(MySQLParser.GET_SYMBOL);
			this.state = 6693;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 842, this._ctx) ) {
			case 1:
				{
				this.state = 6690;
				this.match(MySQLParser.CURRENT_SYMBOL);
				}
				break;
			case 2:
				{
				this.state = 6691;
				if (!(this.serverVersion >= 50700)) {
					throw this.createFailedPredicateException("this.serverVersion >= 50700");
				}
				this.state = 6692;
				this.match(MySQLParser.STACKED_SYMBOL);
				}
				break;
			}
			this.state = 6695;
			this.match(MySQLParser.DIAGNOSTICS_SYMBOL);
			this.state = 6714;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 845, this._ctx) ) {
			case 1:
				{
				this.state = 6696;
				this.statementInformationItem();
				this.state = 6701;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la===406) {
					{
					{
					this.state = 6697;
					this.match(MySQLParser.COMMA_SYMBOL);
					this.state = 6698;
					this.statementInformationItem();
					}
					}
					this.state = 6703;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;
			case 2:
				{
				this.state = 6704;
				this.match(MySQLParser.CONDITION_SYMBOL);
				this.state = 6705;
				this.signalAllowedExpr();
				this.state = 6706;
				this.conditionInformationItem();
				this.state = 6711;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la===406) {
					{
					{
					this.state = 6707;
					this.match(MySQLParser.COMMA_SYMBOL);
					this.state = 6708;
					this.conditionInformationItem();
					}
					}
					this.state = 6713;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public signalAllowedExpr(): SignalAllowedExprContext {
		let localctx: SignalAllowedExprContext = new SignalAllowedExprContext(this, this._ctx, this.state);
		this.enterRule(localctx, 832, MySQLParser.RULE_signalAllowedExpr);
		try {
			this.state = 6719;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 846, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 6716;
				this.literal();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 6717;
				this.variable();
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 6718;
				this.qualifiedIdentifier();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public statementInformationItem(): StatementInformationItemContext {
		let localctx: StatementInformationItemContext = new StatementInformationItemContext(this, this._ctx, this.state);
		this.enterRule(localctx, 834, MySQLParser.RULE_statementInformationItem);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6723;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 847, this._ctx) ) {
			case 1:
				{
				this.state = 6721;
				this.variable();
				}
				break;
			case 2:
				{
				this.state = 6722;
				this.identifier();
				}
				break;
			}
			this.state = 6725;
			this.match(MySQLParser.EQUAL_OPERATOR);
			this.state = 6726;
			_la = this._input.LA(1);
			if(!(_la===240 || _la===299)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public conditionInformationItem(): ConditionInformationItemContext {
		let localctx: ConditionInformationItemContext = new ConditionInformationItemContext(this, this._ctx, this.state);
		this.enterRule(localctx, 836, MySQLParser.RULE_conditionInformationItem);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6730;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 848, this._ctx) ) {
			case 1:
				{
				this.state = 6728;
				this.variable();
				}
				break;
			case 2:
				{
				this.state = 6729;
				this.identifier();
				}
				break;
			}
			this.state = 6732;
			this.match(MySQLParser.EQUAL_OPERATOR);
			this.state = 6735;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 78:
			case 84:
			case 88:
			case 100:
			case 101:
			case 102:
			case 108:
			case 216:
			case 228:
			case 304:
			case 330:
			case 339:
				{
				this.state = 6733;
				this.signalInformationItemName();
				}
				break;
			case 292:
				{
				this.state = 6734;
				this.match(MySQLParser.RETURNED_SQLSTATE_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public signalInformationItemName(): SignalInformationItemNameContext {
		let localctx: SignalInformationItemNameContext = new SignalInformationItemNameContext(this, this._ctx, this.state);
		this.enterRule(localctx, 838, MySQLParser.RULE_signalInformationItemName);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6737;
			_la = this._input.LA(1);
			if(!(((((_la - 78)) & ~0x1F) === 0 && ((1 << (_la - 78)) & 1103103041) !== 0) || _la===216 || _la===228 || _la===304 || _la===330 || _la===339)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public signalStatement(): SignalStatementContext {
		let localctx: SignalStatementContext = new SignalStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 840, MySQLParser.RULE_signalStatement);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6739;
			this.match(MySQLParser.SIGNAL_SYMBOL);
			this.state = 6742;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 850, this._ctx) ) {
			case 1:
				{
				this.state = 6740;
				this.identifier();
				}
				break;
			case 2:
				{
				this.state = 6741;
				this.sqlstate();
				}
				break;
			}
			this.state = 6753;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===619) {
				{
				this.state = 6744;
				this.match(MySQLParser.SET_SYMBOL);
				this.state = 6745;
				this.signalInformationItem();
				this.state = 6750;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la===406) {
					{
					{
					this.state = 6746;
					this.match(MySQLParser.COMMA_SYMBOL);
					this.state = 6747;
					this.signalInformationItem();
					}
					}
					this.state = 6752;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public resignalStatement(): ResignalStatementContext {
		let localctx: ResignalStatementContext = new ResignalStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 842, MySQLParser.RULE_resignalStatement);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6755;
			this.match(MySQLParser.RESIGNAL_SYMBOL);
			this.state = 6761;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===627) {
				{
				this.state = 6756;
				this.match(MySQLParser.SQLSTATE_SYMBOL);
				this.state = 6758;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 853, this._ctx) ) {
				case 1:
					{
					this.state = 6757;
					this.match(MySQLParser.VALUE_SYMBOL);
					}
					break;
				}
				this.state = 6760;
				this.textOrIdentifier();
				}
			}

			this.state = 6772;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===619) {
				{
				this.state = 6763;
				this.match(MySQLParser.SET_SYMBOL);
				this.state = 6764;
				this.signalInformationItem();
				this.state = 6769;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la===406) {
					{
					{
					this.state = 6765;
					this.match(MySQLParser.COMMA_SYMBOL);
					this.state = 6766;
					this.signalInformationItem();
					}
					}
					this.state = 6771;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public signalInformationItem(): SignalInformationItemContext {
		let localctx: SignalInformationItemContext = new SignalInformationItemContext(this, this._ctx, this.state);
		this.enterRule(localctx, 844, MySQLParser.RULE_signalInformationItem);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6774;
			this.signalInformationItemName();
			this.state = 6775;
			this.match(MySQLParser.EQUAL_OPERATOR);
			this.state = 6776;
			this.signalAllowedExpr();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public cursorOpen(): CursorOpenContext {
		let localctx: CursorOpenContext = new CursorOpenContext(this, this._ctx, this.state);
		this.enterRule(localctx, 846, MySQLParser.RULE_cursorOpen);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6778;
			this.match(MySQLParser.OPEN_SYMBOL);
			this.state = 6779;
			this.identifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public cursorClose(): CursorCloseContext {
		let localctx: CursorCloseContext = new CursorCloseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 848, MySQLParser.RULE_cursorClose);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6781;
			this.match(MySQLParser.CLOSE_SYMBOL);
			this.state = 6782;
			this.identifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public cursorFetch(): CursorFetchContext {
		let localctx: CursorFetchContext = new CursorFetchContext(this, this._ctx, this.state);
		this.enterRule(localctx, 850, MySQLParser.RULE_cursorFetch);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6784;
			this.match(MySQLParser.FETCH_SYMBOL);
			this.state = 6789;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 858, this._ctx) ) {
			case 1:
				{
				this.state = 6786;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===235) {
					{
					this.state = 6785;
					this.match(MySQLParser.NEXT_SYMBOL);
					}
				}

				this.state = 6788;
				this.match(MySQLParser.FROM_SYMBOL);
				}
				break;
			}
			this.state = 6791;
			this.identifier();
			this.state = 6792;
			this.match(MySQLParser.INTO_SYMBOL);
			this.state = 6793;
			this.identifierList();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public schedule(): ScheduleContext {
		let localctx: ScheduleContext = new ScheduleContext(this, this._ctx, this.state);
		this.enterRule(localctx, 852, MySQLParser.RULE_schedule);
		let _la: number;
		try {
			this.state = 6808;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 65:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 6795;
				this.match(MySQLParser.AT_SYMBOL);
				this.state = 6796;
				this.expr(0);
				}
				break;
			case 135:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 6797;
				this.match(MySQLParser.EVERY_SYMBOL);
				this.state = 6798;
				this.expr(0);
				this.state = 6799;
				this.interval();
				this.state = 6802;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===323) {
					{
					this.state = 6800;
					this.match(MySQLParser.STARTS_SYMBOL);
					this.state = 6801;
					this.expr(0);
					}
				}

				this.state = 6806;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===126) {
					{
					this.state = 6804;
					this.match(MySQLParser.ENDS_SYMBOL);
					this.state = 6805;
					this.expr(0);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public columnDefinition(): ColumnDefinitionContext {
		let localctx: ColumnDefinitionContext = new ColumnDefinitionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 854, MySQLParser.RULE_columnDefinition);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6810;
			this.columnName();
			this.state = 6811;
			this.fieldDefinition();
			this.state = 6813;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 862, this._ctx) ) {
			case 1:
				{
				this.state = 6812;
				this.checkOrReferences();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public checkOrReferences(): CheckOrReferencesContext {
		let localctx: CheckOrReferencesContext = new CheckOrReferencesContext(this, this._ctx, this.state);
		this.enterRule(localctx, 856, MySQLParser.RULE_checkOrReferences);
		try {
			this.state = 6818;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 863, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 6815;
				if (!(this.serverVersion < 80016)) {
					throw this.createFailedPredicateException("this.serverVersion < 80016");
				}
				this.state = 6816;
				this.checkConstraint();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 6817;
				this.references();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public checkConstraint(): CheckConstraintContext {
		let localctx: CheckConstraintContext = new CheckConstraintContext(this, this._ctx, this.state);
		this.enterRule(localctx, 858, MySQLParser.RULE_checkConstraint);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6820;
			this.match(MySQLParser.CHECK_SYMBOL);
			this.state = 6821;
			this.exprWithParentheses();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public constraintEnforcement(): ConstraintEnforcementContext {
		let localctx: ConstraintEnforcementContext = new ConstraintEnforcementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 860, MySQLParser.RULE_constraintEnforcement);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6824;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===573) {
				{
				this.state = 6823;
				this.match(MySQLParser.NOT_SYMBOL);
				}
			}

			this.state = 6826;
			this.match(MySQLParser.ENFORCED_SYMBOL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public tableConstraintDef(): TableConstraintDefContext {
		let localctx: TableConstraintDefContext = new TableConstraintDefContext(this, this._ctx, this.state);
		this.enterRule(localctx, 862, MySQLParser.RULE_tableConstraintDef);
		let _la: number;
		try {
			let _alt: number;
			this.state = 6903;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 521:
			case 537:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 6828;
				localctx._type_ = this._input.LT(1);
				_la = this._input.LA(1);
				if(!(_la===521 || _la===537)) {
				    localctx._type_ = this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				this.state = 6830;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 865, this._ctx) ) {
				case 1:
					{
					this.state = 6829;
					this.indexNameAndType();
					}
					break;
				}
				this.state = 6832;
				this.keyListVariants();
				this.state = 6836;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 866, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 6833;
						this.indexOption();
						}
						}
					}
					this.state = 6838;
					this._errHandler.sync(this);
					_alt = this._interp.adaptivePredict(this._input, 866, this._ctx);
				}
				}
				break;
			case 508:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 6839;
				localctx._type_ = this.match(MySQLParser.FULLTEXT_SYMBOL);
				this.state = 6841;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 867, this._ctx) ) {
				case 1:
					{
					this.state = 6840;
					this.keyOrIndex();
					}
					break;
				}
				this.state = 6844;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 868, this._ctx) ) {
				case 1:
					{
					this.state = 6843;
					this.indexName();
					}
					break;
				}
				this.state = 6846;
				this.keyListVariants();
				this.state = 6850;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 869, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 6847;
						this.fulltextIndexOption();
						}
						}
					}
					this.state = 6852;
					this._errHandler.sync(this);
					_alt = this._interp.adaptivePredict(this._input, 869, this._ctx);
				}
				}
				break;
			case 624:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 6853;
				localctx._type_ = this.match(MySQLParser.SPATIAL_SYMBOL);
				this.state = 6855;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 870, this._ctx) ) {
				case 1:
					{
					this.state = 6854;
					this.keyOrIndex();
					}
					break;
				}
				this.state = 6858;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 871, this._ctx) ) {
				case 1:
					{
					this.state = 6857;
					this.indexName();
					}
					break;
				}
				this.state = 6860;
				this.keyListVariants();
				this.state = 6864;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 872, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 6861;
						this.spatialIndexOption();
						}
						}
					}
					this.state = 6866;
					this._errHandler.sync(this);
					_alt = this._interp.adaptivePredict(this._input, 872, this._ctx);
				}
				}
				break;
			case 451:
			case 455:
			case 505:
			case 593:
			case 660:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 6868;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===455) {
					{
					this.state = 6867;
					this.constraintName();
					}
				}

				this.state = 6901;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case 593:
				case 660:
					{
					this.state = 6876;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
					case 593:
						{
						this.state = 6870;
						localctx._type_ = this.match(MySQLParser.PRIMARY_SYMBOL);
						this.state = 6871;
						this.match(MySQLParser.KEY_SYMBOL);
						}
						break;
					case 660:
						{
						this.state = 6872;
						localctx._type_ = this.match(MySQLParser.UNIQUE_SYMBOL);
						this.state = 6874;
						this._errHandler.sync(this);
						switch ( this._interp.adaptivePredict(this._input, 874, this._ctx) ) {
						case 1:
							{
							this.state = 6873;
							this.keyOrIndex();
							}
							break;
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					this.state = 6879;
					this._errHandler.sync(this);
					switch ( this._interp.adaptivePredict(this._input, 876, this._ctx) ) {
					case 1:
						{
						this.state = 6878;
						this.indexNameAndType();
						}
						break;
					}
					this.state = 6881;
					this.keyListVariants();
					this.state = 6885;
					this._errHandler.sync(this);
					_alt = this._interp.adaptivePredict(this._input, 877, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 6882;
							this.indexOption();
							}
							}
						}
						this.state = 6887;
						this._errHandler.sync(this);
						_alt = this._interp.adaptivePredict(this._input, 877, this._ctx);
					}
					}
					break;
				case 505:
					{
					this.state = 6888;
					localctx._type_ = this.match(MySQLParser.FOREIGN_SYMBOL);
					this.state = 6889;
					this.match(MySQLParser.KEY_SYMBOL);
					this.state = 6891;
					this._errHandler.sync(this);
					switch ( this._interp.adaptivePredict(this._input, 878, this._ctx) ) {
					case 1:
						{
						this.state = 6890;
						this.indexName();
						}
						break;
					}
					this.state = 6893;
					this.keyList();
					this.state = 6894;
					this.references();
					}
					break;
				case 451:
					{
					this.state = 6896;
					this.checkConstraint();
					this.state = 6899;
					this._errHandler.sync(this);
					switch ( this._interp.adaptivePredict(this._input, 879, this._ctx) ) {
					case 1:
						{
						this.state = 6897;
						if (!(this.serverVersion >= 80017)) {
							throw this.createFailedPredicateException("this.serverVersion >= 80017");
						}
						this.state = 6898;
						this.constraintEnforcement();
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public constraintName(): ConstraintNameContext {
		let localctx: ConstraintNameContext = new ConstraintNameContext(this, this._ctx, this.state);
		this.enterRule(localctx, 864, MySQLParser.RULE_constraintName);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6905;
			this.match(MySQLParser.CONSTRAINT_SYMBOL);
			this.state = 6907;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 882, this._ctx) ) {
			case 1:
				{
				this.state = 6906;
				this.identifier();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public fieldDefinition(): FieldDefinitionContext {
		let localctx: FieldDefinitionContext = new FieldDefinitionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 866, MySQLParser.RULE_fieldDefinition);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6909;
			this.dataType();
			this.state = 6945;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 890, this._ctx) ) {
			case 1:
				{
				this.state = 6913;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 883, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 6910;
						this.columnAttribute();
						}
						}
					}
					this.state = 6915;
					this._errHandler.sync(this);
					_alt = this._interp.adaptivePredict(this._input, 883, this._ctx);
				}
				}
				break;
			case 2:
				{
				this.state = 6916;
				if (!(this.serverVersion >= 50707)) {
					throw this.createFailedPredicateException("this.serverVersion >= 50707");
				}
				this.state = 6918;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===452) {
					{
					this.state = 6917;
					this.collate();
					}
				}

				this.state = 6922;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===510) {
					{
					this.state = 6920;
					this.match(MySQLParser.GENERATED_SYMBOL);
					this.state = 6921;
					this.match(MySQLParser.ALWAYS_SYMBOL);
					}
				}

				this.state = 6924;
				this.match(MySQLParser.AS_SYMBOL);
				this.state = 6925;
				this.exprWithParentheses();
				this.state = 6927;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 886, this._ctx) ) {
				case 1:
					{
					this.state = 6926;
					_la = this._input.LA(1);
					if(!(_la===639 || _la===678)) {
					this._errHandler.recoverInline(this);
					}
					else {
						this._errHandler.reportMatch(this);
					    this.consume();
					}
					}
					break;
				}
				this.state = 6943;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 889, this._ctx) ) {
				case 1:
					{
					this.state = 6929;
					if (!(this.serverVersion < 80000)) {
						throw this.createFailedPredicateException("this.serverVersion < 80000");
					}
					this.state = 6933;
					this._errHandler.sync(this);
					_alt = this._interp.adaptivePredict(this._input, 887, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 6930;
							this.gcolAttribute();
							}
							}
						}
						this.state = 6935;
						this._errHandler.sync(this);
						_alt = this._interp.adaptivePredict(this._input, 887, this._ctx);
					}
					}
					break;
				case 2:
					{
					this.state = 6936;
					if (!(this.serverVersion >= 80000)) {
						throw this.createFailedPredicateException("this.serverVersion >= 80000");
					}
					this.state = 6940;
					this._errHandler.sync(this);
					_alt = this._interp.adaptivePredict(this._input, 888, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 6937;
							this.columnAttribute();
							}
							}
						}
						this.state = 6942;
						this._errHandler.sync(this);
						_alt = this._interp.adaptivePredict(this._input, 888, this._ctx);
					}
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public columnAttribute(): ColumnAttributeContext {
		let localctx: ColumnAttributeContext = new ColumnAttributeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 868, MySQLParser.RULE_columnAttribute);
		let _la: number;
		try {
			this.state = 6999;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 898, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 6948;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===573) {
					{
					this.state = 6947;
					this.match(MySQLParser.NOT_SYMBOL);
					}
				}

				this.state = 6950;
				this.nullLiteral();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 6951;
				if (!(this.serverVersion >= 80014)) {
					throw this.createFailedPredicateException("this.serverVersion >= 80014");
				}
				this.state = 6952;
				this.match(MySQLParser.NOT_SYMBOL);
				this.state = 6953;
				this.match(MySQLParser.SECONDARY_SYMBOL);
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 6954;
				localctx._value = this.match(MySQLParser.DEFAULT_SYMBOL);
				this.state = 6962;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 893, this._ctx) ) {
				case 1:
					{
					this.state = 6955;
					this.signedLiteral();
					}
					break;
				case 2:
					{
					this.state = 6956;
					this.match(MySQLParser.NOW_SYMBOL);
					this.state = 6958;
					this._errHandler.sync(this);
					switch ( this._interp.adaptivePredict(this._input, 892, this._ctx) ) {
					case 1:
						{
						this.state = 6957;
						this.timeFunctionParameters();
						}
						break;
					}
					}
					break;
				case 3:
					{
					this.state = 6960;
					if (!(this.serverVersion >= 80013)) {
						throw this.createFailedPredicateException("this.serverVersion >= 80013");
					}
					this.state = 6961;
					this.exprWithParentheses();
					}
					break;
				}
				}
				break;
			case 4:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 6964;
				localctx._value = this.match(MySQLParser.ON_SYMBOL);
				this.state = 6965;
				this.match(MySQLParser.UPDATE_SYMBOL);
				this.state = 6966;
				this.match(MySQLParser.NOW_SYMBOL);
				this.state = 6968;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 894, this._ctx) ) {
				case 1:
					{
					this.state = 6967;
					this.timeFunctionParameters();
					}
					break;
				}
				}
				break;
			case 5:
				this.enterOuterAlt(localctx, 5);
				{
				this.state = 6970;
				localctx._value = this.match(MySQLParser.AUTO_INCREMENT_SYMBOL);
				}
				break;
			case 6:
				this.enterOuterAlt(localctx, 6);
				{
				this.state = 6971;
				localctx._value = this.match(MySQLParser.SERIAL_SYMBOL);
				this.state = 6972;
				this.match(MySQLParser.DEFAULT_SYMBOL);
				this.state = 6973;
				this.match(MySQLParser.VALUE_SYMBOL);
				}
				break;
			case 7:
				this.enterOuterAlt(localctx, 7);
				{
				this.state = 6975;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===593) {
					{
					this.state = 6974;
					this.match(MySQLParser.PRIMARY_SYMBOL);
					}
				}

				this.state = 6977;
				localctx._value = this.match(MySQLParser.KEY_SYMBOL);
				}
				break;
			case 8:
				this.enterOuterAlt(localctx, 8);
				{
				this.state = 6978;
				localctx._value = this.match(MySQLParser.UNIQUE_SYMBOL);
				this.state = 6980;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 896, this._ctx) ) {
				case 1:
					{
					this.state = 6979;
					this.match(MySQLParser.KEY_SYMBOL);
					}
					break;
				}
				}
				break;
			case 9:
				this.enterOuterAlt(localctx, 9);
				{
				this.state = 6982;
				localctx._value = this.match(MySQLParser.COMMENT_SYMBOL);
				this.state = 6983;
				this.textLiteral();
				}
				break;
			case 10:
				this.enterOuterAlt(localctx, 10);
				{
				this.state = 6984;
				this.collate();
				}
				break;
			case 11:
				this.enterOuterAlt(localctx, 11);
				{
				this.state = 6985;
				localctx._value = this.match(MySQLParser.COLUMN_FORMAT_SYMBOL);
				this.state = 6986;
				this.columnFormat();
				}
				break;
			case 12:
				this.enterOuterAlt(localctx, 12);
				{
				this.state = 6987;
				localctx._value = this.match(MySQLParser.STORAGE_SYMBOL);
				this.state = 6988;
				this.storageMedia();
				}
				break;
			case 13:
				this.enterOuterAlt(localctx, 13);
				{
				this.state = 6989;
				if (!(this.serverVersion >= 80000)) {
					throw this.createFailedPredicateException("this.serverVersion >= 80000");
				}
				this.state = 6990;
				localctx._value = this.match(MySQLParser.SRID_SYMBOL);
				this.state = 6991;
				this.real_ulonglong_number();
				}
				break;
			case 14:
				this.enterOuterAlt(localctx, 14);
				{
				this.state = 6992;
				if (!(this.serverVersion >= 80017)) {
					throw this.createFailedPredicateException("this.serverVersion >= 80017");
				}
				this.state = 6994;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===455) {
					{
					this.state = 6993;
					this.constraintName();
					}
				}

				this.state = 6996;
				this.checkConstraint();
				}
				break;
			case 15:
				this.enterOuterAlt(localctx, 15);
				{
				this.state = 6997;
				if (!(this.serverVersion >= 80017)) {
					throw this.createFailedPredicateException("this.serverVersion >= 80017");
				}
				this.state = 6998;
				this.constraintEnforcement();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public columnFormat(): ColumnFormatContext {
		let localctx: ColumnFormatContext = new ColumnFormatContext(this, this._ctx, this.state);
		this.enterRule(localctx, 870, MySQLParser.RULE_columnFormat);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 7001;
			_la = this._input.LA(1);
			if(!(_la===125 || _la===149 || _la===478)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public storageMedia(): StorageMediaContext {
		let localctx: StorageMediaContext = new StorageMediaContext(this, this._ctx, this.state);
		this.enterRule(localctx, 872, MySQLParser.RULE_storageMedia);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 7003;
			_la = this._input.LA(1);
			if(!(_la===122 || _la===214 || _la===478)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public gcolAttribute(): GcolAttributeContext {
		let localctx: GcolAttributeContext = new GcolAttributeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 874, MySQLParser.RULE_gcolAttribute);
		let _la: number;
		try {
			this.state = 7019;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 660:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 7005;
				this.match(MySQLParser.UNIQUE_SYMBOL);
				this.state = 7007;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 899, this._ctx) ) {
				case 1:
					{
					this.state = 7006;
					this.match(MySQLParser.KEY_SYMBOL);
					}
					break;
				}
				}
				break;
			case 11:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 7009;
				this.match(MySQLParser.COMMENT_SYMBOL);
				this.state = 7010;
				this.textString();
				}
				break;
			case 378:
			case 573:
			case 576:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 7012;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===378 || _la===573) {
					{
					this.state = 7011;
					this.notRule();
					}
				}

				this.state = 7014;
				this.match(MySQLParser.NULL_SYMBOL);
				}
				break;
			case 537:
			case 593:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 7016;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===593) {
					{
					this.state = 7015;
					this.match(MySQLParser.PRIMARY_SYMBOL);
					}
				}

				this.state = 7018;
				this.match(MySQLParser.KEY_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public references(): ReferencesContext {
		let localctx: ReferencesContext = new ReferencesContext(this, this._ctx, this.state);
		this.enterRule(localctx, 876, MySQLParser.RULE_references);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 7021;
			this.match(MySQLParser.REFERENCES_SYMBOL);
			this.state = 7022;
			this.tableRef();
			this.state = 7024;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===409) {
				{
				this.state = 7023;
				this.identifierListWithParentheses();
				}
			}

			this.state = 7028;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===557) {
				{
				this.state = 7026;
				this.match(MySQLParser.MATCH_SYMBOL);
				this.state = 7027;
				localctx._match = this._input.LT(1);
				_la = this._input.LA(1);
				if(!(_la===144 || _la===248 || _la===309)) {
				    localctx._match = this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				}
			}

			this.state = 7046;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 907, this._ctx) ) {
			case 1:
				{
				this.state = 7030;
				this.match(MySQLParser.ON_SYMBOL);
				this.state = 7031;
				localctx._option = this.match(MySQLParser.UPDATE_SYMBOL);
				this.state = 7032;
				this.deleteOption();
				this.state = 7036;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===579) {
					{
					this.state = 7033;
					this.match(MySQLParser.ON_SYMBOL);
					this.state = 7034;
					this.match(MySQLParser.DELETE_SYMBOL);
					this.state = 7035;
					this.deleteOption();
					}
				}

				}
				break;
			case 2:
				{
				this.state = 7038;
				this.match(MySQLParser.ON_SYMBOL);
				this.state = 7039;
				localctx._option = this.match(MySQLParser.DELETE_SYMBOL);
				this.state = 7040;
				this.deleteOption();
				this.state = 7044;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===579) {
					{
					this.state = 7041;
					this.match(MySQLParser.ON_SYMBOL);
					this.state = 7042;
					this.match(MySQLParser.UPDATE_SYMBOL);
					this.state = 7043;
					this.deleteOption();
					}
				}

				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public deleteOption(): DeleteOptionContext {
		let localctx: DeleteOptionContext = new DeleteOptionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 878, MySQLParser.RULE_deleteOption);
		let _la: number;
		try {
			this.state = 7053;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 446:
			case 609:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 7048;
				_la = this._input.LA(1);
				if(!(_la===446 || _la===609)) {
				this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				}
				break;
			case 619:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 7049;
				this.match(MySQLParser.SET_SYMBOL);
				this.state = 7050;
				this.nullLiteral();
				}
				break;
			case 27:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 7051;
				this.match(MySQLParser.NO_SYMBOL);
				this.state = 7052;
				this.match(MySQLParser.ACTION_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public keyList(): KeyListContext {
		let localctx: KeyListContext = new KeyListContext(this, this._ctx, this.state);
		this.enterRule(localctx, 880, MySQLParser.RULE_keyList);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 7055;
			this.match(MySQLParser.OPEN_PAR_SYMBOL);
			this.state = 7056;
			this.keyPart();
			this.state = 7061;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===406) {
				{
				{
				this.state = 7057;
				this.match(MySQLParser.COMMA_SYMBOL);
				this.state = 7058;
				this.keyPart();
				}
				}
				this.state = 7063;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 7064;
			this.match(MySQLParser.CLOSE_PAR_SYMBOL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public keyPart(): KeyPartContext {
		let localctx: KeyPartContext = new KeyPartContext(this, this._ctx, this.state);
		this.enterRule(localctx, 882, MySQLParser.RULE_keyPart);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 7066;
			this.identifier();
			this.state = 7068;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===409) {
				{
				this.state = 7067;
				this.fieldLength();
				}
			}

			this.state = 7071;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===432 || _la===481) {
				{
				this.state = 7070;
				this.direction();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public keyListWithExpression(): KeyListWithExpressionContext {
		let localctx: KeyListWithExpressionContext = new KeyListWithExpressionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 884, MySQLParser.RULE_keyListWithExpression);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 7073;
			this.match(MySQLParser.OPEN_PAR_SYMBOL);
			this.state = 7074;
			this.keyPartOrExpression();
			this.state = 7079;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===406) {
				{
				{
				this.state = 7075;
				this.match(MySQLParser.COMMA_SYMBOL);
				this.state = 7076;
				this.keyPartOrExpression();
				}
				}
				this.state = 7081;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 7082;
			this.match(MySQLParser.CLOSE_PAR_SYMBOL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public keyPartOrExpression(): KeyPartOrExpressionContext {
		let localctx: KeyPartOrExpressionContext = new KeyPartOrExpressionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 886, MySQLParser.RULE_keyPartOrExpression);
		let _la: number;
		try {
			this.state = 7089;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 914, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 7084;
				this.keyPart();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 7085;
				this.exprWithParentheses();
				this.state = 7087;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===432 || _la===481) {
					{
					this.state = 7086;
					this.direction();
					}
				}

				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public keyListVariants(): KeyListVariantsContext {
		let localctx: KeyListVariantsContext = new KeyListVariantsContext(this, this._ctx, this.state);
		this.enterRule(localctx, 888, MySQLParser.RULE_keyListVariants);
		try {
			this.state = 7095;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 915, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 7091;
				if (!(this.serverVersion >= 80013)) {
					throw this.createFailedPredicateException("this.serverVersion >= 80013");
				}
				this.state = 7092;
				this.keyListWithExpression();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 7093;
				if (!(this.serverVersion < 80013)) {
					throw this.createFailedPredicateException("this.serverVersion < 80013");
				}
				this.state = 7094;
				this.keyList();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public indexType(): IndexTypeContext {
		let localctx: IndexTypeContext = new IndexTypeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 890, MySQLParser.RULE_indexType);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 7097;
			localctx._algorithm = this._input.LT(1);
			_la = this._input.LA(1);
			if(!(_la===76 || _la===156 || _la===302)) {
			    localctx._algorithm = this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public indexOption(): IndexOptionContext {
		let localctx: IndexOptionContext = new IndexOptionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 892, MySQLParser.RULE_indexOption);
		try {
			this.state = 7101;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 916, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 7099;
				this.commonIndexOption();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 7100;
				this.indexTypeClause();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public commonIndexOption(): CommonIndexOptionContext {
		let localctx: CommonIndexOptionContext = new CommonIndexOptionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 894, MySQLParser.RULE_commonIndexOption);
		let _la: number;
		try {
			this.state = 7112;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 918, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 7103;
				this.match(MySQLParser.KEY_BLOCK_SIZE_SYMBOL);
				this.state = 7105;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===383) {
					{
					this.state = 7104;
					this.match(MySQLParser.EQUAL_OPERATOR);
					}
				}

				this.state = 7107;
				this.ulong_number();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 7108;
				this.match(MySQLParser.COMMENT_SYMBOL);
				this.state = 7109;
				this.textLiteral();
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 7110;
				if (!(this.serverVersion >= 80000)) {
					throw this.createFailedPredicateException("this.serverVersion >= 80000");
				}
				this.state = 7111;
				this.visibility();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public visibility(): VisibilityContext {
		let localctx: VisibilityContext = new VisibilityContext(this, this._ctx, this.state);
		this.enterRule(localctx, 896, MySQLParser.RULE_visibility);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 7114;
			_la = this._input.LA(1);
			if(!(_la===691 || _la===692)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public indexTypeClause(): IndexTypeClauseContext {
		let localctx: IndexTypeClauseContext = new IndexTypeClauseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 898, MySQLParser.RULE_indexTypeClause);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 7116;
			_la = this._input.LA(1);
			if(!(_la===354 || _la===666)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			this.state = 7117;
			this.indexType();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public fulltextIndexOption(): FulltextIndexOptionContext {
		let localctx: FulltextIndexOptionContext = new FulltextIndexOptionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 900, MySQLParser.RULE_fulltextIndexOption);
		try {
			this.state = 7123;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 919, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 7119;
				this.commonIndexOption();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 7120;
				this.match(MySQLParser.WITH_SYMBOL);
				this.state = 7121;
				this.match(MySQLParser.PARSER_SYMBOL);
				this.state = 7122;
				this.identifier();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public spatialIndexOption(): SpatialIndexOptionContext {
		let localctx: SpatialIndexOptionContext = new SpatialIndexOptionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 902, MySQLParser.RULE_spatialIndexOption);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 7125;
			this.commonIndexOption();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public dataTypeDefinition(): DataTypeDefinitionContext {
		let localctx: DataTypeDefinitionContext = new DataTypeDefinitionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 904, MySQLParser.RULE_dataTypeDefinition);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 7127;
			this.dataType();
			this.state = 7128;
			this.match(MySQLParser.EOF);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public dataType(): DataTypeContext {
		let localctx: DataTypeContext = new DataTypeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 906, MySQLParser.RULE_dataType);
		let _la: number;
		try {
			this.state = 7277;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 953, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 7130;
				localctx._type_ = this._input.LT(1);
				_la = this._input.LA(1);
				if(!(_la===436 || _la===529 || _la===561 || _la===623 || _la===651)) {
				    localctx._type_ = this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				this.state = 7132;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 920, this._ctx) ) {
				case 1:
					{
					this.state = 7131;
					this.fieldLength();
					}
					break;
				}
				this.state = 7135;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 921, this._ctx) ) {
				case 1:
					{
					this.state = 7134;
					this.fieldOptions();
					}
					break;
				}
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 7142;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case 600:
					{
					this.state = 7137;
					localctx._type_ = this.match(MySQLParser.REAL_SYMBOL);
					}
					break;
				case 486:
					{
					this.state = 7138;
					localctx._type_ = this.match(MySQLParser.DOUBLE_SYMBOL);
					this.state = 7140;
					this._errHandler.sync(this);
					switch ( this._interp.adaptivePredict(this._input, 922, this._ctx) ) {
					case 1:
						{
						this.state = 7139;
						this.match(MySQLParser.PRECISION_SYMBOL);
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 7145;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 924, this._ctx) ) {
				case 1:
					{
					this.state = 7144;
					this.precision();
					}
					break;
				}
				this.state = 7148;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 925, this._ctx) ) {
				case 1:
					{
					this.state = 7147;
					this.fieldOptions();
					}
					break;
				}
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 7150;
				localctx._type_ = this._input.LT(1);
				_la = this._input.LA(1);
				if(!(_la===149 || _la===476 || _la===503 || _la===577)) {
				    localctx._type_ = this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				this.state = 7152;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 926, this._ctx) ) {
				case 1:
					{
					this.state = 7151;
					this.floatOptions();
					}
					break;
				}
				this.state = 7155;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 927, this._ctx) ) {
				case 1:
					{
					this.state = 7154;
					this.fieldOptions();
					}
					break;
				}
				}
				break;
			case 4:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 7157;
				localctx._type_ = this.match(MySQLParser.BIT_SYMBOL);
				this.state = 7159;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 928, this._ctx) ) {
				case 1:
					{
					this.state = 7158;
					this.fieldLength();
					}
					break;
				}
				}
				break;
			case 5:
				this.enterOuterAlt(localctx, 5);
				{
				this.state = 7161;
				localctx._type_ = this._input.LT(1);
				_la = this._input.LA(1);
				if(!(_la===74 || _la===75)) {
				    localctx._type_ = this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				}
				break;
			case 6:
				this.enterOuterAlt(localctx, 6);
				{
				this.state = 7162;
				localctx._type_ = this.match(MySQLParser.CHAR_SYMBOL);
				this.state = 7164;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 929, this._ctx) ) {
				case 1:
					{
					this.state = 7163;
					this.fieldLength();
					}
					break;
				}
				this.state = 7167;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 930, this._ctx) ) {
				case 1:
					{
					this.state = 7166;
					this.charsetWithOptBinary();
					}
					break;
				}
				}
				break;
			case 7:
				this.enterOuterAlt(localctx, 7);
				{
				this.state = 7169;
				this.nchar();
				this.state = 7171;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 931, this._ctx) ) {
				case 1:
					{
					this.state = 7170;
					this.fieldLength();
					}
					break;
				}
				this.state = 7174;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 932, this._ctx) ) {
				case 1:
					{
					this.state = 7173;
					this.match(MySQLParser.BINARY_SYMBOL);
					}
					break;
				}
				}
				break;
			case 8:
				this.enterOuterAlt(localctx, 8);
				{
				this.state = 7176;
				localctx._type_ = this.match(MySQLParser.BINARY_SYMBOL);
				this.state = 7178;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 933, this._ctx) ) {
				case 1:
					{
					this.state = 7177;
					this.fieldLength();
					}
					break;
				}
				}
				break;
			case 9:
				this.enterOuterAlt(localctx, 9);
				{
				this.state = 7183;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case 450:
					{
					this.state = 7180;
					localctx._type_ = this.match(MySQLParser.CHAR_SYMBOL);
					this.state = 7181;
					this.match(MySQLParser.VARYING_SYMBOL);
					}
					break;
				case 673:
					{
					this.state = 7182;
					localctx._type_ = this.match(MySQLParser.VARCHAR_SYMBOL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 7185;
				this.fieldLength();
				this.state = 7187;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 935, this._ctx) ) {
				case 1:
					{
					this.state = 7186;
					this.charsetWithOptBinary();
					}
					break;
				}
				}
				break;
			case 10:
				this.enterOuterAlt(localctx, 10);
				{
				this.state = 7199;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 936, this._ctx) ) {
				case 1:
					{
					this.state = 7189;
					localctx._type_ = this.match(MySQLParser.NATIONAL_SYMBOL);
					this.state = 7190;
					this.match(MySQLParser.VARCHAR_SYMBOL);
					}
					break;
				case 2:
					{
					this.state = 7191;
					localctx._type_ = this.match(MySQLParser.NVARCHAR_SYMBOL);
					}
					break;
				case 3:
					{
					this.state = 7192;
					localctx._type_ = this.match(MySQLParser.NCHAR_SYMBOL);
					this.state = 7193;
					this.match(MySQLParser.VARCHAR_SYMBOL);
					}
					break;
				case 4:
					{
					this.state = 7194;
					localctx._type_ = this.match(MySQLParser.NATIONAL_SYMBOL);
					this.state = 7195;
					this.match(MySQLParser.CHAR_SYMBOL);
					this.state = 7196;
					this.match(MySQLParser.VARYING_SYMBOL);
					}
					break;
				case 5:
					{
					this.state = 7197;
					localctx._type_ = this.match(MySQLParser.NCHAR_SYMBOL);
					this.state = 7198;
					this.match(MySQLParser.VARYING_SYMBOL);
					}
					break;
				}
				this.state = 7201;
				this.fieldLength();
				this.state = 7203;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 937, this._ctx) ) {
				case 1:
					{
					this.state = 7202;
					this.match(MySQLParser.BINARY_SYMBOL);
					}
					break;
				}
				}
				break;
			case 11:
				this.enterOuterAlt(localctx, 11);
				{
				this.state = 7205;
				localctx._type_ = this.match(MySQLParser.VARBINARY_SYMBOL);
				this.state = 7206;
				this.fieldLength();
				}
				break;
			case 12:
				this.enterOuterAlt(localctx, 12);
				{
				this.state = 7207;
				localctx._type_ = this.match(MySQLParser.YEAR_SYMBOL);
				this.state = 7209;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 938, this._ctx) ) {
				case 1:
					{
					this.state = 7208;
					this.fieldLength();
					}
					break;
				}
				this.state = 7212;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 939, this._ctx) ) {
				case 1:
					{
					this.state = 7211;
					this.fieldOptions();
					}
					break;
				}
				}
				break;
			case 13:
				this.enterOuterAlt(localctx, 13);
				{
				this.state = 7214;
				localctx._type_ = this.match(MySQLParser.DATE_SYMBOL);
				}
				break;
			case 14:
				this.enterOuterAlt(localctx, 14);
				{
				this.state = 7215;
				localctx._type_ = this.match(MySQLParser.TIME_SYMBOL);
				this.state = 7217;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 940, this._ctx) ) {
				case 1:
					{
					this.state = 7216;
					this.typeDatetimePrecision();
					}
					break;
				}
				}
				break;
			case 15:
				this.enterOuterAlt(localctx, 15);
				{
				this.state = 7219;
				localctx._type_ = this.match(MySQLParser.TIMESTAMP_SYMBOL);
				this.state = 7221;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 941, this._ctx) ) {
				case 1:
					{
					this.state = 7220;
					this.typeDatetimePrecision();
					}
					break;
				}
				}
				break;
			case 16:
				this.enterOuterAlt(localctx, 16);
				{
				this.state = 7223;
				localctx._type_ = this.match(MySQLParser.DATETIME_SYMBOL);
				this.state = 7225;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 942, this._ctx) ) {
				case 1:
					{
					this.state = 7224;
					this.typeDatetimePrecision();
					}
					break;
				}
				}
				break;
			case 17:
				this.enterOuterAlt(localctx, 17);
				{
				this.state = 7227;
				localctx._type_ = this.match(MySQLParser.TINYBLOB_SYMBOL);
				}
				break;
			case 18:
				this.enterOuterAlt(localctx, 18);
				{
				this.state = 7228;
				localctx._type_ = this.match(MySQLParser.BLOB_SYMBOL);
				this.state = 7230;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 943, this._ctx) ) {
				case 1:
					{
					this.state = 7229;
					this.fieldLength();
					}
					break;
				}
				}
				break;
			case 19:
				this.enterOuterAlt(localctx, 19);
				{
				this.state = 7232;
				localctx._type_ = this._input.LT(1);
				_la = this._input.LA(1);
				if(!(_la===549 || _la===560)) {
				    localctx._type_ = this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				}
				break;
			case 20:
				this.enterOuterAlt(localctx, 20);
				{
				this.state = 7233;
				localctx._type_ = this.match(MySQLParser.LONG_SYMBOL);
				this.state = 7234;
				this.match(MySQLParser.VARBINARY_SYMBOL);
				}
				break;
			case 21:
				this.enterOuterAlt(localctx, 21);
				{
				this.state = 7235;
				localctx._type_ = this.match(MySQLParser.LONG_SYMBOL);
				this.state = 7239;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 944, this._ctx) ) {
				case 1:
					{
					this.state = 7236;
					this.match(MySQLParser.CHAR_SYMBOL);
					this.state = 7237;
					this.match(MySQLParser.VARYING_SYMBOL);
					}
					break;
				case 2:
					{
					this.state = 7238;
					this.match(MySQLParser.VARCHAR_SYMBOL);
					}
					break;
				}
				this.state = 7242;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 945, this._ctx) ) {
				case 1:
					{
					this.state = 7241;
					this.charsetWithOptBinary();
					}
					break;
				}
				}
				break;
			case 22:
				this.enterOuterAlt(localctx, 22);
				{
				this.state = 7244;
				localctx._type_ = this.match(MySQLParser.TINYTEXT_SYMBOL);
				this.state = 7246;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 946, this._ctx) ) {
				case 1:
					{
					this.state = 7245;
					this.charsetWithOptBinary();
					}
					break;
				}
				}
				break;
			case 23:
				this.enterOuterAlt(localctx, 23);
				{
				this.state = 7248;
				localctx._type_ = this.match(MySQLParser.TEXT_SYMBOL);
				this.state = 7250;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 947, this._ctx) ) {
				case 1:
					{
					this.state = 7249;
					this.fieldLength();
					}
					break;
				}
				this.state = 7253;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 948, this._ctx) ) {
				case 1:
					{
					this.state = 7252;
					this.charsetWithOptBinary();
					}
					break;
				}
				}
				break;
			case 24:
				this.enterOuterAlt(localctx, 24);
				{
				this.state = 7255;
				localctx._type_ = this.match(MySQLParser.MEDIUMTEXT_SYMBOL);
				this.state = 7257;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 949, this._ctx) ) {
				case 1:
					{
					this.state = 7256;
					this.charsetWithOptBinary();
					}
					break;
				}
				}
				break;
			case 25:
				this.enterOuterAlt(localctx, 25);
				{
				this.state = 7259;
				localctx._type_ = this.match(MySQLParser.LONGTEXT_SYMBOL);
				this.state = 7261;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 950, this._ctx) ) {
				case 1:
					{
					this.state = 7260;
					this.charsetWithOptBinary();
					}
					break;
				}
				}
				break;
			case 26:
				this.enterOuterAlt(localctx, 26);
				{
				this.state = 7263;
				localctx._type_ = this.match(MySQLParser.ENUM_SYMBOL);
				this.state = 7264;
				this.stringList();
				this.state = 7266;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 951, this._ctx) ) {
				case 1:
					{
					this.state = 7265;
					this.charsetWithOptBinary();
					}
					break;
				}
				}
				break;
			case 27:
				this.enterOuterAlt(localctx, 27);
				{
				this.state = 7268;
				localctx._type_ = this.match(MySQLParser.SET_SYMBOL);
				this.state = 7269;
				this.stringList();
				this.state = 7271;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 952, this._ctx) ) {
				case 1:
					{
					this.state = 7270;
					this.charsetWithOptBinary();
					}
					break;
				}
				}
				break;
			case 28:
				this.enterOuterAlt(localctx, 28);
				{
				this.state = 7273;
				localctx._type_ = this.match(MySQLParser.SERIAL_SYMBOL);
				}
				break;
			case 29:
				this.enterOuterAlt(localctx, 29);
				{
				this.state = 7274;
				if (!(this.serverVersion >= 50708)) {
					throw this.createFailedPredicateException("this.serverVersion >= 50708");
				}
				this.state = 7275;
				localctx._type_ = this.match(MySQLParser.JSON_SYMBOL);
				}
				break;
			case 30:
				this.enterOuterAlt(localctx, 30);
				{
				this.state = 7276;
				localctx._type_ = this._input.LT(1);
				_la = this._input.LA(1);
				if(!(((((_la - 151)) & ~0x1F) === 0 && ((1 << (_la - 151)) & 134217731) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & 7) !== 0) || _la===256 || _la===257)) {
				    localctx._type_ = this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public nchar(): NcharContext {
		let localctx: NcharContext = new NcharContext(this, this._ctx, this.state);
		this.enterRule(localctx, 908, MySQLParser.RULE_nchar);
		try {
			this.state = 7282;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 232:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 7279;
				localctx._type_ = this.match(MySQLParser.NCHAR_SYMBOL);
				}
				break;
			case 231:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 7280;
				localctx._type_ = this.match(MySQLParser.NATIONAL_SYMBOL);
				this.state = 7281;
				this.match(MySQLParser.CHAR_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public realType(): RealTypeContext {
		let localctx: RealTypeContext = new RealTypeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 910, MySQLParser.RULE_realType);
		try {
			this.state = 7289;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 600:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 7284;
				localctx._type_ = this.match(MySQLParser.REAL_SYMBOL);
				}
				break;
			case 486:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 7285;
				localctx._type_ = this.match(MySQLParser.DOUBLE_SYMBOL);
				this.state = 7287;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 955, this._ctx) ) {
				case 1:
					{
					this.state = 7286;
					this.match(MySQLParser.PRECISION_SYMBOL);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public fieldLength(): FieldLengthContext {
		let localctx: FieldLengthContext = new FieldLengthContext(this, this._ctx, this.state);
		this.enterRule(localctx, 912, MySQLParser.RULE_fieldLength);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 7291;
			this.match(MySQLParser.OPEN_PAR_SYMBOL);
			this.state = 7294;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 957, this._ctx) ) {
			case 1:
				{
				this.state = 7292;
				this.real_ulonglong_number();
				}
				break;
			case 2:
				{
				this.state = 7293;
				this.match(MySQLParser.DECIMAL_NUMBER);
				}
				break;
			}
			this.state = 7296;
			this.match(MySQLParser.CLOSE_PAR_SYMBOL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public fieldOptions(): FieldOptionsContext {
		let localctx: FieldOptionsContext = new FieldOptionsContext(this, this._ctx, this.state);
		this.enterRule(localctx, 914, MySQLParser.RULE_fieldOptions);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 7299;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 7298;
					_la = this._input.LA(1);
					if(!(_la===44 || _la===662 || _la===687)) {
					this._errHandler.recoverInline(this);
					}
					else {
						this._errHandler.reportMatch(this);
					    this.consume();
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 7301;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 958, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public charsetWithOptBinary(): CharsetWithOptBinaryContext {
		let localctx: CharsetWithOptBinaryContext = new CharsetWithOptBinaryContext(this, this._ctx, this.state);
		this.enterRule(localctx, 916, MySQLParser.RULE_charsetWithOptBinary);
		try {
			this.state = 7317;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 961, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 7303;
				this.ascii();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 7304;
				this.unicode();
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 7305;
				this.match(MySQLParser.BYTE_SYMBOL);
				}
				break;
			case 4:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 7306;
				this.charset();
				this.state = 7307;
				this.charsetName();
				this.state = 7309;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 959, this._ctx) ) {
				case 1:
					{
					this.state = 7308;
					this.match(MySQLParser.BINARY_SYMBOL);
					}
					break;
				}
				}
				break;
			case 5:
				this.enterOuterAlt(localctx, 5);
				{
				this.state = 7311;
				this.match(MySQLParser.BINARY_SYMBOL);
				this.state = 7315;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 960, this._ctx) ) {
				case 1:
					{
					this.state = 7312;
					this.charset();
					this.state = 7313;
					this.charsetName();
					}
					break;
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public ascii(): AsciiContext {
		let localctx: AsciiContext = new AsciiContext(this, this._ctx, this.state);
		this.enterRule(localctx, 918, MySQLParser.RULE_ascii);
		try {
			this.state = 7325;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 2:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 7319;
				this.match(MySQLParser.ASCII_SYMBOL);
				this.state = 7321;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 962, this._ctx) ) {
				case 1:
					{
					this.state = 7320;
					this.match(MySQLParser.BINARY_SYMBOL);
					}
					break;
				}
				}
				break;
			case 437:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 7323;
				this.match(MySQLParser.BINARY_SYMBOL);
				this.state = 7324;
				this.match(MySQLParser.ASCII_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public unicode(): UnicodeContext {
		let localctx: UnicodeContext = new UnicodeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 920, MySQLParser.RULE_unicode);
		try {
			this.state = 7333;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 51:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 7327;
				this.match(MySQLParser.UNICODE_SYMBOL);
				this.state = 7329;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 964, this._ctx) ) {
				case 1:
					{
					this.state = 7328;
					this.match(MySQLParser.BINARY_SYMBOL);
					}
					break;
				}
				}
				break;
			case 437:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 7331;
				this.match(MySQLParser.BINARY_SYMBOL);
				this.state = 7332;
				this.match(MySQLParser.UNICODE_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public wsNumCodepoints(): WsNumCodepointsContext {
		let localctx: WsNumCodepointsContext = new WsNumCodepointsContext(this, this._ctx, this.state);
		this.enterRule(localctx, 922, MySQLParser.RULE_wsNumCodepoints);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 7335;
			this.match(MySQLParser.OPEN_PAR_SYMBOL);
			this.state = 7336;
			this.real_ulong_number();
			this.state = 7337;
			this.match(MySQLParser.CLOSE_PAR_SYMBOL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public typeDatetimePrecision(): TypeDatetimePrecisionContext {
		let localctx: TypeDatetimePrecisionContext = new TypeDatetimePrecisionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 924, MySQLParser.RULE_typeDatetimePrecision);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 7339;
			this.match(MySQLParser.OPEN_PAR_SYMBOL);
			this.state = 7340;
			this.match(MySQLParser.INT_NUMBER);
			this.state = 7341;
			this.match(MySQLParser.CLOSE_PAR_SYMBOL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public charsetName(): CharsetNameContext {
		let localctx: CharsetNameContext = new CharsetNameContext(this, this._ctx, this.state);
		this.enterRule(localctx, 926, MySQLParser.RULE_charsetName);
		try {
			this.state = 7347;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 966, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 7343;
				this.textOrIdentifier();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 7344;
				this.match(MySQLParser.BINARY_SYMBOL);
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 7345;
				if (!(this.serverVersion < 80011)) {
					throw this.createFailedPredicateException("this.serverVersion < 80011");
				}
				this.state = 7346;
				this.match(MySQLParser.DEFAULT_SYMBOL);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public collationName(): CollationNameContext {
		let localctx: CollationNameContext = new CollationNameContext(this, this._ctx, this.state);
		this.enterRule(localctx, 928, MySQLParser.RULE_collationName);
		try {
			this.state = 7354;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 967, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 7349;
				this.textOrIdentifier();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 7350;
				if (!(this.serverVersion < 80011)) {
					throw this.createFailedPredicateException("this.serverVersion < 80011");
				}
				this.state = 7351;
				this.match(MySQLParser.DEFAULT_SYMBOL);
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 7352;
				if (!(this.serverVersion >= 80018)) {
					throw this.createFailedPredicateException("this.serverVersion >= 80018");
				}
				this.state = 7353;
				this.match(MySQLParser.BINARY_SYMBOL);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public createTableOptions(): CreateTableOptionsContext {
		let localctx: CreateTableOptionsContext = new CreateTableOptionsContext(this, this._ctx, this.state);
		this.enterRule(localctx, 930, MySQLParser.RULE_createTableOptions);
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 7356;
			this.createTableOption();
			this.state = 7363;
			this._errHandler.sync(this);
			_alt = this._interp.adaptivePredict(this._input, 969, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 7358;
					this._errHandler.sync(this);
					switch ( this._interp.adaptivePredict(this._input, 968, this._ctx) ) {
					case 1:
						{
						this.state = 7357;
						this.match(MySQLParser.COMMA_SYMBOL);
						}
						break;
					}
					this.state = 7360;
					this.createTableOption();
					}
					}
				}
				this.state = 7365;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 969, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public createTableOptionsSpaceSeparated(): CreateTableOptionsSpaceSeparatedContext {
		let localctx: CreateTableOptionsSpaceSeparatedContext = new CreateTableOptionsSpaceSeparatedContext(this, this._ctx, this.state);
		this.enterRule(localctx, 932, MySQLParser.RULE_createTableOptionsSpaceSeparated);
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 7367;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 7366;
					this.createTableOption();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 7369;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 970, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public createTableOption(): CreateTableOptionContext {
		let localctx: CreateTableOptionContext = new CreateTableOptionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 934, MySQLParser.RULE_createTableOption);
		let _la: number;
		try {
			this.state = 7500;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 995, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 7371;
				localctx._option = this.match(MySQLParser.ENGINE_SYMBOL);
				this.state = 7373;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 971, this._ctx) ) {
				case 1:
					{
					this.state = 7372;
					this.match(MySQLParser.EQUAL_OPERATOR);
					}
					break;
				}
				this.state = 7375;
				this.engineRef();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 7376;
				if (!(this.serverVersion >= 80014)) {
					throw this.createFailedPredicateException("this.serverVersion >= 80014");
				}
				this.state = 7377;
				localctx._option = this.match(MySQLParser.SECONDARY_ENGINE_SYMBOL);
				this.state = 7379;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 972, this._ctx) ) {
				case 1:
					{
					this.state = 7378;
					this.equal();
					}
					break;
				}
				this.state = 7383;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 973, this._ctx) ) {
				case 1:
					{
					this.state = 7381;
					this.match(MySQLParser.NULL_SYMBOL);
					}
					break;
				case 2:
					{
					this.state = 7382;
					this.textOrIdentifier();
					}
					break;
				}
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 7385;
				localctx._option = this.match(MySQLParser.MAX_ROWS_SYMBOL);
				this.state = 7387;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===383) {
					{
					this.state = 7386;
					this.match(MySQLParser.EQUAL_OPERATOR);
					}
				}

				this.state = 7389;
				this.ulonglong_number();
				}
				break;
			case 4:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 7390;
				localctx._option = this.match(MySQLParser.MIN_ROWS_SYMBOL);
				this.state = 7392;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===383) {
					{
					this.state = 7391;
					this.match(MySQLParser.EQUAL_OPERATOR);
					}
				}

				this.state = 7394;
				this.ulonglong_number();
				}
				break;
			case 5:
				this.enterOuterAlt(localctx, 5);
				{
				this.state = 7395;
				localctx._option = this.match(MySQLParser.AVG_ROW_LENGTH_SYMBOL);
				this.state = 7397;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===383) {
					{
					this.state = 7396;
					this.match(MySQLParser.EQUAL_OPERATOR);
					}
				}

				this.state = 7399;
				this.ulong_number();
				}
				break;
			case 6:
				this.enterOuterAlt(localctx, 6);
				{
				this.state = 7400;
				localctx._option = this.match(MySQLParser.PASSWORD_SYMBOL);
				this.state = 7402;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 977, this._ctx) ) {
				case 1:
					{
					this.state = 7401;
					this.match(MySQLParser.EQUAL_OPERATOR);
					}
					break;
				}
				this.state = 7404;
				this.textStringLiteral();
				}
				break;
			case 7:
				this.enterOuterAlt(localctx, 7);
				{
				this.state = 7405;
				localctx._option = this.match(MySQLParser.COMMENT_SYMBOL);
				this.state = 7407;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 978, this._ctx) ) {
				case 1:
					{
					this.state = 7406;
					this.match(MySQLParser.EQUAL_OPERATOR);
					}
					break;
				}
				this.state = 7409;
				this.textStringLiteral();
				}
				break;
			case 8:
				this.enterOuterAlt(localctx, 8);
				{
				this.state = 7410;
				if (!(this.serverVersion >= 50708)) {
					throw this.createFailedPredicateException("this.serverVersion >= 50708");
				}
				this.state = 7411;
				localctx._option = this.match(MySQLParser.COMPRESSION_SYMBOL);
				this.state = 7413;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 979, this._ctx) ) {
				case 1:
					{
					this.state = 7412;
					this.match(MySQLParser.EQUAL_OPERATOR);
					}
					break;
				}
				this.state = 7415;
				this.textString();
				}
				break;
			case 9:
				this.enterOuterAlt(localctx, 9);
				{
				this.state = 7416;
				if (!(this.serverVersion >= 50711)) {
					throw this.createFailedPredicateException("this.serverVersion >= 50711");
				}
				this.state = 7417;
				localctx._option = this.match(MySQLParser.ENCRYPTION_SYMBOL);
				this.state = 7419;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 980, this._ctx) ) {
				case 1:
					{
					this.state = 7418;
					this.match(MySQLParser.EQUAL_OPERATOR);
					}
					break;
				}
				this.state = 7421;
				this.textString();
				}
				break;
			case 10:
				this.enterOuterAlt(localctx, 10);
				{
				this.state = 7422;
				localctx._option = this.match(MySQLParser.AUTO_INCREMENT_SYMBOL);
				this.state = 7424;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===383) {
					{
					this.state = 7423;
					this.match(MySQLParser.EQUAL_OPERATOR);
					}
				}

				this.state = 7426;
				this.ulonglong_number();
				}
				break;
			case 11:
				this.enterOuterAlt(localctx, 11);
				{
				this.state = 7427;
				localctx._option = this.match(MySQLParser.PACK_KEYS_SYMBOL);
				this.state = 7429;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===383) {
					{
					this.state = 7428;
					this.match(MySQLParser.EQUAL_OPERATOR);
					}
				}

				this.state = 7431;
				this.ternaryOption();
				}
				break;
			case 12:
				this.enterOuterAlt(localctx, 12);
				{
				this.state = 7432;
				localctx._option = this._input.LT(1);
				_la = this._input.LA(1);
				if(!(((((_la - 324)) & ~0x1F) === 0 && ((1 << (_la - 324)) & 7) !== 0))) {
				    localctx._option = this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				this.state = 7434;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===383) {
					{
					this.state = 7433;
					this.match(MySQLParser.EQUAL_OPERATOR);
					}
				}

				this.state = 7436;
				this.ternaryOption();
				}
				break;
			case 13:
				this.enterOuterAlt(localctx, 13);
				{
				this.state = 7437;
				localctx._option = this._input.LT(1);
				_la = this._input.LA(1);
				if(!(_la===9 || _la===341)) {
				    localctx._option = this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				this.state = 7439;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===383) {
					{
					this.state = 7438;
					this.match(MySQLParser.EQUAL_OPERATOR);
					}
				}

				this.state = 7441;
				this.ulong_number();
				}
				break;
			case 14:
				this.enterOuterAlt(localctx, 14);
				{
				this.state = 7442;
				localctx._option = this.match(MySQLParser.DELAY_KEY_WRITE_SYMBOL);
				this.state = 7444;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===383) {
					{
					this.state = 7443;
					this.match(MySQLParser.EQUAL_OPERATOR);
					}
				}

				this.state = 7446;
				this.ulong_number();
				}
				break;
			case 15:
				this.enterOuterAlt(localctx, 15);
				{
				this.state = 7447;
				localctx._option = this.match(MySQLParser.ROW_FORMAT_SYMBOL);
				this.state = 7449;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===383) {
					{
					this.state = 7448;
					this.match(MySQLParser.EQUAL_OPERATOR);
					}
				}

				this.state = 7451;
				localctx._format = this._input.LT(1);
				_la = this._input.LA(1);
				if(!(_la===92 || _la===94 || _la===125 || _la===149 || _la===274 || _la===478)) {
				    localctx._format = this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				}
				break;
			case 16:
				this.enterOuterAlt(localctx, 16);
				{
				this.state = 7452;
				localctx._option = this.match(MySQLParser.UNION_SYMBOL);
				this.state = 7454;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===383) {
					{
					this.state = 7453;
					this.match(MySQLParser.EQUAL_OPERATOR);
					}
				}

				this.state = 7456;
				this.match(MySQLParser.OPEN_PAR_SYMBOL);
				this.state = 7457;
				this.tableRefList();
				this.state = 7458;
				this.match(MySQLParser.CLOSE_PAR_SYMBOL);
				}
				break;
			case 17:
				this.enterOuterAlt(localctx, 17);
				{
				this.state = 7460;
				this.defaultCharset();
				}
				break;
			case 18:
				this.enterOuterAlt(localctx, 18);
				{
				this.state = 7461;
				this.defaultCollation();
				}
				break;
			case 19:
				this.enterOuterAlt(localctx, 19);
				{
				this.state = 7462;
				localctx._option = this.match(MySQLParser.INSERT_METHOD_SYMBOL);
				this.state = 7464;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===383) {
					{
					this.state = 7463;
					this.match(MySQLParser.EQUAL_OPERATOR);
					}
				}

				this.state = 7466;
				localctx._method = this._input.LT(1);
				_la = this._input.LA(1);
				if(!(_la===27 || _la===148 || _la===174)) {
				    localctx._method = this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				}
				break;
			case 20:
				this.enterOuterAlt(localctx, 20);
				{
				this.state = 7467;
				localctx._option = this.match(MySQLParser.DATA_SYMBOL);
				this.state = 7468;
				this.match(MySQLParser.DIRECTORY_SYMBOL);
				this.state = 7470;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 989, this._ctx) ) {
				case 1:
					{
					this.state = 7469;
					this.match(MySQLParser.EQUAL_OPERATOR);
					}
					break;
				}
				this.state = 7472;
				this.textString();
				}
				break;
			case 21:
				this.enterOuterAlt(localctx, 21);
				{
				this.state = 7473;
				localctx._option = this.match(MySQLParser.INDEX_SYMBOL);
				this.state = 7474;
				this.match(MySQLParser.DIRECTORY_SYMBOL);
				this.state = 7476;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 990, this._ctx) ) {
				case 1:
					{
					this.state = 7475;
					this.match(MySQLParser.EQUAL_OPERATOR);
					}
					break;
				}
				this.state = 7478;
				this.textString();
				}
				break;
			case 22:
				this.enterOuterAlt(localctx, 22);
				{
				this.state = 7479;
				localctx._option = this.match(MySQLParser.TABLESPACE_SYMBOL);
				this.state = 7485;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 992, this._ctx) ) {
				case 1:
					{
					this.state = 7480;
					if (!(this.serverVersion >= 50707)) {
						throw this.createFailedPredicateException("this.serverVersion >= 50707");
					}
					this.state = 7482;
					this._errHandler.sync(this);
					switch ( this._interp.adaptivePredict(this._input, 991, this._ctx) ) {
					case 1:
						{
						this.state = 7481;
						this.match(MySQLParser.EQUAL_OPERATOR);
						}
						break;
					}
					}
					break;
				case 2:
					// tslint:disable-next-line:no-empty
					{
					}
					break;
				}
				this.state = 7487;
				this.identifier();
				}
				break;
			case 23:
				this.enterOuterAlt(localctx, 23);
				{
				this.state = 7488;
				localctx._option = this.match(MySQLParser.STORAGE_SYMBOL);
				this.state = 7489;
				_la = this._input.LA(1);
				if(!(_la===122 || _la===214)) {
				this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				}
				break;
			case 24:
				this.enterOuterAlt(localctx, 24);
				{
				this.state = 7490;
				localctx._option = this.match(MySQLParser.CONNECTION_SYMBOL);
				this.state = 7492;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 993, this._ctx) ) {
				case 1:
					{
					this.state = 7491;
					this.match(MySQLParser.EQUAL_OPERATOR);
					}
					break;
				}
				this.state = 7494;
				this.textString();
				}
				break;
			case 25:
				this.enterOuterAlt(localctx, 25);
				{
				this.state = 7495;
				localctx._option = this.match(MySQLParser.KEY_BLOCK_SIZE_SYMBOL);
				this.state = 7497;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===383) {
					{
					this.state = 7496;
					this.match(MySQLParser.EQUAL_OPERATOR);
					}
				}

				this.state = 7499;
				this.ulong_number();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public ternaryOption(): TernaryOptionContext {
		let localctx: TernaryOptionContext = new TernaryOptionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 936, MySQLParser.RULE_ternaryOption);
		try {
			this.state = 7504;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 380:
			case 381:
			case 382:
			case 421:
			case 423:
			case 424:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 7502;
				this.ulong_number();
				}
				break;
			case 478:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 7503;
				this.match(MySQLParser.DEFAULT_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public defaultCollation(): DefaultCollationContext {
		let localctx: DefaultCollationContext = new DefaultCollationContext(this, this._ctx, this.state);
		this.enterRule(localctx, 938, MySQLParser.RULE_defaultCollation);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 7507;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===478) {
				{
				this.state = 7506;
				this.match(MySQLParser.DEFAULT_SYMBOL);
				}
			}

			this.state = 7509;
			this.match(MySQLParser.COLLATE_SYMBOL);
			this.state = 7511;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 998, this._ctx) ) {
			case 1:
				{
				this.state = 7510;
				this.match(MySQLParser.EQUAL_OPERATOR);
				}
				break;
			}
			this.state = 7513;
			this.collationName();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public defaultEncryption(): DefaultEncryptionContext {
		let localctx: DefaultEncryptionContext = new DefaultEncryptionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 940, MySQLParser.RULE_defaultEncryption);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 7516;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===478) {
				{
				this.state = 7515;
				this.match(MySQLParser.DEFAULT_SYMBOL);
				}
			}

			this.state = 7518;
			this.match(MySQLParser.ENCRYPTION_SYMBOL);
			this.state = 7520;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 1000, this._ctx) ) {
			case 1:
				{
				this.state = 7519;
				this.match(MySQLParser.EQUAL_OPERATOR);
				}
				break;
			}
			this.state = 7522;
			this.textStringLiteral();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public defaultCharset(): DefaultCharsetContext {
		let localctx: DefaultCharsetContext = new DefaultCharsetContext(this, this._ctx, this.state);
		this.enterRule(localctx, 942, MySQLParser.RULE_defaultCharset);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 7525;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===478) {
				{
				this.state = 7524;
				this.match(MySQLParser.DEFAULT_SYMBOL);
				}
			}

			this.state = 7527;
			this.charset();
			this.state = 7529;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 1002, this._ctx) ) {
			case 1:
				{
				this.state = 7528;
				this.match(MySQLParser.EQUAL_OPERATOR);
				}
				break;
			}
			this.state = 7531;
			this.charsetName();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public partitionClause(): PartitionClauseContext {
		let localctx: PartitionClauseContext = new PartitionClauseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 944, MySQLParser.RULE_partitionClause);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 7533;
			this.match(MySQLParser.PARTITION_SYMBOL);
			this.state = 7534;
			this.match(MySQLParser.BY_SYMBOL);
			this.state = 7535;
			this.partitionTypeDef();
			this.state = 7538;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 1003, this._ctx) ) {
			case 1:
				{
				this.state = 7536;
				this.match(MySQLParser.PARTITIONS_SYMBOL);
				this.state = 7537;
				this.real_ulong_number();
				}
				break;
			}
			this.state = 7541;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 1004, this._ctx) ) {
			case 1:
				{
				this.state = 7540;
				this.subPartitions();
				}
				break;
			}
			this.state = 7544;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 1005, this._ctx) ) {
			case 1:
				{
				this.state = 7543;
				this.partitionDefinitions();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public partitionTypeDef(): PartitionTypeDefContext {
		let localctx: PartitionTypeDefContext = new PartitionTypeDefContext(this, this._ctx, this.state);
		this.enterRule(localctx, 946, MySQLParser.RULE_partitionTypeDef);
		let _la: number;
		try {
			this.state = 7579;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 1012, this._ctx) ) {
			case 1:
				localctx = new PartitionDefKeyContext(this, localctx);
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 7547;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===544) {
					{
					this.state = 7546;
					this.match(MySQLParser.LINEAR_SYMBOL);
					}
				}

				this.state = 7549;
				this.match(MySQLParser.KEY_SYMBOL);
				this.state = 7551;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 1007, this._ctx) ) {
				case 1:
					{
					this.state = 7550;
					this.partitionKeyAlgorithm();
					}
					break;
				}
				this.state = 7553;
				this.match(MySQLParser.OPEN_PAR_SYMBOL);
				this.state = 7555;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 1008, this._ctx) ) {
				case 1:
					{
					this.state = 7554;
					this.identifierList();
					}
					break;
				}
				this.state = 7557;
				this.match(MySQLParser.CLOSE_PAR_SYMBOL);
				}
				break;
			case 2:
				localctx = new PartitionDefHashContext(this, localctx);
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 7559;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===544) {
					{
					this.state = 7558;
					this.match(MySQLParser.LINEAR_SYMBOL);
					}
				}

				this.state = 7561;
				this.match(MySQLParser.HASH_SYMBOL);
				this.state = 7562;
				this.match(MySQLParser.OPEN_PAR_SYMBOL);
				this.state = 7563;
				this.bitExpr(0);
				this.state = 7564;
				this.match(MySQLParser.CLOSE_PAR_SYMBOL);
				}
				break;
			case 3:
				localctx = new PartitionDefRangeListContext(this, localctx);
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 7566;
				_la = this._input.LA(1);
				if(!(_la===179 || _la===596)) {
				this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				this.state = 7577;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case 409:
					{
					this.state = 7567;
					this.match(MySQLParser.OPEN_PAR_SYMBOL);
					this.state = 7568;
					this.bitExpr(0);
					this.state = 7569;
					this.match(MySQLParser.CLOSE_PAR_SYMBOL);
					}
					break;
				case 90:
					{
					this.state = 7571;
					this.match(MySQLParser.COLUMNS_SYMBOL);
					this.state = 7572;
					this.match(MySQLParser.OPEN_PAR_SYMBOL);
					this.state = 7574;
					this._errHandler.sync(this);
					switch ( this._interp.adaptivePredict(this._input, 1010, this._ctx) ) {
					case 1:
						{
						this.state = 7573;
						this.identifierList();
						}
						break;
					}
					this.state = 7576;
					this.match(MySQLParser.CLOSE_PAR_SYMBOL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public subPartitions(): SubPartitionsContext {
		let localctx: SubPartitionsContext = new SubPartitionsContext(this, this._ctx, this.state);
		this.enterRule(localctx, 948, MySQLParser.RULE_subPartitions);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 7581;
			this.match(MySQLParser.SUBPARTITION_SYMBOL);
			this.state = 7582;
			this.match(MySQLParser.BY_SYMBOL);
			this.state = 7584;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===544) {
				{
				this.state = 7583;
				this.match(MySQLParser.LINEAR_SYMBOL);
				}
			}

			this.state = 7596;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 156:
				{
				this.state = 7586;
				this.match(MySQLParser.HASH_SYMBOL);
				this.state = 7587;
				this.match(MySQLParser.OPEN_PAR_SYMBOL);
				this.state = 7588;
				this.bitExpr(0);
				this.state = 7589;
				this.match(MySQLParser.CLOSE_PAR_SYMBOL);
				}
				break;
			case 537:
				{
				this.state = 7591;
				this.match(MySQLParser.KEY_SYMBOL);
				this.state = 7593;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 1014, this._ctx) ) {
				case 1:
					{
					this.state = 7592;
					this.partitionKeyAlgorithm();
					}
					break;
				}
				this.state = 7595;
				this.identifierListWithParentheses();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 7600;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 1016, this._ctx) ) {
			case 1:
				{
				this.state = 7598;
				this.match(MySQLParser.SUBPARTITIONS_SYMBOL);
				this.state = 7599;
				this.real_ulong_number();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public partitionKeyAlgorithm(): PartitionKeyAlgorithmContext {
		let localctx: PartitionKeyAlgorithmContext = new PartitionKeyAlgorithmContext(this, this._ctx, this.state);
		this.enterRule(localctx, 950, MySQLParser.RULE_partitionKeyAlgorithm);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 7602;
			if (!(this.serverVersion >= 50700)) {
				throw this.createFailedPredicateException("this.serverVersion >= 50700");
			}
			this.state = 7603;
			this.match(MySQLParser.ALGORITHM_SYMBOL);
			this.state = 7604;
			this.match(MySQLParser.EQUAL_OPERATOR);
			this.state = 7605;
			this.real_ulong_number();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public partitionDefinitions(): PartitionDefinitionsContext {
		let localctx: PartitionDefinitionsContext = new PartitionDefinitionsContext(this, this._ctx, this.state);
		this.enterRule(localctx, 952, MySQLParser.RULE_partitionDefinitions);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 7607;
			this.match(MySQLParser.OPEN_PAR_SYMBOL);
			this.state = 7608;
			this.partitionDefinition();
			this.state = 7613;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===406) {
				{
				{
				this.state = 7609;
				this.match(MySQLParser.COMMA_SYMBOL);
				this.state = 7610;
				this.partitionDefinition();
				}
				}
				this.state = 7615;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 7616;
			this.match(MySQLParser.CLOSE_PAR_SYMBOL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public partitionDefinition(): PartitionDefinitionContext {
		let localctx: PartitionDefinitionContext = new PartitionDefinitionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 954, MySQLParser.RULE_partitionDefinition);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 7618;
			this.match(MySQLParser.PARTITION_SYMBOL);
			this.state = 7619;
			this.identifier();
			this.state = 7630;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 1019, this._ctx) ) {
			case 1:
				{
				this.state = 7620;
				this.match(MySQLParser.VALUES_SYMBOL);
				this.state = 7621;
				this.match(MySQLParser.LESS_SYMBOL);
				this.state = 7622;
				this.match(MySQLParser.THAN_SYMBOL);
				this.state = 7625;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case 409:
					{
					this.state = 7623;
					this.partitionValueItemListParen();
					}
					break;
				case 559:
					{
					this.state = 7624;
					this.match(MySQLParser.MAXVALUE_SYMBOL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				{
				this.state = 7627;
				this.match(MySQLParser.VALUES_SYMBOL);
				this.state = 7628;
				this.match(MySQLParser.IN_SYMBOL);
				this.state = 7629;
				this.partitionValuesIn();
				}
				break;
			}
			this.state = 7635;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===11 || _la===109 || _la===128 || _la===184 || _la===220 || _la===238 || _la===328 || _la===342 || _la===521) {
				{
				{
				this.state = 7632;
				this.partitionOption();
				}
				}
				this.state = 7637;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 7649;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===409) {
				{
				this.state = 7638;
				this.match(MySQLParser.OPEN_PAR_SYMBOL);
				this.state = 7639;
				this.subpartitionDefinition();
				this.state = 7644;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la===406) {
					{
					{
					this.state = 7640;
					this.match(MySQLParser.COMMA_SYMBOL);
					this.state = 7641;
					this.subpartitionDefinition();
					}
					}
					this.state = 7646;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 7647;
				this.match(MySQLParser.CLOSE_PAR_SYMBOL);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public partitionValuesIn(): PartitionValuesInContext {
		let localctx: PartitionValuesInContext = new PartitionValuesInContext(this, this._ctx, this.state);
		this.enterRule(localctx, 956, MySQLParser.RULE_partitionValuesIn);
		let _la: number;
		try {
			this.state = 7663;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 1024, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 7651;
				this.partitionValueItemListParen();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 7652;
				this.match(MySQLParser.OPEN_PAR_SYMBOL);
				this.state = 7653;
				this.partitionValueItemListParen();
				this.state = 7658;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la===406) {
					{
					{
					this.state = 7654;
					this.match(MySQLParser.COMMA_SYMBOL);
					this.state = 7655;
					this.partitionValueItemListParen();
					}
					}
					this.state = 7660;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 7661;
				this.match(MySQLParser.CLOSE_PAR_SYMBOL);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public partitionOption(): PartitionOptionContext {
		let localctx: PartitionOptionContext = new PartitionOptionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 958, MySQLParser.RULE_partitionOption);
		let _la: number;
		try {
			this.state = 7699;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 342:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 7665;
				localctx._option = this.match(MySQLParser.TABLESPACE_SYMBOL);
				this.state = 7667;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 1025, this._ctx) ) {
				case 1:
					{
					this.state = 7666;
					this.match(MySQLParser.EQUAL_OPERATOR);
					}
					break;
				}
				this.state = 7669;
				this.identifier();
				}
				break;
			case 128:
			case 328:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 7671;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===328) {
					{
					this.state = 7670;
					this.match(MySQLParser.STORAGE_SYMBOL);
					}
				}

				this.state = 7673;
				localctx._option = this.match(MySQLParser.ENGINE_SYMBOL);
				this.state = 7675;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 1027, this._ctx) ) {
				case 1:
					{
					this.state = 7674;
					this.match(MySQLParser.EQUAL_OPERATOR);
					}
					break;
				}
				this.state = 7677;
				this.engineRef();
				}
				break;
			case 238:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 7678;
				localctx._option = this.match(MySQLParser.NODEGROUP_SYMBOL);
				this.state = 7680;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===383) {
					{
					this.state = 7679;
					this.match(MySQLParser.EQUAL_OPERATOR);
					}
				}

				this.state = 7682;
				this.real_ulong_number();
				}
				break;
			case 184:
			case 220:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 7683;
				localctx._option = this._input.LT(1);
				_la = this._input.LA(1);
				if(!(_la===184 || _la===220)) {
				    localctx._option = this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				this.state = 7685;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===383) {
					{
					this.state = 7684;
					this.match(MySQLParser.EQUAL_OPERATOR);
					}
				}

				this.state = 7687;
				this.real_ulong_number();
				}
				break;
			case 109:
			case 521:
				this.enterOuterAlt(localctx, 5);
				{
				this.state = 7688;
				localctx._option = this._input.LT(1);
				_la = this._input.LA(1);
				if(!(_la===109 || _la===521)) {
				    localctx._option = this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				this.state = 7689;
				this.match(MySQLParser.DIRECTORY_SYMBOL);
				this.state = 7691;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 1030, this._ctx) ) {
				case 1:
					{
					this.state = 7690;
					this.match(MySQLParser.EQUAL_OPERATOR);
					}
					break;
				}
				this.state = 7693;
				this.textLiteral();
				}
				break;
			case 11:
				this.enterOuterAlt(localctx, 6);
				{
				this.state = 7694;
				localctx._option = this.match(MySQLParser.COMMENT_SYMBOL);
				this.state = 7696;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 1031, this._ctx) ) {
				case 1:
					{
					this.state = 7695;
					this.match(MySQLParser.EQUAL_OPERATOR);
					}
					break;
				}
				this.state = 7698;
				this.textLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public subpartitionDefinition(): SubpartitionDefinitionContext {
		let localctx: SubpartitionDefinitionContext = new SubpartitionDefinitionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 960, MySQLParser.RULE_subpartitionDefinition);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 7701;
			this.match(MySQLParser.SUBPARTITION_SYMBOL);
			this.state = 7702;
			this.textOrIdentifier();
			this.state = 7706;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===11 || _la===109 || _la===128 || _la===184 || _la===220 || _la===238 || _la===328 || _la===342 || _la===521) {
				{
				{
				this.state = 7703;
				this.partitionOption();
				}
				}
				this.state = 7708;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public partitionValueItemListParen(): PartitionValueItemListParenContext {
		let localctx: PartitionValueItemListParenContext = new PartitionValueItemListParenContext(this, this._ctx, this.state);
		this.enterRule(localctx, 962, MySQLParser.RULE_partitionValueItemListParen);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 7709;
			this.match(MySQLParser.OPEN_PAR_SYMBOL);
			this.state = 7710;
			this.partitionValueItem();
			this.state = 7715;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===406) {
				{
				{
				this.state = 7711;
				this.match(MySQLParser.COMMA_SYMBOL);
				this.state = 7712;
				this.partitionValueItem();
				}
				}
				this.state = 7717;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 7718;
			this.match(MySQLParser.CLOSE_PAR_SYMBOL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public partitionValueItem(): PartitionValueItemContext {
		let localctx: PartitionValueItemContext = new PartitionValueItemContext(this, this._ctx, this.state);
		this.enterRule(localctx, 964, MySQLParser.RULE_partitionValueItem);
		try {
			this.state = 7722;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 1035, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 7720;
				this.bitExpr(0);
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 7721;
				this.match(MySQLParser.MAXVALUE_SYMBOL);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public definerClause(): DefinerClauseContext {
		let localctx: DefinerClauseContext = new DefinerClauseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 966, MySQLParser.RULE_definerClause);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 7724;
			this.match(MySQLParser.DEFINER_SYMBOL);
			this.state = 7725;
			this.match(MySQLParser.EQUAL_OPERATOR);
			this.state = 7726;
			this.user();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public ifExists(): IfExistsContext {
		let localctx: IfExistsContext = new IfExistsContext(this, this._ctx, this.state);
		this.enterRule(localctx, 968, MySQLParser.RULE_ifExists);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 7728;
			this.match(MySQLParser.IF_SYMBOL);
			this.state = 7729;
			this.match(MySQLParser.EXISTS_SYMBOL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public ifNotExists(): IfNotExistsContext {
		let localctx: IfNotExistsContext = new IfNotExistsContext(this, this._ctx, this.state);
		this.enterRule(localctx, 970, MySQLParser.RULE_ifNotExists);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 7731;
			this.match(MySQLParser.IF_SYMBOL);
			this.state = 7732;
			this.notRule();
			this.state = 7733;
			this.match(MySQLParser.EXISTS_SYMBOL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public procedureParameter(): ProcedureParameterContext {
		let localctx: ProcedureParameterContext = new ProcedureParameterContext(this, this._ctx, this.state);
		this.enterRule(localctx, 972, MySQLParser.RULE_procedureParameter);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 7736;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 1036, this._ctx) ) {
			case 1:
				{
				this.state = 7735;
				localctx._type_ = this._input.LT(1);
				_la = this._input.LA(1);
				if(!(_la===524 || _la===530 || _la===590)) {
				    localctx._type_ = this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				}
				break;
			}
			this.state = 7738;
			this.functionParameter();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public functionParameter(): FunctionParameterContext {
		let localctx: FunctionParameterContext = new FunctionParameterContext(this, this._ctx, this.state);
		this.enterRule(localctx, 974, MySQLParser.RULE_functionParameter);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 7740;
			this.parameterName();
			this.state = 7741;
			this.typeWithOptCollate();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public collate(): CollateContext {
		let localctx: CollateContext = new CollateContext(this, this._ctx, this.state);
		this.enterRule(localctx, 976, MySQLParser.RULE_collate);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 7743;
			this.match(MySQLParser.COLLATE_SYMBOL);
			this.state = 7744;
			this.collationName();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public typeWithOptCollate(): TypeWithOptCollateContext {
		let localctx: TypeWithOptCollateContext = new TypeWithOptCollateContext(this, this._ctx, this.state);
		this.enterRule(localctx, 978, MySQLParser.RULE_typeWithOptCollate);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 7746;
			this.dataType();
			this.state = 7748;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 1037, this._ctx) ) {
			case 1:
				{
				this.state = 7747;
				this.collate();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public schemaIdentifierPair(): SchemaIdentifierPairContext {
		let localctx: SchemaIdentifierPairContext = new SchemaIdentifierPairContext(this, this._ctx, this.state);
		this.enterRule(localctx, 980, MySQLParser.RULE_schemaIdentifierPair);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 7750;
			this.match(MySQLParser.OPEN_PAR_SYMBOL);
			this.state = 7751;
			this.schemaRef();
			this.state = 7752;
			this.match(MySQLParser.COMMA_SYMBOL);
			this.state = 7753;
			this.schemaRef();
			this.state = 7754;
			this.match(MySQLParser.CLOSE_PAR_SYMBOL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public viewRefList(): ViewRefListContext {
		let localctx: ViewRefListContext = new ViewRefListContext(this, this._ctx, this.state);
		this.enterRule(localctx, 982, MySQLParser.RULE_viewRefList);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 7756;
			this.viewRef();
			this.state = 7761;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===406) {
				{
				{
				this.state = 7757;
				this.match(MySQLParser.COMMA_SYMBOL);
				this.state = 7758;
				this.viewRef();
				}
				}
				this.state = 7763;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public updateList(): UpdateListContext {
		let localctx: UpdateListContext = new UpdateListContext(this, this._ctx, this.state);
		this.enterRule(localctx, 984, MySQLParser.RULE_updateList);
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 7764;
			this.updateElement();
			this.state = 7769;
			this._errHandler.sync(this);
			_alt = this._interp.adaptivePredict(this._input, 1039, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 7765;
					this.match(MySQLParser.COMMA_SYMBOL);
					this.state = 7766;
					this.updateElement();
					}
					}
				}
				this.state = 7771;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 1039, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public updateElement(): UpdateElementContext {
		let localctx: UpdateElementContext = new UpdateElementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 986, MySQLParser.RULE_updateElement);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 7772;
			this.columnRef();
			this.state = 7773;
			this.match(MySQLParser.EQUAL_OPERATOR);
			this.state = 7776;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 1040, this._ctx) ) {
			case 1:
				{
				this.state = 7774;
				this.expr(0);
				}
				break;
			case 2:
				{
				this.state = 7775;
				this.match(MySQLParser.DEFAULT_SYMBOL);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public charsetClause(): CharsetClauseContext {
		let localctx: CharsetClauseContext = new CharsetClauseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 988, MySQLParser.RULE_charsetClause);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 7778;
			this.charset();
			this.state = 7779;
			this.charsetName();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public fieldsClause(): FieldsClauseContext {
		let localctx: FieldsClauseContext = new FieldsClauseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 990, MySQLParser.RULE_fieldsClause);
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 7781;
			this.match(MySQLParser.COLUMNS_SYMBOL);
			this.state = 7783;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 7782;
					this.fieldTerm();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 7785;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 1041, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public fieldTerm(): FieldTermContext {
		let localctx: FieldTermContext = new FieldTermContext(this, this._ctx, this.state);
		this.enterRule(localctx, 992, MySQLParser.RULE_fieldTerm);
		let _la: number;
		try {
			this.state = 7799;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 648:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 7787;
				this.match(MySQLParser.TERMINATED_SYMBOL);
				this.state = 7788;
				this.match(MySQLParser.BY_SYMBOL);
				this.state = 7789;
				this.textString();
				}
				break;
			case 492:
			case 585:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 7791;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===585) {
					{
					this.state = 7790;
					this.match(MySQLParser.OPTIONALLY_SYMBOL);
					}
				}

				this.state = 7793;
				this.match(MySQLParser.ENCLOSED_SYMBOL);
				this.state = 7794;
				this.match(MySQLParser.BY_SYMBOL);
				this.state = 7795;
				this.textString();
				}
				break;
			case 494:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 7796;
				this.match(MySQLParser.ESCAPED_SYMBOL);
				this.state = 7797;
				this.match(MySQLParser.BY_SYMBOL);
				this.state = 7798;
				this.textString();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public linesClause(): LinesClauseContext {
		let localctx: LinesClauseContext = new LinesClauseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 994, MySQLParser.RULE_linesClause);
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 7801;
			this.match(MySQLParser.LINES_SYMBOL);
			this.state = 7803;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 7802;
					this.lineTerm();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 7805;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 1044, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public lineTerm(): LineTermContext {
		let localctx: LineTermContext = new LineTermContext(this, this._ctx, this.state);
		this.enterRule(localctx, 996, MySQLParser.RULE_lineTerm);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 7807;
			_la = this._input.LA(1);
			if(!(_la===634 || _la===648)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			this.state = 7808;
			this.match(MySQLParser.BY_SYMBOL);
			this.state = 7809;
			this.textString();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public userList(): UserListContext {
		let localctx: UserListContext = new UserListContext(this, this._ctx, this.state);
		this.enterRule(localctx, 998, MySQLParser.RULE_userList);
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 7811;
			this.user();
			this.state = 7816;
			this._errHandler.sync(this);
			_alt = this._interp.adaptivePredict(this._input, 1045, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 7812;
					this.match(MySQLParser.COMMA_SYMBOL);
					this.state = 7813;
					this.user();
					}
					}
				}
				this.state = 7818;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 1045, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public createUserList(): CreateUserListContext {
		let localctx: CreateUserListContext = new CreateUserListContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1000, MySQLParser.RULE_createUserList);
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 7819;
			this.createUserEntry();
			this.state = 7824;
			this._errHandler.sync(this);
			_alt = this._interp.adaptivePredict(this._input, 1046, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 7820;
					this.match(MySQLParser.COMMA_SYMBOL);
					this.state = 7821;
					this.createUserEntry();
					}
					}
				}
				this.state = 7826;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 1046, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public alterUserList(): AlterUserListContext {
		let localctx: AlterUserListContext = new AlterUserListContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1002, MySQLParser.RULE_alterUserList);
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 7827;
			this.alterUserEntry();
			this.state = 7832;
			this._errHandler.sync(this);
			_alt = this._interp.adaptivePredict(this._input, 1047, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 7828;
					this.match(MySQLParser.COMMA_SYMBOL);
					this.state = 7829;
					this.alterUserEntry();
					}
					}
				}
				this.state = 7834;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 1047, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public createUserEntry(): CreateUserEntryContext {
		let localctx: CreateUserEntryContext = new CreateUserEntryContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1004, MySQLParser.RULE_createUserEntry);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 7835;
			this.user();
			this.state = 7862;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 1052, this._ctx) ) {
			case 1:
				{
				this.state = 7836;
				this.match(MySQLParser.IDENTIFIED_SYMBOL);
				this.state = 7860;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 1051, this._ctx) ) {
				case 1:
					{
					this.state = 7837;
					this.match(MySQLParser.BY_SYMBOL);
					this.state = 7840;
					this._errHandler.sync(this);
					switch ( this._interp.adaptivePredict(this._input, 1048, this._ctx) ) {
					case 1:
						{
						this.state = 7838;
						if (!(this.serverVersion < 80011)) {
							throw this.createFailedPredicateException("this.serverVersion < 80011");
						}
						this.state = 7839;
						this.match(MySQLParser.PASSWORD_SYMBOL);
						}
						break;
					}
					this.state = 7842;
					this.textString();
					}
					break;
				case 2:
					{
					this.state = 7843;
					this.match(MySQLParser.WITH_SYMBOL);
					this.state = 7844;
					this.textOrIdentifier();
					this.state = 7850;
					this._errHandler.sync(this);
					switch ( this._interp.adaptivePredict(this._input, 1049, this._ctx) ) {
					case 1:
						{
						this.state = 7845;
						this.match(MySQLParser.AS_SYMBOL);
						this.state = 7846;
						this.textStringHash();
						}
						break;
					case 2:
						{
						this.state = 7847;
						if (!(this.serverVersion >= 50706)) {
							throw this.createFailedPredicateException("this.serverVersion >= 50706");
						}
						this.state = 7848;
						this.match(MySQLParser.BY_SYMBOL);
						this.state = 7849;
						this.textString();
						}
						break;
					}
					}
					break;
				case 3:
					{
					this.state = 7852;
					if (!(this.serverVersion >= 80018)) {
						throw this.createFailedPredicateException("this.serverVersion >= 80018");
					}
					this.state = 7855;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la===682) {
						{
						this.state = 7853;
						this.match(MySQLParser.WITH_SYMBOL);
						this.state = 7854;
						this.textOrIdentifier();
						}
					}

					this.state = 7857;
					this.match(MySQLParser.BY_SYMBOL);
					this.state = 7858;
					this.match(MySQLParser.RANDOM_SYMBOL);
					this.state = 7859;
					this.match(MySQLParser.PASSWORD_SYMBOL);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public alterUserEntry(): AlterUserEntryContext {
		let localctx: AlterUserEntryContext = new AlterUserEntryContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1006, MySQLParser.RULE_alterUserEntry);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 7864;
			this.user();
			this.state = 7893;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 1060, this._ctx) ) {
			case 1:
				{
				this.state = 7865;
				this.match(MySQLParser.IDENTIFIED_SYMBOL);
				this.state = 7888;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 1058, this._ctx) ) {
				case 1:
					{
					this.state = 7868;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la===682) {
						{
						this.state = 7866;
						this.match(MySQLParser.WITH_SYMBOL);
						this.state = 7867;
						this.textOrIdentifier();
						}
					}

					this.state = 7870;
					this.match(MySQLParser.BY_SYMBOL);
					this.state = 7871;
					this.textString();
					this.state = 7874;
					this._errHandler.sync(this);
					switch ( this._interp.adaptivePredict(this._input, 1054, this._ctx) ) {
					case 1:
						{
						this.state = 7872;
						this.match(MySQLParser.REPLACE_SYMBOL);
						this.state = 7873;
						this.textString();
						}
						break;
					}
					this.state = 7877;
					this._errHandler.sync(this);
					switch ( this._interp.adaptivePredict(this._input, 1055, this._ctx) ) {
					case 1:
						{
						this.state = 7876;
						this.retainCurrentPassword();
						}
						break;
					}
					}
					break;
				case 2:
					{
					this.state = 7879;
					this.match(MySQLParser.WITH_SYMBOL);
					this.state = 7880;
					this.textOrIdentifier();
					this.state = 7886;
					this._errHandler.sync(this);
					switch ( this._interp.adaptivePredict(this._input, 1057, this._ctx) ) {
					case 1:
						{
						this.state = 7881;
						this.match(MySQLParser.AS_SYMBOL);
						this.state = 7882;
						this.textStringHash();
						this.state = 7884;
						this._errHandler.sync(this);
						switch ( this._interp.adaptivePredict(this._input, 1056, this._ctx) ) {
						case 1:
							{
							this.state = 7883;
							this.retainCurrentPassword();
							}
							break;
						}
						}
						break;
					}
					}
					break;
				}
				}
				break;
			case 2:
				{
				this.state = 7891;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 1059, this._ctx) ) {
				case 1:
					{
					this.state = 7890;
					this.discardOldPassword();
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public retainCurrentPassword(): RetainCurrentPasswordContext {
		let localctx: RetainCurrentPasswordContext = new RetainCurrentPasswordContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1008, MySQLParser.RULE_retainCurrentPassword);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 7895;
			this.match(MySQLParser.RETAIN_SYMBOL);
			this.state = 7896;
			this.match(MySQLParser.CURRENT_SYMBOL);
			this.state = 7897;
			this.match(MySQLParser.PASSWORD_SYMBOL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public discardOldPassword(): DiscardOldPasswordContext {
		let localctx: DiscardOldPasswordContext = new DiscardOldPasswordContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1010, MySQLParser.RULE_discardOldPassword);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 7899;
			this.match(MySQLParser.DISCARD_SYMBOL);
			this.state = 7900;
			this.match(MySQLParser.OLD_SYMBOL);
			this.state = 7901;
			this.match(MySQLParser.PASSWORD_SYMBOL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public replacePassword(): ReplacePasswordContext {
		let localctx: ReplacePasswordContext = new ReplacePasswordContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1012, MySQLParser.RULE_replacePassword);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 7903;
			this.match(MySQLParser.REPLACE_SYMBOL);
			this.state = 7904;
			this.textString();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public userIdentifierOrText(): UserIdentifierOrTextContext {
		let localctx: UserIdentifierOrTextContext = new UserIdentifierOrTextContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1014, MySQLParser.RULE_userIdentifierOrText);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 7906;
			this.textOrIdentifier();
			this.state = 7910;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 1061, this._ctx) ) {
			case 1:
				{
				this.state = 7907;
				this.match(MySQLParser.AT_SIGN_SYMBOL);
				this.state = 7908;
				this.textOrIdentifier();
				}
				break;
			case 2:
				{
				this.state = 7909;
				this.match(MySQLParser.AT_TEXT_SUFFIX);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public user(): UserContext {
		let localctx: UserContext = new UserContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1016, MySQLParser.RULE_user);
		try {
			this.state = 7917;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 1063, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 7912;
				this.userIdentifierOrText();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 7913;
				this.match(MySQLParser.CURRENT_USER_SYMBOL);
				this.state = 7915;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 1062, this._ctx) ) {
				case 1:
					{
					this.state = 7914;
					this.parentheses();
					}
					break;
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public likeClause(): LikeClauseContext {
		let localctx: LikeClauseContext = new LikeClauseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1018, MySQLParser.RULE_likeClause);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 7919;
			this.match(MySQLParser.LIKE_SYMBOL);
			this.state = 7920;
			this.textStringLiteral();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public likeOrWhere(): LikeOrWhereContext {
		let localctx: LikeOrWhereContext = new LikeOrWhereContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1020, MySQLParser.RULE_likeOrWhere);
		try {
			this.state = 7924;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 542:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 7922;
				this.likeClause();
				}
				break;
			case 680:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 7923;
				this.whereClause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public onlineOption(): OnlineOptionContext {
		let localctx: OnlineOptionContext = new OnlineOptionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1022, MySQLParser.RULE_onlineOption);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 7926;
			_la = this._input.LA(1);
			if(!(_la===578 || _la===580)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public noWriteToBinLog(): NoWriteToBinLogContext {
		let localctx: NoWriteToBinLogContext = new NoWriteToBinLogContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1024, MySQLParser.RULE_noWriteToBinLog);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 7928;
			_la = this._input.LA(1);
			if(!(_la===180 || _la===575)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public usePartition(): UsePartitionContext {
		let localctx: UsePartitionContext = new UsePartitionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1026, MySQLParser.RULE_usePartition);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 7930;
			if (!(this.serverVersion >= 50602)) {
				throw this.createFailedPredicateException("this.serverVersion >= 50602");
			}
			this.state = 7931;
			this.match(MySQLParser.PARTITION_SYMBOL);
			this.state = 7932;
			this.identifierListWithParentheses();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public fieldIdentifier(): FieldIdentifierContext {
		let localctx: FieldIdentifierContext = new FieldIdentifierContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1028, MySQLParser.RULE_fieldIdentifier);
		try {
			this.state = 7939;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 1066, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 7934;
				this.dotIdentifier();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 7935;
				this.qualifiedIdentifier();
				this.state = 7937;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 1065, this._ctx) ) {
				case 1:
					{
					this.state = 7936;
					this.dotIdentifier();
					}
					break;
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public columnName(): ColumnNameContext {
		let localctx: ColumnNameContext = new ColumnNameContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1030, MySQLParser.RULE_columnName);
		try {
			this.state = 7945;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 1067, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 7941;
				if (!(this.serverVersion >= 80000)) {
					throw this.createFailedPredicateException("this.serverVersion >= 80000");
				}
				this.state = 7942;
				this.identifier();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 7943;
				if (!(this.serverVersion < 80000)) {
					throw this.createFailedPredicateException("this.serverVersion < 80000");
				}
				this.state = 7944;
				this.fieldIdentifier();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public columnInternalRef(): ColumnInternalRefContext {
		let localctx: ColumnInternalRefContext = new ColumnInternalRefContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1032, MySQLParser.RULE_columnInternalRef);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 7947;
			this.identifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public columnInternalRefList(): ColumnInternalRefListContext {
		let localctx: ColumnInternalRefListContext = new ColumnInternalRefListContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1034, MySQLParser.RULE_columnInternalRefList);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 7949;
			this.match(MySQLParser.OPEN_PAR_SYMBOL);
			this.state = 7950;
			this.columnInternalRef();
			this.state = 7955;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===406) {
				{
				{
				this.state = 7951;
				this.match(MySQLParser.COMMA_SYMBOL);
				this.state = 7952;
				this.columnInternalRef();
				}
				}
				this.state = 7957;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 7958;
			this.match(MySQLParser.CLOSE_PAR_SYMBOL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public columnRef(): ColumnRefContext {
		let localctx: ColumnRefContext = new ColumnRefContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1036, MySQLParser.RULE_columnRef);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 7960;
			this.fieldIdentifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public insertIdentifier(): InsertIdentifierContext {
		let localctx: InsertIdentifierContext = new InsertIdentifierContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1038, MySQLParser.RULE_insertIdentifier);
		try {
			this.state = 7964;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 1069, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 7962;
				this.columnRef();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 7963;
				this.tableWild();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public indexName(): IndexNameContext {
		let localctx: IndexNameContext = new IndexNameContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1040, MySQLParser.RULE_indexName);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 7966;
			this.identifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public indexRef(): IndexRefContext {
		let localctx: IndexRefContext = new IndexRefContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1042, MySQLParser.RULE_indexRef);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 7968;
			this.fieldIdentifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public tableWild(): TableWildContext {
		let localctx: TableWildContext = new TableWildContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1044, MySQLParser.RULE_tableWild);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 7970;
			this.identifier();
			this.state = 7971;
			this.match(MySQLParser.DOT_SYMBOL);
			this.state = 7975;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 1070, this._ctx) ) {
			case 1:
				{
				this.state = 7972;
				this.identifier();
				this.state = 7973;
				this.match(MySQLParser.DOT_SYMBOL);
				}
				break;
			}
			this.state = 7977;
			this.match(MySQLParser.MULT_OPERATOR);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public schemaName(): SchemaNameContext {
		let localctx: SchemaNameContext = new SchemaNameContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1046, MySQLParser.RULE_schemaName);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 7979;
			this.identifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public schemaRef(): SchemaRefContext {
		let localctx: SchemaRefContext = new SchemaRefContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1048, MySQLParser.RULE_schemaRef);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 7981;
			this.identifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public procedureName(): ProcedureNameContext {
		let localctx: ProcedureNameContext = new ProcedureNameContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1050, MySQLParser.RULE_procedureName);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 7983;
			this.qualifiedIdentifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public procedureRef(): ProcedureRefContext {
		let localctx: ProcedureRefContext = new ProcedureRefContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1052, MySQLParser.RULE_procedureRef);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 7985;
			this.qualifiedIdentifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public functionName(): FunctionNameContext {
		let localctx: FunctionNameContext = new FunctionNameContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1054, MySQLParser.RULE_functionName);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 7987;
			this.qualifiedIdentifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public functionRef(): FunctionRefContext {
		let localctx: FunctionRefContext = new FunctionRefContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1056, MySQLParser.RULE_functionRef);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 7989;
			this.qualifiedIdentifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public triggerName(): TriggerNameContext {
		let localctx: TriggerNameContext = new TriggerNameContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1058, MySQLParser.RULE_triggerName);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 7991;
			this.qualifiedIdentifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public triggerRef(): TriggerRefContext {
		let localctx: TriggerRefContext = new TriggerRefContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1060, MySQLParser.RULE_triggerRef);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 7993;
			this.qualifiedIdentifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public viewName(): ViewNameContext {
		let localctx: ViewNameContext = new ViewNameContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1062, MySQLParser.RULE_viewName);
		try {
			this.state = 7997;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 1071, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 7995;
				this.qualifiedIdentifier();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 7996;
				this.dotIdentifier();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public viewRef(): ViewRefContext {
		let localctx: ViewRefContext = new ViewRefContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1064, MySQLParser.RULE_viewRef);
		try {
			this.state = 8001;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 1072, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 7999;
				this.qualifiedIdentifier();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 8000;
				this.dotIdentifier();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public tablespaceName(): TablespaceNameContext {
		let localctx: TablespaceNameContext = new TablespaceNameContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1066, MySQLParser.RULE_tablespaceName);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 8003;
			this.identifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public tablespaceRef(): TablespaceRefContext {
		let localctx: TablespaceRefContext = new TablespaceRefContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1068, MySQLParser.RULE_tablespaceRef);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 8005;
			this.identifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public logfileGroupName(): LogfileGroupNameContext {
		let localctx: LogfileGroupNameContext = new LogfileGroupNameContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1070, MySQLParser.RULE_logfileGroupName);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 8007;
			this.identifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public logfileGroupRef(): LogfileGroupRefContext {
		let localctx: LogfileGroupRefContext = new LogfileGroupRefContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1072, MySQLParser.RULE_logfileGroupRef);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 8009;
			this.identifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public eventName(): EventNameContext {
		let localctx: EventNameContext = new EventNameContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1074, MySQLParser.RULE_eventName);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 8011;
			this.qualifiedIdentifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public eventRef(): EventRefContext {
		let localctx: EventRefContext = new EventRefContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1076, MySQLParser.RULE_eventRef);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 8013;
			this.qualifiedIdentifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public udfName(): UdfNameContext {
		let localctx: UdfNameContext = new UdfNameContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1078, MySQLParser.RULE_udfName);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 8015;
			this.identifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public serverName(): ServerNameContext {
		let localctx: ServerNameContext = new ServerNameContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1080, MySQLParser.RULE_serverName);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 8017;
			this.textOrIdentifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public serverRef(): ServerRefContext {
		let localctx: ServerRefContext = new ServerRefContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1082, MySQLParser.RULE_serverRef);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 8019;
			this.textOrIdentifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public engineRef(): EngineRefContext {
		let localctx: EngineRefContext = new EngineRefContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1084, MySQLParser.RULE_engineRef);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 8021;
			this.textOrIdentifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public tableName(): TableNameContext {
		let localctx: TableNameContext = new TableNameContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1086, MySQLParser.RULE_tableName);
		try {
			this.state = 8025;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 1073, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 8023;
				this.qualifiedIdentifier();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 8024;
				this.dotIdentifier();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public filterTableRef(): FilterTableRefContext {
		let localctx: FilterTableRefContext = new FilterTableRefContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1088, MySQLParser.RULE_filterTableRef);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 8027;
			this.schemaRef();
			this.state = 8028;
			this.dotIdentifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public tableRefWithWildcard(): TableRefWithWildcardContext {
		let localctx: TableRefWithWildcardContext = new TableRefWithWildcardContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1090, MySQLParser.RULE_tableRefWithWildcard);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 8030;
			this.identifier();
			this.state = 8038;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 1075, this._ctx) ) {
			case 1:
				{
				this.state = 8031;
				this.match(MySQLParser.DOT_SYMBOL);
				this.state = 8032;
				this.match(MySQLParser.MULT_OPERATOR);
				}
				break;
			case 2:
				{
				this.state = 8033;
				this.dotIdentifier();
				this.state = 8036;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 1074, this._ctx) ) {
				case 1:
					{
					this.state = 8034;
					this.match(MySQLParser.DOT_SYMBOL);
					this.state = 8035;
					this.match(MySQLParser.MULT_OPERATOR);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public tableRef(): TableRefContext {
		let localctx: TableRefContext = new TableRefContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1092, MySQLParser.RULE_tableRef);
		try {
			this.state = 8042;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 1076, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 8040;
				this.qualifiedIdentifier();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 8041;
				this.dotIdentifier();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public tableRefList(): TableRefListContext {
		let localctx: TableRefListContext = new TableRefListContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1094, MySQLParser.RULE_tableRefList);
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 8044;
			this.tableRef();
			this.state = 8049;
			this._errHandler.sync(this);
			_alt = this._interp.adaptivePredict(this._input, 1077, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 8045;
					this.match(MySQLParser.COMMA_SYMBOL);
					this.state = 8046;
					this.tableRef();
					}
					}
				}
				this.state = 8051;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 1077, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public tableAliasRefList(): TableAliasRefListContext {
		let localctx: TableAliasRefListContext = new TableAliasRefListContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1096, MySQLParser.RULE_tableAliasRefList);
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 8052;
			this.tableRefWithWildcard();
			this.state = 8057;
			this._errHandler.sync(this);
			_alt = this._interp.adaptivePredict(this._input, 1078, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 8053;
					this.match(MySQLParser.COMMA_SYMBOL);
					this.state = 8054;
					this.tableRefWithWildcard();
					}
					}
				}
				this.state = 8059;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 1078, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public parameterName(): ParameterNameContext {
		let localctx: ParameterNameContext = new ParameterNameContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1098, MySQLParser.RULE_parameterName);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 8060;
			this.identifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public labelIdentifier(): LabelIdentifierContext {
		let localctx: LabelIdentifierContext = new LabelIdentifierContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1100, MySQLParser.RULE_labelIdentifier);
		try {
			this.state = 8064;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 1079, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 8062;
				this.pureIdentifier();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 8063;
				this.labelKeyword();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public labelRef(): LabelRefContext {
		let localctx: LabelRefContext = new LabelRefContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1102, MySQLParser.RULE_labelRef);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 8066;
			this.labelIdentifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public roleIdentifier(): RoleIdentifierContext {
		let localctx: RoleIdentifierContext = new RoleIdentifierContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1104, MySQLParser.RULE_roleIdentifier);
		try {
			this.state = 8070;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 1080, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 8068;
				this.pureIdentifier();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 8069;
				this.roleKeyword();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public roleRef(): RoleRefContext {
		let localctx: RoleRefContext = new RoleRefContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1106, MySQLParser.RULE_roleRef);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 8072;
			this.roleIdentifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public pluginRef(): PluginRefContext {
		let localctx: PluginRefContext = new PluginRefContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1108, MySQLParser.RULE_pluginRef);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 8074;
			this.identifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public componentRef(): ComponentRefContext {
		let localctx: ComponentRefContext = new ComponentRefContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1110, MySQLParser.RULE_componentRef);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 8076;
			this.textStringLiteral();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public resourceGroupRef(): ResourceGroupRefContext {
		let localctx: ResourceGroupRefContext = new ResourceGroupRefContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1112, MySQLParser.RULE_resourceGroupRef);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 8078;
			this.identifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public windowName(): WindowNameContext {
		let localctx: WindowNameContext = new WindowNameContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1114, MySQLParser.RULE_windowName);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 8080;
			this.identifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public pureIdentifier(): PureIdentifierContext {
		let localctx: PureIdentifierContext = new PureIdentifierContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1116, MySQLParser.RULE_pureIdentifier);
		let _la: number;
		try {
			this.state = 8085;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 1081, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 8082;
				_la = this._input.LA(1);
				if(!(_la===772 || _la===774)) {
				this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 8083;
				if (!(this.isSqlModeActive(SqlMode.AnsiQuotes))) {
					throw this.createFailedPredicateException("this.isSqlModeActive(SqlMode.AnsiQuotes)");
				}
				this.state = 8084;
				this.match(MySQLParser.DOUBLE_QUOTED_TEXT);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public identifier(): IdentifierContext {
		let localctx: IdentifierContext = new IdentifierContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1118, MySQLParser.RULE_identifier);
		try {
			this.state = 8089;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 1082, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 8087;
				this.pureIdentifier();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 8088;
				this.identifierKeyword();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public identifierList(): IdentifierListContext {
		let localctx: IdentifierListContext = new IdentifierListContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1120, MySQLParser.RULE_identifierList);
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 8091;
			this.identifier();
			this.state = 8096;
			this._errHandler.sync(this);
			_alt = this._interp.adaptivePredict(this._input, 1083, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 8092;
					this.match(MySQLParser.COMMA_SYMBOL);
					this.state = 8093;
					this.identifier();
					}
					}
				}
				this.state = 8098;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 1083, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public identifierListWithParentheses(): IdentifierListWithParenthesesContext {
		let localctx: IdentifierListWithParenthesesContext = new IdentifierListWithParenthesesContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1122, MySQLParser.RULE_identifierListWithParentheses);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 8099;
			this.match(MySQLParser.OPEN_PAR_SYMBOL);
			this.state = 8100;
			this.identifierList();
			this.state = 8101;
			this.match(MySQLParser.CLOSE_PAR_SYMBOL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public qualifiedIdentifier(): QualifiedIdentifierContext {
		let localctx: QualifiedIdentifierContext = new QualifiedIdentifierContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1124, MySQLParser.RULE_qualifiedIdentifier);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 8103;
			this.identifier();
			this.state = 8105;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 1084, this._ctx) ) {
			case 1:
				{
				this.state = 8104;
				this.dotIdentifier();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public simpleIdentifier(): SimpleIdentifierContext {
		let localctx: SimpleIdentifierContext = new SimpleIdentifierContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1126, MySQLParser.RULE_simpleIdentifier);
		let _la: number;
		try {
			this.state = 8118;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 1087, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 8107;
				this.identifier();
				this.state = 8112;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===405) {
					{
					this.state = 8108;
					this.dotIdentifier();
					this.state = 8110;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la===405) {
						{
						this.state = 8109;
						this.dotIdentifier();
						}
					}

					}
				}

				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 8114;
				if (!(this.serverVersion < 80000)) {
					throw this.createFailedPredicateException("this.serverVersion < 80000");
				}
				this.state = 8115;
				this.dotIdentifier();
				this.state = 8116;
				this.dotIdentifier();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public dotIdentifier(): DotIdentifierContext {
		let localctx: DotIdentifierContext = new DotIdentifierContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1128, MySQLParser.RULE_dotIdentifier);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 8120;
			this.match(MySQLParser.DOT_SYMBOL);
			this.state = 8121;
			this.identifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public ulong_number(): Ulong_numberContext {
		let localctx: Ulong_numberContext = new Ulong_numberContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1130, MySQLParser.RULE_ulong_number);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 8123;
			_la = this._input.LA(1);
			if(!(((((_la - 380)) & ~0x1F) === 0 && ((1 << (_la - 380)) & 7) !== 0) || ((((_la - 421)) & ~0x1F) === 0 && ((1 << (_la - 421)) & 13) !== 0))) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public real_ulong_number(): Real_ulong_numberContext {
		let localctx: Real_ulong_numberContext = new Real_ulong_numberContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1132, MySQLParser.RULE_real_ulong_number);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 8125;
			_la = this._input.LA(1);
			if(!(((((_la - 380)) & ~0x1F) === 0 && ((1 << (_la - 380)) & 7) !== 0) || _la===421)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public ulonglong_number(): Ulonglong_numberContext {
		let localctx: Ulonglong_numberContext = new Ulonglong_numberContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1134, MySQLParser.RULE_ulonglong_number);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 8127;
			_la = this._input.LA(1);
			if(!(((((_la - 380)) & ~0x1F) === 0 && ((1 << (_la - 380)) & 7) !== 0) || _la===423 || _la===424)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public real_ulonglong_number(): Real_ulonglong_numberContext {
		let localctx: Real_ulonglong_numberContext = new Real_ulonglong_numberContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1136, MySQLParser.RULE_real_ulonglong_number);
		try {
			this.state = 8134;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 1088, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 8129;
				this.match(MySQLParser.INT_NUMBER);
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 8130;
				if (!(this.serverVersion >= 80017)) {
					throw this.createFailedPredicateException("this.serverVersion >= 80017");
				}
				this.state = 8131;
				this.match(MySQLParser.HEX_NUMBER);
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 8132;
				this.match(MySQLParser.ULONGLONG_NUMBER);
				}
				break;
			case 4:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 8133;
				this.match(MySQLParser.LONG_NUMBER);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public literal(): LiteralContext {
		let localctx: LiteralContext = new LiteralContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1138, MySQLParser.RULE_literal);
		let _la: number;
		try {
			this.state = 8145;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 1090, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 8136;
				this.textLiteral();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 8137;
				this.numLiteral();
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 8138;
				this.temporalLiteral();
				}
				break;
			case 4:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 8139;
				this.nullLiteral();
				}
				break;
			case 5:
				this.enterOuterAlt(localctx, 5);
				{
				this.state = 8140;
				this.boolLiteral();
				}
				break;
			case 6:
				this.enterOuterAlt(localctx, 6);
				{
				this.state = 8142;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===771) {
					{
					this.state = 8141;
					this.match(MySQLParser.UNDERSCORE_CHARSET);
					}
				}

				this.state = 8144;
				_la = this._input.LA(1);
				if(!(_la===421 || _la===422)) {
				this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public signedLiteral(): SignedLiteralContext {
		let localctx: SignedLiteralContext = new SignedLiteralContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1140, MySQLParser.RULE_signedLiteral);
		try {
			this.state = 8152;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 1091, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 8147;
				this.literal();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 8148;
				this.match(MySQLParser.PLUS_OPERATOR);
				this.state = 8149;
				this.ulong_number();
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 8150;
				this.match(MySQLParser.MINUS_OPERATOR);
				this.state = 8151;
				this.ulong_number();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public stringList(): StringListContext {
		let localctx: StringListContext = new StringListContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1142, MySQLParser.RULE_stringList);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 8154;
			this.match(MySQLParser.OPEN_PAR_SYMBOL);
			this.state = 8155;
			this.textString();
			this.state = 8160;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===406) {
				{
				{
				this.state = 8156;
				this.match(MySQLParser.COMMA_SYMBOL);
				this.state = 8157;
				this.textString();
				}
				}
				this.state = 8162;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 8163;
			this.match(MySQLParser.CLOSE_PAR_SYMBOL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public textStringLiteral(): TextStringLiteralContext {
		let localctx: TextStringLiteralContext = new TextStringLiteralContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1144, MySQLParser.RULE_textStringLiteral);
		try {
			this.state = 8168;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 1093, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 8165;
				localctx._value = this.match(MySQLParser.SINGLE_QUOTED_TEXT);
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 8166;
				if (!(!this.isSqlModeActive(SqlMode.AnsiQuotes))) {
					throw this.createFailedPredicateException("!this.isSqlModeActive(SqlMode.AnsiQuotes)");
				}
				this.state = 8167;
				localctx._value = this.match(MySQLParser.DOUBLE_QUOTED_TEXT);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public textString(): TextStringContext {
		let localctx: TextStringContext = new TextStringContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1146, MySQLParser.RULE_textString);
		try {
			this.state = 8173;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 1094, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 8170;
				this.textStringLiteral();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 8171;
				this.match(MySQLParser.HEX_NUMBER);
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 8172;
				this.match(MySQLParser.BIN_NUMBER);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public textStringHash(): TextStringHashContext {
		let localctx: TextStringHashContext = new TextStringHashContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1148, MySQLParser.RULE_textStringHash);
		try {
			this.state = 8178;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 1095, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 8175;
				this.textStringLiteral();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 8176;
				if (!(this.serverVersion >= 80017)) {
					throw this.createFailedPredicateException("this.serverVersion >= 80017");
				}
				this.state = 8177;
				this.match(MySQLParser.HEX_NUMBER);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public textLiteral(): TextLiteralContext {
		let localctx: TextLiteralContext = new TextLiteralContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1150, MySQLParser.RULE_textLiteral);
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 8185;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 1097, this._ctx) ) {
			case 1:
				{
				this.state = 8181;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 1096, this._ctx) ) {
				case 1:
					{
					this.state = 8180;
					this.match(MySQLParser.UNDERSCORE_CHARSET);
					}
					break;
				}
				this.state = 8183;
				this.textStringLiteral();
				}
				break;
			case 2:
				{
				this.state = 8184;
				this.match(MySQLParser.NCHAR_TEXT);
				}
				break;
			}
			this.state = 8190;
			this._errHandler.sync(this);
			_alt = this._interp.adaptivePredict(this._input, 1098, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 8187;
					this.textStringLiteral();
					}
					}
				}
				this.state = 8192;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 1098, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public textStringNoLinebreak(): TextStringNoLinebreakContext {
		let localctx: TextStringNoLinebreakContext = new TextStringNoLinebreakContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1152, MySQLParser.RULE_textStringNoLinebreak);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 8193;
			this.textStringLiteral();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public textStringLiteralList(): TextStringLiteralListContext {
		let localctx: TextStringLiteralListContext = new TextStringLiteralListContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1154, MySQLParser.RULE_textStringLiteralList);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 8195;
			this.textStringLiteral();
			this.state = 8200;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===406) {
				{
				{
				this.state = 8196;
				this.match(MySQLParser.COMMA_SYMBOL);
				this.state = 8197;
				this.textStringLiteral();
				}
				}
				this.state = 8202;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public numLiteral(): NumLiteralContext {
		let localctx: NumLiteralContext = new NumLiteralContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1156, MySQLParser.RULE_numLiteral);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 8203;
			_la = this._input.LA(1);
			if(!(((((_la - 380)) & ~0x1F) === 0 && ((1 << (_la - 380)) & 7) !== 0) || _la===423 || _la===424)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public boolLiteral(): BoolLiteralContext {
		let localctx: BoolLiteralContext = new BoolLiteralContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1158, MySQLParser.RULE_boolLiteral);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 8205;
			_la = this._input.LA(1);
			if(!(_la===501 || _la===657)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public nullLiteral(): NullLiteralContext {
		let localctx: NullLiteralContext = new NullLiteralContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1160, MySQLParser.RULE_nullLiteral);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 8207;
			_la = this._input.LA(1);
			if(!(_la===419 || _la===576)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public temporalLiteral(): TemporalLiteralContext {
		let localctx: TemporalLiteralContext = new TemporalLiteralContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1162, MySQLParser.RULE_temporalLiteral);
		try {
			this.state = 8215;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 112:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 8209;
				this.match(MySQLParser.DATE_SYMBOL);
				this.state = 8210;
				this.match(MySQLParser.SINGLE_QUOTED_TEXT);
				}
				break;
			case 352:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 8211;
				this.match(MySQLParser.TIME_SYMBOL);
				this.state = 8212;
				this.match(MySQLParser.SINGLE_QUOTED_TEXT);
				}
				break;
			case 349:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 8213;
				this.match(MySQLParser.TIMESTAMP_SYMBOL);
				this.state = 8214;
				this.match(MySQLParser.SINGLE_QUOTED_TEXT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public floatOptions(): FloatOptionsContext {
		let localctx: FloatOptionsContext = new FloatOptionsContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1164, MySQLParser.RULE_floatOptions);
		try {
			this.state = 8219;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 1101, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 8217;
				this.fieldLength();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 8218;
				this.precision();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public standardFloatOptions(): StandardFloatOptionsContext {
		let localctx: StandardFloatOptionsContext = new StandardFloatOptionsContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1166, MySQLParser.RULE_standardFloatOptions);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 8221;
			this.precision();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public precision(): PrecisionContext {
		let localctx: PrecisionContext = new PrecisionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1168, MySQLParser.RULE_precision);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 8223;
			this.match(MySQLParser.OPEN_PAR_SYMBOL);
			this.state = 8224;
			this.match(MySQLParser.INT_NUMBER);
			this.state = 8225;
			this.match(MySQLParser.COMMA_SYMBOL);
			this.state = 8226;
			this.match(MySQLParser.INT_NUMBER);
			this.state = 8227;
			this.match(MySQLParser.CLOSE_PAR_SYMBOL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public textOrIdentifier(): TextOrIdentifierContext {
		let localctx: TextOrIdentifierContext = new TextOrIdentifierContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1170, MySQLParser.RULE_textOrIdentifier);
		try {
			this.state = 8231;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 1102, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 8229;
				this.match(MySQLParser.SINGLE_QUOTED_TEXT);
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 8230;
				this.identifier();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public lValueIdentifier(): LValueIdentifierContext {
		let localctx: LValueIdentifierContext = new LValueIdentifierContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1172, MySQLParser.RULE_lValueIdentifier);
		try {
			this.state = 8235;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 1103, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 8233;
				this.pureIdentifier();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 8234;
				this.lValueKeyword();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public roleIdentifierOrText(): RoleIdentifierOrTextContext {
		let localctx: RoleIdentifierOrTextContext = new RoleIdentifierOrTextContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1174, MySQLParser.RULE_roleIdentifierOrText);
		try {
			this.state = 8239;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 1104, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 8237;
				this.roleIdentifier();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 8238;
				this.textStringLiteral();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public sizeNumber(): SizeNumberContext {
		let localctx: SizeNumberContext = new SizeNumberContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1176, MySQLParser.RULE_sizeNumber);
		try {
			this.state = 8243;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 1105, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 8241;
				this.real_ulonglong_number();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 8242;
				this.pureIdentifier();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public parentheses(): ParenthesesContext {
		let localctx: ParenthesesContext = new ParenthesesContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1178, MySQLParser.RULE_parentheses);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 8245;
			this.match(MySQLParser.OPEN_PAR_SYMBOL);
			this.state = 8246;
			this.match(MySQLParser.CLOSE_PAR_SYMBOL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public equal(): EqualContext {
		let localctx: EqualContext = new EqualContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1180, MySQLParser.RULE_equal);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 8248;
			_la = this._input.LA(1);
			if(!(_la===383 || _la===384)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public optionType(): OptionTypeContext {
		let localctx: OptionTypeContext = new OptionTypeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1182, MySQLParser.RULE_optionType);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 8250;
			_la = this._input.LA(1);
			if(!(_la===155 || _la===180 || _la===308 || _la===688 || _la===703)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public varIdentType(): VarIdentTypeContext {
		let localctx: VarIdentTypeContext = new VarIdentTypeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1184, MySQLParser.RULE_varIdentType);
		try {
			this.state = 8258;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 155:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 8252;
				this.match(MySQLParser.GLOBAL_SYMBOL);
				this.state = 8253;
				this.match(MySQLParser.DOT_SYMBOL);
				}
				break;
			case 180:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 8254;
				this.match(MySQLParser.LOCAL_SYMBOL);
				this.state = 8255;
				this.match(MySQLParser.DOT_SYMBOL);
				}
				break;
			case 308:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 8256;
				this.match(MySQLParser.SESSION_SYMBOL);
				this.state = 8257;
				this.match(MySQLParser.DOT_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public setVarIdentType(): SetVarIdentTypeContext {
		let localctx: SetVarIdentTypeContext = new SetVarIdentTypeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1186, MySQLParser.RULE_setVarIdentType);
		try {
			this.state = 8270;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 688:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 8260;
				this.match(MySQLParser.PERSIST_SYMBOL);
				this.state = 8261;
				this.match(MySQLParser.DOT_SYMBOL);
				}
				break;
			case 703:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 8262;
				this.match(MySQLParser.PERSIST_ONLY_SYMBOL);
				this.state = 8263;
				this.match(MySQLParser.DOT_SYMBOL);
				}
				break;
			case 155:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 8264;
				this.match(MySQLParser.GLOBAL_SYMBOL);
				this.state = 8265;
				this.match(MySQLParser.DOT_SYMBOL);
				}
				break;
			case 180:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 8266;
				this.match(MySQLParser.LOCAL_SYMBOL);
				this.state = 8267;
				this.match(MySQLParser.DOT_SYMBOL);
				}
				break;
			case 308:
				this.enterOuterAlt(localctx, 5);
				{
				this.state = 8268;
				this.match(MySQLParser.SESSION_SYMBOL);
				this.state = 8269;
				this.match(MySQLParser.DOT_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public identifierKeyword(): IdentifierKeywordContext {
		let localctx: IdentifierKeywordContext = new IdentifierKeywordContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1188, MySQLParser.RULE_identifierKeyword);
		try {
			this.state = 8289;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 1110, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 8272;
				if (!(this.serverVersion < 80017)) {
					throw this.createFailedPredicateException("this.serverVersion < 80017");
				}
				this.state = 8280;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 1108, this._ctx) ) {
				case 1:
					{
					this.state = 8273;
					this.labelKeyword();
					}
					break;
				case 2:
					{
					this.state = 8274;
					this.roleOrIdentifierKeyword();
					}
					break;
				case 3:
					{
					this.state = 8275;
					this.match(MySQLParser.EXECUTE_SYMBOL);
					}
					break;
				case 4:
					{
					this.state = 8276;
					if (!(this.serverVersion >= 50709)) {
						throw this.createFailedPredicateException("this.serverVersion >= 50709");
					}
					this.state = 8277;
					this.match(MySQLParser.SHUTDOWN_SYMBOL);
					}
					break;
				case 5:
					{
					this.state = 8278;
					if (!(this.serverVersion >= 80011)) {
						throw this.createFailedPredicateException("this.serverVersion >= 80011");
					}
					this.state = 8279;
					this.match(MySQLParser.RESTART_SYMBOL);
					}
					break;
				}
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 8287;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case 1:
				case 3:
				case 4:
				case 10:
				case 20:
				case 21:
				case 24:
				case 28:
				case 29:
				case 30:
				case 31:
				case 33:
				case 36:
				case 39:
				case 42:
				case 43:
				case 46:
				case 47:
				case 53:
				case 54:
				case 57:
				case 58:
				case 59:
				case 60:
				case 61:
				case 62:
				case 64:
				case 65:
				case 67:
				case 68:
				case 69:
				case 70:
				case 71:
				case 72:
				case 73:
				case 74:
				case 75:
				case 76:
				case 77:
				case 78:
				case 79:
				case 80:
				case 81:
				case 82:
				case 83:
				case 84:
				case 85:
				case 86:
				case 87:
				case 88:
				case 89:
				case 90:
				case 91:
				case 92:
				case 93:
				case 94:
				case 95:
				case 96:
				case 97:
				case 98:
				case 99:
				case 100:
				case 101:
				case 102:
				case 103:
				case 105:
				case 107:
				case 108:
				case 109:
				case 110:
				case 111:
				case 112:
				case 113:
				case 114:
				case 115:
				case 116:
				case 118:
				case 119:
				case 120:
				case 121:
				case 122:
				case 123:
				case 124:
				case 125:
				case 126:
				case 127:
				case 128:
				case 129:
				case 130:
				case 131:
				case 132:
				case 134:
				case 135:
				case 136:
				case 137:
				case 138:
				case 139:
				case 140:
				case 141:
				case 142:
				case 143:
				case 144:
				case 146:
				case 147:
				case 148:
				case 149:
				case 150:
				case 151:
				case 152:
				case 153:
				case 154:
				case 156:
				case 157:
				case 158:
				case 159:
				case 160:
				case 161:
				case 163:
				case 164:
				case 165:
				case 167:
				case 168:
				case 169:
				case 170:
				case 171:
				case 172:
				case 173:
				case 174:
				case 175:
				case 176:
				case 177:
				case 178:
				case 179:
				case 181:
				case 182:
				case 183:
				case 184:
				case 185:
				case 186:
				case 187:
				case 188:
				case 189:
				case 190:
				case 191:
				case 192:
				case 193:
				case 194:
				case 195:
				case 196:
				case 197:
				case 198:
				case 199:
				case 200:
				case 201:
				case 202:
				case 203:
				case 204:
				case 205:
				case 206:
				case 207:
				case 208:
				case 210:
				case 211:
				case 212:
				case 213:
				case 214:
				case 215:
				case 216:
				case 217:
				case 218:
				case 219:
				case 220:
				case 221:
				case 222:
				case 223:
				case 224:
				case 225:
				case 226:
				case 227:
				case 228:
				case 229:
				case 230:
				case 231:
				case 232:
				case 233:
				case 234:
				case 235:
				case 236:
				case 237:
				case 238:
				case 240:
				case 241:
				case 242:
				case 245:
				case 246:
				case 247:
				case 248:
				case 249:
				case 250:
				case 251:
				case 252:
				case 253:
				case 254:
				case 255:
				case 256:
				case 257:
				case 258:
				case 259:
				case 260:
				case 262:
				case 263:
				case 264:
				case 266:
				case 267:
				case 268:
				case 269:
				case 270:
				case 271:
				case 272:
				case 274:
				case 275:
				case 276:
				case 277:
				case 278:
				case 279:
				case 281:
				case 282:
				case 284:
				case 285:
				case 286:
				case 287:
				case 288:
				case 289:
				case 290:
				case 291:
				case 292:
				case 293:
				case 294:
				case 295:
				case 296:
				case 297:
				case 299:
				case 300:
				case 302:
				case 303:
				case 304:
				case 305:
				case 306:
				case 307:
				case 309:
				case 310:
				case 311:
				case 312:
				case 313:
				case 314:
				case 315:
				case 316:
				case 317:
				case 319:
				case 320:
				case 321:
				case 322:
				case 323:
				case 324:
				case 325:
				case 326:
				case 327:
				case 328:
				case 329:
				case 330:
				case 331:
				case 332:
				case 333:
				case 334:
				case 336:
				case 337:
				case 338:
				case 339:
				case 340:
				case 341:
				case 342:
				case 343:
				case 344:
				case 345:
				case 346:
				case 347:
				case 348:
				case 349:
				case 350:
				case 351:
				case 352:
				case 353:
				case 354:
				case 357:
				case 358:
				case 359:
				case 360:
				case 361:
				case 362:
				case 363:
				case 364:
				case 365:
				case 366:
				case 367:
				case 368:
				case 369:
				case 370:
				case 371:
				case 372:
				case 373:
				case 374:
				case 375:
				case 376:
				case 377:
				case 495:
				case 498:
				case 581:
				case 670:
				case 683:
				case 689:
				case 690:
				case 691:
				case 692:
				case 694:
				case 699:
				case 700:
				case 701:
				case 704:
				case 705:
				case 710:
				case 712:
				case 719:
				case 720:
				case 723:
				case 725:
				case 727:
				case 728:
				case 732:
				case 733:
				case 734:
				case 735:
				case 736:
				case 737:
				case 738:
				case 741:
				case 742:
				case 743:
				case 745:
				case 746:
				case 747:
				case 748:
				case 749:
				case 750:
				case 751:
				case 752:
				case 753:
				case 754:
				case 755:
				case 757:
				case 758:
				case 759:
				case 760:
				case 762:
				case 765:
				case 766:
				case 767:
				case 768:
					{
					this.state = 8282;
					this.identifierKeywordsUnambiguous();
					}
					break;
				case 17:
				case 56:
				case 744:
					{
					this.state = 8283;
					this.identifierKeywordsAmbiguous1RolesAndLabels();
					}
					break;
				case 2:
				case 5:
				case 6:
				case 7:
				case 8:
				case 9:
				case 11:
				case 12:
				case 13:
				case 14:
				case 15:
				case 16:
				case 18:
				case 19:
				case 22:
				case 23:
				case 25:
				case 26:
				case 27:
				case 34:
				case 35:
				case 37:
				case 38:
				case 40:
				case 41:
				case 44:
				case 45:
				case 48:
				case 49:
				case 50:
				case 51:
				case 52:
				case 55:
				case 162:
				case 707:
					{
					this.state = 8284;
					this.identifierKeywordsAmbiguous2Labels();
					}
					break;
				case 133:
				case 145:
				case 239:
				case 261:
				case 265:
				case 280:
				case 283:
				case 335:
				case 739:
					{
					this.state = 8285;
					this.identifierKeywordsAmbiguous3Roles();
					}
					break;
				case 155:
				case 180:
				case 308:
				case 688:
				case 703:
					{
					this.state = 8286;
					this.identifierKeywordsAmbiguous4SystemVariables();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public identifierKeywordsAmbiguous1RolesAndLabels(): IdentifierKeywordsAmbiguous1RolesAndLabelsContext {
		let localctx: IdentifierKeywordsAmbiguous1RolesAndLabelsContext = new IdentifierKeywordsAmbiguous1RolesAndLabelsContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1190, MySQLParser.RULE_identifierKeywordsAmbiguous1RolesAndLabels);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 8291;
			_la = this._input.LA(1);
			if(!(_la===17 || _la===56 || _la===744)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public identifierKeywordsAmbiguous2Labels(): IdentifierKeywordsAmbiguous2LabelsContext {
		let localctx: IdentifierKeywordsAmbiguous2LabelsContext = new IdentifierKeywordsAmbiguous2LabelsContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1192, MySQLParser.RULE_identifierKeywordsAmbiguous2Labels);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 8293;
			_la = this._input.LA(1);
			if(!((((_la) & ~0x1F) === 0 && ((1 << _la) & 248380388) !== 0) || ((((_la - 34)) & ~0x1F) === 0 && ((1 << (_la - 34)) & 2608347) !== 0) || _la===162 || _la===707)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public labelKeyword(): LabelKeywordContext {
		let localctx: LabelKeywordContext = new LabelKeywordContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1194, MySQLParser.RULE_labelKeyword);
		try {
			this.state = 8313;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 1113, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 8295;
				if (!(this.serverVersion < 80017)) {
					throw this.createFailedPredicateException("this.serverVersion < 80017");
				}
				this.state = 8306;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 1111, this._ctx) ) {
				case 1:
					{
					this.state = 8296;
					this.roleOrLabelKeyword();
					}
					break;
				case 2:
					{
					this.state = 8297;
					this.match(MySQLParser.EVENT_SYMBOL);
					}
					break;
				case 3:
					{
					this.state = 8298;
					this.match(MySQLParser.FILE_SYMBOL);
					}
					break;
				case 4:
					{
					this.state = 8299;
					this.match(MySQLParser.NONE_SYMBOL);
					}
					break;
				case 5:
					{
					this.state = 8300;
					this.match(MySQLParser.PROCESS_SYMBOL);
					}
					break;
				case 6:
					{
					this.state = 8301;
					this.match(MySQLParser.PROXY_SYMBOL);
					}
					break;
				case 7:
					{
					this.state = 8302;
					this.match(MySQLParser.RELOAD_SYMBOL);
					}
					break;
				case 8:
					{
					this.state = 8303;
					this.match(MySQLParser.REPLICATION_SYMBOL);
					}
					break;
				case 9:
					{
					this.state = 8304;
					this.match(MySQLParser.RESOURCE_SYMBOL);
					}
					break;
				case 10:
					{
					this.state = 8305;
					this.match(MySQLParser.SUPER_SYMBOL);
					}
					break;
				}
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 8311;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case 1:
				case 3:
				case 4:
				case 10:
				case 20:
				case 21:
				case 24:
				case 28:
				case 29:
				case 30:
				case 31:
				case 33:
				case 36:
				case 39:
				case 42:
				case 43:
				case 46:
				case 47:
				case 53:
				case 54:
				case 57:
				case 58:
				case 59:
				case 60:
				case 61:
				case 62:
				case 64:
				case 65:
				case 67:
				case 68:
				case 69:
				case 70:
				case 71:
				case 72:
				case 73:
				case 74:
				case 75:
				case 76:
				case 77:
				case 78:
				case 79:
				case 80:
				case 81:
				case 82:
				case 83:
				case 84:
				case 85:
				case 86:
				case 87:
				case 88:
				case 89:
				case 90:
				case 91:
				case 92:
				case 93:
				case 94:
				case 95:
				case 96:
				case 97:
				case 98:
				case 99:
				case 100:
				case 101:
				case 102:
				case 103:
				case 105:
				case 107:
				case 108:
				case 109:
				case 110:
				case 111:
				case 112:
				case 113:
				case 114:
				case 115:
				case 116:
				case 118:
				case 119:
				case 120:
				case 121:
				case 122:
				case 123:
				case 124:
				case 125:
				case 126:
				case 127:
				case 128:
				case 129:
				case 130:
				case 131:
				case 132:
				case 134:
				case 135:
				case 136:
				case 137:
				case 138:
				case 139:
				case 140:
				case 141:
				case 142:
				case 143:
				case 144:
				case 146:
				case 147:
				case 148:
				case 149:
				case 150:
				case 151:
				case 152:
				case 153:
				case 154:
				case 156:
				case 157:
				case 158:
				case 159:
				case 160:
				case 161:
				case 163:
				case 164:
				case 165:
				case 167:
				case 168:
				case 169:
				case 170:
				case 171:
				case 172:
				case 173:
				case 174:
				case 175:
				case 176:
				case 177:
				case 178:
				case 179:
				case 181:
				case 182:
				case 183:
				case 184:
				case 185:
				case 186:
				case 187:
				case 188:
				case 189:
				case 190:
				case 191:
				case 192:
				case 193:
				case 194:
				case 195:
				case 196:
				case 197:
				case 198:
				case 199:
				case 200:
				case 201:
				case 202:
				case 203:
				case 204:
				case 205:
				case 206:
				case 207:
				case 208:
				case 210:
				case 211:
				case 212:
				case 213:
				case 214:
				case 215:
				case 216:
				case 217:
				case 218:
				case 219:
				case 220:
				case 221:
				case 222:
				case 223:
				case 224:
				case 225:
				case 226:
				case 227:
				case 228:
				case 229:
				case 230:
				case 231:
				case 232:
				case 233:
				case 234:
				case 235:
				case 236:
				case 237:
				case 238:
				case 240:
				case 241:
				case 242:
				case 245:
				case 246:
				case 247:
				case 248:
				case 249:
				case 250:
				case 251:
				case 252:
				case 253:
				case 254:
				case 255:
				case 256:
				case 257:
				case 258:
				case 259:
				case 260:
				case 262:
				case 263:
				case 264:
				case 266:
				case 267:
				case 268:
				case 269:
				case 270:
				case 271:
				case 272:
				case 274:
				case 275:
				case 276:
				case 277:
				case 278:
				case 279:
				case 281:
				case 282:
				case 284:
				case 285:
				case 286:
				case 287:
				case 288:
				case 289:
				case 290:
				case 291:
				case 292:
				case 293:
				case 294:
				case 295:
				case 296:
				case 297:
				case 299:
				case 300:
				case 302:
				case 303:
				case 304:
				case 305:
				case 306:
				case 307:
				case 309:
				case 310:
				case 311:
				case 312:
				case 313:
				case 314:
				case 315:
				case 316:
				case 317:
				case 319:
				case 320:
				case 321:
				case 322:
				case 323:
				case 324:
				case 325:
				case 326:
				case 327:
				case 328:
				case 329:
				case 330:
				case 331:
				case 332:
				case 333:
				case 334:
				case 336:
				case 337:
				case 338:
				case 339:
				case 340:
				case 341:
				case 342:
				case 343:
				case 344:
				case 345:
				case 346:
				case 347:
				case 348:
				case 349:
				case 350:
				case 351:
				case 352:
				case 353:
				case 354:
				case 357:
				case 358:
				case 359:
				case 360:
				case 361:
				case 362:
				case 363:
				case 364:
				case 365:
				case 366:
				case 367:
				case 368:
				case 369:
				case 370:
				case 371:
				case 372:
				case 373:
				case 374:
				case 375:
				case 376:
				case 377:
				case 495:
				case 498:
				case 581:
				case 670:
				case 683:
				case 689:
				case 690:
				case 691:
				case 692:
				case 694:
				case 699:
				case 700:
				case 701:
				case 704:
				case 705:
				case 710:
				case 712:
				case 719:
				case 720:
				case 723:
				case 725:
				case 727:
				case 728:
				case 732:
				case 733:
				case 734:
				case 735:
				case 736:
				case 737:
				case 738:
				case 741:
				case 742:
				case 743:
				case 745:
				case 746:
				case 747:
				case 748:
				case 749:
				case 750:
				case 751:
				case 752:
				case 753:
				case 754:
				case 755:
				case 757:
				case 758:
				case 759:
				case 760:
				case 762:
				case 765:
				case 766:
				case 767:
				case 768:
					{
					this.state = 8308;
					this.identifierKeywordsUnambiguous();
					}
					break;
				case 133:
				case 145:
				case 239:
				case 261:
				case 265:
				case 280:
				case 283:
				case 335:
				case 739:
					{
					this.state = 8309;
					this.identifierKeywordsAmbiguous3Roles();
					}
					break;
				case 155:
				case 180:
				case 308:
				case 688:
				case 703:
					{
					this.state = 8310;
					this.identifierKeywordsAmbiguous4SystemVariables();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public identifierKeywordsAmbiguous3Roles(): IdentifierKeywordsAmbiguous3RolesContext {
		let localctx: IdentifierKeywordsAmbiguous3RolesContext = new IdentifierKeywordsAmbiguous3RolesContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1196, MySQLParser.RULE_identifierKeywordsAmbiguous3Roles);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 8315;
			_la = this._input.LA(1);
			if(!(_la===133 || _la===145 || ((((_la - 239)) & ~0x1F) === 0 && ((1 << (_la - 239)) & 71303169) !== 0) || _la===280 || _la===283 || _la===335 || _la===739)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public identifierKeywordsUnambiguous(): IdentifierKeywordsUnambiguousContext {
		let localctx: IdentifierKeywordsUnambiguousContext = new IdentifierKeywordsUnambiguousContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1198, MySQLParser.RULE_identifierKeywordsUnambiguous);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 8317;
			_la = this._input.LA(1);
			if(!((((_la) & ~0x1F) === 0 && ((1 << _la) & 4046455834) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & 3207620169) !== 0) || ((((_la - 65)) & ~0x1F) === 0 && ((1 << (_la - 65)) & 4294967293) !== 0) || ((((_la - 97)) & ~0x1F) === 0 && ((1 << (_la - 97)) & 4293918079) !== 0) || ((((_la - 129)) & ~0x1F) === 0 && ((1 << (_la - 129)) & 4227792879) !== 0) || ((((_la - 161)) & ~0x1F) === 0 && ((1 << (_la - 161)) & 4294442973) !== 0) || ((((_la - 193)) & ~0x1F) === 0 && ((1 << (_la - 193)) & 4294901759) !== 0) || ((((_la - 225)) & ~0x1F) === 0 && ((1 << (_la - 225)) & 4294164479) !== 0) || ((((_la - 257)) & ~0x1F) === 0 && ((1 << (_la - 257)) & 4219404015) !== 0) || ((((_la - 289)) & ~0x1F) === 0 && ((1 << (_la - 289)) & 3757567487) !== 0) || ((((_la - 321)) & ~0x1F) === 0 && ((1 << (_la - 321)) & 4294950911) !== 0) || ((((_la - 353)) & ~0x1F) === 0 && ((1 << (_la - 353)) & 33554419) !== 0) || _la===495 || _la===498 || _la===581 || ((((_la - 670)) & ~0x1F) === 0 && ((1 << (_la - 670)) & 3782746113) !== 0) || ((((_la - 704)) & ~0x1F) === 0 && ((1 << (_la - 704)) & 4054417731) !== 0) || ((((_la - 736)) & ~0x1F) === 0 && ((1 << (_la - 736)) & 3857710823) !== 0) || _la===768)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public roleKeyword(): RoleKeywordContext {
		let localctx: RoleKeywordContext = new RoleKeywordContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1200, MySQLParser.RULE_roleKeyword);
		try {
			this.state = 8329;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 1116, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 8319;
				if (!(this.serverVersion < 80017)) {
					throw this.createFailedPredicateException("this.serverVersion < 80017");
				}
				this.state = 8322;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 1114, this._ctx) ) {
				case 1:
					{
					this.state = 8320;
					this.roleOrLabelKeyword();
					}
					break;
				case 2:
					{
					this.state = 8321;
					this.roleOrIdentifierKeyword();
					}
					break;
				}
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 8327;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case 1:
				case 3:
				case 4:
				case 10:
				case 20:
				case 21:
				case 24:
				case 28:
				case 29:
				case 30:
				case 31:
				case 33:
				case 36:
				case 39:
				case 42:
				case 43:
				case 46:
				case 47:
				case 53:
				case 54:
				case 57:
				case 58:
				case 59:
				case 60:
				case 61:
				case 62:
				case 64:
				case 65:
				case 67:
				case 68:
				case 69:
				case 70:
				case 71:
				case 72:
				case 73:
				case 74:
				case 75:
				case 76:
				case 77:
				case 78:
				case 79:
				case 80:
				case 81:
				case 82:
				case 83:
				case 84:
				case 85:
				case 86:
				case 87:
				case 88:
				case 89:
				case 90:
				case 91:
				case 92:
				case 93:
				case 94:
				case 95:
				case 96:
				case 97:
				case 98:
				case 99:
				case 100:
				case 101:
				case 102:
				case 103:
				case 105:
				case 107:
				case 108:
				case 109:
				case 110:
				case 111:
				case 112:
				case 113:
				case 114:
				case 115:
				case 116:
				case 118:
				case 119:
				case 120:
				case 121:
				case 122:
				case 123:
				case 124:
				case 125:
				case 126:
				case 127:
				case 128:
				case 129:
				case 130:
				case 131:
				case 132:
				case 134:
				case 135:
				case 136:
				case 137:
				case 138:
				case 139:
				case 140:
				case 141:
				case 142:
				case 143:
				case 144:
				case 146:
				case 147:
				case 148:
				case 149:
				case 150:
				case 151:
				case 152:
				case 153:
				case 154:
				case 156:
				case 157:
				case 158:
				case 159:
				case 160:
				case 161:
				case 163:
				case 164:
				case 165:
				case 167:
				case 168:
				case 169:
				case 170:
				case 171:
				case 172:
				case 173:
				case 174:
				case 175:
				case 176:
				case 177:
				case 178:
				case 179:
				case 181:
				case 182:
				case 183:
				case 184:
				case 185:
				case 186:
				case 187:
				case 188:
				case 189:
				case 190:
				case 191:
				case 192:
				case 193:
				case 194:
				case 195:
				case 196:
				case 197:
				case 198:
				case 199:
				case 200:
				case 201:
				case 202:
				case 203:
				case 204:
				case 205:
				case 206:
				case 207:
				case 208:
				case 210:
				case 211:
				case 212:
				case 213:
				case 214:
				case 215:
				case 216:
				case 217:
				case 218:
				case 219:
				case 220:
				case 221:
				case 222:
				case 223:
				case 224:
				case 225:
				case 226:
				case 227:
				case 228:
				case 229:
				case 230:
				case 231:
				case 232:
				case 233:
				case 234:
				case 235:
				case 236:
				case 237:
				case 238:
				case 240:
				case 241:
				case 242:
				case 245:
				case 246:
				case 247:
				case 248:
				case 249:
				case 250:
				case 251:
				case 252:
				case 253:
				case 254:
				case 255:
				case 256:
				case 257:
				case 258:
				case 259:
				case 260:
				case 262:
				case 263:
				case 264:
				case 266:
				case 267:
				case 268:
				case 269:
				case 270:
				case 271:
				case 272:
				case 274:
				case 275:
				case 276:
				case 277:
				case 278:
				case 279:
				case 281:
				case 282:
				case 284:
				case 285:
				case 286:
				case 287:
				case 288:
				case 289:
				case 290:
				case 291:
				case 292:
				case 293:
				case 294:
				case 295:
				case 296:
				case 297:
				case 299:
				case 300:
				case 302:
				case 303:
				case 304:
				case 305:
				case 306:
				case 307:
				case 309:
				case 310:
				case 311:
				case 312:
				case 313:
				case 314:
				case 315:
				case 316:
				case 317:
				case 319:
				case 320:
				case 321:
				case 322:
				case 323:
				case 324:
				case 325:
				case 326:
				case 327:
				case 328:
				case 329:
				case 330:
				case 331:
				case 332:
				case 333:
				case 334:
				case 336:
				case 337:
				case 338:
				case 339:
				case 340:
				case 341:
				case 342:
				case 343:
				case 344:
				case 345:
				case 346:
				case 347:
				case 348:
				case 349:
				case 350:
				case 351:
				case 352:
				case 353:
				case 354:
				case 357:
				case 358:
				case 359:
				case 360:
				case 361:
				case 362:
				case 363:
				case 364:
				case 365:
				case 366:
				case 367:
				case 368:
				case 369:
				case 370:
				case 371:
				case 372:
				case 373:
				case 374:
				case 375:
				case 376:
				case 377:
				case 495:
				case 498:
				case 581:
				case 670:
				case 683:
				case 689:
				case 690:
				case 691:
				case 692:
				case 694:
				case 699:
				case 700:
				case 701:
				case 704:
				case 705:
				case 710:
				case 712:
				case 719:
				case 720:
				case 723:
				case 725:
				case 727:
				case 728:
				case 732:
				case 733:
				case 734:
				case 735:
				case 736:
				case 737:
				case 738:
				case 741:
				case 742:
				case 743:
				case 745:
				case 746:
				case 747:
				case 748:
				case 749:
				case 750:
				case 751:
				case 752:
				case 753:
				case 754:
				case 755:
				case 757:
				case 758:
				case 759:
				case 760:
				case 762:
				case 765:
				case 766:
				case 767:
				case 768:
					{
					this.state = 8324;
					this.identifierKeywordsUnambiguous();
					}
					break;
				case 2:
				case 5:
				case 6:
				case 7:
				case 8:
				case 9:
				case 11:
				case 12:
				case 13:
				case 14:
				case 15:
				case 16:
				case 18:
				case 19:
				case 22:
				case 23:
				case 25:
				case 26:
				case 27:
				case 34:
				case 35:
				case 37:
				case 38:
				case 40:
				case 41:
				case 44:
				case 45:
				case 48:
				case 49:
				case 50:
				case 51:
				case 52:
				case 55:
				case 162:
				case 707:
					{
					this.state = 8325;
					this.identifierKeywordsAmbiguous2Labels();
					}
					break;
				case 155:
				case 180:
				case 308:
				case 688:
				case 703:
					{
					this.state = 8326;
					this.identifierKeywordsAmbiguous4SystemVariables();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public lValueKeyword(): LValueKeywordContext {
		let localctx: LValueKeywordContext = new LValueKeywordContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1202, MySQLParser.RULE_lValueKeyword);
		try {
			this.state = 8335;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 1:
			case 3:
			case 4:
			case 10:
			case 20:
			case 21:
			case 24:
			case 28:
			case 29:
			case 30:
			case 31:
			case 33:
			case 36:
			case 39:
			case 42:
			case 43:
			case 46:
			case 47:
			case 53:
			case 54:
			case 57:
			case 58:
			case 59:
			case 60:
			case 61:
			case 62:
			case 64:
			case 65:
			case 67:
			case 68:
			case 69:
			case 70:
			case 71:
			case 72:
			case 73:
			case 74:
			case 75:
			case 76:
			case 77:
			case 78:
			case 79:
			case 80:
			case 81:
			case 82:
			case 83:
			case 84:
			case 85:
			case 86:
			case 87:
			case 88:
			case 89:
			case 90:
			case 91:
			case 92:
			case 93:
			case 94:
			case 95:
			case 96:
			case 97:
			case 98:
			case 99:
			case 100:
			case 101:
			case 102:
			case 103:
			case 105:
			case 107:
			case 108:
			case 109:
			case 110:
			case 111:
			case 112:
			case 113:
			case 114:
			case 115:
			case 116:
			case 118:
			case 119:
			case 120:
			case 121:
			case 122:
			case 123:
			case 124:
			case 125:
			case 126:
			case 127:
			case 128:
			case 129:
			case 130:
			case 131:
			case 132:
			case 134:
			case 135:
			case 136:
			case 137:
			case 138:
			case 139:
			case 140:
			case 141:
			case 142:
			case 143:
			case 144:
			case 146:
			case 147:
			case 148:
			case 149:
			case 150:
			case 151:
			case 152:
			case 153:
			case 154:
			case 156:
			case 157:
			case 158:
			case 159:
			case 160:
			case 161:
			case 163:
			case 164:
			case 165:
			case 167:
			case 168:
			case 169:
			case 170:
			case 171:
			case 172:
			case 173:
			case 174:
			case 175:
			case 176:
			case 177:
			case 178:
			case 179:
			case 181:
			case 182:
			case 183:
			case 184:
			case 185:
			case 186:
			case 187:
			case 188:
			case 189:
			case 190:
			case 191:
			case 192:
			case 193:
			case 194:
			case 195:
			case 196:
			case 197:
			case 198:
			case 199:
			case 200:
			case 201:
			case 202:
			case 203:
			case 204:
			case 205:
			case 206:
			case 207:
			case 208:
			case 210:
			case 211:
			case 212:
			case 213:
			case 214:
			case 215:
			case 216:
			case 217:
			case 218:
			case 219:
			case 220:
			case 221:
			case 222:
			case 223:
			case 224:
			case 225:
			case 226:
			case 227:
			case 228:
			case 229:
			case 230:
			case 231:
			case 232:
			case 233:
			case 234:
			case 235:
			case 236:
			case 237:
			case 238:
			case 240:
			case 241:
			case 242:
			case 245:
			case 246:
			case 247:
			case 248:
			case 249:
			case 250:
			case 251:
			case 252:
			case 253:
			case 254:
			case 255:
			case 256:
			case 257:
			case 258:
			case 259:
			case 260:
			case 262:
			case 263:
			case 264:
			case 266:
			case 267:
			case 268:
			case 269:
			case 270:
			case 271:
			case 272:
			case 274:
			case 275:
			case 276:
			case 277:
			case 278:
			case 279:
			case 281:
			case 282:
			case 284:
			case 285:
			case 286:
			case 287:
			case 288:
			case 289:
			case 290:
			case 291:
			case 292:
			case 293:
			case 294:
			case 295:
			case 296:
			case 297:
			case 299:
			case 300:
			case 302:
			case 303:
			case 304:
			case 305:
			case 306:
			case 307:
			case 309:
			case 310:
			case 311:
			case 312:
			case 313:
			case 314:
			case 315:
			case 316:
			case 317:
			case 319:
			case 320:
			case 321:
			case 322:
			case 323:
			case 324:
			case 325:
			case 326:
			case 327:
			case 328:
			case 329:
			case 330:
			case 331:
			case 332:
			case 333:
			case 334:
			case 336:
			case 337:
			case 338:
			case 339:
			case 340:
			case 341:
			case 342:
			case 343:
			case 344:
			case 345:
			case 346:
			case 347:
			case 348:
			case 349:
			case 350:
			case 351:
			case 352:
			case 353:
			case 354:
			case 357:
			case 358:
			case 359:
			case 360:
			case 361:
			case 362:
			case 363:
			case 364:
			case 365:
			case 366:
			case 367:
			case 368:
			case 369:
			case 370:
			case 371:
			case 372:
			case 373:
			case 374:
			case 375:
			case 376:
			case 377:
			case 495:
			case 498:
			case 581:
			case 670:
			case 683:
			case 689:
			case 690:
			case 691:
			case 692:
			case 694:
			case 699:
			case 700:
			case 701:
			case 704:
			case 705:
			case 710:
			case 712:
			case 719:
			case 720:
			case 723:
			case 725:
			case 727:
			case 728:
			case 732:
			case 733:
			case 734:
			case 735:
			case 736:
			case 737:
			case 738:
			case 741:
			case 742:
			case 743:
			case 745:
			case 746:
			case 747:
			case 748:
			case 749:
			case 750:
			case 751:
			case 752:
			case 753:
			case 754:
			case 755:
			case 757:
			case 758:
			case 759:
			case 760:
			case 762:
			case 765:
			case 766:
			case 767:
			case 768:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 8331;
				this.identifierKeywordsUnambiguous();
				}
				break;
			case 17:
			case 56:
			case 744:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 8332;
				this.identifierKeywordsAmbiguous1RolesAndLabels();
				}
				break;
			case 2:
			case 5:
			case 6:
			case 7:
			case 8:
			case 9:
			case 11:
			case 12:
			case 13:
			case 14:
			case 15:
			case 16:
			case 18:
			case 19:
			case 22:
			case 23:
			case 25:
			case 26:
			case 27:
			case 34:
			case 35:
			case 37:
			case 38:
			case 40:
			case 41:
			case 44:
			case 45:
			case 48:
			case 49:
			case 50:
			case 51:
			case 52:
			case 55:
			case 162:
			case 707:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 8333;
				this.identifierKeywordsAmbiguous2Labels();
				}
				break;
			case 133:
			case 145:
			case 239:
			case 261:
			case 265:
			case 280:
			case 283:
			case 335:
			case 739:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 8334;
				this.identifierKeywordsAmbiguous3Roles();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public identifierKeywordsAmbiguous4SystemVariables(): IdentifierKeywordsAmbiguous4SystemVariablesContext {
		let localctx: IdentifierKeywordsAmbiguous4SystemVariablesContext = new IdentifierKeywordsAmbiguous4SystemVariablesContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1204, MySQLParser.RULE_identifierKeywordsAmbiguous4SystemVariables);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 8337;
			_la = this._input.LA(1);
			if(!(_la===155 || _la===180 || _la===308 || _la===688 || _la===703)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public roleOrIdentifierKeyword(): RoleOrIdentifierKeywordContext {
		let localctx: RoleOrIdentifierKeywordContext = new RoleOrIdentifierKeywordContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1206, MySQLParser.RULE_roleOrIdentifierKeyword);
		let _la: number;
		try {
			this.state = 8344;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 1118, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 8339;
				_la = this._input.LA(1);
				if(!((((_la) & ~0x1F) === 0 && ((1 << _la) & 4294836222) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 16777215) !== 0) || ((((_la - 689)) & ~0x1F) === 0 && ((1 << (_la - 689)) & 262157) !== 0) || ((((_la - 750)) & ~0x1F) === 0 && ((1 << (_la - 750)) & 15) !== 0))) {
				this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 8340;
				if (!(this.serverVersion >= 50709)) {
					throw this.createFailedPredicateException("this.serverVersion >= 50709");
				}
				this.state = 8341;
				this.match(MySQLParser.SHUTDOWN_SYMBOL);
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 8342;
				if (!(this.serverVersion >= 80000)) {
					throw this.createFailedPredicateException("this.serverVersion >= 80000");
				}
				this.state = 8343;
				this.match(MySQLParser.IMPORT_SYMBOL);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public roleOrLabelKeyword(): RoleOrLabelKeywordContext {
		let localctx: RoleOrLabelKeywordContext = new RoleOrLabelKeywordContext(this, this._ctx, this.state);
		this.enterRule(localctx, 1208, MySQLParser.RULE_roleOrLabelKeyword);
		let _la: number;
		try {
			this.state = 8355;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 1119, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 8346;
				_la = this._input.LA(1);
				if(!(((((_la - 57)) & ~0x1F) === 0 && ((1 << (_la - 57)) & 4294967231) !== 0) || ((((_la - 89)) & ~0x1F) === 0 && ((1 << (_la - 89)) & 4294836223) !== 0) || ((((_la - 121)) & ~0x1F) === 0 && ((1 << (_la - 121)) & 4278185983) !== 0) || ((((_la - 153)) & ~0x1F) === 0 && ((1 << (_la - 153)) & 4294958591) !== 0) || ((((_la - 185)) & ~0x1F) === 0 && ((1 << (_la - 185)) & 4294967295) !== 0) || ((((_la - 217)) & ~0x1F) === 0 && ((1 << (_la - 217)) & 4156555263) !== 0) || ((((_la - 249)) & ~0x1F) === 0 && ((1 << (_la - 249)) & 2147414015) !== 0) || ((((_la - 281)) & ~0x1F) === 0 && ((1 << (_la - 281)) & 4293787643) !== 0) || ((((_la - 313)) & ~0x1F) === 0 && ((1 << (_la - 313)) & 4294967295) !== 0) || ((((_la - 345)) & ~0x1F) === 0 && ((1 << (_la - 345)) & 4294965247) !== 0) || _la===377 || _la===429 || ((((_la - 694)) & ~0x1F) === 0 && ((1 << (_la - 694)) & 2785352929) !== 0) || ((((_la - 727)) & ~0x1F) === 0 && ((1 << (_la - 727)) & 3629699043) !== 0))) {
				this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 8347;
				if (!(this.serverVersion < 50709)) {
					throw this.createFailedPredicateException("this.serverVersion < 50709");
				}
				this.state = 8348;
				this.match(MySQLParser.SHUTDOWN_SYMBOL);
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 8349;
				if (!(this.serverVersion < 80000)) {
					throw this.createFailedPredicateException("this.serverVersion < 80000");
				}
				this.state = 8350;
				_la = this._input.LA(1);
				if(!(_la===106 || _la===162 || _la===298 || _la===301 || _la===356)) {
				this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				}
				break;
			case 4:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 8351;
				if (!(this.serverVersion >= 80000)) {
					throw this.createFailedPredicateException("this.serverVersion >= 80000");
				}
				this.state = 8352;
				_la = this._input.LA(1);
				if(!(_la===335 || _la===495 || _la===498 || _la===581 || _la===670 || _la===683)) {
				this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				}
				break;
			case 5:
				this.enterOuterAlt(localctx, 5);
				{
				this.state = 8353;
				if (!(this.serverVersion >= 80014)) {
					throw this.createFailedPredicateException("this.serverVersion >= 80014");
				}
				this.state = 8354;
				this.match(MySQLParser.ADMIN_SYMBOL);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}

	public sempred(localctx: RuleContext, ruleIndex: number, predIndex: number): boolean {
		switch (ruleIndex) {
		case 1:
			return this.simpleStatement_sempred(localctx as SimpleStatementContext, predIndex);
		case 2:
			return this.alterStatement_sempred(localctx as AlterStatementContext, predIndex);
		case 3:
			return this.alterDatabase_sempred(localctx as AlterDatabaseContext, predIndex);
		case 9:
			return this.alterTable_sempred(localctx as AlterTableContext, predIndex);
		case 13:
			return this.standaloneAlterCommands_sempred(localctx as StandaloneAlterCommandsContext, predIndex);
		case 14:
			return this.alterPartition_sempred(localctx as AlterPartitionContext, predIndex);
		case 17:
			return this.alterListItem_sempred(localctx as AlterListItemContext, predIndex);
		case 24:
			return this.withValidation_sempred(localctx as WithValidationContext, predIndex);
		case 28:
			return this.alterTablespace_sempred(localctx as AlterTablespaceContext, predIndex);
		case 39:
			return this.createStatement_sempred(localctx as CreateStatementContext, predIndex);
		case 41:
			return this.createDatabaseOption_sempred(localctx as CreateDatabaseOptionContext, predIndex);
		case 54:
			return this.createIndex_sempred(localctx as CreateIndexContext, predIndex);
		case 65:
			return this.tsDataFileName_sempred(localctx as TsDataFileNameContext, predIndex);
		case 68:
			return this.tablespaceOption_sempred(localctx as TablespaceOptionContext, predIndex);
		case 85:
			return this.triggerFollowsPrecedesClause_sempred(localctx as TriggerFollowsPrecedesClauseContext, predIndex);
		case 90:
			return this.dropStatement_sempred(localctx as DropStatementContext, predIndex);
		case 111:
			return this.deleteStatement_sempred(localctx as DeleteStatementContext, predIndex);
		case 112:
			return this.partitionDelete_sempred(localctx as PartitionDeleteContext, predIndex);
		case 114:
			return this.doStatement_sempred(localctx as DoStatementContext, predIndex);
		case 117:
			return this.insertStatement_sempred(localctx as InsertStatementContext, predIndex);
		case 136:
			return this.queryExpression_sempred(localctx as QueryExpressionContext, predIndex);
		case 137:
			return this.queryExpressionBody_sempred(localctx as QueryExpressionBodyContext, predIndex);
		case 139:
			return this.querySpecification_sempred(localctx as QuerySpecificationContext, predIndex);
		case 163:
			return this.olapOption_sempred(localctx as OlapOptionContext, predIndex);
		case 168:
			return this.selectOption_sempred(localctx as SelectOptionContext, predIndex);
		case 169:
			return this.lockingClause_sempred(localctx as LockingClauseContext, predIndex);
		case 170:
			return this.lockStrengh_sempred(localctx as LockStrenghContext, predIndex);
		case 176:
			return this.tableReference_sempred(localctx as TableReferenceContext, predIndex);
		case 182:
			return this.tableFactor_sempred(localctx as TableFactorContext, predIndex);
		case 185:
			return this.derivedTable_sempred(localctx as DerivedTableContext, predIndex);
		case 189:
			return this.jtColumn_sempred(localctx as JtColumnContext, predIndex);
		case 195:
			return this.tableAlias_sempred(localctx as TableAliasContext, predIndex);
		case 204:
			return this.updateStatement_sempred(localctx as UpdateStatementContext, predIndex);
		case 208:
			return this.transactionCharacteristic_sempred(localctx as TransactionCharacteristicContext, predIndex);
		case 210:
			return this.lockStatement_sempred(localctx as LockStatementContext, predIndex);
		case 214:
			return this.xaConvert_sempred(localctx as XaConvertContext, predIndex);
		case 216:
			return this.replicationStatement_sempred(localctx as ReplicationStatementContext, predIndex);
		case 217:
			return this.resetOption_sempred(localctx as ResetOptionContext, predIndex);
		case 218:
			return this.masterResetOptions_sempred(localctx as MasterResetOptionsContext, predIndex);
		case 227:
			return this.changeReplication_sempred(localctx as ChangeReplicationContext, predIndex);
		case 235:
			return this.slaveUntilOptions_sempred(localctx as SlaveUntilOptionsContext, predIndex);
		case 236:
			return this.slaveConnectionOptions_sempred(localctx as SlaveConnectionOptionsContext, predIndex);
		case 243:
			return this.cloneStatement_sempred(localctx as CloneStatementContext, predIndex);
		case 246:
			return this.accountManagementStatement_sempred(localctx as AccountManagementStatementContext, predIndex);
		case 247:
			return this.alterUser_sempred(localctx as AlterUserContext, predIndex);
		case 248:
			return this.alterUserTail_sempred(localctx as AlterUserTailContext, predIndex);
		case 250:
			return this.createUser_sempred(localctx as CreateUserContext, predIndex);
		case 251:
			return this.createUserTail_sempred(localctx as CreateUserTailContext, predIndex);
		case 252:
			return this.defaultRoleClause_sempred(localctx as DefaultRoleClauseContext, predIndex);
		case 255:
			return this.accountLockPasswordExpireOptions_sempred(localctx as AccountLockPasswordExpireOptionsContext, predIndex);
		case 256:
			return this.dropUser_sempred(localctx as DropUserContext, predIndex);
		case 257:
			return this.grant_sempred(localctx as GrantContext, predIndex);
		case 258:
			return this.grantTargetList_sempred(localctx as GrantTargetListContext, predIndex);
		case 259:
			return this.grantOptions_sempred(localctx as GrantOptionsContext, predIndex);
		case 263:
			return this.versionedRequireClause_sempred(localctx as VersionedRequireClauseContext, predIndex);
		case 265:
			return this.revoke_sempred(localctx as RevokeContext, predIndex);
		case 266:
			return this.onTypeTo_sempred(localctx as OnTypeToContext, predIndex);
		case 269:
			return this.roleOrPrivilege_sempred(localctx as RoleOrPrivilegeContext, predIndex);
		case 270:
			return this.grantIdentifier_sempred(localctx as GrantIdentifierContext, predIndex);
		case 277:
			return this.tableAdministrationStatement_sempred(localctx as TableAdministrationStatementContext, predIndex);
		case 283:
			return this.startOptionValueList_sempred(localctx as StartOptionValueListContext, predIndex);
		case 288:
			return this.optionValueNoOptionType_sempred(localctx as OptionValueNoOptionTypeContext, predIndex);
		case 293:
			return this.setExprOrDefault_sempred(localctx as SetExprOrDefaultContext, predIndex);
		case 294:
			return this.showStatement_sempred(localctx as ShowStatementContext, predIndex);
		case 295:
			return this.showCommandType_sempred(localctx as ShowCommandTypeContext, predIndex);
		case 296:
			return this.nonBlocking_sempred(localctx as NonBlockingContext, predIndex);
		case 300:
			return this.otherAdministrativeStatement_sempred(localctx as OtherAdministrativeStatementContext, predIndex);
		case 308:
			return this.flushOption_sempred(localctx as FlushOptionContext, predIndex);
		case 311:
			return this.flushTablesOptions_sempred(localctx as FlushTablesOptionsContext, predIndex);
		case 326:
			return this.utilityStatement_sempred(localctx as UtilityStatementContext, predIndex);
		case 328:
			return this.explainCommand_sempred(localctx as ExplainCommandContext, predIndex);
		case 329:
			return this.explainableStatement_sempred(localctx as ExplainableStatementContext, predIndex);
		case 333:
			return this.expr_sempred(localctx as ExprContext, predIndex);
		case 334:
			return this.boolPri_sempred(localctx as BoolPriContext, predIndex);
		case 336:
			return this.predicate_sempred(localctx as PredicateContext, predIndex);
		case 338:
			return this.bitExpr_sempred(localctx as BitExprContext, predIndex);
		case 339:
			return this.simpleExpr_sempred(localctx as SimpleExprContext, predIndex);
		case 340:
			return this.arrayCast_sempred(localctx as ArrayCastContext, predIndex);
		case 341:
			return this.jsonOperator_sempred(localctx as JsonOperatorContext, predIndex);
		case 342:
			return this.sumExpr_sempred(localctx as SumExprContext, predIndex);
		case 353:
			return this.runtimeFunctionCall_sempred(localctx as RuntimeFunctionCallContext, predIndex);
		case 354:
			return this.geometryFunction_sempred(localctx as GeometryFunctionContext, predIndex);
		case 356:
			return this.fractionalPrecision_sempred(localctx as FractionalPrecisionContext, predIndex);
		case 368:
			return this.internalVariableName_sempred(localctx as InternalVariableNameContext, predIndex);
		case 372:
			return this.castType_sempred(localctx as CastTypeContext, predIndex);
		case 386:
			return this.channel_sempred(localctx as ChannelContext, predIndex);
		case 415:
			return this.getDiagnostics_sempred(localctx as GetDiagnosticsContext, predIndex);
		case 428:
			return this.checkOrReferences_sempred(localctx as CheckOrReferencesContext, predIndex);
		case 431:
			return this.tableConstraintDef_sempred(localctx as TableConstraintDefContext, predIndex);
		case 433:
			return this.fieldDefinition_sempred(localctx as FieldDefinitionContext, predIndex);
		case 434:
			return this.columnAttribute_sempred(localctx as ColumnAttributeContext, predIndex);
		case 444:
			return this.keyListVariants_sempred(localctx as KeyListVariantsContext, predIndex);
		case 447:
			return this.commonIndexOption_sempred(localctx as CommonIndexOptionContext, predIndex);
		case 453:
			return this.dataType_sempred(localctx as DataTypeContext, predIndex);
		case 463:
			return this.charsetName_sempred(localctx as CharsetNameContext, predIndex);
		case 464:
			return this.collationName_sempred(localctx as CollationNameContext, predIndex);
		case 467:
			return this.createTableOption_sempred(localctx as CreateTableOptionContext, predIndex);
		case 475:
			return this.partitionKeyAlgorithm_sempred(localctx as PartitionKeyAlgorithmContext, predIndex);
		case 502:
			return this.createUserEntry_sempred(localctx as CreateUserEntryContext, predIndex);
		case 513:
			return this.usePartition_sempred(localctx as UsePartitionContext, predIndex);
		case 515:
			return this.columnName_sempred(localctx as ColumnNameContext, predIndex);
		case 558:
			return this.pureIdentifier_sempred(localctx as PureIdentifierContext, predIndex);
		case 563:
			return this.simpleIdentifier_sempred(localctx as SimpleIdentifierContext, predIndex);
		case 568:
			return this.real_ulonglong_number_sempred(localctx as Real_ulonglong_numberContext, predIndex);
		case 572:
			return this.textStringLiteral_sempred(localctx as TextStringLiteralContext, predIndex);
		case 574:
			return this.textStringHash_sempred(localctx as TextStringHashContext, predIndex);
		case 594:
			return this.identifierKeyword_sempred(localctx as IdentifierKeywordContext, predIndex);
		case 597:
			return this.labelKeyword_sempred(localctx as LabelKeywordContext, predIndex);
		case 600:
			return this.roleKeyword_sempred(localctx as RoleKeywordContext, predIndex);
		case 603:
			return this.roleOrIdentifierKeyword_sempred(localctx as RoleOrIdentifierKeywordContext, predIndex);
		case 604:
			return this.roleOrLabelKeyword_sempred(localctx as RoleOrLabelKeywordContext, predIndex);
		}
		return true;
	}
	private simpleStatement_sempred(localctx: SimpleStatementContext, predIndex: number): boolean {
		switch (predIndex) {
		case 0:
			return this.serverVersion >= 80000;
		case 1:
			return this.serverVersion >= 80000;
		case 2:
			return this.serverVersion >= 80000;
		case 3:
			return this.serverVersion >= 50604;
		}
		return true;
	}
	private alterStatement_sempred(localctx: AlterStatementContext, predIndex: number): boolean {
		switch (predIndex) {
		case 4:
			return this.serverVersion >= 80014;
		case 5:
			return this.serverVersion >= 50713;
		}
		return true;
	}
	private alterDatabase_sempred(localctx: AlterDatabaseContext, predIndex: number): boolean {
		switch (predIndex) {
		case 6:
			return this.serverVersion < 80000;
		}
		return true;
	}
	private alterTable_sempred(localctx: AlterTableContext, predIndex: number): boolean {
		switch (predIndex) {
		case 7:
			return this.serverVersion < 50700;
		}
		return true;
	}
	private standaloneAlterCommands_sempred(localctx: StandaloneAlterCommandsContext, predIndex: number): boolean {
		switch (predIndex) {
		case 8:
			return this.serverVersion >= 80014;
		}
		return true;
	}
	private alterPartition_sempred(localctx: AlterPartitionContext, predIndex: number): boolean {
		switch (predIndex) {
		case 9:
			return this.serverVersion >= 50704;
		case 10:
			return this.serverVersion >= 50704;
		}
		return true;
	}
	private alterListItem_sempred(localctx: AlterListItemContext, predIndex: number): boolean {
		switch (predIndex) {
		case 11:
			return this.serverVersion >= 50700;
		case 12:
			return this.serverVersion < 50700;
		case 13:
			return this.serverVersion >= 80014;
		case 14:
			return this.serverVersion >= 80000;
		case 15:
			return this.serverVersion >= 80017;
		case 16:
			return this.serverVersion >= 80000;
		case 17:
			return this.serverVersion >= 50700;
		case 18:
			return this.serverVersion >= 80014;
		case 19:
			return this.serverVersion >= 50708 && this.serverVersion < 80000;
		}
		return true;
	}
	private withValidation_sempred(localctx: WithValidationContext, predIndex: number): boolean {
		switch (predIndex) {
		case 20:
			return this.serverVersion >= 50706;
		}
		return true;
	}
	private alterTablespace_sempred(localctx: AlterTablespaceContext, predIndex: number): boolean {
		switch (predIndex) {
		case 21:
			return this.serverVersion < 80000;
		case 22:
			return this.serverVersion >= 80014;
		}
		return true;
	}
	private createStatement_sempred(localctx: CreateStatementContext, predIndex: number): boolean {
		switch (predIndex) {
		case 23:
			return this.serverVersion >= 80000;
		case 24:
			return this.serverVersion >= 80011;
		case 25:
			return this.serverVersion >= 80014;
		}
		return true;
	}
	private createDatabaseOption_sempred(localctx: CreateDatabaseOptionContext, predIndex: number): boolean {
		switch (predIndex) {
		case 26:
			return this.serverVersion >= 80016;
		}
		return true;
	}
	private createIndex_sempred(localctx: CreateIndexContext, predIndex: number): boolean {
		switch (predIndex) {
		case 27:
			return this.serverVersion >= 80014;
		}
		return true;
	}
	private tsDataFileName_sempred(localctx: TsDataFileNameContext, predIndex: number): boolean {
		switch (predIndex) {
		case 28:
			return this.serverVersion >= 80014;
		}
		return true;
	}
	private tablespaceOption_sempred(localctx: TablespaceOptionContext, predIndex: number): boolean {
		switch (predIndex) {
		case 29:
			return this.serverVersion >= 50707;
		case 30:
			return this.serverVersion >= 80014;
		}
		return true;
	}
	private triggerFollowsPrecedesClause_sempred(localctx: TriggerFollowsPrecedesClauseContext, predIndex: number): boolean {
		switch (predIndex) {
		case 31:
			return this.serverVersion >= 50700;
		}
		return true;
	}
	private dropStatement_sempred(localctx: DropStatementContext, predIndex: number): boolean {
		switch (predIndex) {
		case 32:
			return this.serverVersion >= 80000;
		case 33:
			return this.serverVersion >= 80011;
		case 34:
			return this.serverVersion >= 80014;
		}
		return true;
	}
	private deleteStatement_sempred(localctx: DeleteStatementContext, predIndex: number): boolean {
		switch (predIndex) {
		case 35:
			return this.serverVersion >= 80000;
		case 36:
			return this.serverVersion >= 80017;
		}
		return true;
	}
	private partitionDelete_sempred(localctx: PartitionDeleteContext, predIndex: number): boolean {
		switch (predIndex) {
		case 37:
			return this.serverVersion >= 50602;
		}
		return true;
	}
	private doStatement_sempred(localctx: DoStatementContext, predIndex: number): boolean {
		switch (predIndex) {
		case 38:
			return this.serverVersion < 50709;
		case 39:
			return this.serverVersion >= 50709;
		}
		return true;
	}
	private insertStatement_sempred(localctx: InsertStatementContext, predIndex: number): boolean {
		switch (predIndex) {
		case 40:
			return  this.serverVersion >= 80018;
		case 41:
			return  this.serverVersion >= 80018;
		}
		return true;
	}
	private queryExpression_sempred(localctx: QueryExpressionContext, predIndex: number): boolean {
		switch (predIndex) {
		case 42:
			return this.serverVersion >= 80000;
		case 43:
			return this.serverVersion < 80000;
		case 44:
			return this.serverVersion >= 80000;
		}
		return true;
	}
	private queryExpressionBody_sempred(localctx: QueryExpressionBodyContext, predIndex: number): boolean {
		switch (predIndex) {
		case 45:
			return this.precpred(this._ctx, 2);
		}
		return true;
	}
	private querySpecification_sempred(localctx: QuerySpecificationContext, predIndex: number): boolean {
		switch (predIndex) {
		case 46:
			return this.serverVersion >= 80000;
		}
		return true;
	}
	private olapOption_sempred(localctx: OlapOptionContext, predIndex: number): boolean {
		switch (predIndex) {
		case 47:
			return this.serverVersion < 80000;
		}
		return true;
	}
	private selectOption_sempred(localctx: SelectOptionContext, predIndex: number): boolean {
		switch (predIndex) {
		case 48:
			return this.serverVersion < 80000;
		case 49:
			return this.serverVersion >= 50704 && this.serverVersion < 50708;
		}
		return true;
	}
	private lockingClause_sempred(localctx: LockingClauseContext, predIndex: number): boolean {
		switch (predIndex) {
		case 50:
			return this.serverVersion >= 80000;
		case 51:
			return this.serverVersion >= 80000;
		}
		return true;
	}
	private lockStrengh_sempred(localctx: LockStrenghContext, predIndex: number): boolean {
		switch (predIndex) {
		case 52:
			return this.serverVersion >= 80000;
		}
		return true;
	}
	private tableReference_sempred(localctx: TableReferenceContext, predIndex: number): boolean {
		switch (predIndex) {
		case 53:
			return this.serverVersion < 80017;
		}
		return true;
	}
	private tableFactor_sempred(localctx: TableFactorContext, predIndex: number): boolean {
		switch (predIndex) {
		case 54:
			return this.serverVersion >= 80004;
		}
		return true;
	}
	private derivedTable_sempred(localctx: DerivedTableContext, predIndex: number): boolean {
		switch (predIndex) {
		case 55:
			return this.serverVersion >= 80000;
		case 56:
			return this.serverVersion >= 80014;
		}
		return true;
	}
	private jtColumn_sempred(localctx: JtColumnContext, predIndex: number): boolean {
		switch (predIndex) {
		case 57:
			return this.serverVersion >= 80014;
		}
		return true;
	}
	private tableAlias_sempred(localctx: TableAliasContext, predIndex: number): boolean {
		switch (predIndex) {
		case 58:
			return this.serverVersion < 80017;
		}
		return true;
	}
	private updateStatement_sempred(localctx: UpdateStatementContext, predIndex: number): boolean {
		switch (predIndex) {
		case 59:
			return this.serverVersion >= 80000;
		}
		return true;
	}
	private transactionCharacteristic_sempred(localctx: TransactionCharacteristicContext, predIndex: number): boolean {
		switch (predIndex) {
		case 60:
			return this.serverVersion >= 50605;
		}
		return true;
	}
	private lockStatement_sempred(localctx: LockStatementContext, predIndex: number): boolean {
		switch (predIndex) {
		case 61:
			return this.serverVersion >= 80000;
		case 62:
			return this.serverVersion >= 80000;
		}
		return true;
	}
	private xaConvert_sempred(localctx: XaConvertContext, predIndex: number): boolean {
		switch (predIndex) {
		case 63:
			return this.serverVersion >= 50704;
		}
		return true;
	}
	private replicationStatement_sempred(localctx: ReplicationStatementContext, predIndex: number): boolean {
		switch (predIndex) {
		case 64:
			return this.serverVersion > 80000;
		case 65:
			return this.serverVersion >= 50700;
		case 66:
			return this.serverVersion > 50706;
		}
		return true;
	}
	private resetOption_sempred(localctx: ResetOptionContext, predIndex: number): boolean {
		switch (predIndex) {
		case 67:
			return this.serverVersion < 80000;
		}
		return true;
	}
	private masterResetOptions_sempred(localctx: MasterResetOptionsContext, predIndex: number): boolean {
		switch (predIndex) {
		case 68:
			return this.serverVersion >= 80000;
		case 69:
			return this.serverVersion < 80017;
		case 70:
			return this.serverVersion >= 80017;
		}
		return true;
	}
	private changeReplication_sempred(localctx: ChangeReplicationContext, predIndex: number): boolean {
		switch (predIndex) {
		case 71:
			return this.serverVersion >= 80000;
		}
		return true;
	}
	private slaveUntilOptions_sempred(localctx: SlaveUntilOptionsContext, predIndex: number): boolean {
		switch (predIndex) {
		case 72:
			return this.serverVersion >= 50606;
		case 73:
			return this.serverVersion >= 50606;
		}
		return true;
	}
	private slaveConnectionOptions_sempred(localctx: SlaveConnectionOptionsContext, predIndex: number): boolean {
		switch (predIndex) {
		case 74:
			return this.serverVersion >= 50604;
		}
		return true;
	}
	private cloneStatement_sempred(localctx: CloneStatementContext, predIndex: number): boolean {
		switch (predIndex) {
		case 75:
			return this.serverVersion >= 80014;
		}
		return true;
	}
	private accountManagementStatement_sempred(localctx: AccountManagementStatementContext, predIndex: number): boolean {
		switch (predIndex) {
		case 76:
			return this.serverVersion >= 50606;
		case 77:
			return this.serverVersion >= 80000;
		}
		return true;
	}
	private alterUser_sempred(localctx: AlterUserContext, predIndex: number): boolean {
		switch (predIndex) {
		case 78:
			return this.serverVersion >= 50706;
		}
		return true;
	}
	private alterUserTail_sempred(localctx: AlterUserTailContext, predIndex: number): boolean {
		switch (predIndex) {
		case 79:
			return this.serverVersion < 80014;
		case 80:
			return this.serverVersion >= 80014;
		case 81:
			return this.serverVersion >= 50706;
		case 82:
			return this.serverVersion >= 80014;
		case 83:
			return this.serverVersion >= 80014;
		case 84:
			return this.serverVersion >= 80014;
		case 85:
			return this.serverVersion >= 80000;
		case 86:
			return this.serverVersion >= 80018;
		}
		return true;
	}
	private createUser_sempred(localctx: CreateUserContext, predIndex: number): boolean {
		switch (predIndex) {
		case 87:
			return this.serverVersion >= 50706;
		}
		return true;
	}
	private createUserTail_sempred(localctx: CreateUserTailContext, predIndex: number): boolean {
		switch (predIndex) {
		case 88:
			return this.serverVersion >= 50706;
		}
		return true;
	}
	private defaultRoleClause_sempred(localctx: DefaultRoleClauseContext, predIndex: number): boolean {
		switch (predIndex) {
		case 89:
			return this.serverVersion >= 80000;
		}
		return true;
	}
	private accountLockPasswordExpireOptions_sempred(localctx: AccountLockPasswordExpireOptionsContext, predIndex: number): boolean {
		switch (predIndex) {
		case 90:
			return this.serverVersion >= 80014;
		}
		return true;
	}
	private dropUser_sempred(localctx: DropUserContext, predIndex: number): boolean {
		switch (predIndex) {
		case 91:
			return this.serverVersion >= 50706;
		}
		return true;
	}
	private grant_sempred(localctx: GrantContext, predIndex: number): boolean {
		switch (predIndex) {
		case 92:
			return this.serverVersion >= 80000;
		}
		return true;
	}
	private grantTargetList_sempred(localctx: GrantTargetListContext, predIndex: number): boolean {
		switch (predIndex) {
		case 93:
			return this.serverVersion < 80011;
		case 94:
			return this.serverVersion >= 80011;
		}
		return true;
	}
	private grantOptions_sempred(localctx: GrantOptionsContext, predIndex: number): boolean {
		switch (predIndex) {
		case 95:
			return this.serverVersion < 80011;
		case 96:
			return this.serverVersion >= 80011;
		}
		return true;
	}
	private versionedRequireClause_sempred(localctx: VersionedRequireClauseContext, predIndex: number): boolean {
		switch (predIndex) {
		case 97:
			return this.serverVersion < 80011;
		}
		return true;
	}
	private revoke_sempred(localctx: RevokeContext, predIndex: number): boolean {
		switch (predIndex) {
		case 98:
			return this.serverVersion >= 80000;
		case 99:
			return this.serverVersion >= 80000;
		}
		return true;
	}
	private onTypeTo_sempred(localctx: OnTypeToContext, predIndex: number): boolean {
		switch (predIndex) {
		case 100:
			return this.serverVersion < 80000;
		case 101:
			return this.serverVersion >= 80000;
		}
		return true;
	}
	private roleOrPrivilege_sempred(localctx: RoleOrPrivilegeContext, predIndex: number): boolean {
		switch (predIndex) {
		case 102:
			return this.serverVersion > 80000;
		case 103:
			return this.serverVersion > 80000;
		}
		return true;
	}
	private grantIdentifier_sempred(localctx: GrantIdentifierContext, predIndex: number): boolean {
		switch (predIndex) {
		case 104:
			return this.serverVersion >= 80017;
		}
		return true;
	}
	private tableAdministrationStatement_sempred(localctx: TableAdministrationStatementContext, predIndex: number): boolean {
		switch (predIndex) {
		case 105:
			return this.serverVersion >= 80000;
		}
		return true;
	}
	private startOptionValueList_sempred(localctx: StartOptionValueListContext, predIndex: number): boolean {
		switch (predIndex) {
		case 106:
			return this.serverVersion < 50706;
		case 107:
			return this.serverVersion < 80014;
		case 108:
			return this.serverVersion >= 80018;
		}
		return true;
	}
	private optionValueNoOptionType_sempred(localctx: OptionValueNoOptionTypeContext, predIndex: number): boolean {
		switch (predIndex) {
		case 109:
			return this.serverVersion >= 80011;
		}
		return true;
	}
	private setExprOrDefault_sempred(localctx: SetExprOrDefaultContext, predIndex: number): boolean {
		switch (predIndex) {
		case 110:
			return this.serverVersion >= 80000;
		}
		return true;
	}
	private showStatement_sempred(localctx: ShowStatementContext, predIndex: number): boolean {
		switch (predIndex) {
		case 111:
			return this.serverVersion < 50700;
		case 112:
			return this.serverVersion >= 80000;
		case 113:
			return this.serverVersion < 50700;
		case 114:
			return this.serverVersion >= 50704;
		}
		return true;
	}
	private showCommandType_sempred(localctx: ShowCommandTypeContext, predIndex: number): boolean {
		switch (predIndex) {
		case 115:
			return this.serverVersion >= 80000;
		}
		return true;
	}
	private nonBlocking_sempred(localctx: NonBlockingContext, predIndex: number): boolean {
		switch (predIndex) {
		case 116:
			return this.serverVersion >= 50700 && this.serverVersion < 50706;
		}
		return true;
	}
	private otherAdministrativeStatement_sempred(localctx: OtherAdministrativeStatementContext, predIndex: number): boolean {
		switch (predIndex) {
		case 117:
			return this.serverVersion >= 50709;
		}
		return true;
	}
	private flushOption_sempred(localctx: FlushOptionContext, predIndex: number): boolean {
		switch (predIndex) {
		case 118:
			return this.serverVersion < 80000;
		case 119:
			return this.serverVersion >= 50706;
		}
		return true;
	}
	private flushTablesOptions_sempred(localctx: FlushTablesOptionsContext, predIndex: number): boolean {
		switch (predIndex) {
		case 120:
			return this.serverVersion >= 50606;
		}
		return true;
	}
	private utilityStatement_sempred(localctx: UtilityStatementContext, predIndex: number): boolean {
		switch (predIndex) {
		case 121:
			return this.serverVersion >= 80011;
		}
		return true;
	}
	private explainCommand_sempred(localctx: ExplainCommandContext, predIndex: number): boolean {
		switch (predIndex) {
		case 122:
			return this.serverVersion < 80000;
		case 123:
			return this.serverVersion < 80000;
		case 124:
			return this.serverVersion >= 50605;
		case 125:
			return this.serverVersion >= 80018;
		}
		return true;
	}
	private explainableStatement_sempred(localctx: ExplainableStatementContext, predIndex: number): boolean {
		switch (predIndex) {
		case 126:
			return this.serverVersion >= 50603;
		case 127:
			return this.serverVersion >= 50700;
		}
		return true;
	}
	private expr_sempred(localctx: ExprContext, predIndex: number): boolean {
		switch (predIndex) {
		case 128:
			return this.precpred(this._ctx, 3);
		case 129:
			return this.precpred(this._ctx, 2);
		case 130:
			return this.precpred(this._ctx, 1);
		}
		return true;
	}
	private boolPri_sempred(localctx: BoolPriContext, predIndex: number): boolean {
		switch (predIndex) {
		case 131:
			return this.precpred(this._ctx, 3);
		case 132:
			return this.precpred(this._ctx, 2);
		case 133:
			return this.precpred(this._ctx, 1);
		}
		return true;
	}
	private predicate_sempred(localctx: PredicateContext, predIndex: number): boolean {
		switch (predIndex) {
		case 134:
			return this.serverVersion >= 80017;
		}
		return true;
	}
	private bitExpr_sempred(localctx: BitExprContext, predIndex: number): boolean {
		switch (predIndex) {
		case 135:
			return this.precpred(this._ctx, 7);
		case 136:
			return this.precpred(this._ctx, 6);
		case 137:
			return this.precpred(this._ctx, 5);
		case 138:
			return this.precpred(this._ctx, 3);
		case 139:
			return this.precpred(this._ctx, 2);
		case 140:
			return this.precpred(this._ctx, 1);
		case 141:
			return this.precpred(this._ctx, 4);
		}
		return true;
	}
	private simpleExpr_sempred(localctx: SimpleExprContext, predIndex: number): boolean {
		switch (predIndex) {
		case 142:
			return this.serverVersion >= 80000;
		case 143:
			return this.serverVersion >= 80000;
		case 144:
			return this.precpred(this._ctx, 15);
		case 145:
			return this.precpred(this._ctx, 21);
		}
		return true;
	}
	private arrayCast_sempred(localctx: ArrayCastContext, predIndex: number): boolean {
		switch (predIndex) {
		case 146:
			return this.serverVersion >= 80017;
		}
		return true;
	}
	private jsonOperator_sempred(localctx: JsonOperatorContext, predIndex: number): boolean {
		switch (predIndex) {
		case 147:
			return this.serverVersion >= 50708;
		case 148:
			return this.serverVersion >= 50713;
		}
		return true;
	}
	private sumExpr_sempred(localctx: SumExprContext, predIndex: number): boolean {
		switch (predIndex) {
		case 149:
			return this.serverVersion >= 80000;
		case 150:
			return this.serverVersion >= 80000;
		case 151:
			return this.serverVersion >= 80000;
		case 152:
			return this.serverVersion >= 80000;
		case 153:
			return this.serverVersion >= 80000;
		case 154:
			return this.serverVersion >= 80000;
		case 155:
			return this.serverVersion >= 80000;
		case 156:
			return this.serverVersion >= 80000;
		case 157:
			return this.serverVersion >= 80000;
		case 158:
			return this.serverVersion >= 80000;
		case 159:
			return this.serverVersion >= 80000;
		case 160:
			return this.serverVersion >= 80000;
		case 161:
			return this.serverVersion >= 80000;
		}
		return true;
	}
	private runtimeFunctionCall_sempred(localctx: RuntimeFunctionCallContext, predIndex: number): boolean {
		switch (predIndex) {
		case 162:
			return this.serverVersion < 50607;
		case 163:
			return this.serverVersion < 80011;
		case 164:
			return this.serverVersion < 80000;
		}
		return true;
	}
	private geometryFunction_sempred(localctx: GeometryFunctionContext, predIndex: number): boolean {
		switch (predIndex) {
		case 165:
			return this.serverVersion < 50706;
		}
		return true;
	}
	private fractionalPrecision_sempred(localctx: FractionalPrecisionContext, predIndex: number): boolean {
		switch (predIndex) {
		case 166:
			return this.serverVersion >= 50604;
		}
		return true;
	}
	private internalVariableName_sempred(localctx: InternalVariableNameContext, predIndex: number): boolean {
		switch (predIndex) {
		case 167:
			return this.serverVersion < 80017;
		case 168:
			return this.serverVersion >= 80017;
		}
		return true;
	}
	private castType_sempred(localctx: CastTypeContext, predIndex: number): boolean {
		switch (predIndex) {
		case 169:
			return this.serverVersion >= 50708;
		case 170:
			return this.serverVersion >= 80017;
		case 171:
			return this.serverVersion >= 80017;
		}
		return true;
	}
	private channel_sempred(localctx: ChannelContext, predIndex: number): boolean {
		switch (predIndex) {
		case 172:
			return this.serverVersion >= 50706;
		}
		return true;
	}
	private getDiagnostics_sempred(localctx: GetDiagnosticsContext, predIndex: number): boolean {
		switch (predIndex) {
		case 173:
			return this.serverVersion >= 50700;
		}
		return true;
	}
	private checkOrReferences_sempred(localctx: CheckOrReferencesContext, predIndex: number): boolean {
		switch (predIndex) {
		case 174:
			return this.serverVersion < 80016;
		}
		return true;
	}
	private tableConstraintDef_sempred(localctx: TableConstraintDefContext, predIndex: number): boolean {
		switch (predIndex) {
		case 175:
			return this.serverVersion >= 80017;
		}
		return true;
	}
	private fieldDefinition_sempred(localctx: FieldDefinitionContext, predIndex: number): boolean {
		switch (predIndex) {
		case 176:
			return this.serverVersion >= 50707;
		case 177:
			return this.serverVersion < 80000;
		case 178:
			return this.serverVersion >= 80000;
		}
		return true;
	}
	private columnAttribute_sempred(localctx: ColumnAttributeContext, predIndex: number): boolean {
		switch (predIndex) {
		case 179:
			return this.serverVersion >= 80014;
		case 180:
			return this.serverVersion >= 80013;
		case 181:
			return this.serverVersion >= 80000;
		case 182:
			return this.serverVersion >= 80017;
		case 183:
			return this.serverVersion >= 80017;
		}
		return true;
	}
	private keyListVariants_sempred(localctx: KeyListVariantsContext, predIndex: number): boolean {
		switch (predIndex) {
		case 184:
			return this.serverVersion >= 80013;
		case 185:
			return this.serverVersion < 80013;
		}
		return true;
	}
	private commonIndexOption_sempred(localctx: CommonIndexOptionContext, predIndex: number): boolean {
		switch (predIndex) {
		case 186:
			return this.serverVersion >= 80000;
		}
		return true;
	}
	private dataType_sempred(localctx: DataTypeContext, predIndex: number): boolean {
		switch (predIndex) {
		case 187:
			return this.serverVersion >= 50708;
		}
		return true;
	}
	private charsetName_sempred(localctx: CharsetNameContext, predIndex: number): boolean {
		switch (predIndex) {
		case 188:
			return this.serverVersion < 80011;
		}
		return true;
	}
	private collationName_sempred(localctx: CollationNameContext, predIndex: number): boolean {
		switch (predIndex) {
		case 189:
			return this.serverVersion < 80011;
		case 190:
			return this.serverVersion >= 80018;
		}
		return true;
	}
	private createTableOption_sempred(localctx: CreateTableOptionContext, predIndex: number): boolean {
		switch (predIndex) {
		case 191:
			return this.serverVersion >= 80014;
		case 192:
			return this.serverVersion >= 50708;
		case 193:
			return this.serverVersion >= 50711;
		case 194:
			return this.serverVersion >= 50707;
		}
		return true;
	}
	private partitionKeyAlgorithm_sempred(localctx: PartitionKeyAlgorithmContext, predIndex: number): boolean {
		switch (predIndex) {
		case 195:
			return this.serverVersion >= 50700;
		}
		return true;
	}
	private createUserEntry_sempred(localctx: CreateUserEntryContext, predIndex: number): boolean {
		switch (predIndex) {
		case 196:
			return this.serverVersion < 80011;
		case 197:
			return this.serverVersion >= 50706;
		case 198:
			return this.serverVersion >= 80018;
		}
		return true;
	}
	private usePartition_sempred(localctx: UsePartitionContext, predIndex: number): boolean {
		switch (predIndex) {
		case 199:
			return this.serverVersion >= 50602;
		}
		return true;
	}
	private columnName_sempred(localctx: ColumnNameContext, predIndex: number): boolean {
		switch (predIndex) {
		case 200:
			return this.serverVersion >= 80000;
		case 201:
			return this.serverVersion < 80000;
		}
		return true;
	}
	private pureIdentifier_sempred(localctx: PureIdentifierContext, predIndex: number): boolean {
		switch (predIndex) {
		case 202:
			return this.isSqlModeActive(SqlMode.AnsiQuotes);
		}
		return true;
	}
	private simpleIdentifier_sempred(localctx: SimpleIdentifierContext, predIndex: number): boolean {
		switch (predIndex) {
		case 203:
			return this.serverVersion < 80000;
		}
		return true;
	}
	private real_ulonglong_number_sempred(localctx: Real_ulonglong_numberContext, predIndex: number): boolean {
		switch (predIndex) {
		case 204:
			return this.serverVersion >= 80017;
		}
		return true;
	}
	private textStringLiteral_sempred(localctx: TextStringLiteralContext, predIndex: number): boolean {
		switch (predIndex) {
		case 205:
			return !this.isSqlModeActive(SqlMode.AnsiQuotes);
		}
		return true;
	}
	private textStringHash_sempred(localctx: TextStringHashContext, predIndex: number): boolean {
		switch (predIndex) {
		case 206:
			return this.serverVersion >= 80017;
		}
		return true;
	}
	private identifierKeyword_sempred(localctx: IdentifierKeywordContext, predIndex: number): boolean {
		switch (predIndex) {
		case 207:
			return this.serverVersion < 80017;
		case 208:
			return this.serverVersion >= 50709;
		case 209:
			return this.serverVersion >= 80011;
		}
		return true;
	}
	private labelKeyword_sempred(localctx: LabelKeywordContext, predIndex: number): boolean {
		switch (predIndex) {
		case 210:
			return this.serverVersion < 80017;
		}
		return true;
	}
	private roleKeyword_sempred(localctx: RoleKeywordContext, predIndex: number): boolean {
		switch (predIndex) {
		case 211:
			return this.serverVersion < 80017;
		}
		return true;
	}
	private roleOrIdentifierKeyword_sempred(localctx: RoleOrIdentifierKeywordContext, predIndex: number): boolean {
		switch (predIndex) {
		case 212:
			return this.serverVersion >= 50709;
		case 213:
			return this.serverVersion >= 80000;
		}
		return true;
	}
	private roleOrLabelKeyword_sempred(localctx: RoleOrLabelKeywordContext, predIndex: number): boolean {
		switch (predIndex) {
		case 214:
			return this.serverVersion < 50709;
		case 215:
			return this.serverVersion < 80000;
		case 216:
			return this.serverVersion >= 80000;
		case 217:
			return this.serverVersion >= 80014;
		}
		return true;
	}

	public static readonly _serializedATN: number[] = [4,1,783,8358,2,0,7,0,
	2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,
	2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,
	17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,
	7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,
	31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,
	2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
	46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,
	7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,
	60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,
	2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,
	75,7,75,2,76,7,76,2,77,7,77,2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,
	7,82,2,83,7,83,2,84,7,84,2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,
	89,2,90,7,90,2,91,7,91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,
	2,97,7,97,2,98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,
	7,103,2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
	7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,2,115,
	7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,7,120,2,121,
	7,121,2,122,7,122,2,123,7,123,2,124,7,124,2,125,7,125,2,126,7,126,2,127,
	7,127,2,128,7,128,2,129,7,129,2,130,7,130,2,131,7,131,2,132,7,132,2,133,
	7,133,2,134,7,134,2,135,7,135,2,136,7,136,2,137,7,137,2,138,7,138,2,139,
	7,139,2,140,7,140,2,141,7,141,2,142,7,142,2,143,7,143,2,144,7,144,2,145,
	7,145,2,146,7,146,2,147,7,147,2,148,7,148,2,149,7,149,2,150,7,150,2,151,
	7,151,2,152,7,152,2,153,7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,
	7,157,2,158,7,158,2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,
	7,163,2,164,7,164,2,165,7,165,2,166,7,166,2,167,7,167,2,168,7,168,2,169,
	7,169,2,170,7,170,2,171,7,171,2,172,7,172,2,173,7,173,2,174,7,174,2,175,
	7,175,2,176,7,176,2,177,7,177,2,178,7,178,2,179,7,179,2,180,7,180,2,181,
	7,181,2,182,7,182,2,183,7,183,2,184,7,184,2,185,7,185,2,186,7,186,2,187,
	7,187,2,188,7,188,2,189,7,189,2,190,7,190,2,191,7,191,2,192,7,192,2,193,
	7,193,2,194,7,194,2,195,7,195,2,196,7,196,2,197,7,197,2,198,7,198,2,199,
	7,199,2,200,7,200,2,201,7,201,2,202,7,202,2,203,7,203,2,204,7,204,2,205,
	7,205,2,206,7,206,2,207,7,207,2,208,7,208,2,209,7,209,2,210,7,210,2,211,
	7,211,2,212,7,212,2,213,7,213,2,214,7,214,2,215,7,215,2,216,7,216,2,217,
	7,217,2,218,7,218,2,219,7,219,2,220,7,220,2,221,7,221,2,222,7,222,2,223,
	7,223,2,224,7,224,2,225,7,225,2,226,7,226,2,227,7,227,2,228,7,228,2,229,
	7,229,2,230,7,230,2,231,7,231,2,232,7,232,2,233,7,233,2,234,7,234,2,235,
	7,235,2,236,7,236,2,237,7,237,2,238,7,238,2,239,7,239,2,240,7,240,2,241,
	7,241,2,242,7,242,2,243,7,243,2,244,7,244,2,245,7,245,2,246,7,246,2,247,
	7,247,2,248,7,248,2,249,7,249,2,250,7,250,2,251,7,251,2,252,7,252,2,253,
	7,253,2,254,7,254,2,255,7,255,2,256,7,256,2,257,7,257,2,258,7,258,2,259,
	7,259,2,260,7,260,2,261,7,261,2,262,7,262,2,263,7,263,2,264,7,264,2,265,
	7,265,2,266,7,266,2,267,7,267,2,268,7,268,2,269,7,269,2,270,7,270,2,271,
	7,271,2,272,7,272,2,273,7,273,2,274,7,274,2,275,7,275,2,276,7,276,2,277,
	7,277,2,278,7,278,2,279,7,279,2,280,7,280,2,281,7,281,2,282,7,282,2,283,
	7,283,2,284,7,284,2,285,7,285,2,286,7,286,2,287,7,287,2,288,7,288,2,289,
	7,289,2,290,7,290,2,291,7,291,2,292,7,292,2,293,7,293,2,294,7,294,2,295,
	7,295,2,296,7,296,2,297,7,297,2,298,7,298,2,299,7,299,2,300,7,300,2,301,
	7,301,2,302,7,302,2,303,7,303,2,304,7,304,2,305,7,305,2,306,7,306,2,307,
	7,307,2,308,7,308,2,309,7,309,2,310,7,310,2,311,7,311,2,312,7,312,2,313,
	7,313,2,314,7,314,2,315,7,315,2,316,7,316,2,317,7,317,2,318,7,318,2,319,
	7,319,2,320,7,320,2,321,7,321,2,322,7,322,2,323,7,323,2,324,7,324,2,325,
	7,325,2,326,7,326,2,327,7,327,2,328,7,328,2,329,7,329,2,330,7,330,2,331,
	7,331,2,332,7,332,2,333,7,333,2,334,7,334,2,335,7,335,2,336,7,336,2,337,
	7,337,2,338,7,338,2,339,7,339,2,340,7,340,2,341,7,341,2,342,7,342,2,343,
	7,343,2,344,7,344,2,345,7,345,2,346,7,346,2,347,7,347,2,348,7,348,2,349,
	7,349,2,350,7,350,2,351,7,351,2,352,7,352,2,353,7,353,2,354,7,354,2,355,
	7,355,2,356,7,356,2,357,7,357,2,358,7,358,2,359,7,359,2,360,7,360,2,361,
	7,361,2,362,7,362,2,363,7,363,2,364,7,364,2,365,7,365,2,366,7,366,2,367,
	7,367,2,368,7,368,2,369,7,369,2,370,7,370,2,371,7,371,2,372,7,372,2,373,
	7,373,2,374,7,374,2,375,7,375,2,376,7,376,2,377,7,377,2,378,7,378,2,379,
	7,379,2,380,7,380,2,381,7,381,2,382,7,382,2,383,7,383,2,384,7,384,2,385,
	7,385,2,386,7,386,2,387,7,387,2,388,7,388,2,389,7,389,2,390,7,390,2,391,
	7,391,2,392,7,392,2,393,7,393,2,394,7,394,2,395,7,395,2,396,7,396,2,397,
	7,397,2,398,7,398,2,399,7,399,2,400,7,400,2,401,7,401,2,402,7,402,2,403,
	7,403,2,404,7,404,2,405,7,405,2,406,7,406,2,407,7,407,2,408,7,408,2,409,
	7,409,2,410,7,410,2,411,7,411,2,412,7,412,2,413,7,413,2,414,7,414,2,415,
	7,415,2,416,7,416,2,417,7,417,2,418,7,418,2,419,7,419,2,420,7,420,2,421,
	7,421,2,422,7,422,2,423,7,423,2,424,7,424,2,425,7,425,2,426,7,426,2,427,
	7,427,2,428,7,428,2,429,7,429,2,430,7,430,2,431,7,431,2,432,7,432,2,433,
	7,433,2,434,7,434,2,435,7,435,2,436,7,436,2,437,7,437,2,438,7,438,2,439,
	7,439,2,440,7,440,2,441,7,441,2,442,7,442,2,443,7,443,2,444,7,444,2,445,
	7,445,2,446,7,446,2,447,7,447,2,448,7,448,2,449,7,449,2,450,7,450,2,451,
	7,451,2,452,7,452,2,453,7,453,2,454,7,454,2,455,7,455,2,456,7,456,2,457,
	7,457,2,458,7,458,2,459,7,459,2,460,7,460,2,461,7,461,2,462,7,462,2,463,
	7,463,2,464,7,464,2,465,7,465,2,466,7,466,2,467,7,467,2,468,7,468,2,469,
	7,469,2,470,7,470,2,471,7,471,2,472,7,472,2,473,7,473,2,474,7,474,2,475,
	7,475,2,476,7,476,2,477,7,477,2,478,7,478,2,479,7,479,2,480,7,480,2,481,
	7,481,2,482,7,482,2,483,7,483,2,484,7,484,2,485,7,485,2,486,7,486,2,487,
	7,487,2,488,7,488,2,489,7,489,2,490,7,490,2,491,7,491,2,492,7,492,2,493,
	7,493,2,494,7,494,2,495,7,495,2,496,7,496,2,497,7,497,2,498,7,498,2,499,
	7,499,2,500,7,500,2,501,7,501,2,502,7,502,2,503,7,503,2,504,7,504,2,505,
	7,505,2,506,7,506,2,507,7,507,2,508,7,508,2,509,7,509,2,510,7,510,2,511,
	7,511,2,512,7,512,2,513,7,513,2,514,7,514,2,515,7,515,2,516,7,516,2,517,
	7,517,2,518,7,518,2,519,7,519,2,520,7,520,2,521,7,521,2,522,7,522,2,523,
	7,523,2,524,7,524,2,525,7,525,2,526,7,526,2,527,7,527,2,528,7,528,2,529,
	7,529,2,530,7,530,2,531,7,531,2,532,7,532,2,533,7,533,2,534,7,534,2,535,
	7,535,2,536,7,536,2,537,7,537,2,538,7,538,2,539,7,539,2,540,7,540,2,541,
	7,541,2,542,7,542,2,543,7,543,2,544,7,544,2,545,7,545,2,546,7,546,2,547,
	7,547,2,548,7,548,2,549,7,549,2,550,7,550,2,551,7,551,2,552,7,552,2,553,
	7,553,2,554,7,554,2,555,7,555,2,556,7,556,2,557,7,557,2,558,7,558,2,559,
	7,559,2,560,7,560,2,561,7,561,2,562,7,562,2,563,7,563,2,564,7,564,2,565,
	7,565,2,566,7,566,2,567,7,567,2,568,7,568,2,569,7,569,2,570,7,570,2,571,
	7,571,2,572,7,572,2,573,7,573,2,574,7,574,2,575,7,575,2,576,7,576,2,577,
	7,577,2,578,7,578,2,579,7,579,2,580,7,580,2,581,7,581,2,582,7,582,2,583,
	7,583,2,584,7,584,2,585,7,585,2,586,7,586,2,587,7,587,2,588,7,588,2,589,
	7,589,2,590,7,590,2,591,7,591,2,592,7,592,2,593,7,593,2,594,7,594,2,595,
	7,595,2,596,7,596,2,597,7,597,2,598,7,598,2,599,7,599,2,600,7,600,2,601,
	7,601,2,602,7,602,2,603,7,603,2,604,7,604,1,0,1,0,1,0,3,0,1214,8,0,1,0,
	1,0,3,0,1218,8,0,1,0,3,0,1221,8,0,3,0,1223,8,0,1,1,1,1,1,1,1,1,1,1,1,1,
	1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
	1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,1259,8,1,1,2,1,2,1,2,1,2,1,
	2,1,2,3,2,1267,8,2,1,2,1,2,1,2,3,2,1272,8,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
	1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,1288,8,2,1,3,1,3,1,3,4,3,1293,8,3,11,3,
	12,3,1294,1,3,1,3,1,3,1,3,1,3,3,3,1302,8,3,1,4,3,4,1305,8,4,1,4,1,4,1,4,
	1,4,1,4,3,4,1312,8,4,1,4,1,4,1,4,3,4,1317,8,4,1,4,3,4,1320,8,4,1,4,1,4,
	1,4,3,4,1325,8,4,1,4,1,4,1,4,1,4,3,4,1331,8,4,3,4,1333,8,4,1,4,1,4,3,4,
	1337,8,4,1,4,1,4,3,4,1341,8,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,1350,8,5,
	1,6,1,6,3,6,1354,8,6,1,6,5,6,1357,8,6,10,6,12,6,1360,9,6,1,7,1,7,1,7,3,
	7,1365,8,7,1,8,1,8,1,8,1,8,1,9,3,9,1372,8,9,1,9,1,9,3,9,1376,8,9,1,9,1,
	9,1,9,3,9,1381,8,9,1,10,1,10,1,10,3,10,1386,8,10,1,10,1,10,1,10,1,10,1,
	10,3,10,1393,8,10,1,10,3,10,1396,8,10,1,11,1,11,1,11,1,11,3,11,1402,8,11,
	1,11,3,11,1405,8,11,1,12,1,12,1,12,5,12,1410,8,12,10,12,12,12,1413,9,12,
	1,13,1,13,1,13,1,13,1,13,1,13,1,13,3,13,1422,8,13,1,14,1,14,1,14,3,14,1427,
	8,14,1,14,1,14,1,14,3,14,1432,8,14,1,14,1,14,1,14,1,14,1,14,1,14,3,14,1440,
	8,14,1,14,1,14,1,14,1,14,3,14,1446,8,14,1,14,1,14,3,14,1450,8,14,1,14,1,
	14,1,14,3,14,1455,8,14,1,14,1,14,1,14,1,14,1,14,5,14,1462,8,14,10,14,12,
	14,1465,9,14,1,14,1,14,1,14,3,14,1470,8,14,1,14,1,14,5,14,1474,8,14,10,
	14,12,14,1477,9,14,1,14,1,14,1,14,3,14,1482,8,14,1,14,1,14,1,14,1,14,1,
	14,1,14,1,14,1,14,3,14,1492,8,14,1,14,1,14,1,14,1,14,3,14,1498,8,14,1,14,
	1,14,1,14,1,14,1,14,1,14,1,14,3,14,1507,8,14,1,14,1,14,1,14,1,14,1,14,1,
	14,1,14,1,14,1,14,1,14,1,14,1,14,3,14,1521,8,14,1,15,1,15,3,15,1525,8,15,
	1,15,1,15,1,15,1,15,3,15,1531,8,15,5,15,1533,8,15,10,15,12,15,1536,9,15,
	1,16,1,16,1,16,3,16,1541,8,16,1,17,1,17,3,17,1545,8,17,1,17,1,17,1,17,3,
	17,1550,8,17,1,17,3,17,1553,8,17,1,17,1,17,1,17,1,17,3,17,1559,8,17,1,17,
	1,17,1,17,1,17,3,17,1565,8,17,1,17,1,17,1,17,1,17,3,17,1571,8,17,1,17,1,
	17,3,17,1575,8,17,1,17,1,17,1,17,3,17,1580,8,17,1,17,1,17,3,17,1584,8,17,
	1,17,1,17,3,17,1588,8,17,1,17,1,17,1,17,1,17,1,17,1,17,3,17,1596,8,17,3,
	17,1598,8,17,1,17,1,17,1,17,1,17,1,17,3,17,1605,8,17,1,17,1,17,1,17,1,17,
	1,17,1,17,3,17,1613,8,17,1,17,1,17,1,17,1,17,1,17,1,17,3,17,1621,8,17,1,
	17,1,17,3,17,1625,8,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,
	1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,3,17,1648,8,17,1,
	17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,3,17,
	1664,8,17,1,17,3,17,1667,8,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,3,17,1676,
	8,17,1,18,1,18,1,18,3,18,1681,8,18,1,19,1,19,1,20,1,20,3,20,1687,8,20,1,
	20,1,20,1,20,3,20,1692,8,20,5,20,1694,8,20,10,20,12,20,1697,9,20,1,21,1,
	21,3,21,1701,8,21,1,21,1,21,3,21,1705,8,21,1,22,1,22,3,22,1709,8,22,1,22,
	1,22,3,22,1713,8,22,1,23,1,23,3,23,1717,8,23,1,23,1,23,3,23,1721,8,23,3,
	23,1723,8,23,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,26,1,26,3,26,1734,8,26,
	1,27,1,27,1,27,3,27,1739,8,27,1,27,1,27,1,27,1,27,3,27,1745,8,27,1,28,1,
	28,1,28,1,28,1,28,1,28,3,28,1753,8,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,
	3,28,1762,8,28,1,28,5,28,1765,8,28,10,28,12,28,1768,9,28,3,28,1770,8,28,
	1,28,1,28,1,28,3,28,1775,8,28,1,28,1,28,1,28,1,28,1,28,3,28,1782,8,28,1,
	29,1,29,1,29,1,29,1,29,1,29,3,29,1790,8,29,1,30,1,30,3,30,1794,8,30,1,30,
	5,30,1797,8,30,10,30,12,30,1800,9,30,1,31,1,31,1,32,1,32,3,32,1806,8,32,
	1,32,5,32,1809,8,32,10,32,12,32,1812,9,32,1,33,1,33,3,33,1816,8,33,1,33,
	1,33,1,33,1,33,1,33,1,33,3,33,1824,8,33,1,34,1,34,3,34,1828,8,34,1,34,1,
	34,1,34,3,34,1833,8,34,1,35,3,35,1836,8,35,1,35,3,35,1839,8,35,1,35,3,35,
	1842,8,35,1,35,1,35,1,35,1,35,1,36,3,36,1849,8,36,1,36,1,36,1,36,1,37,1,
	37,3,37,1856,8,37,1,38,1,38,3,38,1860,8,38,1,38,1,38,1,38,1,39,1,39,1,39,
	1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,
	39,1,39,3,39,1884,8,39,1,40,1,40,3,40,1888,8,40,1,40,1,40,5,40,1892,8,40,
	10,40,12,40,1895,9,40,1,41,1,41,1,41,1,41,3,41,1901,8,41,1,42,3,42,1904,
	8,42,1,42,1,42,3,42,1908,8,42,1,42,1,42,1,42,1,42,1,42,3,42,1915,8,42,1,
	42,3,42,1918,8,42,1,42,3,42,1921,8,42,1,42,3,42,1924,8,42,1,42,1,42,1,42,
	1,42,1,42,1,42,1,42,3,42,1933,8,42,1,43,1,43,1,43,5,43,1938,8,43,10,43,
	12,43,1941,9,43,1,44,1,44,3,44,1945,8,44,1,45,3,45,1948,8,45,1,45,3,45,
	1951,8,45,1,45,1,45,1,46,1,46,3,46,1957,8,46,1,47,1,47,1,47,1,47,3,47,1963,
	8,47,1,47,3,47,1966,8,47,1,47,1,47,1,48,3,48,1971,8,48,1,48,1,48,1,48,1,
	48,1,48,1,48,5,48,1979,8,48,10,48,12,48,1982,9,48,3,48,1984,8,48,1,48,1,
	48,5,48,1988,8,48,10,48,12,48,1991,9,48,1,48,1,48,1,49,3,49,1996,8,49,1,
	49,1,49,1,49,1,49,1,49,1,49,5,49,2004,8,49,10,49,12,49,2007,9,49,3,49,2009,
	8,49,1,49,1,49,1,49,1,49,5,49,2015,8,49,10,49,12,49,2018,9,49,1,49,1,49,
	1,50,3,50,2023,8,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,51,1,51,3,51,2034,
	8,51,1,51,3,51,2037,8,51,1,52,4,52,2040,8,52,11,52,12,52,2041,1,53,1,53,
	1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,
	53,3,53,2061,8,53,1,54,3,54,2064,8,54,1,54,3,54,2067,8,54,1,54,1,54,1,54,
	1,54,3,54,2073,8,54,1,54,3,54,2076,8,54,3,54,2078,8,54,1,54,1,54,5,54,2082,
	8,54,10,54,12,54,2085,9,54,1,54,1,54,1,54,1,54,1,54,5,54,2092,8,54,10,54,
	12,54,2095,9,54,1,54,1,54,1,54,1,54,1,54,5,54,2102,8,54,10,54,12,54,2105,
	9,54,3,54,2107,8,54,1,54,3,54,2110,8,54,1,55,1,55,1,55,3,55,2115,8,55,1,
	55,1,55,1,55,1,55,3,55,2121,8,55,1,56,1,56,1,56,1,56,1,57,1,57,1,57,1,57,
	1,57,1,57,1,57,3,57,2134,8,57,1,58,1,58,3,58,2138,8,58,1,58,5,58,2141,8,
	58,10,58,12,58,2144,9,58,1,59,1,59,1,59,1,59,1,59,1,59,3,59,2152,8,59,1,
	60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,61,1,61,1,61,1,61,1,61,5,61,2167,
	8,61,10,61,12,61,2170,9,61,1,61,1,61,1,62,1,62,1,62,1,62,1,62,1,62,1,62,
	1,62,1,62,1,62,1,62,1,62,1,62,1,62,3,62,2188,8,62,1,63,1,63,1,63,1,63,1,
	63,1,63,1,63,3,63,2197,8,63,1,63,3,63,2200,8,63,1,64,1,64,1,64,1,64,1,64,
	1,64,3,64,2208,8,64,1,65,1,65,1,65,3,65,2213,8,65,1,65,1,65,3,65,2217,8,
	65,1,66,1,66,1,66,1,67,1,67,3,67,2224,8,67,1,67,5,67,2227,8,67,10,67,12,
	67,2230,9,67,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,
	3,68,2244,8,68,1,69,1,69,3,69,2248,8,69,1,69,1,69,1,70,1,70,3,70,2254,8,
	70,1,70,1,70,1,71,1,71,3,71,2260,8,71,1,71,1,71,1,72,1,72,3,72,2266,8,72,
	1,72,1,72,1,73,1,73,3,73,2272,8,73,1,73,1,73,1,74,1,74,3,74,2278,8,74,1,
	74,1,74,1,75,3,75,2283,8,75,1,75,1,75,3,75,2287,8,75,1,75,1,75,1,76,1,76,
	1,77,1,77,3,77,2295,8,77,1,77,1,77,1,78,1,78,3,78,2301,8,78,1,78,1,78,1,
	79,1,79,3,79,2307,8,79,1,79,1,79,1,80,3,80,2312,8,80,1,80,3,80,2315,8,80,
	1,80,3,80,2318,8,80,1,80,1,80,1,80,1,80,1,81,1,81,1,81,3,81,2327,8,81,1,
	81,3,81,2330,8,81,1,82,1,82,1,82,1,82,1,83,1,83,1,83,1,83,1,84,3,84,2341,
	8,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,3,84,2353,8,84,1,
	84,1,84,1,85,1,85,1,85,1,85,1,86,3,86,2362,8,86,1,86,1,86,3,86,2366,8,86,
	1,86,1,86,1,86,1,86,1,86,1,86,1,86,3,86,2375,8,86,1,86,3,86,2378,8,86,1,
	86,1,86,1,86,1,86,3,86,2384,8,86,3,86,2386,8,86,1,86,1,86,3,86,2390,8,86,
	1,86,1,86,1,86,1,87,1,87,3,87,2397,8,87,1,87,1,87,1,88,1,88,1,88,1,88,1,
	88,1,88,1,88,5,88,2408,8,88,10,88,12,88,2411,9,88,1,88,1,88,1,88,1,88,3,
	88,2417,8,88,1,88,1,88,5,88,2421,8,88,10,88,12,88,2424,9,88,3,88,2426,8,
	88,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,
	1,89,3,89,2443,8,89,1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,
	90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,3,90,2463,8,90,1,91,1,91,3,91,2467,
	8,91,1,91,1,91,1,92,1,92,3,92,2473,8,92,1,92,1,92,1,93,1,93,3,93,2479,8,
	93,1,93,1,93,1,94,1,94,3,94,2485,8,94,1,94,1,94,1,95,3,95,2490,8,95,1,95,
	1,95,1,95,1,95,1,95,3,95,2497,8,95,1,96,1,96,1,96,1,96,1,96,3,96,2504,8,
	96,1,96,5,96,2507,8,96,10,96,12,96,2510,9,96,3,96,2512,8,96,1,97,1,97,3,
	97,2516,8,97,1,98,1,98,3,98,2520,8,98,1,98,1,98,1,99,3,99,2525,8,99,1,99,
	1,99,3,99,2529,8,99,1,99,1,99,3,99,2533,8,99,1,100,1,100,1,100,1,100,3,
	100,2539,8,100,1,100,5,100,2542,8,100,10,100,12,100,2545,9,100,3,100,2547,
	8,100,1,101,1,101,3,101,2551,8,101,1,101,1,101,1,102,1,102,3,102,2557,8,
	102,1,102,1,102,3,102,2561,8,102,1,103,1,103,3,103,2565,8,103,1,103,1,103,
	1,104,1,104,1,104,1,104,3,104,2573,8,104,1,104,1,104,1,105,1,105,1,105,
	1,105,3,105,2581,8,105,1,106,1,106,1,106,1,106,1,106,5,106,2588,8,106,10,
	106,12,106,2591,9,106,1,107,1,107,1,107,1,107,1,108,1,108,3,108,2599,8,
	108,1,108,1,108,1,109,1,109,1,109,1,109,1,109,1,110,1,110,1,110,1,110,3,
	110,2612,8,110,1,110,3,110,2615,8,110,1,111,1,111,3,111,2619,8,111,1,111,
	1,111,5,111,2623,8,111,10,111,12,111,2626,9,111,1,111,1,111,1,111,1,111,
	1,111,3,111,2633,8,111,1,111,1,111,1,111,3,111,2638,8,111,1,111,3,111,2641,
	8,111,1,111,3,111,2644,8,111,1,111,3,111,2647,8,111,1,111,3,111,2650,8,
	111,3,111,2652,8,111,1,111,1,111,1,111,1,111,3,111,2658,8,111,3,111,2660,
	8,111,1,112,1,112,1,112,1,112,1,112,1,112,1,113,1,113,1,114,1,114,1,114,
	1,114,1,114,3,114,2675,8,114,1,115,1,115,1,115,1,115,3,115,2681,8,115,1,
	115,1,115,1,115,1,115,1,115,3,115,2688,8,115,1,115,3,115,2691,8,115,3,115,
	2693,8,115,3,115,2695,8,115,1,116,1,116,1,116,1,116,1,116,1,116,1,116,1,
	116,3,116,2705,8,116,3,116,2707,8,116,1,117,1,117,3,117,2711,8,117,1,117,
	3,117,2714,8,117,1,117,3,117,2717,8,117,1,117,1,117,3,117,2721,8,117,1,
	117,1,117,1,117,3,117,2726,8,117,1,117,1,117,1,117,1,117,3,117,2732,8,117,
	1,117,3,117,2735,8,117,1,117,3,117,2738,8,117,1,118,1,118,1,119,1,119,3,
	119,2744,8,119,1,119,3,119,2747,8,119,1,119,1,119,1,120,1,120,1,120,5,120,
	2754,8,120,10,120,12,120,2757,9,120,1,121,1,121,1,121,1,122,1,122,1,122,
	3,122,2765,8,122,1,122,1,122,3,122,2769,8,122,1,123,1,123,3,123,2773,8,
	123,1,123,1,123,1,123,1,123,3,123,2779,8,123,1,123,5,123,2782,8,123,10,
	123,12,123,2785,9,123,1,124,1,124,3,124,2789,8,124,1,124,1,124,1,124,3,
	124,2794,8,124,5,124,2796,8,124,10,124,12,124,2799,9,124,1,125,1,125,1,
	125,3,125,2804,8,125,1,126,1,126,1,126,1,126,1,126,1,126,1,127,1,127,1,
	127,3,127,2815,8,127,1,127,3,127,2818,8,127,1,127,1,127,1,127,3,127,2823,
	8,127,1,127,1,127,1,127,1,127,3,127,2829,8,127,1,127,3,127,2832,8,127,1,
	127,3,127,2835,8,127,1,127,3,127,2838,8,127,1,127,3,127,2841,8,127,1,127,
	1,127,1,128,1,128,1,129,1,129,1,129,1,129,1,129,1,130,1,130,1,130,3,130,
	2855,8,130,1,130,3,130,2858,8,130,1,130,1,130,3,130,2862,8,130,1,131,1,
	131,3,131,2866,8,131,1,131,1,131,1,132,1,132,3,132,2872,8,132,1,132,1,132,
	1,132,3,132,2877,8,132,5,132,2879,8,132,10,132,12,132,2882,9,132,1,133,
	1,133,3,133,2886,8,133,1,133,3,133,2889,8,133,1,133,1,133,3,133,2893,8,
	133,1,133,1,133,1,133,1,133,3,133,2899,8,133,1,134,1,134,1,134,3,134,2904,
	8,134,1,135,1,135,1,135,1,135,1,135,1,135,1,135,3,135,2913,8,135,1,136,
	1,136,3,136,2917,8,136,1,136,1,136,3,136,2921,8,136,1,136,3,136,2924,8,
	136,1,136,1,136,1,136,3,136,2929,8,136,1,136,3,136,2932,8,136,3,136,2934,
	8,136,1,136,1,136,3,136,2938,8,136,1,136,3,136,2941,8,136,1,136,1,136,1,
	136,1,136,3,136,2947,8,136,3,136,2949,8,136,1,137,1,137,1,137,1,137,1,137,
	3,137,2956,8,137,1,137,1,137,3,137,2960,8,137,3,137,2962,8,137,1,137,1,
	137,1,137,3,137,2967,8,137,1,137,1,137,3,137,2971,8,137,5,137,2973,8,137,
	10,137,12,137,2976,9,137,1,138,1,138,1,138,3,138,2981,8,138,1,138,1,138,
	1,139,1,139,5,139,2987,8,139,10,139,12,139,2990,9,139,1,139,1,139,3,139,
	2994,8,139,1,139,3,139,2997,8,139,1,139,3,139,3000,8,139,1,139,3,139,3003,
	8,139,1,139,3,139,3006,8,139,1,139,1,139,3,139,3010,8,139,1,140,1,140,1,
	141,1,141,1,142,1,142,1,142,1,143,1,143,1,143,1,144,1,144,1,144,3,144,3025,
	8,144,1,145,1,145,3,145,3029,8,145,1,146,1,146,1,146,1,146,3,146,3035,8,
	146,1,146,3,146,3038,8,146,1,146,3,146,3041,8,146,1,146,1,146,1,146,1,146,
	3,146,3047,8,146,1,146,1,146,1,146,3,146,3052,8,146,5,146,3054,8,146,10,
	146,12,146,3057,9,146,3,146,3059,8,146,1,147,1,147,1,147,1,147,1,147,1,
	147,3,147,3067,8,147,3,147,3069,8,147,1,147,1,147,1,148,1,148,1,148,1,149,
	1,149,1,149,1,149,5,149,3080,8,149,10,149,12,149,3083,9,149,1,150,1,150,
	1,150,1,150,1,151,1,151,1,151,1,151,1,152,3,152,3094,8,152,1,152,1,152,
	1,152,3,152,3099,8,152,1,152,3,152,3102,8,152,1,152,3,152,3105,8,152,1,
	153,1,153,1,153,3,153,3110,8,153,1,154,1,154,1,155,1,155,3,155,3116,8,155,
	1,156,1,156,1,156,1,156,1,156,1,156,1,156,1,156,1,156,1,156,1,156,1,156,
	1,156,1,156,3,156,3132,8,156,1,157,1,157,1,157,1,157,1,157,1,158,1,158,
	1,158,1,158,1,158,1,158,1,158,1,158,1,158,1,158,1,158,1,158,1,158,3,158,
	3152,8,158,1,159,1,159,1,159,1,159,1,159,1,159,1,159,3,159,3161,8,159,1,
	160,1,160,3,160,3165,8,160,1,160,1,160,1,160,5,160,3170,8,160,10,160,12,
	160,3173,9,160,1,161,1,161,3,161,3177,8,161,1,161,1,161,1,161,1,162,1,162,
	1,162,1,162,3,162,3186,8,162,1,163,1,163,1,163,1,163,1,163,3,163,3193,8,
	163,1,164,1,164,1,164,1,164,1,165,1,165,1,166,1,166,1,166,3,166,3204,8,
	166,1,167,1,167,1,167,5,167,3209,8,167,10,167,12,167,3212,9,167,1,168,1,
	168,1,168,1,168,1,168,1,168,1,168,1,168,3,168,3222,8,168,1,169,1,169,1,
	169,1,169,1,169,3,169,3229,8,169,1,169,1,169,3,169,3233,8,169,1,169,1,169,
	1,169,1,169,3,169,3239,8,169,1,170,1,170,1,170,3,170,3244,8,170,1,171,1,
	171,1,171,3,171,3249,8,171,1,172,1,172,3,172,3253,8,172,1,172,1,172,5,172,
	3257,8,172,10,172,12,172,3260,9,172,1,173,1,173,1,173,3,173,3265,8,173,
	3,173,3267,8,173,1,174,3,174,3270,8,174,1,174,1,174,3,174,3274,8,174,1,
	175,1,175,1,175,1,176,1,176,1,176,1,176,1,176,3,176,3284,8,176,1,176,1,
	176,1,176,3,176,3289,8,176,1,176,5,176,3292,8,176,10,176,12,176,3295,9,
	176,1,177,1,177,5,177,3299,8,177,10,177,12,177,3302,9,177,1,178,1,178,1,
	178,1,178,1,178,1,178,3,178,3310,8,178,1,178,1,178,1,178,1,178,1,178,1,
	178,3,178,3318,8,178,1,178,1,178,1,178,3,178,3323,8,178,1,179,1,179,3,179,
	3327,8,179,1,179,1,179,1,179,1,179,3,179,3333,8,179,1,179,3,179,3336,8,
	179,1,180,3,180,3339,8,180,1,180,1,180,3,180,3343,8,180,1,181,1,181,3,181,
	3347,8,181,1,181,1,181,1,182,1,182,1,182,1,182,1,182,1,182,3,182,3357,8,
	182,1,183,1,183,3,183,3361,8,183,1,183,3,183,3364,8,183,1,183,3,183,3367,
	8,183,1,184,1,184,1,184,3,184,3372,8,184,1,184,1,184,1,185,1,185,3,185,
	3378,8,185,1,185,1,185,3,185,3382,8,185,1,185,1,185,1,185,1,185,3,185,3388,
	8,185,1,185,3,185,3391,8,185,3,185,3393,8,185,1,186,1,186,1,186,3,186,3398,
	8,186,1,186,1,186,1,187,1,187,1,187,1,187,1,187,1,187,1,187,1,187,3,187,
	3410,8,187,1,188,1,188,1,188,1,188,1,188,5,188,3417,8,188,10,188,12,188,
	3420,9,188,1,188,1,188,1,189,1,189,1,189,1,189,1,189,1,189,1,189,1,189,
	3,189,3432,8,189,1,189,3,189,3435,8,189,1,189,1,189,1,189,3,189,3440,8,
	189,1,189,1,189,1,189,1,189,1,189,3,189,3447,8,189,1,190,1,190,3,190,3451,
	8,190,1,190,1,190,3,190,3455,8,190,3,190,3457,8,190,1,191,1,191,1,191,1,
	191,1,192,1,192,1,192,1,192,1,193,1,193,1,193,1,193,3,193,3471,8,193,1,
	194,1,194,1,195,1,195,1,195,3,195,3478,8,195,1,195,1,195,1,196,1,196,1,
	196,5,196,3485,8,196,10,196,12,196,3488,9,196,1,197,1,197,1,197,3,197,3493,
	8,197,1,197,1,197,1,197,1,197,1,197,1,197,1,197,3,197,3502,8,197,1,197,
	1,197,3,197,3506,8,197,1,197,1,197,3,197,3510,8,197,1,198,1,198,1,199,1,
	199,1,200,1,200,1,200,1,200,3,200,3520,8,200,3,200,3522,8,200,1,201,1,201,
	1,201,1,201,1,201,1,201,3,201,3530,8,201,1,202,1,202,1,202,5,202,3535,8,
	202,10,202,12,202,3538,9,202,1,203,1,203,3,203,3542,8,203,1,204,1,204,3,
	204,3546,8,204,1,204,1,204,3,204,3550,8,204,1,204,3,204,3553,8,204,1,204,
	1,204,1,204,1,204,3,204,3559,8,204,1,204,3,204,3562,8,204,1,204,3,204,3565,
	8,204,1,205,1,205,1,205,1,205,3,205,3571,8,205,1,206,1,206,1,206,5,206,
	3576,8,206,10,206,12,206,3579,9,206,1,206,1,206,3,206,3583,8,206,1,206,
	1,206,3,206,3587,8,206,1,206,3,206,3590,8,206,1,206,3,206,3593,8,206,1,
	206,3,206,3596,8,206,3,206,3598,8,206,1,207,1,207,3,207,3602,8,207,1,208,
	1,208,1,208,1,208,1,208,1,208,3,208,3610,8,208,1,209,1,209,1,209,1,209,
	3,209,3616,8,209,1,209,1,209,3,209,3620,8,209,1,209,1,209,1,209,3,209,3625,
	8,209,1,209,3,209,3628,8,209,1,209,3,209,3631,8,209,1,209,3,209,3634,8,
	209,3,209,3636,8,209,1,209,1,209,1,209,3,209,3641,8,209,1,210,1,210,1,210,
	1,210,1,210,5,210,3648,8,210,10,210,12,210,3651,9,210,1,210,1,210,1,210,
	1,210,1,210,1,210,1,210,1,210,1,210,1,210,3,210,3663,8,210,3,210,3665,8,
	210,1,211,1,211,3,211,3669,8,211,1,211,1,211,1,212,1,212,3,212,3675,8,212,
	1,212,3,212,3678,8,212,1,212,3,212,3681,8,212,1,213,1,213,1,213,1,213,3,
	213,3687,8,213,1,213,1,213,1,213,1,213,1,213,3,213,3694,8,213,3,213,3696,
	8,213,1,213,1,213,1,213,1,213,1,213,1,213,3,213,3704,8,213,1,213,1,213,
	1,213,1,213,3,213,3710,8,213,1,214,1,214,1,214,3,214,3715,8,214,1,214,3,
	214,3718,8,214,1,215,1,215,1,215,1,215,1,215,3,215,3725,8,215,3,215,3727,
	8,215,1,216,1,216,1,216,1,216,1,216,1,216,1,216,3,216,3736,8,216,1,216,
	1,216,1,216,1,216,1,216,5,216,3743,8,216,10,216,12,216,3746,9,216,1,216,
	1,216,1,216,1,216,1,216,1,216,3,216,3754,8,216,1,216,1,216,1,216,1,216,
	1,216,1,216,3,216,3762,8,216,1,217,1,217,3,217,3766,8,217,1,217,1,217,1,
	217,1,217,1,217,3,217,3773,8,217,1,217,3,217,3776,8,217,3,217,3778,8,217,
	1,218,1,218,1,218,1,218,1,218,1,218,3,218,3786,8,218,1,219,1,219,1,219,
	1,219,3,219,3792,8,219,1,219,1,219,1,219,1,220,1,220,1,220,1,220,1,220,
	3,220,3802,8,220,1,221,1,221,1,221,5,221,3807,8,221,10,221,12,221,3810,
	9,221,1,222,1,222,1,222,1,222,1,222,1,222,1,222,1,222,1,222,1,222,1,222,
	1,222,1,222,1,222,1,222,1,222,1,222,1,222,1,222,1,222,1,222,1,222,1,222,
	1,222,1,222,1,222,1,222,1,222,1,222,1,222,1,222,1,222,1,222,1,222,1,222,
	1,222,1,222,1,222,1,222,1,222,1,222,1,222,1,222,1,222,1,222,1,222,1,222,
	1,222,1,222,1,222,1,222,1,222,1,222,1,222,1,222,1,222,1,222,1,222,1,222,
	1,222,1,222,1,222,1,222,1,222,1,222,1,222,1,222,1,222,1,222,1,222,1,222,
	1,222,1,222,1,222,1,222,1,222,1,222,1,222,1,222,1,222,1,222,1,222,1,222,
	1,222,1,222,3,222,3897,8,222,1,223,1,223,3,223,3901,8,223,1,224,1,224,3,
	224,3905,8,224,1,225,1,225,1,225,1,225,1,225,1,225,1,225,1,225,1,225,1,
	225,1,225,1,225,3,225,3919,8,225,1,226,1,226,1,226,1,226,5,226,3925,8,226,
	10,226,12,226,3928,9,226,3,226,3930,8,226,1,226,1,226,1,227,1,227,1,227,
	1,227,1,227,1,227,5,227,3940,8,227,10,227,12,227,3943,9,227,1,227,1,227,
	3,227,3947,8,227,1,228,1,228,1,228,1,228,3,228,3953,8,228,1,228,1,228,1,
	228,1,228,1,228,3,228,3960,8,228,1,228,1,228,1,228,1,228,1,228,3,228,3967,
	8,228,1,228,1,228,1,228,1,228,1,228,3,228,3974,8,228,1,228,1,228,1,228,
	1,228,1,228,3,228,3981,8,228,1,228,1,228,1,228,1,228,1,228,3,228,3988,8,
	228,1,228,1,228,1,228,1,228,1,228,3,228,3995,8,228,1,228,3,228,3998,8,228,
	1,229,1,229,1,229,5,229,4003,8,229,10,229,12,229,4006,9,229,1,230,1,230,
	1,230,5,230,4011,8,230,10,230,12,230,4014,9,230,1,231,1,231,1,231,5,231,
	4019,8,231,10,231,12,231,4022,9,231,1,232,1,232,1,233,1,233,1,233,5,233,
	4029,8,233,10,233,12,233,4032,9,233,1,234,1,234,1,234,3,234,4037,8,234,
	1,234,1,234,3,234,4041,8,234,1,234,1,234,3,234,4045,8,234,1,234,1,234,1,
	234,3,234,4050,8,234,1,234,3,234,4053,8,234,3,234,4055,8,234,1,235,1,235,
	1,235,1,235,1,235,1,235,1,235,3,235,4064,8,235,1,235,1,235,5,235,4068,8,
	235,10,235,12,235,4071,9,235,1,236,1,236,1,236,1,236,3,236,4077,8,236,1,
	236,1,236,1,236,3,236,4082,8,236,1,236,1,236,1,236,3,236,4087,8,236,1,236,
	1,236,1,236,3,236,4092,8,236,1,236,3,236,4095,8,236,1,237,1,237,1,237,5,
	237,4100,8,237,10,237,12,237,4103,9,237,1,238,1,238,1,239,1,239,1,239,1,
	240,1,240,1,240,1,240,1,240,3,240,4115,8,240,1,240,1,240,1,240,1,240,3,
	240,4121,8,240,1,241,1,241,1,241,1,241,3,241,4127,8,241,1,242,1,242,1,242,
	5,242,4132,8,242,10,242,12,242,4135,9,242,1,243,1,243,1,243,1,243,1,243,
	3,243,4142,8,243,1,243,1,243,1,243,1,243,3,243,4148,8,243,1,243,1,243,1,
	243,1,243,1,243,1,243,1,243,1,243,1,243,1,243,3,243,4160,8,243,3,243,4162,
	8,243,1,244,1,244,1,244,1,244,3,244,4168,8,244,1,244,1,244,3,244,4172,8,
	244,3,244,4174,8,244,1,245,1,245,3,245,4178,8,245,1,245,1,245,1,246,1,246,
	1,246,1,246,1,246,1,246,1,246,1,246,1,246,3,246,4191,8,246,1,247,1,247,
	1,247,1,247,3,247,4197,8,247,1,247,1,247,1,248,1,248,1,248,1,248,3,248,
	4205,8,248,1,248,1,248,1,248,1,248,1,248,1,248,1,248,1,248,1,248,3,248,
	4216,8,248,1,248,1,248,3,248,4220,8,248,1,248,1,248,1,248,1,248,1,248,1,
	248,1,248,1,248,1,248,1,248,1,248,3,248,4233,8,248,1,248,1,248,1,248,1,
	248,1,248,3,248,4240,8,248,1,248,1,248,1,248,1,248,3,248,4246,8,248,3,248,
	4248,8,248,1,249,1,249,1,249,1,250,1,250,1,250,1,250,1,250,3,250,4258,8,
	250,1,250,1,250,1,250,1,250,1,251,1,251,3,251,4266,8,251,1,251,3,251,4269,
	8,251,1,251,5,251,4272,8,251,10,251,12,251,4275,9,251,1,251,3,251,4278,
	8,251,1,252,1,252,1,252,1,252,3,252,4284,8,252,1,252,3,252,4287,8,252,1,
	253,1,253,1,253,3,253,4292,8,253,1,254,1,254,1,254,1,254,1,254,1,254,1,
	254,1,254,1,254,4,254,4303,8,254,11,254,12,254,4304,1,255,1,255,1,255,1,
	255,1,255,1,255,1,255,1,255,1,255,1,255,3,255,4317,8,255,1,255,1,255,1,
	255,3,255,4322,8,255,1,255,1,255,1,255,1,255,1,255,1,255,3,255,4330,8,255,
	1,255,1,255,1,255,1,255,3,255,4336,8,255,3,255,4338,8,255,3,255,4340,8,
	255,1,256,1,256,1,256,1,256,3,256,4346,8,256,1,256,1,256,1,257,1,257,1,
	257,1,257,1,257,1,257,1,257,1,257,3,257,4358,8,257,1,257,1,257,1,257,3,
	257,4363,8,257,3,257,4365,8,257,1,257,1,257,3,257,4369,8,257,1,257,1,257,
	1,257,1,257,3,257,4375,8,257,1,257,3,257,4378,8,257,1,257,3,257,4381,8,
	257,1,257,1,257,1,257,1,257,1,257,1,257,1,257,1,257,3,257,4391,8,257,3,
	257,4393,8,257,1,258,1,258,1,258,1,258,3,258,4399,8,258,1,259,1,259,1,259,
	4,259,4404,8,259,11,259,12,259,4405,1,259,1,259,1,259,1,259,3,259,4412,
	8,259,1,260,1,260,1,260,1,261,1,261,1,261,1,261,1,261,3,261,4422,8,261,
	1,261,1,261,3,261,4426,8,261,1,262,1,262,1,262,3,262,4431,8,262,1,263,1,
	263,1,263,1,264,1,264,1,264,1,264,1,264,1,264,1,264,1,264,1,264,1,264,5,
	264,4446,8,264,10,264,12,264,4449,9,264,1,265,1,265,1,265,1,265,1,265,1,
	265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,3,265,4464,8,265,1,265,1,
	265,1,265,3,265,4469,8,265,1,265,1,265,1,265,1,265,1,265,1,265,3,265,4477,
	8,265,1,265,1,265,1,265,1,265,1,265,1,265,3,265,4485,8,265,1,266,1,266,
	1,266,3,266,4490,8,266,1,266,1,266,1,266,1,266,3,266,4496,8,266,1,266,3,
	266,4499,8,266,3,266,4501,8,266,1,267,1,267,1,268,1,268,1,268,5,268,4508,
	8,268,10,268,12,268,4511,9,268,1,269,1,269,1,269,3,269,4516,8,269,1,269,
	1,269,1,269,1,269,3,269,4522,8,269,3,269,4524,8,269,1,269,1,269,3,269,4528,
	8,269,1,269,1,269,1,269,1,269,1,269,1,269,1,269,1,269,1,269,3,269,4539,
	8,269,1,269,1,269,1,269,1,269,1,269,1,269,1,269,1,269,3,269,4549,8,269,
	1,269,1,269,1,269,3,269,4554,8,269,1,270,1,270,1,270,3,270,4559,8,270,1,
	270,1,270,1,270,3,270,4564,8,270,1,270,1,270,1,270,1,270,1,270,1,270,3,
	270,4572,8,270,1,271,1,271,3,271,4576,8,271,1,271,5,271,4579,8,271,10,271,
	12,271,4582,9,271,1,272,1,272,1,272,1,272,1,272,1,272,3,272,4590,8,272,
	1,273,1,273,1,273,1,273,1,273,1,273,1,273,1,273,1,273,1,273,3,273,4602,
	8,273,1,274,1,274,1,274,1,274,1,274,1,274,1,274,1,274,1,274,1,274,1,274,
	1,274,3,274,4616,8,274,1,274,1,274,1,274,1,274,1,274,1,274,1,274,3,274,
	4625,8,274,3,274,4627,8,274,1,275,1,275,1,275,5,275,4632,8,275,10,275,12,
	275,4635,9,275,1,276,1,276,1,276,1,276,3,276,4641,8,276,1,277,1,277,3,277,
	4645,8,277,1,277,1,277,1,277,1,277,3,277,4651,8,277,1,277,1,277,1,277,1,
	277,5,277,4657,8,277,10,277,12,277,4660,9,277,1,277,1,277,1,277,1,277,3,
	277,4666,8,277,1,277,1,277,3,277,4670,8,277,1,277,1,277,1,277,1,277,3,277,
	4676,8,277,1,277,1,277,1,277,5,277,4681,8,277,10,277,12,277,4684,9,277,
	3,277,4686,8,277,1,278,1,278,1,278,1,278,1,278,1,278,1,278,3,278,4695,8,
	278,1,278,1,278,1,278,1,278,3,278,4701,8,278,1,279,1,279,1,279,3,279,4706,
	8,279,1,280,1,280,1,281,1,281,1,281,1,281,1,281,1,281,1,281,1,281,1,281,
	1,281,1,281,1,281,1,281,1,281,1,281,1,281,1,281,5,281,4727,8,281,10,281,
	12,281,4730,9,281,3,281,4732,8,281,1,282,1,282,1,282,1,283,1,283,1,283,
	1,283,1,283,1,283,1,283,1,283,1,283,1,283,1,283,3,283,4748,8,283,1,283,
	1,283,1,283,3,283,4753,8,283,1,283,3,283,4756,8,283,1,283,1,283,3,283,4760,
	8,283,1,283,3,283,4763,8,283,1,283,1,283,1,283,1,283,1,283,1,283,1,283,
	1,283,1,283,1,283,1,283,1,283,3,283,4777,8,283,1,283,1,283,1,283,1,283,
	3,283,4783,8,283,1,283,1,283,1,283,3,283,4788,8,283,1,283,3,283,4791,8,
	283,3,283,4793,8,283,1,284,1,284,3,284,4797,8,284,1,284,1,284,1,284,3,284,
	4802,8,284,3,284,4804,8,284,1,285,1,285,1,285,1,286,1,286,1,286,1,286,1,
	286,1,286,1,286,3,286,4816,8,286,1,287,1,287,5,287,4820,8,287,10,287,12,
	287,4823,9,287,1,288,1,288,1,288,1,288,1,288,1,288,1,288,1,288,1,288,1,
	288,1,288,1,288,1,288,1,288,1,288,1,288,1,288,1,288,1,288,3,288,4844,8,
	288,1,288,1,288,3,288,4848,8,288,3,288,4850,8,288,1,289,1,289,1,289,1,289,
	1,289,1,289,3,289,4858,8,289,1,290,1,290,3,290,4862,8,290,1,290,1,290,1,
	291,1,291,1,291,1,291,1,291,3,291,4871,8,291,1,292,1,292,1,292,1,292,1,
	293,1,293,1,293,1,293,3,293,4881,8,293,1,294,1,294,1,294,1,294,1,294,3,
	294,4888,8,294,1,294,3,294,4891,8,294,1,294,1,294,3,294,4895,8,294,1,294,
	3,294,4898,8,294,1,294,3,294,4901,8,294,1,294,1,294,3,294,4905,8,294,1,
	294,3,294,4908,8,294,1,294,1,294,3,294,4912,8,294,1,294,3,294,4915,8,294,
	1,294,1,294,1,294,3,294,4920,8,294,1,294,3,294,4923,8,294,1,294,1,294,1,
	294,3,294,4928,8,294,1,294,3,294,4931,8,294,1,294,1,294,1,294,1,294,3,294,
	4937,8,294,1,294,1,294,3,294,4941,8,294,1,294,1,294,1,294,1,294,3,294,4947,
	8,294,1,294,3,294,4950,8,294,1,294,1,294,1,294,1,294,1,294,1,294,1,294,
	3,294,4959,8,294,3,294,4961,8,294,1,294,1,294,1,294,1,294,3,294,4967,8,
	294,1,294,1,294,3,294,4971,8,294,1,294,3,294,4974,8,294,1,294,3,294,4977,
	8,294,1,294,1,294,3,294,4981,8,294,1,294,1,294,1,294,1,294,3,294,4987,8,
	294,1,294,3,294,4990,8,294,1,294,3,294,4993,8,294,1,294,1,294,1,294,1,294,
	1,294,1,294,1,294,1,294,3,294,5003,8,294,1,294,1,294,3,294,5007,8,294,1,
	294,1,294,1,294,1,294,1,294,5,294,5014,8,294,10,294,12,294,5017,9,294,3,
	294,5019,8,294,1,294,1,294,1,294,3,294,5024,8,294,1,294,3,294,5027,8,294,
	1,294,3,294,5030,8,294,1,294,1,294,3,294,5034,8,294,1,294,3,294,5037,8,
	294,1,294,1,294,1,294,3,294,5042,8,294,1,294,1,294,3,294,5046,8,294,1,294,
	1,294,1,294,1,294,1,294,1,294,3,294,5054,8,294,1,294,1,294,1,294,1,294,
	1,294,1,294,1,294,1,294,1,294,1,294,1,294,3,294,5067,8,294,1,294,1,294,
	1,294,1,294,1,294,1,294,1,294,1,294,1,294,1,294,1,294,1,294,1,294,1,294,
	1,294,1,294,3,294,5085,8,294,1,294,1,294,1,294,3,294,5090,8,294,1,294,1,
	294,1,294,3,294,5095,8,294,1,294,1,294,1,294,1,294,1,294,1,294,3,294,5103,
	8,294,1,295,1,295,1,295,1,295,3,295,5109,8,295,3,295,5111,8,295,1,296,1,
	296,3,296,5115,8,296,1,296,3,296,5118,8,296,1,297,1,297,1,298,1,298,1,298,
	1,299,1,299,1,299,1,299,1,299,1,299,1,299,3,299,5132,8,299,1,300,1,300,
	1,300,1,300,1,300,1,300,1,300,1,300,3,300,5142,8,300,1,300,1,300,3,300,
	5146,8,300,1,300,1,300,1,300,1,300,5,300,5152,8,300,10,300,12,300,5155,
	9,300,3,300,5157,8,300,1,300,1,300,3,300,5161,8,300,1,300,1,300,1,300,1,
	300,1,300,1,300,1,300,1,300,3,300,5171,8,300,1,301,1,301,3,301,5175,8,301,
	1,302,1,302,1,302,5,302,5180,8,302,10,302,12,302,5183,9,302,1,303,1,303,
	3,303,5187,8,303,1,304,1,304,1,304,1,304,1,304,1,304,3,304,5195,8,304,1,
	305,1,305,1,305,3,305,5200,8,305,1,305,1,305,1,306,1,306,3,306,5206,8,306,
	1,307,1,307,1,307,5,307,5211,8,307,10,307,12,307,5214,9,307,1,308,1,308,
	3,308,5218,8,308,1,308,1,308,1,308,1,308,3,308,5224,8,308,1,308,1,308,1,
	308,1,308,1,308,3,308,5231,8,308,1,309,1,309,1,310,1,310,1,310,1,310,1,
	310,1,310,3,310,5241,8,310,3,310,5243,8,310,1,311,1,311,1,311,1,311,1,311,
	1,311,3,311,5251,8,311,1,312,1,312,1,312,3,312,5256,8,312,1,312,1,312,3,
	312,5260,8,312,1,312,3,312,5263,8,312,1,313,1,313,1,313,5,313,5268,8,313,
	10,313,12,313,5271,9,313,1,314,1,314,3,314,5275,8,314,1,314,1,314,3,314,
	5279,8,314,1,315,1,315,1,315,1,315,1,315,1,316,1,316,1,316,1,316,3,316,
	5290,8,316,1,317,1,317,1,317,1,317,1,317,1,317,3,317,5298,8,317,1,317,1,
	317,3,317,5302,8,317,1,317,3,317,5305,8,317,1,317,3,317,5308,8,317,1,318,
	1,318,3,318,5312,8,318,1,318,1,318,3,318,5316,8,318,1,318,5,318,5319,8,
	318,10,318,12,318,5322,9,318,1,319,1,319,1,319,3,319,5327,8,319,1,320,1,
	320,3,320,5331,8,320,1,320,1,320,1,321,1,321,1,322,1,322,1,322,1,322,1,
	322,3,322,5342,8,322,1,322,3,322,5345,8,322,1,322,3,322,5348,8,322,1,322,
	3,322,5351,8,322,1,323,1,323,1,323,1,323,1,323,1,323,3,323,5359,8,323,1,
	324,1,324,3,324,5363,8,324,1,324,5,324,5366,8,324,10,324,12,324,5369,9,
	324,1,325,1,325,1,325,1,325,1,325,3,325,5376,8,325,1,326,1,326,1,326,1,
	326,1,326,1,326,3,326,5384,8,326,1,327,1,327,1,327,1,327,3,327,5390,8,327,
	1,328,1,328,1,328,1,328,1,328,1,328,1,328,1,328,1,328,1,328,1,328,3,328,
	5403,8,328,1,328,1,328,1,329,1,329,1,329,1,329,1,329,1,329,3,329,5413,8,
	329,1,329,1,329,1,329,1,329,3,329,5419,8,329,1,330,1,330,1,330,1,331,1,
	331,1,331,1,332,1,332,1,333,1,333,1,333,1,333,3,333,5433,8,333,1,333,3,
	333,5436,8,333,1,333,1,333,3,333,5440,8,333,1,333,1,333,1,333,1,333,1,333,
	1,333,1,333,1,333,1,333,5,333,5451,8,333,10,333,12,333,5454,9,333,1,334,
	1,334,1,334,1,334,1,334,1,334,3,334,5462,8,334,1,334,1,334,1,334,1,334,
	1,334,1,334,1,334,1,334,1,334,1,334,5,334,5474,8,334,10,334,12,334,5477,
	9,334,1,335,1,335,1,336,1,336,3,336,5483,8,336,1,336,1,336,1,336,1,336,
	3,336,5489,8,336,1,336,1,336,1,336,1,336,3,336,5495,8,336,1,337,1,337,1,
	337,1,337,1,337,1,337,3,337,5503,8,337,1,337,1,337,1,337,1,337,1,337,1,
	337,1,337,1,337,1,337,3,337,5514,8,337,1,337,1,337,3,337,5518,8,337,1,338,
	1,338,1,338,1,338,1,338,1,338,1,338,1,338,1,338,1,338,1,338,1,338,1,338,
	1,338,1,338,1,338,1,338,1,338,1,338,1,338,1,338,1,338,1,338,1,338,1,338,
	1,338,1,338,5,338,5547,8,338,10,338,12,338,5550,9,338,1,339,1,339,1,339,
	1,339,3,339,5556,8,339,1,339,1,339,1,339,1,339,1,339,1,339,1,339,1,339,
	1,339,1,339,1,339,1,339,1,339,1,339,1,339,3,339,5573,8,339,1,339,1,339,
	1,339,1,339,1,339,3,339,5580,8,339,1,339,1,339,1,339,1,339,1,339,1,339,
	1,339,1,339,1,339,1,339,1,339,1,339,3,339,5594,8,339,1,339,1,339,1,339,
	1,339,1,339,1,339,1,339,1,339,1,339,1,339,3,339,5606,8,339,1,339,1,339,
	1,339,1,339,3,339,5612,8,339,1,339,1,339,1,339,4,339,5617,8,339,11,339,
	12,339,5618,1,339,3,339,5622,8,339,1,339,1,339,1,339,1,339,1,339,1,339,
	1,339,1,339,1,339,1,339,1,339,1,339,1,339,1,339,1,339,1,339,1,339,1,339,
	1,339,1,339,1,339,1,339,1,339,1,339,1,339,1,339,1,339,1,339,1,339,1,339,
	1,339,1,339,3,339,5656,8,339,1,339,1,339,1,339,1,339,1,339,1,339,5,339,
	5664,8,339,10,339,12,339,5667,9,339,1,340,1,340,1,340,1,341,1,341,1,341,
	1,341,1,341,1,341,3,341,5678,8,341,1,342,1,342,1,342,3,342,5683,8,342,1,
	342,1,342,1,342,1,342,3,342,5689,8,342,1,342,1,342,1,342,1,342,1,342,1,
	342,3,342,5697,8,342,1,342,1,342,1,342,1,342,1,342,3,342,5704,8,342,1,342,
	1,342,1,342,1,342,3,342,5710,8,342,1,342,1,342,1,342,3,342,5715,8,342,1,
	342,1,342,1,342,1,342,3,342,5721,8,342,1,342,1,342,1,342,3,342,5726,8,342,
	1,342,1,342,1,342,3,342,5731,8,342,1,342,1,342,1,342,1,342,3,342,5737,8,
	342,1,342,1,342,1,342,3,342,5742,8,342,1,342,1,342,1,342,1,342,3,342,5748,
	8,342,1,342,1,342,1,342,1,342,1,342,1,342,3,342,5756,8,342,1,342,1,342,
	1,342,1,342,1,342,1,342,3,342,5764,8,342,1,342,1,342,1,342,1,342,1,342,
	1,342,3,342,5772,8,342,1,342,1,342,1,342,1,342,1,342,1,342,3,342,5780,8,
	342,1,342,1,342,1,342,3,342,5785,8,342,1,342,1,342,1,342,1,342,3,342,5791,
	8,342,1,342,1,342,1,342,3,342,5796,8,342,1,342,1,342,3,342,5800,8,342,1,
	342,1,342,3,342,5804,8,342,1,342,1,342,1,342,3,342,5809,8,342,3,342,5811,
	8,342,1,343,1,343,1,343,1,343,1,343,1,344,1,344,1,344,1,344,1,344,1,344,
	1,344,1,344,1,344,1,344,1,344,1,344,3,344,5830,8,344,1,344,1,344,3,344,
	5834,8,344,1,344,1,344,1,344,1,344,1,344,3,344,5841,8,344,1,344,1,344,1,
	344,1,344,1,344,1,344,1,344,1,344,1,344,1,344,3,344,5853,8,344,1,344,3,
	344,5856,8,344,1,344,1,344,3,344,5860,8,344,1,345,1,345,1,345,3,345,5865,
	8,345,1,346,1,346,1,346,3,346,5870,8,346,1,346,1,346,3,346,5874,8,346,1,
	347,1,347,1,347,1,348,1,348,1,348,1,348,1,348,3,348,5884,8,348,1,348,1,
	348,1,348,1,348,1,348,1,348,1,348,3,348,5893,8,348,3,348,5895,8,348,1,349,
	3,349,5898,8,349,1,349,1,349,1,350,1,350,1,350,1,350,1,350,3,350,5907,8,
	350,1,351,1,351,1,351,5,351,5912,8,351,10,351,12,351,5915,9,351,1,352,1,
	352,1,352,1,352,1,352,1,352,1,352,1,352,1,352,1,352,3,352,5927,8,352,1,
	352,1,352,1,352,3,352,5932,8,352,1,353,1,353,1,353,1,353,1,353,3,353,5939,
	8,353,1,353,1,353,1,353,1,353,3,353,5945,8,353,1,353,1,353,1,353,1,353,
	1,353,1,353,1,353,1,353,1,353,1,353,1,353,1,353,1,353,1,353,1,353,1,353,
	1,353,1,353,1,353,1,353,1,353,1,353,4,353,5969,8,353,11,353,12,353,5970,
	1,353,1,353,1,353,1,353,1,353,1,353,1,353,1,353,1,353,1,353,1,353,1,353,
	1,353,1,353,1,353,1,353,1,353,1,353,1,353,1,353,1,353,1,353,1,353,1,353,
	1,353,1,353,1,353,1,353,1,353,3,353,6002,8,353,1,353,1,353,1,353,1,353,
	1,353,1,353,1,353,1,353,1,353,1,353,1,353,1,353,1,353,1,353,1,353,1,353,
	1,353,1,353,3,353,6022,8,353,1,353,1,353,1,353,1,353,3,353,6028,8,353,1,
	353,1,353,3,353,6032,8,353,1,353,1,353,1,353,1,353,1,353,1,353,1,353,1,
	353,1,353,1,353,1,353,1,353,1,353,1,353,1,353,1,353,1,353,1,353,1,353,1,
	353,1,353,1,353,1,353,1,353,1,353,3,353,6059,8,353,1,353,1,353,1,353,1,
	353,1,353,1,353,1,353,1,353,1,353,1,353,3,353,6071,8,353,1,353,1,353,1,
	353,1,353,1,353,1,353,1,353,1,353,1,353,1,353,1,353,3,353,6084,8,353,1,
	353,1,353,3,353,6088,8,353,1,353,1,353,3,353,6092,8,353,1,353,1,353,1,353,
	1,353,1,353,1,353,1,353,1,353,1,353,1,353,1,353,1,353,1,353,1,353,1,353,
	1,353,1,353,1,353,1,353,1,353,1,353,1,353,1,353,1,353,1,353,1,353,3,353,
	6120,8,353,1,353,1,353,1,353,1,353,1,353,1,353,1,353,1,353,1,353,1,353,
	1,353,1,353,1,353,1,353,1,353,1,353,1,353,1,353,1,353,1,353,1,353,1,353,
	1,353,1,353,1,353,1,353,1,353,1,353,1,353,1,353,1,353,1,353,1,353,1,353,
	1,353,1,353,1,353,1,353,1,353,1,353,1,353,1,353,1,353,1,353,1,353,1,353,
	1,353,1,353,1,353,1,353,1,353,1,353,1,353,1,353,3,353,6176,8,353,1,353,
	1,353,1,353,1,353,1,353,1,353,1,353,1,353,3,353,6186,8,353,1,353,1,353,
	3,353,6190,8,353,1,353,1,353,1,353,1,353,1,353,1,353,1,353,1,353,1,353,
	1,353,3,353,6202,8,353,1,353,1,353,1,353,3,353,6207,8,353,1,354,1,354,1,
	354,1,354,1,354,1,354,1,354,1,354,1,354,1,354,1,354,3,354,6220,8,354,1,
	354,1,354,1,354,1,354,1,354,1,354,1,354,1,354,1,354,1,354,1,354,1,354,1,
	354,1,354,1,354,1,354,1,354,1,354,3,354,6240,8,354,1,355,1,355,3,355,6244,
	8,355,1,355,1,355,1,356,1,356,1,356,1,357,1,357,1,357,1,357,1,357,1,357,
	1,357,1,357,5,357,6259,8,357,10,357,12,357,6262,9,357,3,357,6264,8,357,
	1,358,1,358,1,358,3,358,6269,8,358,1,358,3,358,6272,8,358,1,359,1,359,1,
	360,1,360,1,360,1,360,1,360,3,360,6281,8,360,1,360,1,360,3,360,6285,8,360,
	1,360,1,360,1,360,1,360,3,360,6291,8,360,1,360,1,360,1,360,1,360,3,360,
	6297,8,360,1,360,1,360,3,360,6301,8,360,1,360,1,360,1,361,1,361,1,361,1,
	361,1,361,1,361,1,361,3,361,6312,8,361,1,361,1,361,1,361,1,361,3,361,6318,
	8,361,3,361,6320,8,361,1,361,1,361,1,362,1,362,1,362,3,362,6327,8,362,1,
	362,1,362,1,362,1,362,1,362,3,362,6334,8,362,1,362,1,362,3,362,6338,8,362,
	1,363,1,363,1,363,5,363,6343,8,363,10,363,12,363,6346,9,363,1,364,1,364,
	3,364,6350,8,364,1,365,1,365,1,365,3,365,6355,8,365,1,365,3,365,6358,8,
	365,1,366,1,366,1,366,3,366,6363,8,366,1,367,1,367,3,367,6367,8,367,1,367,
	1,367,3,367,6371,8,367,1,368,1,368,1,368,3,368,6376,8,368,1,368,1,368,1,
	368,3,368,6381,8,368,3,368,6383,8,368,1,368,1,368,3,368,6387,8,368,1,369,
	1,369,1,369,1,370,1,370,1,370,1,371,1,371,1,371,1,372,1,372,3,372,6400,
	8,372,1,372,1,372,3,372,6404,8,372,1,372,3,372,6407,8,372,1,372,1,372,3,
	372,6411,8,372,1,372,1,372,3,372,6415,8,372,1,372,1,372,3,372,6419,8,372,
	1,372,1,372,1,372,3,372,6424,8,372,1,372,1,372,3,372,6428,8,372,1,372,1,
	372,3,372,6432,8,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,3,372,6441,
	8,372,3,372,6443,8,372,1,373,1,373,1,373,5,373,6448,8,373,10,373,12,373,
	6451,9,373,1,374,1,374,1,374,3,374,6456,8,374,1,375,1,375,1,376,1,376,1,
	377,1,377,3,377,6464,8,377,1,378,1,378,1,379,1,379,1,379,1,379,1,380,1,
	380,1,380,1,380,1,381,1,381,1,381,1,381,1,382,1,382,1,382,5,382,6483,8,
	382,10,382,12,382,6486,9,382,1,383,1,383,3,383,6490,8,383,1,384,1,384,1,
	384,5,384,6495,8,384,10,384,12,384,6498,9,384,1,385,1,385,1,386,1,386,1,
	386,1,386,1,386,1,387,1,387,1,387,1,387,1,387,1,387,1,387,1,387,1,387,1,
	387,1,387,1,387,1,387,3,387,6520,8,387,1,388,1,388,1,388,1,389,1,389,1,
	389,1,389,1,389,1,390,1,390,1,390,1,390,1,390,1,390,3,390,6536,8,390,1,
	391,1,391,1,391,1,392,1,392,1,392,4,392,6544,8,392,11,392,12,392,6545,1,
	393,1,393,3,393,6550,8,393,1,393,1,393,1,393,4,393,6555,8,393,11,393,12,
	393,6556,1,393,3,393,6560,8,393,1,393,1,393,1,393,1,394,1,394,1,394,1,395,
	1,395,1,395,3,395,6571,8,395,1,396,1,396,1,397,1,397,1,397,1,398,1,398,
	3,398,6580,8,398,1,398,3,398,6583,8,398,1,398,1,398,1,399,1,399,1,399,3,
	399,6590,8,399,1,400,1,400,1,400,3,400,6595,8,400,1,401,1,401,1,401,1,401,
	1,401,1,402,1,402,1,402,1,402,1,402,1,402,1,402,1,403,1,403,1,403,1,403,
	1,403,1,403,1,403,1,404,1,404,1,404,4,404,6619,8,404,11,404,12,404,6620,
	1,405,1,405,1,405,1,405,3,405,6627,8,405,1,406,1,406,1,406,1,406,3,406,
	6633,8,406,1,406,1,406,3,406,6637,8,406,1,407,1,407,1,407,1,407,1,407,1,
	407,1,408,1,408,3,408,6647,8,408,1,409,1,409,3,409,6651,8,409,1,409,1,409,
	1,410,1,410,1,410,1,410,1,410,1,410,1,410,5,410,6662,8,410,10,410,12,410,
	6665,9,410,1,410,1,410,1,411,1,411,1,411,1,411,1,411,1,411,1,411,3,411,
	6676,8,411,1,412,1,412,1,412,1,412,1,412,1,412,1,413,1,413,1,413,1,414,
	1,414,1,414,1,415,1,415,1,415,1,415,3,415,6694,8,415,1,415,1,415,1,415,
	1,415,5,415,6700,8,415,10,415,12,415,6703,9,415,1,415,1,415,1,415,1,415,
	1,415,5,415,6710,8,415,10,415,12,415,6713,9,415,3,415,6715,8,415,1,416,
	1,416,1,416,3,416,6720,8,416,1,417,1,417,3,417,6724,8,417,1,417,1,417,1,
	417,1,418,1,418,3,418,6731,8,418,1,418,1,418,1,418,3,418,6736,8,418,1,419,
	1,419,1,420,1,420,1,420,3,420,6743,8,420,1,420,1,420,1,420,1,420,5,420,
	6749,8,420,10,420,12,420,6752,9,420,3,420,6754,8,420,1,421,1,421,1,421,
	3,421,6759,8,421,1,421,3,421,6762,8,421,1,421,1,421,1,421,1,421,5,421,6768,
	8,421,10,421,12,421,6771,9,421,3,421,6773,8,421,1,422,1,422,1,422,1,422,
	1,423,1,423,1,423,1,424,1,424,1,424,1,425,1,425,3,425,6787,8,425,1,425,
	3,425,6790,8,425,1,425,1,425,1,425,1,425,1,426,1,426,1,426,1,426,1,426,
	1,426,1,426,3,426,6803,8,426,1,426,1,426,3,426,6807,8,426,3,426,6809,8,
	426,1,427,1,427,1,427,3,427,6814,8,427,1,428,1,428,1,428,3,428,6819,8,428,
	1,429,1,429,1,429,1,430,3,430,6825,8,430,1,430,1,430,1,431,1,431,3,431,
	6831,8,431,1,431,1,431,5,431,6835,8,431,10,431,12,431,6838,9,431,1,431,
	1,431,3,431,6842,8,431,1,431,3,431,6845,8,431,1,431,1,431,5,431,6849,8,
	431,10,431,12,431,6852,9,431,1,431,1,431,3,431,6856,8,431,1,431,3,431,6859,
	8,431,1,431,1,431,5,431,6863,8,431,10,431,12,431,6866,9,431,1,431,3,431,
	6869,8,431,1,431,1,431,1,431,1,431,3,431,6875,8,431,3,431,6877,8,431,1,
	431,3,431,6880,8,431,1,431,1,431,5,431,6884,8,431,10,431,12,431,6887,9,
	431,1,431,1,431,1,431,3,431,6892,8,431,1,431,1,431,1,431,1,431,1,431,1,
	431,3,431,6900,8,431,3,431,6902,8,431,3,431,6904,8,431,1,432,1,432,3,432,
	6908,8,432,1,433,1,433,5,433,6912,8,433,10,433,12,433,6915,9,433,1,433,
	1,433,3,433,6919,8,433,1,433,1,433,3,433,6923,8,433,1,433,1,433,1,433,3,
	433,6928,8,433,1,433,1,433,5,433,6932,8,433,10,433,12,433,6935,9,433,1,
	433,1,433,5,433,6939,8,433,10,433,12,433,6942,9,433,3,433,6944,8,433,3,
	433,6946,8,433,1,434,3,434,6949,8,434,1,434,1,434,1,434,1,434,1,434,1,434,
	1,434,1,434,3,434,6959,8,434,1,434,1,434,3,434,6963,8,434,1,434,1,434,1,
	434,1,434,3,434,6969,8,434,1,434,1,434,1,434,1,434,1,434,3,434,6976,8,434,
	1,434,1,434,1,434,3,434,6981,8,434,1,434,1,434,1,434,1,434,1,434,1,434,
	1,434,1,434,1,434,1,434,1,434,1,434,3,434,6995,8,434,1,434,1,434,1,434,
	3,434,7000,8,434,1,435,1,435,1,436,1,436,1,437,1,437,3,437,7008,8,437,1,
	437,1,437,1,437,3,437,7013,8,437,1,437,1,437,3,437,7017,8,437,1,437,3,437,
	7020,8,437,1,438,1,438,1,438,3,438,7025,8,438,1,438,1,438,3,438,7029,8,
	438,1,438,1,438,1,438,1,438,1,438,1,438,3,438,7037,8,438,1,438,1,438,1,
	438,1,438,1,438,1,438,3,438,7045,8,438,3,438,7047,8,438,1,439,1,439,1,439,
	1,439,1,439,3,439,7054,8,439,1,440,1,440,1,440,1,440,5,440,7060,8,440,10,
	440,12,440,7063,9,440,1,440,1,440,1,441,1,441,3,441,7069,8,441,1,441,3,
	441,7072,8,441,1,442,1,442,1,442,1,442,5,442,7078,8,442,10,442,12,442,7081,
	9,442,1,442,1,442,1,443,1,443,1,443,3,443,7088,8,443,3,443,7090,8,443,1,
	444,1,444,1,444,1,444,3,444,7096,8,444,1,445,1,445,1,446,1,446,3,446,7102,
	8,446,1,447,1,447,3,447,7106,8,447,1,447,1,447,1,447,1,447,1,447,3,447,
	7113,8,447,1,448,1,448,1,449,1,449,1,449,1,450,1,450,1,450,1,450,3,450,
	7124,8,450,1,451,1,451,1,452,1,452,1,452,1,453,1,453,3,453,7133,8,453,1,
	453,3,453,7136,8,453,1,453,1,453,1,453,3,453,7141,8,453,3,453,7143,8,453,
	1,453,3,453,7146,8,453,1,453,3,453,7149,8,453,1,453,1,453,3,453,7153,8,
	453,1,453,3,453,7156,8,453,1,453,1,453,3,453,7160,8,453,1,453,1,453,1,453,
	3,453,7165,8,453,1,453,3,453,7168,8,453,1,453,1,453,3,453,7172,8,453,1,
	453,3,453,7175,8,453,1,453,1,453,3,453,7179,8,453,1,453,1,453,1,453,3,453,
	7184,8,453,1,453,1,453,3,453,7188,8,453,1,453,1,453,1,453,1,453,1,453,1,
	453,1,453,1,453,1,453,1,453,3,453,7200,8,453,1,453,1,453,3,453,7204,8,453,
	1,453,1,453,1,453,1,453,3,453,7210,8,453,1,453,3,453,7213,8,453,1,453,1,
	453,1,453,3,453,7218,8,453,1,453,1,453,3,453,7222,8,453,1,453,1,453,3,453,
	7226,8,453,1,453,1,453,1,453,3,453,7231,8,453,1,453,1,453,1,453,1,453,1,
	453,1,453,1,453,3,453,7240,8,453,1,453,3,453,7243,8,453,1,453,1,453,3,453,
	7247,8,453,1,453,1,453,3,453,7251,8,453,1,453,3,453,7254,8,453,1,453,1,
	453,3,453,7258,8,453,1,453,1,453,3,453,7262,8,453,1,453,1,453,1,453,3,453,
	7267,8,453,1,453,1,453,1,453,3,453,7272,8,453,1,453,1,453,1,453,1,453,3,
	453,7278,8,453,1,454,1,454,1,454,3,454,7283,8,454,1,455,1,455,1,455,3,455,
	7288,8,455,3,455,7290,8,455,1,456,1,456,1,456,3,456,7295,8,456,1,456,1,
	456,1,457,4,457,7300,8,457,11,457,12,457,7301,1,458,1,458,1,458,1,458,1,
	458,1,458,3,458,7310,8,458,1,458,1,458,1,458,1,458,3,458,7316,8,458,3,458,
	7318,8,458,1,459,1,459,3,459,7322,8,459,1,459,1,459,3,459,7326,8,459,1,
	460,1,460,3,460,7330,8,460,1,460,1,460,3,460,7334,8,460,1,461,1,461,1,461,
	1,461,1,462,1,462,1,462,1,462,1,463,1,463,1,463,1,463,3,463,7348,8,463,
	1,464,1,464,1,464,1,464,1,464,3,464,7355,8,464,1,465,1,465,3,465,7359,8,
	465,1,465,5,465,7362,8,465,10,465,12,465,7365,9,465,1,466,4,466,7368,8,
	466,11,466,12,466,7369,1,467,1,467,3,467,7374,8,467,1,467,1,467,1,467,1,
	467,3,467,7380,8,467,1,467,1,467,3,467,7384,8,467,1,467,1,467,3,467,7388,
	8,467,1,467,1,467,1,467,3,467,7393,8,467,1,467,1,467,1,467,3,467,7398,8,
	467,1,467,1,467,1,467,3,467,7403,8,467,1,467,1,467,1,467,3,467,7408,8,467,
	1,467,1,467,1,467,1,467,3,467,7414,8,467,1,467,1,467,1,467,1,467,3,467,
	7420,8,467,1,467,1,467,1,467,3,467,7425,8,467,1,467,1,467,1,467,3,467,7430,
	8,467,1,467,1,467,1,467,3,467,7435,8,467,1,467,1,467,1,467,3,467,7440,8,
	467,1,467,1,467,1,467,3,467,7445,8,467,1,467,1,467,1,467,3,467,7450,8,467,
	1,467,1,467,1,467,3,467,7455,8,467,1,467,1,467,1,467,1,467,1,467,1,467,
	1,467,1,467,3,467,7465,8,467,1,467,1,467,1,467,1,467,3,467,7471,8,467,1,
	467,1,467,1,467,1,467,3,467,7477,8,467,1,467,1,467,1,467,1,467,3,467,7483,
	8,467,1,467,3,467,7486,8,467,1,467,1,467,1,467,1,467,1,467,3,467,7493,8,
	467,1,467,1,467,1,467,3,467,7498,8,467,1,467,3,467,7501,8,467,1,468,1,468,
	3,468,7505,8,468,1,469,3,469,7508,8,469,1,469,1,469,3,469,7512,8,469,1,
	469,1,469,1,470,3,470,7517,8,470,1,470,1,470,3,470,7521,8,470,1,470,1,470,
	1,471,3,471,7526,8,471,1,471,1,471,3,471,7530,8,471,1,471,1,471,1,472,1,
	472,1,472,1,472,1,472,3,472,7539,8,472,1,472,3,472,7542,8,472,1,472,3,472,
	7545,8,472,1,473,3,473,7548,8,473,1,473,1,473,3,473,7552,8,473,1,473,1,
	473,3,473,7556,8,473,1,473,1,473,3,473,7560,8,473,1,473,1,473,1,473,1,473,
	1,473,1,473,1,473,1,473,1,473,1,473,1,473,1,473,1,473,3,473,7575,8,473,
	1,473,3,473,7578,8,473,3,473,7580,8,473,1,474,1,474,1,474,3,474,7585,8,
	474,1,474,1,474,1,474,1,474,1,474,1,474,1,474,3,474,7594,8,474,1,474,3,
	474,7597,8,474,1,474,1,474,3,474,7601,8,474,1,475,1,475,1,475,1,475,1,475,
	1,476,1,476,1,476,1,476,5,476,7612,8,476,10,476,12,476,7615,9,476,1,476,
	1,476,1,477,1,477,1,477,1,477,1,477,1,477,1,477,3,477,7626,8,477,1,477,
	1,477,1,477,3,477,7631,8,477,1,477,5,477,7634,8,477,10,477,12,477,7637,
	9,477,1,477,1,477,1,477,1,477,5,477,7643,8,477,10,477,12,477,7646,9,477,
	1,477,1,477,3,477,7650,8,477,1,478,1,478,1,478,1,478,1,478,5,478,7657,8,
	478,10,478,12,478,7660,9,478,1,478,1,478,3,478,7664,8,478,1,479,1,479,3,
	479,7668,8,479,1,479,1,479,3,479,7672,8,479,1,479,1,479,3,479,7676,8,479,
	1,479,1,479,1,479,3,479,7681,8,479,1,479,1,479,1,479,3,479,7686,8,479,1,
	479,1,479,1,479,1,479,3,479,7692,8,479,1,479,1,479,1,479,3,479,7697,8,479,
	1,479,3,479,7700,8,479,1,480,1,480,1,480,5,480,7705,8,480,10,480,12,480,
	7708,9,480,1,481,1,481,1,481,1,481,5,481,7714,8,481,10,481,12,481,7717,
	9,481,1,481,1,481,1,482,1,482,3,482,7723,8,482,1,483,1,483,1,483,1,483,
	1,484,1,484,1,484,1,485,1,485,1,485,1,485,1,486,3,486,7737,8,486,1,486,
	1,486,1,487,1,487,1,487,1,488,1,488,1,488,1,489,1,489,3,489,7749,8,489,
	1,490,1,490,1,490,1,490,1,490,1,490,1,491,1,491,1,491,5,491,7760,8,491,
	10,491,12,491,7763,9,491,1,492,1,492,1,492,5,492,7768,8,492,10,492,12,492,
	7771,9,492,1,493,1,493,1,493,1,493,3,493,7777,8,493,1,494,1,494,1,494,1,
	495,1,495,4,495,7784,8,495,11,495,12,495,7785,1,496,1,496,1,496,1,496,3,
	496,7792,8,496,1,496,1,496,1,496,1,496,1,496,1,496,3,496,7800,8,496,1,497,
	1,497,4,497,7804,8,497,11,497,12,497,7805,1,498,1,498,1,498,1,498,1,499,
	1,499,1,499,5,499,7815,8,499,10,499,12,499,7818,9,499,1,500,1,500,1,500,
	5,500,7823,8,500,10,500,12,500,7826,9,500,1,501,1,501,1,501,5,501,7831,
	8,501,10,501,12,501,7834,9,501,1,502,1,502,1,502,1,502,1,502,3,502,7841,
	8,502,1,502,1,502,1,502,1,502,1,502,1,502,1,502,1,502,3,502,7851,8,502,
	1,502,1,502,1,502,3,502,7856,8,502,1,502,1,502,1,502,3,502,7861,8,502,3,
	502,7863,8,502,1,503,1,503,1,503,1,503,3,503,7869,8,503,1,503,1,503,1,503,
	1,503,3,503,7875,8,503,1,503,3,503,7878,8,503,1,503,1,503,1,503,1,503,1,
	503,3,503,7885,8,503,3,503,7887,8,503,3,503,7889,8,503,1,503,3,503,7892,
	8,503,3,503,7894,8,503,1,504,1,504,1,504,1,504,1,505,1,505,1,505,1,505,
	1,506,1,506,1,506,1,507,1,507,1,507,1,507,3,507,7911,8,507,1,508,1,508,
	1,508,3,508,7916,8,508,3,508,7918,8,508,1,509,1,509,1,509,1,510,1,510,3,
	510,7925,8,510,1,511,1,511,1,512,1,512,1,513,1,513,1,513,1,513,1,514,1,
	514,1,514,3,514,7938,8,514,3,514,7940,8,514,1,515,1,515,1,515,1,515,3,515,
	7946,8,515,1,516,1,516,1,517,1,517,1,517,1,517,5,517,7954,8,517,10,517,
	12,517,7957,9,517,1,517,1,517,1,518,1,518,1,519,1,519,3,519,7965,8,519,
	1,520,1,520,1,521,1,521,1,522,1,522,1,522,1,522,1,522,3,522,7976,8,522,
	1,522,1,522,1,523,1,523,1,524,1,524,1,525,1,525,1,526,1,526,1,527,1,527,
	1,528,1,528,1,529,1,529,1,530,1,530,1,531,1,531,3,531,7998,8,531,1,532,
	1,532,3,532,8002,8,532,1,533,1,533,1,534,1,534,1,535,1,535,1,536,1,536,
	1,537,1,537,1,538,1,538,1,539,1,539,1,540,1,540,1,541,1,541,1,542,1,542,
	1,543,1,543,3,543,8026,8,543,1,544,1,544,1,544,1,545,1,545,1,545,1,545,
	1,545,1,545,3,545,8037,8,545,3,545,8039,8,545,1,546,1,546,3,546,8043,8,
	546,1,547,1,547,1,547,5,547,8048,8,547,10,547,12,547,8051,9,547,1,548,1,
	548,1,548,5,548,8056,8,548,10,548,12,548,8059,9,548,1,549,1,549,1,550,1,
	550,3,550,8065,8,550,1,551,1,551,1,552,1,552,3,552,8071,8,552,1,553,1,553,
	1,554,1,554,1,555,1,555,1,556,1,556,1,557,1,557,1,558,1,558,1,558,3,558,
	8086,8,558,1,559,1,559,3,559,8090,8,559,1,560,1,560,1,560,5,560,8095,8,
	560,10,560,12,560,8098,9,560,1,561,1,561,1,561,1,561,1,562,1,562,3,562,
	8106,8,562,1,563,1,563,1,563,3,563,8111,8,563,3,563,8113,8,563,1,563,1,
	563,1,563,1,563,3,563,8119,8,563,1,564,1,564,1,564,1,565,1,565,1,566,1,
	566,1,567,1,567,1,568,1,568,1,568,1,568,1,568,3,568,8135,8,568,1,569,1,
	569,1,569,1,569,1,569,1,569,3,569,8143,8,569,1,569,3,569,8146,8,569,1,570,
	1,570,1,570,1,570,1,570,3,570,8153,8,570,1,571,1,571,1,571,1,571,5,571,
	8159,8,571,10,571,12,571,8162,9,571,1,571,1,571,1,572,1,572,1,572,3,572,
	8169,8,572,1,573,1,573,1,573,3,573,8174,8,573,1,574,1,574,1,574,3,574,8179,
	8,574,1,575,3,575,8182,8,575,1,575,1,575,3,575,8186,8,575,1,575,5,575,8189,
	8,575,10,575,12,575,8192,9,575,1,576,1,576,1,577,1,577,1,577,5,577,8199,
	8,577,10,577,12,577,8202,9,577,1,578,1,578,1,579,1,579,1,580,1,580,1,581,
	1,581,1,581,1,581,1,581,1,581,3,581,8216,8,581,1,582,1,582,3,582,8220,8,
	582,1,583,1,583,1,584,1,584,1,584,1,584,1,584,1,584,1,585,1,585,3,585,8232,
	8,585,1,586,1,586,3,586,8236,8,586,1,587,1,587,3,587,8240,8,587,1,588,1,
	588,3,588,8244,8,588,1,589,1,589,1,589,1,590,1,590,1,591,1,591,1,592,1,
	592,1,592,1,592,1,592,1,592,3,592,8259,8,592,1,593,1,593,1,593,1,593,1,
	593,1,593,1,593,1,593,1,593,1,593,3,593,8271,8,593,1,594,1,594,1,594,1,
	594,1,594,1,594,1,594,1,594,3,594,8281,8,594,1,594,1,594,1,594,1,594,1,
	594,3,594,8288,8,594,3,594,8290,8,594,1,595,1,595,1,596,1,596,1,597,1,597,
	1,597,1,597,1,597,1,597,1,597,1,597,1,597,1,597,1,597,3,597,8307,8,597,
	1,597,1,597,1,597,3,597,8312,8,597,3,597,8314,8,597,1,598,1,598,1,599,1,
	599,1,600,1,600,1,600,3,600,8323,8,600,1,600,1,600,1,600,3,600,8328,8,600,
	3,600,8330,8,600,1,601,1,601,1,601,1,601,3,601,8336,8,601,1,602,1,602,1,
	603,1,603,1,603,1,603,1,603,3,603,8345,8,603,1,604,1,604,1,604,1,604,1,
	604,1,604,1,604,1,604,1,604,3,604,8356,8,604,1,604,0,5,274,666,668,676,
	678,605,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,
	46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,
	94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,
	132,134,136,138,140,142,144,146,148,150,152,154,156,158,160,162,164,166,
	168,170,172,174,176,178,180,182,184,186,188,190,192,194,196,198,200,202,
	204,206,208,210,212,214,216,218,220,222,224,226,228,230,232,234,236,238,
	240,242,244,246,248,250,252,254,256,258,260,262,264,266,268,270,272,274,
	276,278,280,282,284,286,288,290,292,294,296,298,300,302,304,306,308,310,
	312,314,316,318,320,322,324,326,328,330,332,334,336,338,340,342,344,346,
	348,350,352,354,356,358,360,362,364,366,368,370,372,374,376,378,380,382,
	384,386,388,390,392,394,396,398,400,402,404,406,408,410,412,414,416,418,
	420,422,424,426,428,430,432,434,436,438,440,442,444,446,448,450,452,454,
	456,458,460,462,464,466,468,470,472,474,476,478,480,482,484,486,488,490,
	492,494,496,498,500,502,504,506,508,510,512,514,516,518,520,522,524,526,
	528,530,532,534,536,538,540,542,544,546,548,550,552,554,556,558,560,562,
	564,566,568,570,572,574,576,578,580,582,584,586,588,590,592,594,596,598,
	600,602,604,606,608,610,612,614,616,618,620,622,624,626,628,630,632,634,
	636,638,640,642,644,646,648,650,652,654,656,658,660,662,664,666,668,670,
	672,674,676,678,680,682,684,686,688,690,692,694,696,698,700,702,704,706,
	708,710,712,714,716,718,720,722,724,726,728,730,732,734,736,738,740,742,
	744,746,748,750,752,754,756,758,760,762,764,766,768,770,772,774,776,778,
	780,782,784,786,788,790,792,794,796,798,800,802,804,806,808,810,812,814,
	816,818,820,822,824,826,828,830,832,834,836,838,840,842,844,846,848,850,
	852,854,856,858,860,862,864,866,868,870,872,874,876,878,880,882,884,886,
	888,890,892,894,896,898,900,902,904,906,908,910,912,914,916,918,920,922,
	924,926,928,930,932,934,936,938,940,942,944,946,948,950,952,954,956,958,
	960,962,964,966,968,970,972,974,976,978,980,982,984,986,988,990,992,994,
	996,998,1000,1002,1004,1006,1008,1010,1012,1014,1016,1018,1020,1022,1024,
	1026,1028,1030,1032,1034,1036,1038,1040,1042,1044,1046,1048,1050,1052,1054,
	1056,1058,1060,1062,1064,1066,1068,1070,1072,1074,1076,1078,1080,1082,1084,
	1086,1088,1090,1092,1094,1096,1098,1100,1102,1104,1106,1108,1110,1112,1114,
	1116,1118,1120,1122,1124,1126,1128,1130,1132,1134,1136,1138,1140,1142,1144,
	1146,1148,1150,1152,1154,1156,1158,1160,1162,1164,1166,1168,1170,1172,1174,
	1176,1178,1180,1182,1184,1186,1188,1190,1192,1194,1196,1198,1200,1202,1204,
	1206,1208,0,144,1,0,752,753,2,0,431,431,653,653,2,0,446,446,609,609,1,0,
	682,683,2,0,426,426,487,487,2,0,269,269,599,599,1,0,754,755,2,0,77,77,180,
	180,2,0,520,520,606,606,4,0,329,329,476,476,529,529,600,600,2,0,115,115,
	161,161,2,0,273,273,360,360,2,0,272,272,359,359,2,0,237,237,370,370,3,0,
	215,215,344,344,358,358,2,0,59,59,434,434,3,0,480,480,526,526,663,663,2,
	0,19,19,34,34,2,0,340,340,647,647,3,0,268,268,520,520,554,554,2,0,148,148,
	235,235,4,0,148,148,174,174,235,235,259,259,2,0,383,383,386,389,3,0,479,
	479,515,515,554,554,2,0,368,368,671,671,2,0,97,97,554,554,2,0,109,109,376,
	376,2,0,298,298,545,545,2,0,479,479,554,554,6,0,319,319,427,427,484,484,
	515,515,629,631,640,640,2,0,242,242,406,406,2,0,380,382,420,420,3,0,298,
	298,596,596,713,713,2,0,432,432,481,481,2,0,541,541,612,612,2,0,460,460,
	523,523,2,0,427,427,484,484,2,0,504,504,520,520,2,0,521,521,537,537,2,0,
	581,581,684,684,2,0,5,5,48,48,2,0,291,291,535,535,2,0,185,185,437,437,2,
	0,315,315,317,317,2,0,279,279,321,321,1,0,48,49,2,0,14,14,487,487,3,0,239,
	239,374,374,633,633,2,0,548,548,661,661,2,0,478,478,749,749,3,0,356,356,
	594,594,647,647,4,0,526,526,601,601,614,614,663,663,13,0,17,17,56,56,133,
	133,145,145,261,261,265,265,280,280,335,335,480,480,487,487,521,521,655,
	655,664,664,4,0,297,297,342,342,364,364,367,367,2,0,45,45,83,83,2,0,459,
	459,487,487,2,0,239,239,478,478,2,0,138,138,268,268,5,0,80,80,138,138,141,
	141,213,213,268,268,3,0,138,138,268,268,365,365,2,0,91,91,357,357,4,0,427,
	427,437,437,478,478,579,579,2,0,301,301,740,740,3,0,183,183,227,227,327,
	327,2,0,507,507,530,530,2,0,71,71,276,276,3,0,163,163,521,521,536,536,2,
	0,131,131,369,369,2,0,327,327,366,366,6,0,105,105,168,168,214,214,314,314,
	337,337,427,427,2,0,98,98,267,267,5,0,117,117,157,157,260,260,327,327,363,
	363,5,0,128,128,130,130,150,150,311,311,437,437,2,0,364,364,740,740,2,0,
	120,120,143,143,2,0,481,482,499,499,3,0,361,361,501,501,657,657,2,0,400,
	400,430,430,2,0,403,403,587,587,2,0,64,64,427,427,2,0,383,383,385,390,3,
	0,393,395,485,485,568,568,1,0,391,392,1,0,398,399,2,0,391,392,397,397,1,
	0,439,441,4,0,708,709,722,722,724,724,726,726,2,0,714,714,716,716,2,0,711,
	711,715,715,2,0,148,148,174,174,2,0,520,520,725,725,2,0,58,58,331,331,1,
	0,469,470,1,0,350,351,3,0,111,112,349,349,352,352,2,0,378,378,573,573,2,
	0,378,378,396,396,5,0,471,474,516,518,564,565,613,613,686,686,9,0,113,113,
	158,158,217,217,219,219,223,223,266,266,305,305,371,371,377,377,3,0,456,
	456,497,497,658,658,2,0,240,240,299,299,10,0,78,78,84,84,88,88,100,102,
	108,108,216,216,228,228,304,304,330,330,339,339,2,0,639,639,678,678,3,0,
	125,125,149,149,478,478,3,0,122,122,214,214,478,478,3,0,144,144,248,248,
	309,309,3,0,76,76,156,156,302,302,1,0,691,692,2,0,354,354,666,666,5,0,436,
	436,529,529,561,561,623,623,651,651,4,0,149,149,476,476,503,503,577,577,
	1,0,74,75,2,0,549,549,560,560,4,0,151,152,178,178,224,226,256,257,3,0,44,
	44,662,662,687,687,1,0,324,326,2,0,9,9,341,341,6,0,92,92,94,94,125,125,
	149,149,274,274,478,478,3,0,27,27,148,148,174,174,2,0,122,122,214,214,2,
	0,179,179,596,596,2,0,184,184,220,220,2,0,109,109,521,521,3,0,524,524,530,
	530,590,590,2,0,634,634,648,648,2,0,578,578,580,580,2,0,180,180,575,575,
	2,0,772,772,774,774,3,0,380,382,421,421,423,424,2,0,380,382,421,421,2,0,
	380,382,423,424,1,0,421,422,2,0,501,501,657,657,2,0,419,419,576,576,1,0,
	383,384,5,0,155,155,180,180,308,308,688,688,703,703,3,0,17,17,56,56,744,
	744,14,0,2,2,5,9,11,16,18,19,22,23,25,27,34,35,37,38,40,41,44,45,48,52,
	55,55,162,162,707,707,9,0,133,133,145,145,239,239,261,261,265,265,280,280,
	283,283,335,335,739,739,59,0,1,1,3,4,10,10,20,21,24,24,28,31,33,33,36,36,
	39,39,42,43,46,47,53,54,57,62,64,65,67,103,105,105,107,116,118,132,134,
	144,146,154,156,161,163,165,167,179,181,208,210,238,240,242,245,260,262,
	264,266,272,274,279,281,282,284,297,299,300,302,307,309,317,319,334,336,
	354,357,377,495,495,498,498,581,581,670,670,683,683,689,692,694,694,699,
	701,704,705,710,710,712,712,719,720,723,723,725,725,727,728,732,738,741,
	743,745,755,757,760,762,762,765,768,6,0,1,16,18,55,689,689,691,692,707,
	707,750,753,32,0,57,62,64,105,107,132,134,144,146,161,163,165,167,238,240,
	243,245,260,262,264,266,279,281,282,284,297,299,300,302,355,357,377,429,
	429,694,694,699,701,704,706,710,710,712,712,719,720,723,723,725,725,727,
	728,732,738,741,742,746,747,749,749,754,755,757,758,5,0,106,106,162,162,
	298,298,301,301,356,356,6,0,335,335,495,495,498,498,581,581,670,670,683,
	683,9469,0,1222,1,0,0,0,2,1258,1,0,0,0,4,1260,1,0,0,0,6,1289,1,0,0,0,8,
	1304,1,0,0,0,10,1342,1,0,0,0,12,1351,1,0,0,0,14,1364,1,0,0,0,16,1366,1,
	0,0,0,18,1371,1,0,0,0,20,1395,1,0,0,0,22,1404,1,0,0,0,24,1406,1,0,0,0,26,
	1421,1,0,0,0,28,1520,1,0,0,0,30,1524,1,0,0,0,32,1540,1,0,0,0,34,1675,1,
	0,0,0,36,1680,1,0,0,0,38,1682,1,0,0,0,40,1684,1,0,0,0,42,1698,1,0,0,0,44,
	1706,1,0,0,0,46,1722,1,0,0,0,48,1724,1,0,0,0,50,1728,1,0,0,0,52,1733,1,
	0,0,0,54,1735,1,0,0,0,56,1746,1,0,0,0,58,1783,1,0,0,0,60,1791,1,0,0,0,62,
	1801,1,0,0,0,64,1803,1,0,0,0,66,1823,1,0,0,0,68,1832,1,0,0,0,70,1835,1,
	0,0,0,72,1848,1,0,0,0,74,1853,1,0,0,0,76,1857,1,0,0,0,78,1864,1,0,0,0,80,
	1885,1,0,0,0,82,1900,1,0,0,0,84,1903,1,0,0,0,86,1934,1,0,0,0,88,1944,1,
	0,0,0,90,1947,1,0,0,0,92,1956,1,0,0,0,94,1958,1,0,0,0,96,1970,1,0,0,0,98,
	1995,1,0,0,0,100,2022,1,0,0,0,102,2036,1,0,0,0,104,2039,1,0,0,0,106,2060,
	1,0,0,0,108,2063,1,0,0,0,110,2120,1,0,0,0,112,2122,1,0,0,0,114,2126,1,0,
	0,0,116,2135,1,0,0,0,118,2151,1,0,0,0,120,2153,1,0,0,0,122,2161,1,0,0,0,
	124,2187,1,0,0,0,126,2189,1,0,0,0,128,2201,1,0,0,0,130,2216,1,0,0,0,132,
	2218,1,0,0,0,134,2221,1,0,0,0,136,2243,1,0,0,0,138,2245,1,0,0,0,140,2251,
	1,0,0,0,142,2257,1,0,0,0,144,2263,1,0,0,0,146,2269,1,0,0,0,148,2275,1,0,
	0,0,150,2282,1,0,0,0,152,2290,1,0,0,0,154,2292,1,0,0,0,156,2298,1,0,0,0,
	158,2304,1,0,0,0,160,2311,1,0,0,0,162,2329,1,0,0,0,164,2331,1,0,0,0,166,
	2335,1,0,0,0,168,2340,1,0,0,0,170,2356,1,0,0,0,172,2361,1,0,0,0,174,2394,
	1,0,0,0,176,2425,1,0,0,0,178,2442,1,0,0,0,180,2444,1,0,0,0,182,2464,1,0,
	0,0,184,2470,1,0,0,0,186,2476,1,0,0,0,188,2482,1,0,0,0,190,2489,1,0,0,0,
	192,2498,1,0,0,0,194,2515,1,0,0,0,196,2517,1,0,0,0,198,2524,1,0,0,0,200,
	2534,1,0,0,0,202,2548,1,0,0,0,204,2554,1,0,0,0,206,2562,1,0,0,0,208,2568,
	1,0,0,0,210,2576,1,0,0,0,212,2582,1,0,0,0,214,2592,1,0,0,0,216,2596,1,0,
	0,0,218,2602,1,0,0,0,220,2607,1,0,0,0,222,2618,1,0,0,0,224,2661,1,0,0,0,
	226,2667,1,0,0,0,228,2669,1,0,0,0,230,2676,1,0,0,0,232,2706,1,0,0,0,234,
	2708,1,0,0,0,236,2739,1,0,0,0,238,2746,1,0,0,0,240,2750,1,0,0,0,242,2758,
	1,0,0,0,244,2768,1,0,0,0,246,2770,1,0,0,0,248,2788,1,0,0,0,250,2800,1,0,
	0,0,252,2805,1,0,0,0,254,2811,1,0,0,0,256,2844,1,0,0,0,258,2846,1,0,0,0,
	260,2854,1,0,0,0,262,2863,1,0,0,0,264,2871,1,0,0,0,266,2883,1,0,0,0,268,
	2903,1,0,0,0,270,2912,1,0,0,0,272,2948,1,0,0,0,274,2961,1,0,0,0,276,2977,
	1,0,0,0,278,2984,1,0,0,0,280,3011,1,0,0,0,282,3013,1,0,0,0,284,3015,1,0,
	0,0,286,3018,1,0,0,0,288,3021,1,0,0,0,290,3028,1,0,0,0,292,3030,1,0,0,0,
	294,3060,1,0,0,0,296,3072,1,0,0,0,298,3075,1,0,0,0,300,3084,1,0,0,0,302,
	3088,1,0,0,0,304,3093,1,0,0,0,306,3106,1,0,0,0,308,3111,1,0,0,0,310,3115,
	1,0,0,0,312,3131,1,0,0,0,314,3133,1,0,0,0,316,3151,1,0,0,0,318,3153,1,0,
	0,0,320,3162,1,0,0,0,322,3174,1,0,0,0,324,3181,1,0,0,0,326,3192,1,0,0,0,
	328,3194,1,0,0,0,330,3198,1,0,0,0,332,3200,1,0,0,0,334,3205,1,0,0,0,336,
	3221,1,0,0,0,338,3238,1,0,0,0,340,3243,1,0,0,0,342,3248,1,0,0,0,344,3252,
	1,0,0,0,346,3266,1,0,0,0,348,3269,1,0,0,0,350,3275,1,0,0,0,352,3288,1,0,
	0,0,354,3296,1,0,0,0,356,3322,1,0,0,0,358,3335,1,0,0,0,360,3342,1,0,0,0,
	362,3344,1,0,0,0,364,3356,1,0,0,0,366,3358,1,0,0,0,368,3368,1,0,0,0,370,
	3392,1,0,0,0,372,3394,1,0,0,0,374,3401,1,0,0,0,376,3411,1,0,0,0,378,3446,
	1,0,0,0,380,3456,1,0,0,0,382,3458,1,0,0,0,384,3462,1,0,0,0,386,3470,1,0,
	0,0,388,3472,1,0,0,0,390,3477,1,0,0,0,392,3481,1,0,0,0,394,3509,1,0,0,0,
	396,3511,1,0,0,0,398,3513,1,0,0,0,400,3521,1,0,0,0,402,3523,1,0,0,0,404,
	3531,1,0,0,0,406,3541,1,0,0,0,408,3545,1,0,0,0,410,3570,1,0,0,0,412,3597,
	1,0,0,0,414,3599,1,0,0,0,416,3609,1,0,0,0,418,3640,1,0,0,0,420,3664,1,0,
	0,0,422,3666,1,0,0,0,424,3680,1,0,0,0,426,3682,1,0,0,0,428,3717,1,0,0,0,
	430,3719,1,0,0,0,432,3761,1,0,0,0,434,3777,1,0,0,0,436,3779,1,0,0,0,438,
	3787,1,0,0,0,440,3796,1,0,0,0,442,3803,1,0,0,0,444,3896,1,0,0,0,446,3900,
	1,0,0,0,448,3904,1,0,0,0,450,3918,1,0,0,0,452,3920,1,0,0,0,454,3933,1,0,
	0,0,456,3997,1,0,0,0,458,3999,1,0,0,0,460,4007,1,0,0,0,462,4015,1,0,0,0,
	464,4023,1,0,0,0,466,4025,1,0,0,0,468,4054,1,0,0,0,470,4063,1,0,0,0,472,
	4094,1,0,0,0,474,4096,1,0,0,0,476,4104,1,0,0,0,478,4106,1,0,0,0,480,4120,
	1,0,0,0,482,4122,1,0,0,0,484,4128,1,0,0,0,486,4136,1,0,0,0,488,4173,1,0,
	0,0,490,4175,1,0,0,0,492,4190,1,0,0,0,494,4192,1,0,0,0,496,4247,1,0,0,0,
	498,4249,1,0,0,0,500,4252,1,0,0,0,502,4277,1,0,0,0,504,4286,1,0,0,0,506,
	4288,1,0,0,0,508,4293,1,0,0,0,510,4339,1,0,0,0,512,4341,1,0,0,0,514,4349,
	1,0,0,0,516,4398,1,0,0,0,518,4411,1,0,0,0,520,4413,1,0,0,0,522,4416,1,0,
	0,0,524,4427,1,0,0,0,526,4432,1,0,0,0,528,4435,1,0,0,0,530,4450,1,0,0,0,
	532,4500,1,0,0,0,534,4502,1,0,0,0,536,4504,1,0,0,0,538,4553,1,0,0,0,540,
	4571,1,0,0,0,542,4573,1,0,0,0,544,4589,1,0,0,0,546,4601,1,0,0,0,548,4626,
	1,0,0,0,550,4628,1,0,0,0,552,4636,1,0,0,0,554,4685,1,0,0,0,556,4700,1,0,
	0,0,558,4705,1,0,0,0,560,4707,1,0,0,0,562,4731,1,0,0,0,564,4733,1,0,0,0,
	566,4792,1,0,0,0,568,4803,1,0,0,0,570,4805,1,0,0,0,572,4808,1,0,0,0,574,
	4821,1,0,0,0,576,4849,1,0,0,0,578,4857,1,0,0,0,580,4859,1,0,0,0,582,4870,
	1,0,0,0,584,4872,1,0,0,0,586,4880,1,0,0,0,588,4882,1,0,0,0,590,5110,1,0,
	0,0,592,5117,1,0,0,0,594,5119,1,0,0,0,596,5121,1,0,0,0,598,5131,1,0,0,0,
	600,5170,1,0,0,0,602,5174,1,0,0,0,604,5176,1,0,0,0,606,5184,1,0,0,0,608,
	5188,1,0,0,0,610,5196,1,0,0,0,612,5205,1,0,0,0,614,5207,1,0,0,0,616,5230,
	1,0,0,0,618,5232,1,0,0,0,620,5234,1,0,0,0,622,5250,1,0,0,0,624,5262,1,0,
	0,0,626,5264,1,0,0,0,628,5272,1,0,0,0,630,5280,1,0,0,0,632,5289,1,0,0,0,
	634,5291,1,0,0,0,636,5309,1,0,0,0,638,5323,1,0,0,0,640,5328,1,0,0,0,642,
	5334,1,0,0,0,644,5336,1,0,0,0,646,5352,1,0,0,0,648,5360,1,0,0,0,650,5370,
	1,0,0,0,652,5383,1,0,0,0,654,5385,1,0,0,0,656,5391,1,0,0,0,658,5418,1,0,
	0,0,660,5420,1,0,0,0,662,5423,1,0,0,0,664,5426,1,0,0,0,666,5439,1,0,0,0,
	668,5455,1,0,0,0,670,5478,1,0,0,0,672,5480,1,0,0,0,674,5517,1,0,0,0,676,
	5519,1,0,0,0,678,5655,1,0,0,0,680,5668,1,0,0,0,682,5677,1,0,0,0,684,5810,
	1,0,0,0,686,5812,1,0,0,0,688,5859,1,0,0,0,690,5861,1,0,0,0,692,5866,1,0,
	0,0,694,5875,1,0,0,0,696,5894,1,0,0,0,698,5897,1,0,0,0,700,5906,1,0,0,0,
	702,5908,1,0,0,0,704,5931,1,0,0,0,706,6206,1,0,0,0,708,6239,1,0,0,0,710,
	6241,1,0,0,0,712,6247,1,0,0,0,714,6250,1,0,0,0,716,6265,1,0,0,0,718,6273,
	1,0,0,0,720,6275,1,0,0,0,722,6304,1,0,0,0,724,6337,1,0,0,0,726,6339,1,0,
	0,0,728,6347,1,0,0,0,730,6357,1,0,0,0,732,6362,1,0,0,0,734,6364,1,0,0,0,
	736,6386,1,0,0,0,738,6388,1,0,0,0,740,6391,1,0,0,0,742,6394,1,0,0,0,744,
	6442,1,0,0,0,746,6444,1,0,0,0,748,6455,1,0,0,0,750,6457,1,0,0,0,752,6459,
	1,0,0,0,754,6463,1,0,0,0,756,6465,1,0,0,0,758,6467,1,0,0,0,760,6471,1,0,
	0,0,762,6475,1,0,0,0,764,6479,1,0,0,0,766,6487,1,0,0,0,768,6491,1,0,0,0,
	770,6499,1,0,0,0,772,6501,1,0,0,0,774,6519,1,0,0,0,776,6521,1,0,0,0,778,
	6524,1,0,0,0,780,6529,1,0,0,0,782,6537,1,0,0,0,784,6543,1,0,0,0,786,6547,
	1,0,0,0,788,6564,1,0,0,0,790,6567,1,0,0,0,792,6572,1,0,0,0,794,6574,1,0,
	0,0,796,6577,1,0,0,0,798,6586,1,0,0,0,800,6594,1,0,0,0,802,6596,1,0,0,0,
	804,6601,1,0,0,0,806,6608,1,0,0,0,808,6618,1,0,0,0,810,6626,1,0,0,0,812,
	6628,1,0,0,0,814,6638,1,0,0,0,816,6646,1,0,0,0,818,6648,1,0,0,0,820,6654,
	1,0,0,0,822,6675,1,0,0,0,824,6677,1,0,0,0,826,6683,1,0,0,0,828,6686,1,0,
	0,0,830,6689,1,0,0,0,832,6719,1,0,0,0,834,6723,1,0,0,0,836,6730,1,0,0,0,
	838,6737,1,0,0,0,840,6739,1,0,0,0,842,6755,1,0,0,0,844,6774,1,0,0,0,846,
	6778,1,0,0,0,848,6781,1,0,0,0,850,6784,1,0,0,0,852,6808,1,0,0,0,854,6810,
	1,0,0,0,856,6818,1,0,0,0,858,6820,1,0,0,0,860,6824,1,0,0,0,862,6903,1,0,
	0,0,864,6905,1,0,0,0,866,6909,1,0,0,0,868,6999,1,0,0,0,870,7001,1,0,0,0,
	872,7003,1,0,0,0,874,7019,1,0,0,0,876,7021,1,0,0,0,878,7053,1,0,0,0,880,
	7055,1,0,0,0,882,7066,1,0,0,0,884,7073,1,0,0,0,886,7089,1,0,0,0,888,7095,
	1,0,0,0,890,7097,1,0,0,0,892,7101,1,0,0,0,894,7112,1,0,0,0,896,7114,1,0,
	0,0,898,7116,1,0,0,0,900,7123,1,0,0,0,902,7125,1,0,0,0,904,7127,1,0,0,0,
	906,7277,1,0,0,0,908,7282,1,0,0,0,910,7289,1,0,0,0,912,7291,1,0,0,0,914,
	7299,1,0,0,0,916,7317,1,0,0,0,918,7325,1,0,0,0,920,7333,1,0,0,0,922,7335,
	1,0,0,0,924,7339,1,0,0,0,926,7347,1,0,0,0,928,7354,1,0,0,0,930,7356,1,0,
	0,0,932,7367,1,0,0,0,934,7500,1,0,0,0,936,7504,1,0,0,0,938,7507,1,0,0,0,
	940,7516,1,0,0,0,942,7525,1,0,0,0,944,7533,1,0,0,0,946,7579,1,0,0,0,948,
	7581,1,0,0,0,950,7602,1,0,0,0,952,7607,1,0,0,0,954,7618,1,0,0,0,956,7663,
	1,0,0,0,958,7699,1,0,0,0,960,7701,1,0,0,0,962,7709,1,0,0,0,964,7722,1,0,
	0,0,966,7724,1,0,0,0,968,7728,1,0,0,0,970,7731,1,0,0,0,972,7736,1,0,0,0,
	974,7740,1,0,0,0,976,7743,1,0,0,0,978,7746,1,0,0,0,980,7750,1,0,0,0,982,
	7756,1,0,0,0,984,7764,1,0,0,0,986,7772,1,0,0,0,988,7778,1,0,0,0,990,7781,
	1,0,0,0,992,7799,1,0,0,0,994,7801,1,0,0,0,996,7807,1,0,0,0,998,7811,1,0,
	0,0,1000,7819,1,0,0,0,1002,7827,1,0,0,0,1004,7835,1,0,0,0,1006,7864,1,0,
	0,0,1008,7895,1,0,0,0,1010,7899,1,0,0,0,1012,7903,1,0,0,0,1014,7906,1,0,
	0,0,1016,7917,1,0,0,0,1018,7919,1,0,0,0,1020,7924,1,0,0,0,1022,7926,1,0,
	0,0,1024,7928,1,0,0,0,1026,7930,1,0,0,0,1028,7939,1,0,0,0,1030,7945,1,0,
	0,0,1032,7947,1,0,0,0,1034,7949,1,0,0,0,1036,7960,1,0,0,0,1038,7964,1,0,
	0,0,1040,7966,1,0,0,0,1042,7968,1,0,0,0,1044,7970,1,0,0,0,1046,7979,1,0,
	0,0,1048,7981,1,0,0,0,1050,7983,1,0,0,0,1052,7985,1,0,0,0,1054,7987,1,0,
	0,0,1056,7989,1,0,0,0,1058,7991,1,0,0,0,1060,7993,1,0,0,0,1062,7997,1,0,
	0,0,1064,8001,1,0,0,0,1066,8003,1,0,0,0,1068,8005,1,0,0,0,1070,8007,1,0,
	0,0,1072,8009,1,0,0,0,1074,8011,1,0,0,0,1076,8013,1,0,0,0,1078,8015,1,0,
	0,0,1080,8017,1,0,0,0,1082,8019,1,0,0,0,1084,8021,1,0,0,0,1086,8025,1,0,
	0,0,1088,8027,1,0,0,0,1090,8030,1,0,0,0,1092,8042,1,0,0,0,1094,8044,1,0,
	0,0,1096,8052,1,0,0,0,1098,8060,1,0,0,0,1100,8064,1,0,0,0,1102,8066,1,0,
	0,0,1104,8070,1,0,0,0,1106,8072,1,0,0,0,1108,8074,1,0,0,0,1110,8076,1,0,
	0,0,1112,8078,1,0,0,0,1114,8080,1,0,0,0,1116,8085,1,0,0,0,1118,8089,1,0,
	0,0,1120,8091,1,0,0,0,1122,8099,1,0,0,0,1124,8103,1,0,0,0,1126,8118,1,0,
	0,0,1128,8120,1,0,0,0,1130,8123,1,0,0,0,1132,8125,1,0,0,0,1134,8127,1,0,
	0,0,1136,8134,1,0,0,0,1138,8145,1,0,0,0,1140,8152,1,0,0,0,1142,8154,1,0,
	0,0,1144,8168,1,0,0,0,1146,8173,1,0,0,0,1148,8178,1,0,0,0,1150,8185,1,0,
	0,0,1152,8193,1,0,0,0,1154,8195,1,0,0,0,1156,8203,1,0,0,0,1158,8205,1,0,
	0,0,1160,8207,1,0,0,0,1162,8215,1,0,0,0,1164,8219,1,0,0,0,1166,8221,1,0,
	0,0,1168,8223,1,0,0,0,1170,8231,1,0,0,0,1172,8235,1,0,0,0,1174,8239,1,0,
	0,0,1176,8243,1,0,0,0,1178,8245,1,0,0,0,1180,8248,1,0,0,0,1182,8250,1,0,
	0,0,1184,8258,1,0,0,0,1186,8270,1,0,0,0,1188,8289,1,0,0,0,1190,8291,1,0,
	0,0,1192,8293,1,0,0,0,1194,8313,1,0,0,0,1196,8315,1,0,0,0,1198,8317,1,0,
	0,0,1200,8329,1,0,0,0,1202,8335,1,0,0,0,1204,8337,1,0,0,0,1206,8344,1,0,
	0,0,1208,8355,1,0,0,0,1210,1223,5,0,0,1,1211,1214,3,2,1,0,1212,1214,3,414,
	207,0,1213,1211,1,0,0,0,1213,1212,1,0,0,0,1214,1220,1,0,0,0,1215,1217,5,
	407,0,0,1216,1218,5,0,0,1,1217,1216,1,0,0,0,1217,1218,1,0,0,0,1218,1221,
	1,0,0,0,1219,1221,5,0,0,1,1220,1215,1,0,0,0,1220,1219,1,0,0,0,1221,1223,
	1,0,0,0,1222,1210,1,0,0,0,1222,1213,1,0,0,0,1223,1,1,0,0,0,1224,1259,3,
	4,2,0,1225,1259,3,78,39,0,1226,1259,3,180,90,0,1227,1259,3,212,106,0,1228,
	1259,3,216,108,0,1229,1230,4,1,0,0,1230,1259,3,218,109,0,1231,1259,3,220,
	110,0,1232,1259,3,222,111,0,1233,1259,3,228,114,0,1234,1259,3,230,115,0,
	1235,1259,3,234,117,0,1236,1259,3,254,127,0,1237,1259,3,266,133,0,1238,
	1259,3,268,134,0,1239,1259,3,408,204,0,1240,1259,3,410,205,0,1241,1259,
	3,432,216,0,1242,1259,3,480,240,0,1243,1244,4,1,1,0,1244,1259,3,486,243,
	0,1245,1259,3,492,246,0,1246,1259,3,554,277,0,1247,1259,3,562,281,0,1248,
	1259,3,564,282,0,1249,1259,3,588,294,0,1250,1251,4,1,2,0,1251,1259,3,632,
	316,0,1252,1259,3,600,300,0,1253,1259,3,652,326,0,1254,1255,4,1,3,0,1255,
	1259,3,830,415,0,1256,1259,3,840,420,0,1257,1259,3,842,421,0,1258,1224,
	1,0,0,0,1258,1225,1,0,0,0,1258,1226,1,0,0,0,1258,1227,1,0,0,0,1258,1228,
	1,0,0,0,1258,1229,1,0,0,0,1258,1231,1,0,0,0,1258,1232,1,0,0,0,1258,1233,
	1,0,0,0,1258,1234,1,0,0,0,1258,1235,1,0,0,0,1258,1236,1,0,0,0,1258,1237,
	1,0,0,0,1258,1238,1,0,0,0,1258,1239,1,0,0,0,1258,1240,1,0,0,0,1258,1241,
	1,0,0,0,1258,1242,1,0,0,0,1258,1243,1,0,0,0,1258,1245,1,0,0,0,1258,1246,
	1,0,0,0,1258,1247,1,0,0,0,1258,1248,1,0,0,0,1258,1249,1,0,0,0,1258,1250,
	1,0,0,0,1258,1252,1,0,0,0,1258,1253,1,0,0,0,1258,1254,1,0,0,0,1258,1256,
	1,0,0,0,1258,1257,1,0,0,0,1259,3,1,0,0,0,1260,1287,5,428,0,0,1261,1288,
	3,18,9,0,1262,1288,3,6,3,0,1263,1264,5,594,0,0,1264,1266,3,1052,526,0,1265,
	1267,3,104,52,0,1266,1265,1,0,0,0,1266,1267,1,0,0,0,1267,1288,1,0,0,0,1268,
	1269,5,356,0,0,1269,1271,3,1056,528,0,1270,1272,3,104,52,0,1271,1270,1,
	0,0,0,1271,1272,1,0,0,0,1272,1288,1,0,0,0,1273,1288,3,70,35,0,1274,1288,
	3,8,4,0,1275,1288,3,56,28,0,1276,1277,4,2,4,0,1277,1288,3,58,29,0,1278,
	1288,3,10,5,0,1279,1288,3,16,8,0,1280,1281,4,2,5,0,1281,1282,5,165,0,0,
	1282,1283,5,296,0,0,1283,1284,3,1170,585,0,1284,1285,5,185,0,0,1285,1286,
	5,537,0,0,1286,1288,1,0,0,0,1287,1261,1,0,0,0,1287,1262,1,0,0,0,1287,1263,
	1,0,0,0,1287,1268,1,0,0,0,1287,1273,1,0,0,0,1287,1274,1,0,0,0,1287,1275,
	1,0,0,0,1287,1276,1,0,0,0,1287,1278,1,0,0,0,1287,1279,1,0,0,0,1287,1280,
	1,0,0,0,1288,5,1,0,0,0,1289,1290,5,467,0,0,1290,1301,3,1048,524,0,1291,
	1293,3,82,41,0,1292,1291,1,0,0,0,1293,1294,1,0,0,0,1294,1292,1,0,0,0,1294,
	1295,1,0,0,0,1295,1302,1,0,0,0,1296,1297,4,3,6,0,1297,1298,5,53,0,0,1298,
	1299,5,109,0,0,1299,1300,5,119,0,0,1300,1302,5,229,0,0,1301,1292,1,0,0,
	0,1301,1296,1,0,0,0,1302,7,1,0,0,0,1303,1305,3,966,483,0,1304,1303,1,0,
	0,0,1304,1305,1,0,0,0,1305,1306,1,0,0,0,1306,1307,5,133,0,0,1307,1311,3,
	1076,538,0,1308,1309,5,579,0,0,1309,1310,5,303,0,0,1310,1312,3,852,426,
	0,1311,1308,1,0,0,0,1311,1312,1,0,0,0,1312,1319,1,0,0,0,1313,1314,5,579,
	0,0,1314,1316,5,93,0,0,1315,1317,5,573,0,0,1316,1315,1,0,0,0,1316,1317,
	1,0,0,0,1317,1318,1,0,0,0,1318,1320,5,258,0,0,1319,1313,1,0,0,0,1319,1320,
	1,0,0,0,1320,1324,1,0,0,0,1321,1322,5,604,0,0,1322,1323,5,653,0,0,1323,
	1325,3,1118,559,0,1324,1321,1,0,0,0,1324,1325,1,0,0,0,1325,1332,1,0,0,0,
	1326,1333,5,143,0,0,1327,1330,5,120,0,0,1328,1329,5,579,0,0,1329,1331,5,
	45,0,0,1330,1328,1,0,0,0,1330,1331,1,0,0,0,1331,1333,1,0,0,0,1332,1326,
	1,0,0,0,1332,1327,1,0,0,0,1332,1333,1,0,0,0,1333,1336,1,0,0,0,1334,1335,
	5,11,0,0,1335,1337,3,1150,575,0,1336,1334,1,0,0,0,1336,1337,1,0,0,0,1337,
	1340,1,0,0,0,1338,1339,5,15,0,0,1339,1341,3,774,387,0,1340,1338,1,0,0,0,
	1340,1341,1,0,0,0,1341,9,1,0,0,0,1342,1343,5,182,0,0,1343,1344,5,512,0,
	0,1344,1345,3,1072,536,0,1345,1346,5,426,0,0,1346,1347,5,360,0,0,1347,1349,
	3,1150,575,0,1348,1350,3,12,6,0,1349,1348,1,0,0,0,1349,1350,1,0,0,0,1350,
	11,1,0,0,0,1351,1358,3,14,7,0,1352,1354,5,406,0,0,1353,1352,1,0,0,0,1353,
	1354,1,0,0,0,1354,1355,1,0,0,0,1355,1357,3,14,7,0,1356,1353,1,0,0,0,1357,
	1360,1,0,0,0,1358,1356,1,0,0,0,1358,1359,1,0,0,0,1359,13,1,0,0,0,1360,1358,
	1,0,0,0,1361,1365,3,138,69,0,1362,1365,3,150,75,0,1363,1365,3,152,76,0,
	1364,1361,1,0,0,0,1364,1362,1,0,0,0,1364,1363,1,0,0,0,1365,15,1,0,0,0,1366,
	1367,5,43,0,0,1367,1368,3,1082,541,0,1368,1369,3,122,61,0,1369,17,1,0,0,
	0,1370,1372,3,1022,511,0,1371,1370,1,0,0,0,1371,1372,1,0,0,0,1372,1375,
	1,0,0,0,1373,1374,4,9,7,0,1374,1376,5,520,0,0,1375,1373,1,0,0,0,1375,1376,
	1,0,0,0,1376,1377,1,0,0,0,1377,1378,5,647,0,0,1378,1380,3,1092,546,0,1379,
	1381,3,20,10,0,1380,1379,1,0,0,0,1380,1381,1,0,0,0,1381,19,1,0,0,0,1382,
	1385,3,22,11,0,1383,1386,3,944,472,0,1384,1386,3,50,25,0,1385,1383,1,0,
	0,0,1385,1384,1,0,0,0,1385,1386,1,0,0,0,1386,1396,1,0,0,0,1387,1396,3,944,
	472,0,1388,1396,3,50,25,0,1389,1390,3,24,12,0,1390,1391,5,406,0,0,1391,
	1393,1,0,0,0,1392,1389,1,0,0,0,1392,1393,1,0,0,0,1393,1394,1,0,0,0,1394,
	1396,3,26,13,0,1395,1382,1,0,0,0,1395,1387,1,0,0,0,1395,1388,1,0,0,0,1395,
	1392,1,0,0,0,1396,21,1,0,0,0,1397,1405,3,24,12,0,1398,1399,3,24,12,0,1399,
	1400,5,406,0,0,1400,1402,1,0,0,0,1401,1398,1,0,0,0,1401,1402,1,0,0,0,1402,
	1403,1,0,0,0,1403,1405,3,30,15,0,1404,1397,1,0,0,0,1404,1401,1,0,0,0,1405,
	23,1,0,0,0,1406,1411,3,32,16,0,1407,1408,5,406,0,0,1408,1410,3,32,16,0,
	1409,1407,1,0,0,0,1410,1413,1,0,0,0,1411,1409,1,0,0,0,1411,1412,1,0,0,0,
	1412,25,1,0,0,0,1413,1411,1,0,0,0,1414,1415,5,121,0,0,1415,1422,5,342,0,
	0,1416,1417,5,162,0,0,1417,1422,5,342,0,0,1418,1422,3,28,14,0,1419,1420,
	4,13,8,0,1420,1422,7,0,0,0,1421,1414,1,0,0,0,1421,1416,1,0,0,0,1421,1418,
	1,0,0,0,1421,1419,1,0,0,0,1422,27,1,0,0,0,1423,1424,5,426,0,0,1424,1426,
	5,32,0,0,1425,1427,3,1024,512,0,1426,1425,1,0,0,0,1426,1427,1,0,0,0,1427,
	1431,1,0,0,0,1428,1432,3,952,476,0,1429,1430,5,250,0,0,1430,1432,3,1132,
	566,0,1431,1428,1,0,0,0,1431,1429,1,0,0,0,1432,1521,1,0,0,0,1433,1434,5,
	487,0,0,1434,1435,5,32,0,0,1435,1521,3,1120,560,0,1436,1437,5,270,0,0,1437,
	1439,5,32,0,0,1438,1440,3,1024,512,0,1439,1438,1,0,0,0,1439,1440,1,0,0,
	0,1440,1441,1,0,0,0,1441,1521,3,52,26,0,1442,1443,5,582,0,0,1443,1445,5,
	32,0,0,1444,1446,3,1024,512,0,1445,1444,1,0,0,0,1445,1446,1,0,0,0,1446,
	1447,1,0,0,0,1447,1449,3,52,26,0,1448,1450,3,1024,512,0,1449,1448,1,0,0,
	0,1449,1450,1,0,0,0,1450,1521,1,0,0,0,1451,1452,5,63,0,0,1452,1454,5,32,
	0,0,1453,1455,3,1024,512,0,1454,1453,1,0,0,0,1454,1455,1,0,0,0,1455,1456,
	1,0,0,0,1456,1521,3,52,26,0,1457,1458,5,451,0,0,1458,1459,5,32,0,0,1459,
	1463,3,52,26,0,1460,1462,3,558,279,0,1461,1460,1,0,0,0,1462,1465,1,0,0,
	0,1463,1461,1,0,0,0,1463,1464,1,0,0,0,1464,1521,1,0,0,0,1465,1463,1,0,0,
	0,1466,1467,5,37,0,0,1467,1469,5,32,0,0,1468,1470,3,1024,512,0,1469,1468,
	1,0,0,0,1469,1470,1,0,0,0,1470,1471,1,0,0,0,1471,1475,3,52,26,0,1472,1474,
	3,560,280,0,1473,1472,1,0,0,0,1474,1477,1,0,0,0,1475,1473,1,0,0,0,1475,
	1476,1,0,0,0,1476,1521,1,0,0,0,1477,1475,1,0,0,0,1478,1479,5,85,0,0,1479,
	1481,5,32,0,0,1480,1482,3,1024,512,0,1481,1480,1,0,0,0,1481,1482,1,0,0,
	0,1482,1483,1,0,0,0,1483,1521,3,1132,566,0,1484,1485,5,50,0,0,1485,1486,
	5,32,0,0,1486,1521,3,52,26,0,1487,1521,3,54,27,0,1488,1489,5,281,0,0,1489,
	1491,5,32,0,0,1490,1492,3,1024,512,0,1491,1490,1,0,0,0,1491,1492,1,0,0,
	0,1492,1497,1,0,0,0,1493,1494,3,1120,560,0,1494,1495,5,528,0,0,1495,1496,
	3,952,476,0,1496,1498,1,0,0,0,1497,1493,1,0,0,0,1497,1498,1,0,0,0,1498,
	1521,1,0,0,0,1499,1500,5,495,0,0,1500,1501,5,32,0,0,1501,1502,3,1118,559,
	0,1502,1503,5,682,0,0,1503,1504,5,647,0,0,1504,1506,3,1092,546,0,1505,1507,
	3,48,24,0,1506,1505,1,0,0,0,1506,1507,1,0,0,0,1507,1521,1,0,0,0,1508,1509,
	4,14,9,0,1509,1510,5,121,0,0,1510,1511,5,32,0,0,1511,1512,3,52,26,0,1512,
	1513,5,342,0,0,1513,1521,1,0,0,0,1514,1515,4,14,10,0,1515,1516,5,162,0,
	0,1516,1517,5,32,0,0,1517,1518,3,52,26,0,1518,1519,5,342,0,0,1519,1521,
	1,0,0,0,1520,1423,1,0,0,0,1520,1433,1,0,0,0,1520,1436,1,0,0,0,1520,1442,
	1,0,0,0,1520,1451,1,0,0,0,1520,1457,1,0,0,0,1520,1466,1,0,0,0,1520,1478,
	1,0,0,0,1520,1484,1,0,0,0,1520,1487,1,0,0,0,1520,1488,1,0,0,0,1520,1499,
	1,0,0,0,1520,1508,1,0,0,0,1520,1514,1,0,0,0,1521,29,1,0,0,0,1522,1525,3,
	34,17,0,1523,1525,3,932,466,0,1524,1522,1,0,0,0,1524,1523,1,0,0,0,1525,
	1534,1,0,0,0,1526,1530,5,406,0,0,1527,1531,3,34,17,0,1528,1531,3,32,16,
	0,1529,1531,3,932,466,0,1530,1527,1,0,0,0,1530,1528,1,0,0,0,1530,1529,1,
	0,0,0,1531,1533,1,0,0,0,1532,1526,1,0,0,0,1533,1536,1,0,0,0,1534,1532,1,
	0,0,0,1534,1535,1,0,0,0,1535,31,1,0,0,0,1536,1534,1,0,0,0,1537,1541,3,42,
	21,0,1538,1541,3,44,22,0,1539,1541,3,48,24,0,1540,1537,1,0,0,0,1540,1538,
	1,0,0,0,1540,1539,1,0,0,0,1541,33,1,0,0,0,1542,1544,5,426,0,0,1543,1545,
	5,453,0,0,1544,1543,1,0,0,0,1544,1545,1,0,0,0,1545,1558,1,0,0,0,1546,1547,
	3,1118,559,0,1547,1549,3,866,433,0,1548,1550,3,856,428,0,1549,1548,1,0,
	0,0,1549,1550,1,0,0,0,1550,1552,1,0,0,0,1551,1553,3,36,18,0,1552,1551,1,
	0,0,0,1552,1553,1,0,0,0,1553,1559,1,0,0,0,1554,1555,5,409,0,0,1555,1556,
	3,86,43,0,1556,1557,5,410,0,0,1557,1559,1,0,0,0,1558,1546,1,0,0,0,1558,
	1554,1,0,0,0,1559,1676,1,0,0,0,1560,1561,5,426,0,0,1561,1676,3,862,431,
	0,1562,1564,5,449,0,0,1563,1565,5,453,0,0,1564,1563,1,0,0,0,1564,1565,1,
	0,0,0,1565,1566,1,0,0,0,1566,1567,3,1032,516,0,1567,1568,3,1118,559,0,1568,
	1570,3,866,433,0,1569,1571,3,36,18,0,1570,1569,1,0,0,0,1570,1571,1,0,0,
	0,1571,1676,1,0,0,0,1572,1574,5,221,0,0,1573,1575,5,453,0,0,1574,1573,1,
	0,0,0,1574,1575,1,0,0,0,1575,1576,1,0,0,0,1576,1577,3,1032,516,0,1577,1579,
	3,866,433,0,1578,1580,3,36,18,0,1579,1578,1,0,0,0,1579,1580,1,0,0,0,1580,
	1676,1,0,0,0,1581,1604,5,487,0,0,1582,1584,5,453,0,0,1583,1582,1,0,0,0,
	1583,1584,1,0,0,0,1584,1585,1,0,0,0,1585,1587,3,1032,516,0,1586,1588,3,
	38,19,0,1587,1586,1,0,0,0,1587,1588,1,0,0,0,1588,1605,1,0,0,0,1589,1590,
	5,505,0,0,1590,1597,5,537,0,0,1591,1592,4,17,11,0,1592,1598,3,1032,516,
	0,1593,1595,4,17,12,0,1594,1596,3,1032,516,0,1595,1594,1,0,0,0,1595,1596,
	1,0,0,0,1596,1598,1,0,0,0,1597,1591,1,0,0,0,1597,1593,1,0,0,0,1598,1605,
	1,0,0,0,1599,1600,5,593,0,0,1600,1605,5,537,0,0,1601,1602,3,398,199,0,1602,
	1603,3,1042,521,0,1603,1605,1,0,0,0,1604,1583,1,0,0,0,1604,1589,1,0,0,0,
	1604,1599,1,0,0,0,1604,1601,1,0,0,0,1605,1676,1,0,0,0,1606,1607,5,120,0,
	0,1607,1676,5,536,0,0,1608,1609,5,143,0,0,1609,1676,5,536,0,0,1610,1612,
	5,428,0,0,1611,1613,5,453,0,0,1612,1611,1,0,0,0,1612,1613,1,0,0,0,1613,
	1614,1,0,0,0,1614,1624,3,1032,516,0,1615,1616,5,619,0,0,1616,1620,5,478,
	0,0,1617,1618,4,17,13,0,1618,1621,3,760,380,0,1619,1621,3,1140,570,0,1620,
	1617,1,0,0,0,1620,1619,1,0,0,0,1621,1625,1,0,0,0,1622,1623,5,487,0,0,1623,
	1625,5,478,0,0,1624,1615,1,0,0,0,1624,1622,1,0,0,0,1625,1676,1,0,0,0,1626,
	1627,4,17,14,0,1627,1628,5,428,0,0,1628,1629,5,521,0,0,1629,1630,3,1042,
	521,0,1630,1631,3,896,448,0,1631,1676,1,0,0,0,1632,1633,4,17,15,0,1633,
	1634,5,428,0,0,1634,1635,5,451,0,0,1635,1636,3,1118,559,0,1636,1637,3,860,
	430,0,1637,1676,1,0,0,0,1638,1639,4,17,16,0,1639,1640,5,604,0,0,1640,1641,
	5,453,0,0,1641,1642,3,1032,516,0,1642,1643,5,653,0,0,1643,1644,3,1118,559,
	0,1644,1676,1,0,0,0,1645,1647,5,604,0,0,1646,1648,7,1,0,0,1647,1646,1,0,
	0,0,1647,1648,1,0,0,0,1648,1649,1,0,0,0,1649,1676,3,1086,543,0,1650,1651,
	4,17,17,0,1651,1652,5,604,0,0,1652,1653,3,398,199,0,1653,1654,3,1042,521,
	0,1654,1655,5,653,0,0,1655,1656,3,1040,520,0,1656,1676,1,0,0,0,1657,1658,
	5,457,0,0,1658,1659,5,653,0,0,1659,1663,3,748,374,0,1660,1661,4,17,18,0,
	1661,1664,5,478,0,0,1662,1664,3,926,463,0,1663,1660,1,0,0,0,1663,1662,1,
	0,0,0,1664,1666,1,0,0,0,1665,1667,3,976,488,0,1666,1665,1,0,0,0,1666,1667,
	1,0,0,0,1667,1676,1,0,0,0,1668,1676,5,504,0,0,1669,1670,5,586,0,0,1670,
	1671,5,444,0,0,1671,1676,3,40,20,0,1672,1673,4,17,19,0,1673,1674,5,53,0,
	0,1674,1676,5,249,0,0,1675,1542,1,0,0,0,1675,1560,1,0,0,0,1675,1562,1,0,
	0,0,1675,1572,1,0,0,0,1675,1581,1,0,0,0,1675,1606,1,0,0,0,1675,1608,1,0,
	0,0,1675,1610,1,0,0,0,1675,1626,1,0,0,0,1675,1632,1,0,0,0,1675,1638,1,0,
	0,0,1675,1645,1,0,0,0,1675,1650,1,0,0,0,1675,1657,1,0,0,0,1675,1668,1,0,
	0,0,1675,1669,1,0,0,0,1675,1672,1,0,0,0,1676,35,1,0,0,0,1677,1678,5,59,
	0,0,1678,1681,3,1118,559,0,1679,1681,5,148,0,0,1680,1677,1,0,0,0,1680,1679,
	1,0,0,0,1681,37,1,0,0,0,1682,1683,7,2,0,0,1683,39,1,0,0,0,1684,1686,3,1118,
	559,0,1685,1687,3,330,165,0,1686,1685,1,0,0,0,1686,1687,1,0,0,0,1687,1695,
	1,0,0,0,1688,1689,5,406,0,0,1689,1691,3,1118,559,0,1690,1692,3,330,165,
	0,1691,1690,1,0,0,0,1691,1692,1,0,0,0,1692,1694,1,0,0,0,1693,1688,1,0,0,
	0,1694,1697,1,0,0,0,1695,1693,1,0,0,0,1695,1696,1,0,0,0,1696,41,1,0,0,0,
	1697,1695,1,0,0,0,1698,1700,5,62,0,0,1699,1701,5,383,0,0,1700,1699,1,0,
	0,0,1700,1701,1,0,0,0,1701,1704,1,0,0,0,1702,1705,5,478,0,0,1703,1705,3,
	1118,559,0,1704,1702,1,0,0,0,1704,1703,1,0,0,0,1705,43,1,0,0,0,1706,1708,
	5,548,0,0,1707,1709,5,383,0,0,1708,1707,1,0,0,0,1708,1709,1,0,0,0,1709,
	1712,1,0,0,0,1710,1713,5,478,0,0,1711,1713,3,1118,559,0,1712,1710,1,0,0,
	0,1712,1711,1,0,0,0,1713,45,1,0,0,0,1714,1716,3,42,21,0,1715,1717,3,44,
	22,0,1716,1715,1,0,0,0,1716,1717,1,0,0,0,1717,1723,1,0,0,0,1718,1720,3,
	44,22,0,1719,1721,3,42,21,0,1720,1719,1,0,0,0,1720,1721,1,0,0,0,1721,1723,
	1,0,0,0,1722,1714,1,0,0,0,1722,1718,1,0,0,0,1723,47,1,0,0,0,1724,1725,4,
	24,20,0,1725,1726,7,3,0,0,1726,1727,5,670,0,0,1727,49,1,0,0,0,1728,1729,
	5,36,0,0,1729,1730,5,249,0,0,1730,51,1,0,0,0,1731,1734,5,427,0,0,1732,1734,
	3,1120,560,0,1733,1731,1,0,0,0,1733,1732,1,0,0,0,1734,53,1,0,0,0,1735,1736,
	5,281,0,0,1736,1738,5,32,0,0,1737,1739,3,1024,512,0,1738,1737,1,0,0,0,1738,
	1739,1,0,0,0,1739,1744,1,0,0,0,1740,1741,3,1120,560,0,1741,1742,5,528,0,
	0,1742,1743,3,952,476,0,1743,1745,1,0,0,0,1744,1740,1,0,0,0,1744,1745,1,
	0,0,0,1745,55,1,0,0,0,1746,1747,5,342,0,0,1747,1781,3,1068,534,0,1748,1749,
	7,4,0,0,1749,1750,5,110,0,0,1750,1752,3,1150,575,0,1751,1753,3,64,32,0,
	1752,1751,1,0,0,0,1752,1753,1,0,0,0,1753,1782,1,0,0,0,1754,1774,4,28,21,
	0,1755,1775,1,0,0,0,1756,1757,5,449,0,0,1757,1758,5,110,0,0,1758,1769,3,
	1150,575,0,1759,1766,3,68,34,0,1760,1762,5,406,0,0,1761,1760,1,0,0,0,1761,
	1762,1,0,0,0,1762,1763,1,0,0,0,1763,1765,3,68,34,0,1764,1761,1,0,0,0,1765,
	1768,1,0,0,0,1766,1764,1,0,0,0,1766,1767,1,0,0,0,1767,1770,1,0,0,0,1768,
	1766,1,0,0,0,1769,1759,1,0,0,0,1769,1770,1,0,0,0,1770,1775,1,0,0,0,1771,
	1775,7,5,0,0,1772,1773,5,573,0,0,1773,1775,5,425,0,0,1774,1755,1,0,0,0,
	1774,1756,1,0,0,0,1774,1771,1,0,0,0,1774,1772,1,0,0,0,1775,1782,1,0,0,0,
	1776,1777,5,604,0,0,1777,1778,5,653,0,0,1778,1782,3,1118,559,0,1779,1780,
	4,28,22,0,1780,1782,3,64,32,0,1781,1748,1,0,0,0,1781,1754,1,0,0,0,1781,
	1776,1,0,0,0,1781,1779,1,0,0,0,1782,57,1,0,0,0,1783,1784,5,658,0,0,1784,
	1785,5,342,0,0,1785,1786,3,1068,534,0,1786,1787,5,619,0,0,1787,1789,7,6,
	0,0,1788,1790,3,60,30,0,1789,1788,1,0,0,0,1789,1790,1,0,0,0,1790,59,1,0,
	0,0,1791,1798,3,62,31,0,1792,1794,5,406,0,0,1793,1792,1,0,0,0,1793,1794,
	1,0,0,0,1794,1795,1,0,0,0,1795,1797,3,62,31,0,1796,1793,1,0,0,0,1797,1800,
	1,0,0,0,1798,1796,1,0,0,0,1798,1799,1,0,0,0,1799,61,1,0,0,0,1800,1798,1,
	0,0,0,1801,1802,3,150,75,0,1802,63,1,0,0,0,1803,1810,3,66,33,0,1804,1806,
	5,406,0,0,1805,1804,1,0,0,0,1805,1806,1,0,0,0,1806,1807,1,0,0,0,1807,1809,
	3,66,33,0,1808,1805,1,0,0,0,1809,1812,1,0,0,0,1810,1808,1,0,0,0,1810,1811,
	1,0,0,0,1811,65,1,0,0,0,1812,1810,1,0,0,0,1813,1815,5,164,0,0,1814,1816,
	5,383,0,0,1815,1814,1,0,0,0,1815,1816,1,0,0,0,1816,1817,1,0,0,0,1817,1824,
	3,1176,588,0,1818,1824,3,142,71,0,1819,1824,3,144,72,0,1820,1824,3,150,
	75,0,1821,1824,3,152,76,0,1822,1824,3,158,79,0,1823,1813,1,0,0,0,1823,1818,
	1,0,0,0,1823,1819,1,0,0,0,1823,1820,1,0,0,0,1823,1821,1,0,0,0,1823,1822,
	1,0,0,0,1824,67,1,0,0,0,1825,1827,5,164,0,0,1826,1828,5,383,0,0,1827,1826,
	1,0,0,0,1827,1828,1,0,0,0,1828,1829,1,0,0,0,1829,1833,3,1176,588,0,1830,
	1833,3,142,71,0,1831,1833,3,144,72,0,1832,1825,1,0,0,0,1832,1830,1,0,0,
	0,1832,1831,1,0,0,0,1833,69,1,0,0,0,1834,1836,3,164,82,0,1835,1834,1,0,
	0,0,1835,1836,1,0,0,0,1836,1838,1,0,0,0,1837,1839,3,966,483,0,1838,1837,
	1,0,0,0,1838,1839,1,0,0,0,1839,1841,1,0,0,0,1840,1842,3,166,83,0,1841,1840,
	1,0,0,0,1841,1842,1,0,0,0,1842,1843,1,0,0,0,1843,1844,5,367,0,0,1844,1845,
	3,1064,532,0,1845,1846,3,72,36,0,1846,71,1,0,0,0,1847,1849,3,1034,517,0,
	1848,1847,1,0,0,0,1848,1849,1,0,0,0,1849,1850,1,0,0,0,1850,1851,5,431,0,
	0,1851,1852,3,74,37,0,1852,73,1,0,0,0,1853,1855,3,92,46,0,1854,1856,3,76,
	38,0,1855,1854,1,0,0,0,1855,1856,1,0,0,0,1856,75,1,0,0,0,1857,1859,5,682,
	0,0,1858,1860,7,7,0,0,1859,1858,1,0,0,0,1859,1860,1,0,0,0,1860,1861,1,0,
	0,0,1861,1862,5,451,0,0,1862,1863,5,584,0,0,1863,77,1,0,0,0,1864,1883,5,
	459,0,0,1865,1884,3,80,40,0,1866,1884,3,84,42,0,1867,1884,3,98,49,0,1868,
	1884,3,96,48,0,1869,1884,3,100,50,0,1870,1884,3,114,57,0,1871,1884,3,160,
	80,0,1872,1884,3,168,84,0,1873,1884,3,108,54,0,1874,1884,3,120,60,0,1875,
	1884,3,126,63,0,1876,1884,3,172,86,0,1877,1878,4,39,23,0,1878,1884,3,174,
	87,0,1879,1880,4,39,24,0,1880,1884,3,176,88,0,1881,1882,4,39,25,0,1882,
	1884,3,128,64,0,1883,1865,1,0,0,0,1883,1866,1,0,0,0,1883,1867,1,0,0,0,1883,
	1868,1,0,0,0,1883,1869,1,0,0,0,1883,1870,1,0,0,0,1883,1871,1,0,0,0,1883,
	1872,1,0,0,0,1883,1873,1,0,0,0,1883,1874,1,0,0,0,1883,1875,1,0,0,0,1883,
	1876,1,0,0,0,1883,1877,1,0,0,0,1883,1879,1,0,0,0,1883,1881,1,0,0,0,1884,
	79,1,0,0,0,1885,1887,5,467,0,0,1886,1888,3,970,485,0,1887,1886,1,0,0,0,
	1887,1888,1,0,0,0,1888,1889,1,0,0,0,1889,1893,3,1046,523,0,1890,1892,3,
	82,41,0,1891,1890,1,0,0,0,1892,1895,1,0,0,0,1893,1891,1,0,0,0,1893,1894,
	1,0,0,0,1894,81,1,0,0,0,1895,1893,1,0,0,0,1896,1901,3,942,471,0,1897,1901,
	3,938,469,0,1898,1899,4,41,26,0,1899,1901,3,940,470,0,1900,1896,1,0,0,0,
	1900,1897,1,0,0,0,1900,1898,1,0,0,0,1901,83,1,0,0,0,1902,1904,5,343,0,0,
	1903,1902,1,0,0,0,1903,1904,1,0,0,0,1904,1905,1,0,0,0,1905,1907,5,647,0,
	0,1906,1908,3,970,485,0,1907,1906,1,0,0,0,1907,1908,1,0,0,0,1908,1909,1,
	0,0,0,1909,1932,3,1086,543,0,1910,1911,5,409,0,0,1911,1912,3,86,43,0,1912,
	1913,5,410,0,0,1913,1915,1,0,0,0,1914,1910,1,0,0,0,1914,1915,1,0,0,0,1915,
	1917,1,0,0,0,1916,1918,3,930,465,0,1917,1916,1,0,0,0,1917,1918,1,0,0,0,
	1918,1920,1,0,0,0,1919,1921,3,944,472,0,1920,1919,1,0,0,0,1920,1921,1,0,
	0,0,1921,1923,1,0,0,0,1922,1924,3,90,45,0,1923,1922,1,0,0,0,1923,1924,1,
	0,0,0,1924,1933,1,0,0,0,1925,1926,5,542,0,0,1926,1933,3,1092,546,0,1927,
	1928,5,409,0,0,1928,1929,5,542,0,0,1929,1930,3,1092,546,0,1930,1931,5,410,
	0,0,1931,1933,1,0,0,0,1932,1914,1,0,0,0,1932,1925,1,0,0,0,1932,1927,1,0,
	0,0,1933,85,1,0,0,0,1934,1939,3,88,44,0,1935,1936,5,406,0,0,1936,1938,3,
	88,44,0,1937,1935,1,0,0,0,1938,1941,1,0,0,0,1939,1937,1,0,0,0,1939,1940,
	1,0,0,0,1940,87,1,0,0,0,1941,1939,1,0,0,0,1942,1945,3,854,427,0,1943,1945,
	3,862,431,0,1944,1942,1,0,0,0,1944,1943,1,0,0,0,1945,89,1,0,0,0,1946,1948,
	7,8,0,0,1947,1946,1,0,0,0,1947,1948,1,0,0,0,1948,1950,1,0,0,0,1949,1951,
	5,431,0,0,1950,1949,1,0,0,0,1950,1951,1,0,0,0,1951,1952,1,0,0,0,1952,1953,
	3,92,46,0,1953,91,1,0,0,0,1954,1957,3,272,136,0,1955,1957,3,276,138,0,1956,
	1954,1,0,0,0,1956,1955,1,0,0,0,1957,93,1,0,0,0,1958,1962,5,459,0,0,1959,
	1963,3,96,48,0,1960,1963,3,98,49,0,1961,1963,3,100,50,0,1962,1959,1,0,0,
	0,1962,1960,1,0,0,0,1962,1961,1,0,0,0,1963,1965,1,0,0,0,1964,1966,5,407,
	0,0,1965,1964,1,0,0,0,1965,1966,1,0,0,0,1966,1967,1,0,0,0,1967,1968,5,0,
	0,1,1968,95,1,0,0,0,1969,1971,3,966,483,0,1970,1969,1,0,0,0,1970,1971,1,
	0,0,0,1971,1972,1,0,0,0,1972,1973,5,594,0,0,1973,1974,3,1050,525,0,1974,
	1983,5,409,0,0,1975,1980,3,972,486,0,1976,1977,5,406,0,0,1977,1979,3,972,
	486,0,1978,1976,1,0,0,0,1979,1982,1,0,0,0,1980,1978,1,0,0,0,1980,1981,1,
	0,0,0,1981,1984,1,0,0,0,1982,1980,1,0,0,0,1983,1975,1,0,0,0,1983,1984,1,
	0,0,0,1984,1985,1,0,0,0,1985,1989,5,410,0,0,1986,1988,3,102,51,0,1987,1986,
	1,0,0,0,1988,1991,1,0,0,0,1989,1987,1,0,0,0,1989,1990,1,0,0,0,1990,1992,
	1,0,0,0,1991,1989,1,0,0,0,1992,1993,3,774,387,0,1993,97,1,0,0,0,1994,1996,
	3,966,483,0,1995,1994,1,0,0,0,1995,1996,1,0,0,0,1996,1997,1,0,0,0,1997,
	1998,5,356,0,0,1998,1999,3,1054,527,0,1999,2008,5,409,0,0,2000,2005,3,974,
	487,0,2001,2002,5,406,0,0,2002,2004,3,974,487,0,2003,2001,1,0,0,0,2004,
	2007,1,0,0,0,2005,2003,1,0,0,0,2005,2006,1,0,0,0,2006,2009,1,0,0,0,2007,
	2005,1,0,0,0,2008,2000,1,0,0,0,2008,2009,1,0,0,0,2009,2010,1,0,0,0,2010,
	2011,5,410,0,0,2011,2012,5,293,0,0,2012,2016,3,978,489,0,2013,2015,3,102,
	51,0,2014,2013,1,0,0,0,2015,2018,1,0,0,0,2016,2014,1,0,0,0,2016,2017,1,
	0,0,0,2017,2019,1,0,0,0,2018,2016,1,0,0,0,2019,2020,3,774,387,0,2020,99,
	1,0,0,0,2021,2023,5,61,0,0,2022,2021,1,0,0,0,2022,2023,1,0,0,0,2023,2024,
	1,0,0,0,2024,2025,5,356,0,0,2025,2026,3,1078,539,0,2026,2027,5,293,0,0,
	2027,2028,7,9,0,0,2028,2029,5,47,0,0,2029,2030,3,1150,575,0,2030,101,1,
	0,0,0,2031,2037,3,106,53,0,2032,2034,5,573,0,0,2033,2032,1,0,0,0,2033,2034,
	1,0,0,0,2034,2035,1,0,0,0,2035,2037,5,483,0,0,2036,2031,1,0,0,0,2036,2033,
	1,0,0,0,2037,103,1,0,0,0,2038,2040,3,102,51,0,2039,2038,1,0,0,0,2040,2041,
	1,0,0,0,2041,2039,1,0,0,0,2041,2042,1,0,0,0,2042,105,1,0,0,0,2043,2044,
	5,11,0,0,2044,2061,3,1150,575,0,2045,2046,5,26,0,0,2046,2061,5,632,0,0,
	2047,2048,5,27,0,0,2048,2061,5,632,0,0,2049,2050,5,13,0,0,2050,2061,5,632,
	0,0,2051,2052,5,597,0,0,2052,2053,5,632,0,0,2053,2061,5,109,0,0,2054,2055,
	5,567,0,0,2055,2056,5,632,0,0,2056,2061,5,109,0,0,2057,2058,5,632,0,0,2058,
	2059,5,42,0,0,2059,2061,7,10,0,0,2060,2043,1,0,0,0,2060,2045,1,0,0,0,2060,
	2047,1,0,0,0,2060,2049,1,0,0,0,2060,2051,1,0,0,0,2060,2054,1,0,0,0,2060,
	2057,1,0,0,0,2061,107,1,0,0,0,2062,2064,3,1022,511,0,2063,2062,1,0,0,0,
	2063,2064,1,0,0,0,2064,2106,1,0,0,0,2065,2067,5,660,0,0,2066,2065,1,0,0,
	0,2066,2067,1,0,0,0,2067,2068,1,0,0,0,2068,2077,5,521,0,0,2069,2070,4,54,
	27,0,2070,2072,3,1040,520,0,2071,2073,3,898,449,0,2072,2071,1,0,0,0,2072,
	2073,1,0,0,0,2073,2078,1,0,0,0,2074,2076,3,110,55,0,2075,2074,1,0,0,0,2075,
	2076,1,0,0,0,2076,2078,1,0,0,0,2077,2069,1,0,0,0,2077,2075,1,0,0,0,2078,
	2079,1,0,0,0,2079,2083,3,112,56,0,2080,2082,3,892,446,0,2081,2080,1,0,0,
	0,2082,2085,1,0,0,0,2083,2081,1,0,0,0,2083,2084,1,0,0,0,2084,2107,1,0,0,
	0,2085,2083,1,0,0,0,2086,2087,5,508,0,0,2087,2088,5,521,0,0,2088,2089,3,
	1040,520,0,2089,2093,3,112,56,0,2090,2092,3,900,450,0,2091,2090,1,0,0,0,
	2092,2095,1,0,0,0,2093,2091,1,0,0,0,2093,2094,1,0,0,0,2094,2107,1,0,0,0,
	2095,2093,1,0,0,0,2096,2097,5,624,0,0,2097,2098,5,521,0,0,2098,2099,3,1040,
	520,0,2099,2103,3,112,56,0,2100,2102,3,902,451,0,2101,2100,1,0,0,0,2102,
	2105,1,0,0,0,2103,2101,1,0,0,0,2103,2104,1,0,0,0,2104,2107,1,0,0,0,2105,
	2103,1,0,0,0,2106,2066,1,0,0,0,2106,2086,1,0,0,0,2106,2096,1,0,0,0,2107,
	2109,1,0,0,0,2108,2110,3,46,23,0,2109,2108,1,0,0,0,2109,2110,1,0,0,0,2110,
	109,1,0,0,0,2111,2114,3,1040,520,0,2112,2113,5,666,0,0,2113,2115,3,890,
	445,0,2114,2112,1,0,0,0,2114,2115,1,0,0,0,2115,2121,1,0,0,0,2116,2117,3,
	1040,520,0,2117,2118,5,354,0,0,2118,2119,3,890,445,0,2119,2121,1,0,0,0,
	2120,2111,1,0,0,0,2120,2116,1,0,0,0,2121,111,1,0,0,0,2122,2123,5,579,0,
	0,2123,2124,3,1092,546,0,2124,2125,3,888,444,0,2125,113,1,0,0,0,2126,2127,
	5,182,0,0,2127,2128,5,512,0,0,2128,2129,3,1070,535,0,2129,2130,5,426,0,
	0,2130,2131,7,11,0,0,2131,2133,3,1150,575,0,2132,2134,3,116,58,0,2133,2132,
	1,0,0,0,2133,2134,1,0,0,0,2134,115,1,0,0,0,2135,2142,3,118,59,0,2136,2138,
	5,406,0,0,2137,2136,1,0,0,0,2137,2138,1,0,0,0,2138,2139,1,0,0,0,2139,2141,
	3,118,59,0,2140,2137,1,0,0,0,2141,2144,1,0,0,0,2142,2140,1,0,0,0,2142,2143,
	1,0,0,0,2143,117,1,0,0,0,2144,2142,1,0,0,0,2145,2152,3,138,69,0,2146,2152,
	3,140,70,0,2147,2152,3,148,74,0,2148,2152,3,150,75,0,2149,2152,3,152,76,
	0,2150,2152,3,154,77,0,2151,2145,1,0,0,0,2151,2146,1,0,0,0,2151,2147,1,
	0,0,0,2151,2148,1,0,0,0,2151,2149,1,0,0,0,2151,2150,1,0,0,0,2152,119,1,
	0,0,0,2153,2154,5,43,0,0,2154,2155,3,1080,540,0,2155,2156,5,505,0,0,2156,
	2157,5,109,0,0,2157,2158,5,54,0,0,2158,2159,3,1170,585,0,2159,2160,3,122,
	61,0,2160,121,1,0,0,0,2161,2162,5,29,0,0,2162,2163,5,409,0,0,2163,2168,
	3,124,62,0,2164,2165,5,406,0,0,2165,2167,3,124,62,0,2166,2164,1,0,0,0,2167,
	2170,1,0,0,0,2168,2166,1,0,0,0,2168,2169,1,0,0,0,2169,2171,1,0,0,0,2170,
	2168,1,0,0,0,2171,2172,5,410,0,0,2172,123,1,0,0,0,2173,2174,5,24,0,0,2174,
	2188,3,1150,575,0,2175,2176,5,467,0,0,2176,2188,3,1150,575,0,2177,2178,
	5,364,0,0,2178,2188,3,1150,575,0,2179,2180,5,251,0,0,2180,2188,3,1150,575,
	0,2181,2182,5,46,0,0,2182,2188,3,1150,575,0,2183,2184,5,30,0,0,2184,2188,
	3,1150,575,0,2185,2186,5,33,0,0,2186,2188,3,1130,565,0,2187,2173,1,0,0,
	0,2187,2175,1,0,0,0,2187,2177,1,0,0,0,2187,2179,1,0,0,0,2187,2181,1,0,0,
	0,2187,2183,1,0,0,0,2187,2185,1,0,0,0,2188,125,1,0,0,0,2189,2190,5,342,
	0,0,2190,2191,3,1066,533,0,2191,2196,3,130,65,0,2192,2193,5,665,0,0,2193,
	2194,5,182,0,0,2194,2195,5,512,0,0,2195,2197,3,1072,536,0,2196,2192,1,0,
	0,0,2196,2197,1,0,0,0,2197,2199,1,0,0,0,2198,2200,3,134,67,0,2199,2198,
	1,0,0,0,2199,2200,1,0,0,0,2200,127,1,0,0,0,2201,2202,5,658,0,0,2202,2203,
	5,342,0,0,2203,2204,3,1066,533,0,2204,2205,5,426,0,0,2205,2207,3,132,66,
	0,2206,2208,3,60,30,0,2207,2206,1,0,0,0,2207,2208,1,0,0,0,2208,129,1,0,
	0,0,2209,2212,4,65,28,0,2210,2211,5,426,0,0,2211,2213,3,132,66,0,2212,2210,
	1,0,0,0,2212,2213,1,0,0,0,2213,2217,1,0,0,0,2214,2215,5,426,0,0,2215,2217,
	3,132,66,0,2216,2209,1,0,0,0,2216,2214,1,0,0,0,2217,131,1,0,0,0,2218,2219,
	5,110,0,0,2219,2220,3,1150,575,0,2220,133,1,0,0,0,2221,2228,3,136,68,0,
	2222,2224,5,406,0,0,2223,2222,1,0,0,0,2223,2224,1,0,0,0,2224,2225,1,0,0,
	0,2225,2227,3,136,68,0,2226,2223,1,0,0,0,2227,2230,1,0,0,0,2228,2226,1,
	0,0,0,2228,2229,1,0,0,0,2229,135,1,0,0,0,2230,2228,1,0,0,0,2231,2244,3,
	138,69,0,2232,2244,3,142,71,0,2233,2244,3,144,72,0,2234,2244,3,146,73,0,
	2235,2244,3,148,74,0,2236,2244,3,150,75,0,2237,2244,3,152,76,0,2238,2244,
	3,154,77,0,2239,2240,4,68,29,0,2240,2244,3,156,78,0,2241,2242,4,68,30,0,
	2242,2244,3,158,79,0,2243,2231,1,0,0,0,2243,2232,1,0,0,0,2243,2233,1,0,
	0,0,2243,2234,1,0,0,0,2243,2235,1,0,0,0,2243,2236,1,0,0,0,2243,2237,1,0,
	0,0,2243,2238,1,0,0,0,2243,2239,1,0,0,0,2243,2241,1,0,0,0,2244,137,1,0,
	0,0,2245,2247,5,164,0,0,2246,2248,5,383,0,0,2247,2246,1,0,0,0,2247,2248,
	1,0,0,0,2248,2249,1,0,0,0,2249,2250,3,1176,588,0,2250,139,1,0,0,0,2251,
	2253,7,12,0,0,2252,2254,5,383,0,0,2253,2252,1,0,0,0,2253,2254,1,0,0,0,2254,
	2255,1,0,0,0,2255,2256,3,1176,588,0,2256,141,1,0,0,0,2257,2259,5,68,0,0,
	2258,2260,5,383,0,0,2259,2258,1,0,0,0,2259,2260,1,0,0,0,2260,2261,1,0,0,
	0,2261,2262,3,1176,588,0,2262,143,1,0,0,0,2263,2265,5,210,0,0,2264,2266,
	5,383,0,0,2265,2264,1,0,0,0,2265,2266,1,0,0,0,2266,2267,1,0,0,0,2267,2268,
	3,1176,588,0,2268,145,1,0,0,0,2269,2271,5,139,0,0,2270,2272,5,383,0,0,2271,
	2270,1,0,0,0,2271,2272,1,0,0,0,2272,2273,1,0,0,0,2273,2274,3,1176,588,0,
	2274,147,1,0,0,0,2275,2277,5,238,0,0,2276,2278,5,383,0,0,2277,2276,1,0,
	0,0,2277,2278,1,0,0,0,2278,2279,1,0,0,0,2279,2280,3,1132,566,0,2280,149,
	1,0,0,0,2281,2283,5,328,0,0,2282,2281,1,0,0,0,2282,2283,1,0,0,0,2283,2284,
	1,0,0,0,2284,2286,5,128,0,0,2285,2287,5,383,0,0,2286,2285,1,0,0,0,2286,
	2287,1,0,0,0,2287,2288,1,0,0,0,2288,2289,3,1084,542,0,2289,151,1,0,0,0,
	2290,2291,7,13,0,0,2291,153,1,0,0,0,2292,2294,5,11,0,0,2293,2295,5,383,
	0,0,2294,2293,1,0,0,0,2294,2295,1,0,0,0,2295,2296,1,0,0,0,2296,2297,3,1150,
	575,0,2297,155,1,0,0,0,2298,2300,5,146,0,0,2299,2301,5,383,0,0,2300,2299,
	1,0,0,0,2300,2301,1,0,0,0,2301,2302,1,0,0,0,2302,2303,3,1176,588,0,2303,
	157,1,0,0,0,2304,2306,5,96,0,0,2305,2307,5,383,0,0,2306,2305,1,0,0,0,2306,
	2307,1,0,0,0,2307,2308,1,0,0,0,2308,2309,3,1144,572,0,2309,159,1,0,0,0,
	2310,2312,3,162,81,0,2311,2310,1,0,0,0,2311,2312,1,0,0,0,2312,2314,1,0,
	0,0,2313,2315,3,966,483,0,2314,2313,1,0,0,0,2314,2315,1,0,0,0,2315,2317,
	1,0,0,0,2316,2318,3,166,83,0,2317,2316,1,0,0,0,2317,2318,1,0,0,0,2318,2319,
	1,0,0,0,2319,2320,5,367,0,0,2320,2321,3,1062,531,0,2321,2322,3,72,36,0,
	2322,161,1,0,0,0,2323,2324,5,587,0,0,2324,2326,5,606,0,0,2325,2327,3,164,
	82,0,2326,2325,1,0,0,0,2326,2327,1,0,0,0,2327,2330,1,0,0,0,2328,2330,3,
	164,82,0,2329,2323,1,0,0,0,2329,2328,1,0,0,0,2330,163,1,0,0,0,2331,2332,
	5,62,0,0,2332,2333,5,383,0,0,2333,2334,7,14,0,0,2334,165,1,0,0,0,2335,2336,
	5,632,0,0,2336,2337,5,42,0,0,2337,2338,7,10,0,0,2338,167,1,0,0,0,2339,2341,
	3,966,483,0,2340,2339,1,0,0,0,2340,2341,1,0,0,0,2341,2342,1,0,0,0,2342,
	2343,5,655,0,0,2343,2344,3,1058,529,0,2344,2345,7,15,0,0,2345,2346,7,16,
	0,0,2346,2347,5,579,0,0,2347,2348,3,1092,546,0,2348,2349,5,506,0,0,2349,
	2350,5,489,0,0,2350,2352,5,301,0,0,2351,2353,3,170,85,0,2352,2351,1,0,0,
	0,2352,2353,1,0,0,0,2353,2354,1,0,0,0,2354,2355,3,774,387,0,2355,169,1,
	0,0,0,2356,2357,4,85,31,0,2357,2358,7,17,0,0,2358,2359,3,1170,585,0,2359,
	171,1,0,0,0,2360,2362,3,966,483,0,2361,2360,1,0,0,0,2361,2362,1,0,0,0,2362,
	2363,1,0,0,0,2363,2365,5,133,0,0,2364,2366,3,970,485,0,2365,2364,1,0,0,
	0,2365,2366,1,0,0,0,2366,2367,1,0,0,0,2367,2368,3,1074,537,0,2368,2369,
	5,579,0,0,2369,2370,5,303,0,0,2370,2377,3,852,426,0,2371,2372,5,579,0,0,
	2372,2374,5,93,0,0,2373,2375,5,573,0,0,2374,2373,1,0,0,0,2374,2375,1,0,
	0,0,2375,2376,1,0,0,0,2376,2378,5,258,0,0,2377,2371,1,0,0,0,2377,2378,1,
	0,0,0,2378,2385,1,0,0,0,2379,2386,5,143,0,0,2380,2383,5,120,0,0,2381,2382,
	5,579,0,0,2382,2384,5,45,0,0,2383,2381,1,0,0,0,2383,2384,1,0,0,0,2384,2386,
	1,0,0,0,2385,2379,1,0,0,0,2385,2380,1,0,0,0,2385,2386,1,0,0,0,2386,2389,
	1,0,0,0,2387,2388,5,11,0,0,2388,2390,3,1150,575,0,2389,2387,1,0,0,0,2389,
	2390,1,0,0,0,2390,2391,1,0,0,0,2391,2392,5,15,0,0,2392,2393,3,774,387,0,
	2393,173,1,0,0,0,2394,2396,5,689,0,0,2395,2397,3,970,485,0,2396,2395,1,
	0,0,0,2396,2397,1,0,0,0,2397,2398,1,0,0,0,2398,2399,3,550,275,0,2399,175,
	1,0,0,0,2400,2401,5,587,0,0,2401,2402,5,606,0,0,2402,2403,5,624,0,0,2403,
	2404,5,748,0,0,2404,2405,5,740,0,0,2405,2409,3,1136,568,0,2406,2408,3,178,
	89,0,2407,2406,1,0,0,0,2408,2411,1,0,0,0,2409,2407,1,0,0,0,2409,2410,1,
	0,0,0,2410,2426,1,0,0,0,2411,2409,1,0,0,0,2412,2413,5,624,0,0,2413,2414,
	5,748,0,0,2414,2416,5,740,0,0,2415,2417,3,970,485,0,2416,2415,1,0,0,0,2416,
	2417,1,0,0,0,2417,2418,1,0,0,0,2418,2422,3,1136,568,0,2419,2421,3,178,89,
	0,2420,2419,1,0,0,0,2421,2424,1,0,0,0,2422,2420,1,0,0,0,2422,2423,1,0,0,
	0,2423,2426,1,0,0,0,2424,2422,1,0,0,0,2425,2400,1,0,0,0,2425,2412,1,0,0,
	0,2426,177,1,0,0,0,2427,2428,5,229,0,0,2428,2429,5,345,0,0,2429,2443,3,
	1152,576,0,2430,2431,5,745,0,0,2431,2432,5,345,0,0,2432,2443,3,1152,576,
	0,2433,2434,5,747,0,0,2434,2435,3,1152,576,0,2435,2436,5,159,0,0,2436,2437,
	5,444,0,0,2437,2438,3,1136,568,0,2438,2443,1,0,0,0,2439,2440,5,746,0,0,
	2440,2441,5,345,0,0,2441,2443,3,1152,576,0,2442,2427,1,0,0,0,2442,2430,
	1,0,0,0,2442,2433,1,0,0,0,2442,2439,1,0,0,0,2443,179,1,0,0,0,2444,2462,
	5,487,0,0,2445,2463,3,182,91,0,2446,2463,3,184,92,0,2447,2463,3,186,93,
	0,2448,2463,3,188,94,0,2449,2463,3,190,95,0,2450,2463,3,192,96,0,2451,2463,
	3,196,98,0,2452,2463,3,198,99,0,2453,2463,3,200,100,0,2454,2463,3,202,101,
	0,2455,2463,3,204,102,0,2456,2457,4,90,32,0,2457,2463,3,206,103,0,2458,
	2459,4,90,33,0,2459,2463,3,208,104,0,2460,2461,4,90,34,0,2461,2463,3,210,
	105,0,2462,2445,1,0,0,0,2462,2446,1,0,0,0,2462,2447,1,0,0,0,2462,2448,1,
	0,0,0,2462,2449,1,0,0,0,2462,2450,1,0,0,0,2462,2451,1,0,0,0,2462,2452,1,
	0,0,0,2462,2453,1,0,0,0,2462,2454,1,0,0,0,2462,2455,1,0,0,0,2462,2456,1,
	0,0,0,2462,2458,1,0,0,0,2462,2460,1,0,0,0,2463,181,1,0,0,0,2464,2466,5,
	467,0,0,2465,2467,3,968,484,0,2466,2465,1,0,0,0,2466,2467,1,0,0,0,2467,
	2468,1,0,0,0,2468,2469,3,1048,524,0,2469,183,1,0,0,0,2470,2472,5,133,0,
	0,2471,2473,3,968,484,0,2472,2471,1,0,0,0,2472,2473,1,0,0,0,2473,2474,1,
	0,0,0,2474,2475,3,1076,538,0,2475,185,1,0,0,0,2476,2478,5,356,0,0,2477,
	2479,3,968,484,0,2478,2477,1,0,0,0,2478,2479,1,0,0,0,2479,2480,1,0,0,0,
	2480,2481,3,1056,528,0,2481,187,1,0,0,0,2482,2484,5,594,0,0,2483,2485,3,
	968,484,0,2484,2483,1,0,0,0,2484,2485,1,0,0,0,2485,2486,1,0,0,0,2486,2487,
	3,1052,526,0,2487,189,1,0,0,0,2488,2490,3,1022,511,0,2489,2488,1,0,0,0,
	2489,2490,1,0,0,0,2490,2491,1,0,0,0,2491,2492,5,521,0,0,2492,2493,3,1042,
	521,0,2493,2494,5,579,0,0,2494,2496,3,1092,546,0,2495,2497,3,46,23,0,2496,
	2495,1,0,0,0,2496,2497,1,0,0,0,2497,191,1,0,0,0,2498,2499,5,182,0,0,2499,
	2500,5,512,0,0,2500,2511,3,1072,536,0,2501,2508,3,194,97,0,2502,2504,5,
	406,0,0,2503,2502,1,0,0,0,2503,2504,1,0,0,0,2504,2505,1,0,0,0,2505,2507,
	3,194,97,0,2506,2503,1,0,0,0,2507,2510,1,0,0,0,2508,2506,1,0,0,0,2508,2509,
	1,0,0,0,2509,2512,1,0,0,0,2510,2508,1,0,0,0,2511,2501,1,0,0,0,2511,2512,
	1,0,0,0,2512,193,1,0,0,0,2513,2516,3,152,76,0,2514,2516,3,150,75,0,2515,
	2513,1,0,0,0,2515,2514,1,0,0,0,2516,195,1,0,0,0,2517,2519,5,43,0,0,2518,
	2520,3,968,484,0,2519,2518,1,0,0,0,2519,2520,1,0,0,0,2520,2521,1,0,0,0,
	2521,2522,3,1082,541,0,2522,197,1,0,0,0,2523,2525,5,343,0,0,2524,2523,1,
	0,0,0,2524,2525,1,0,0,0,2525,2526,1,0,0,0,2526,2528,7,18,0,0,2527,2529,
	3,968,484,0,2528,2527,1,0,0,0,2528,2529,1,0,0,0,2529,2530,1,0,0,0,2530,
	2532,3,1094,547,0,2531,2533,7,2,0,0,2532,2531,1,0,0,0,2532,2533,1,0,0,0,
	2533,199,1,0,0,0,2534,2535,5,342,0,0,2535,2546,3,1068,534,0,2536,2543,3,
	194,97,0,2537,2539,5,406,0,0,2538,2537,1,0,0,0,2538,2539,1,0,0,0,2539,2540,
	1,0,0,0,2540,2542,3,194,97,0,2541,2538,1,0,0,0,2542,2545,1,0,0,0,2543,2541,
	1,0,0,0,2543,2544,1,0,0,0,2544,2547,1,0,0,0,2545,2543,1,0,0,0,2546,2536,
	1,0,0,0,2546,2547,1,0,0,0,2547,201,1,0,0,0,2548,2550,5,655,0,0,2549,2551,
	3,968,484,0,2550,2549,1,0,0,0,2550,2551,1,0,0,0,2551,2552,1,0,0,0,2552,
	2553,3,1060,530,0,2553,203,1,0,0,0,2554,2556,5,367,0,0,2555,2557,3,968,
	484,0,2556,2555,1,0,0,0,2556,2557,1,0,0,0,2557,2558,1,0,0,0,2558,2560,3,
	982,491,0,2559,2561,7,2,0,0,2560,2559,1,0,0,0,2560,2561,1,0,0,0,2561,205,
	1,0,0,0,2562,2564,5,689,0,0,2563,2565,3,968,484,0,2564,2563,1,0,0,0,2564,
	2565,1,0,0,0,2565,2566,1,0,0,0,2566,2567,3,550,275,0,2567,207,1,0,0,0,2568,
	2569,5,624,0,0,2569,2570,5,748,0,0,2570,2572,5,740,0,0,2571,2573,3,968,
	484,0,2572,2571,1,0,0,0,2572,2573,1,0,0,0,2573,2574,1,0,0,0,2574,2575,3,
	1136,568,0,2575,209,1,0,0,0,2576,2577,5,658,0,0,2577,2578,5,342,0,0,2578,
	2580,3,1068,534,0,2579,2581,3,60,30,0,2580,2579,1,0,0,0,2580,2581,1,0,0,
	0,2581,211,1,0,0,0,2582,2583,5,604,0,0,2583,2584,7,18,0,0,2584,2589,3,214,
	107,0,2585,2586,5,406,0,0,2586,2588,3,214,107,0,2587,2585,1,0,0,0,2588,
	2591,1,0,0,0,2589,2587,1,0,0,0,2589,2590,1,0,0,0,2590,213,1,0,0,0,2591,
	2589,1,0,0,0,2592,2593,3,1092,546,0,2593,2594,5,653,0,0,2594,2595,3,1086,
	543,0,2595,215,1,0,0,0,2596,2598,5,50,0,0,2597,2599,5,647,0,0,2598,2597,
	1,0,0,0,2598,2599,1,0,0,0,2599,2600,1,0,0,0,2600,2601,3,1092,546,0,2601,
	217,1,0,0,0,2602,2603,5,162,0,0,2603,2604,5,647,0,0,2604,2605,5,507,0,0,
	2605,2606,3,1154,577,0,2606,219,1,0,0,0,2607,2608,5,445,0,0,2608,2614,3,
	1052,526,0,2609,2611,5,409,0,0,2610,2612,3,746,373,0,2611,2610,1,0,0,0,
	2611,2612,1,0,0,0,2612,2613,1,0,0,0,2613,2615,5,410,0,0,2614,2609,1,0,0,
	0,2614,2615,1,0,0,0,2615,221,1,0,0,0,2616,2617,4,111,35,0,2617,2619,3,320,
	160,0,2618,2616,1,0,0,0,2618,2619,1,0,0,0,2619,2620,1,0,0,0,2620,2624,5,
	480,0,0,2621,2623,3,226,113,0,2622,2621,1,0,0,0,2623,2626,1,0,0,0,2624,
	2622,1,0,0,0,2624,2625,1,0,0,0,2625,2659,1,0,0,0,2626,2624,1,0,0,0,2627,
	2651,5,507,0,0,2628,2629,3,1096,548,0,2629,2630,5,666,0,0,2630,2632,3,334,
	167,0,2631,2633,3,350,175,0,2632,2631,1,0,0,0,2632,2633,1,0,0,0,2633,2652,
	1,0,0,0,2634,2637,3,1092,546,0,2635,2636,4,111,36,0,2636,2638,3,390,195,
	0,2637,2635,1,0,0,0,2637,2638,1,0,0,0,2638,2640,1,0,0,0,2639,2641,3,224,
	112,0,2640,2639,1,0,0,0,2640,2641,1,0,0,0,2641,2643,1,0,0,0,2642,2644,3,
	350,175,0,2643,2642,1,0,0,0,2643,2644,1,0,0,0,2644,2646,1,0,0,0,2645,2647,
	3,328,164,0,2646,2645,1,0,0,0,2646,2647,1,0,0,0,2647,2649,1,0,0,0,2648,
	2650,3,286,143,0,2649,2648,1,0,0,0,2649,2650,1,0,0,0,2650,2652,1,0,0,0,
	2651,2628,1,0,0,0,2651,2634,1,0,0,0,2652,2660,1,0,0,0,2653,2654,3,1096,
	548,0,2654,2655,5,507,0,0,2655,2657,3,334,167,0,2656,2658,3,350,175,0,2657,
	2656,1,0,0,0,2657,2658,1,0,0,0,2658,2660,1,0,0,0,2659,2627,1,0,0,0,2659,
	2653,1,0,0,0,2660,223,1,0,0,0,2661,2662,4,112,37,0,2662,2663,5,32,0,0,2663,
	2664,5,409,0,0,2664,2665,3,1120,560,0,2665,2666,5,410,0,0,2666,225,1,0,
	0,0,2667,2668,7,19,0,0,2668,227,1,0,0,0,2669,2674,5,15,0,0,2670,2671,4,
	114,38,0,2671,2675,3,746,373,0,2672,2673,4,114,39,0,2673,2675,3,344,172,
	0,2674,2670,1,0,0,0,2674,2672,1,0,0,0,2675,229,1,0,0,0,2676,2694,5,22,0,
	0,2677,2678,3,1092,546,0,2678,2680,5,28,0,0,2679,2681,3,390,195,0,2680,
	2679,1,0,0,0,2680,2681,1,0,0,0,2681,2695,1,0,0,0,2682,2692,3,1118,559,0,
	2683,2693,5,10,0,0,2684,2685,5,598,0,0,2685,2687,3,232,116,0,2686,2688,
	3,350,175,0,2687,2686,1,0,0,0,2687,2688,1,0,0,0,2688,2690,1,0,0,0,2689,
	2691,3,284,142,0,2690,2689,1,0,0,0,2690,2691,1,0,0,0,2691,2693,1,0,0,0,
	2692,2683,1,0,0,0,2692,2684,1,0,0,0,2693,2695,1,0,0,0,2694,2677,1,0,0,0,
	2694,2682,1,0,0,0,2695,231,1,0,0,0,2696,2707,7,20,0,0,2697,2704,3,1118,
	559,0,2698,2705,7,21,0,0,2699,2700,7,22,0,0,2700,2701,5,409,0,0,2701,2702,
	3,248,124,0,2702,2703,5,410,0,0,2703,2705,1,0,0,0,2704,2698,1,0,0,0,2704,
	2699,1,0,0,0,2705,2707,1,0,0,0,2706,2696,1,0,0,0,2706,2697,1,0,0,0,2707,
	233,1,0,0,0,2708,2710,5,526,0,0,2709,2711,3,236,118,0,2710,2709,1,0,0,0,
	2710,2711,1,0,0,0,2711,2713,1,0,0,0,2712,2714,5,520,0,0,2713,2712,1,0,0,
	0,2713,2714,1,0,0,0,2714,2716,1,0,0,0,2715,2717,5,528,0,0,2716,2715,1,0,
	0,0,2716,2717,1,0,0,0,2717,2718,1,0,0,0,2718,2720,3,1092,546,0,2719,2721,
	3,1026,513,0,2720,2719,1,0,0,0,2720,2721,1,0,0,0,2721,2734,1,0,0,0,2722,
	2725,3,238,119,0,2723,2724,4,117,40,0,2724,2726,3,250,125,0,2725,2723,1,
	0,0,0,2725,2726,1,0,0,0,2726,2735,1,0,0,0,2727,2728,5,619,0,0,2728,2731,
	3,984,492,0,2729,2730,4,117,41,0,2730,2732,3,250,125,0,2731,2729,1,0,0,
	0,2731,2732,1,0,0,0,2732,2735,1,0,0,0,2733,2735,3,244,122,0,2734,2722,1,
	0,0,0,2734,2727,1,0,0,0,2734,2733,1,0,0,0,2735,2737,1,0,0,0,2736,2738,3,
	252,126,0,2737,2736,1,0,0,0,2737,2738,1,0,0,0,2738,235,1,0,0,0,2739,2740,
	7,23,0,0,2740,237,1,0,0,0,2741,2743,5,409,0,0,2742,2744,3,240,120,0,2743,
	2742,1,0,0,0,2743,2744,1,0,0,0,2744,2745,1,0,0,0,2745,2747,5,410,0,0,2746,
	2741,1,0,0,0,2746,2747,1,0,0,0,2747,2748,1,0,0,0,2748,2749,3,242,121,0,
	2749,239,1,0,0,0,2750,2755,3,1038,519,0,2751,2752,5,406,0,0,2752,2754,3,
	1038,519,0,2753,2751,1,0,0,0,2754,2757,1,0,0,0,2755,2753,1,0,0,0,2755,2756,
	1,0,0,0,2756,241,1,0,0,0,2757,2755,1,0,0,0,2758,2759,7,24,0,0,2759,2760,
	3,246,123,0,2760,243,1,0,0,0,2761,2769,3,92,46,0,2762,2764,5,409,0,0,2763,
	2765,3,240,120,0,2764,2763,1,0,0,0,2764,2765,1,0,0,0,2765,2766,1,0,0,0,
	2766,2767,5,410,0,0,2767,2769,3,92,46,0,2768,2761,1,0,0,0,2768,2762,1,0,
	0,0,2769,245,1,0,0,0,2770,2772,5,409,0,0,2771,2773,3,248,124,0,2772,2771,
	1,0,0,0,2772,2773,1,0,0,0,2773,2774,1,0,0,0,2774,2783,5,410,0,0,2775,2776,
	5,406,0,0,2776,2778,5,409,0,0,2777,2779,3,248,124,0,2778,2777,1,0,0,0,2778,
	2779,1,0,0,0,2779,2780,1,0,0,0,2780,2782,5,410,0,0,2781,2775,1,0,0,0,2782,
	2785,1,0,0,0,2783,2781,1,0,0,0,2783,2784,1,0,0,0,2784,247,1,0,0,0,2785,
	2783,1,0,0,0,2786,2789,3,666,333,0,2787,2789,5,478,0,0,2788,2786,1,0,0,
	0,2788,2787,1,0,0,0,2789,2797,1,0,0,0,2790,2793,5,406,0,0,2791,2794,3,666,
	333,0,2792,2794,5,478,0,0,2793,2791,1,0,0,0,2793,2792,1,0,0,0,2794,2796,
	1,0,0,0,2795,2790,1,0,0,0,2796,2799,1,0,0,0,2797,2795,1,0,0,0,2797,2798,
	1,0,0,0,2798,249,1,0,0,0,2799,2797,1,0,0,0,2800,2801,5,431,0,0,2801,2803,
	3,1118,559,0,2802,2804,3,1034,517,0,2803,2802,1,0,0,0,2803,2804,1,0,0,0,
	2804,251,1,0,0,0,2805,2806,5,579,0,0,2806,2807,5,124,0,0,2807,2808,5,537,
	0,0,2808,2809,5,663,0,0,2809,2810,3,984,492,0,2810,253,1,0,0,0,2811,2812,
	5,546,0,0,2812,2814,3,256,128,0,2813,2815,7,25,0,0,2814,2813,1,0,0,0,2814,
	2815,1,0,0,0,2815,2817,1,0,0,0,2816,2818,5,180,0,0,2817,2816,1,0,0,0,2817,
	2818,1,0,0,0,2818,2819,1,0,0,0,2819,2820,5,522,0,0,2820,2822,3,1150,575,
	0,2821,2823,7,8,0,0,2822,2821,1,0,0,0,2822,2823,1,0,0,0,2823,2824,1,0,0,
	0,2824,2825,5,528,0,0,2825,2826,5,647,0,0,2826,2828,3,1092,546,0,2827,2829,
	3,1026,513,0,2828,2827,1,0,0,0,2828,2829,1,0,0,0,2829,2831,1,0,0,0,2830,
	2832,3,988,494,0,2831,2830,1,0,0,0,2831,2832,1,0,0,0,2832,2834,1,0,0,0,
	2833,2835,3,258,129,0,2834,2833,1,0,0,0,2834,2835,1,0,0,0,2835,2837,1,0,
	0,0,2836,2838,3,990,495,0,2837,2836,1,0,0,0,2837,2838,1,0,0,0,2838,2840,
	1,0,0,0,2839,2841,3,994,497,0,2840,2839,1,0,0,0,2840,2841,1,0,0,0,2841,
	2842,1,0,0,0,2842,2843,3,260,130,0,2843,255,1,0,0,0,2844,2845,7,26,0,0,
	2845,257,1,0,0,0,2846,2847,5,298,0,0,2847,2848,5,159,0,0,2848,2849,5,444,
	0,0,2849,2850,3,1146,573,0,2850,259,1,0,0,0,2851,2852,5,520,0,0,2852,2853,
	5,380,0,0,2853,2855,7,27,0,0,2854,2851,1,0,0,0,2854,2855,1,0,0,0,2855,2857,
	1,0,0,0,2856,2858,3,262,131,0,2857,2856,1,0,0,0,2857,2858,1,0,0,0,2858,
	2861,1,0,0,0,2859,2860,5,619,0,0,2860,2862,3,984,492,0,2861,2859,1,0,0,
	0,2861,2862,1,0,0,0,2862,261,1,0,0,0,2863,2865,5,409,0,0,2864,2866,3,264,
	132,0,2865,2864,1,0,0,0,2865,2866,1,0,0,0,2866,2867,1,0,0,0,2867,2868,5,
	410,0,0,2868,263,1,0,0,0,2869,2872,3,1036,518,0,2870,2872,3,732,366,0,2871,
	2869,1,0,0,0,2871,2870,1,0,0,0,2872,2880,1,0,0,0,2873,2876,5,406,0,0,2874,
	2877,3,1036,518,0,2875,2877,3,732,366,0,2876,2874,1,0,0,0,2876,2875,1,0,
	0,0,2877,2879,1,0,0,0,2878,2873,1,0,0,0,2879,2882,1,0,0,0,2880,2878,1,0,
	0,0,2880,2881,1,0,0,0,2881,265,1,0,0,0,2882,2880,1,0,0,0,2883,2885,5,606,
	0,0,2884,2886,7,28,0,0,2885,2884,1,0,0,0,2885,2886,1,0,0,0,2886,2888,1,
	0,0,0,2887,2889,5,528,0,0,2888,2887,1,0,0,0,2888,2889,1,0,0,0,2889,2890,
	1,0,0,0,2890,2892,3,1092,546,0,2891,2893,3,1026,513,0,2892,2891,1,0,0,0,
	2892,2893,1,0,0,0,2893,2898,1,0,0,0,2894,2899,3,238,119,0,2895,2896,5,619,
	0,0,2896,2899,3,984,492,0,2897,2899,3,244,122,0,2898,2894,1,0,0,0,2898,
	2895,1,0,0,0,2898,2897,1,0,0,0,2899,267,1,0,0,0,2900,2904,3,272,136,0,2901,
	2904,3,276,138,0,2902,2904,3,270,135,0,2903,2900,1,0,0,0,2903,2901,1,0,
	0,0,2903,2902,1,0,0,0,2904,269,1,0,0,0,2905,2906,5,409,0,0,2906,2907,3,
	270,135,0,2907,2908,5,410,0,0,2908,2913,1,0,0,0,2909,2910,3,272,136,0,2910,
	2911,3,292,146,0,2911,2913,1,0,0,0,2912,2905,1,0,0,0,2912,2909,1,0,0,0,
	2913,271,1,0,0,0,2914,2915,4,136,42,0,2915,2917,3,320,160,0,2916,2914,1,
	0,0,0,2916,2917,1,0,0,0,2917,2933,1,0,0,0,2918,2920,3,274,137,0,2919,2921,
	3,328,164,0,2920,2919,1,0,0,0,2920,2921,1,0,0,0,2921,2923,1,0,0,0,2922,
	2924,3,284,142,0,2923,2922,1,0,0,0,2923,2924,1,0,0,0,2924,2934,1,0,0,0,
	2925,2931,3,276,138,0,2926,2928,3,328,164,0,2927,2929,3,284,142,0,2928,
	2927,1,0,0,0,2928,2929,1,0,0,0,2929,2932,1,0,0,0,2930,2932,3,284,142,0,
	2931,2926,1,0,0,0,2931,2930,1,0,0,0,2932,2934,1,0,0,0,2933,2918,1,0,0,0,
	2933,2925,1,0,0,0,2934,2937,1,0,0,0,2935,2936,4,136,43,0,2936,2938,3,294,
	147,0,2937,2935,1,0,0,0,2937,2938,1,0,0,0,2938,2940,1,0,0,0,2939,2941,3,
	338,169,0,2940,2939,1,0,0,0,2940,2941,1,0,0,0,2941,2949,1,0,0,0,2942,2943,
	4,136,44,0,2943,2944,3,320,160,0,2944,2946,3,276,138,0,2945,2947,3,338,
	169,0,2946,2945,1,0,0,0,2946,2947,1,0,0,0,2947,2949,1,0,0,0,2948,2916,1,
	0,0,0,2948,2942,1,0,0,0,2949,273,1,0,0,0,2950,2951,6,137,-1,0,2951,2962,
	3,278,139,0,2952,2953,3,276,138,0,2953,2955,5,659,0,0,2954,2956,3,388,194,
	0,2955,2954,1,0,0,0,2955,2956,1,0,0,0,2956,2959,1,0,0,0,2957,2960,3,278,
	139,0,2958,2960,3,276,138,0,2959,2957,1,0,0,0,2959,2958,1,0,0,0,2960,2962,
	1,0,0,0,2961,2950,1,0,0,0,2961,2952,1,0,0,0,2962,2974,1,0,0,0,2963,2964,
	10,2,0,0,2964,2966,5,659,0,0,2965,2967,3,388,194,0,2966,2965,1,0,0,0,2966,
	2967,1,0,0,0,2967,2970,1,0,0,0,2968,2971,3,278,139,0,2969,2971,3,276,138,
	0,2970,2968,1,0,0,0,2970,2969,1,0,0,0,2971,2973,1,0,0,0,2972,2963,1,0,0,
	0,2973,2976,1,0,0,0,2974,2972,1,0,0,0,2974,2975,1,0,0,0,2975,275,1,0,0,
	0,2976,2974,1,0,0,0,2977,2980,5,409,0,0,2978,2981,3,276,138,0,2979,2981,
	3,272,136,0,2980,2978,1,0,0,0,2980,2979,1,0,0,0,2981,2982,1,0,0,0,2982,
	2983,5,410,0,0,2983,277,1,0,0,0,2984,2988,5,614,0,0,2985,2987,3,336,168,
	0,2986,2985,1,0,0,0,2987,2990,1,0,0,0,2988,2986,1,0,0,0,2988,2989,1,0,0,
	0,2989,2991,1,0,0,0,2990,2988,1,0,0,0,2991,2993,3,344,172,0,2992,2994,3,
	292,146,0,2993,2992,1,0,0,0,2993,2994,1,0,0,0,2994,2996,1,0,0,0,2995,2997,
	3,332,166,0,2996,2995,1,0,0,0,2996,2997,1,0,0,0,2997,2999,1,0,0,0,2998,
	3000,3,350,175,0,2999,2998,1,0,0,0,2999,3000,1,0,0,0,3000,3002,1,0,0,0,
	3001,3003,3,324,162,0,3002,3001,1,0,0,0,3002,3003,1,0,0,0,3003,3005,1,0,
	0,0,3004,3006,3,296,148,0,3005,3004,1,0,0,0,3005,3006,1,0,0,0,3006,3009,
	1,0,0,0,3007,3008,4,139,46,0,3008,3010,3,298,149,0,3009,3007,1,0,0,0,3009,
	3010,1,0,0,0,3010,279,1,0,0,0,3011,3012,3,276,138,0,3012,281,1,0,0,0,3013,
	3014,7,29,0,0,3014,283,1,0,0,0,3015,3016,5,543,0,0,3016,3017,3,288,144,
	0,3017,285,1,0,0,0,3018,3019,5,543,0,0,3019,3020,3,290,145,0,3020,287,1,
	0,0,0,3021,3024,3,290,145,0,3022,3023,7,30,0,0,3023,3025,3,290,145,0,3024,
	3022,1,0,0,0,3024,3025,1,0,0,0,3025,289,1,0,0,0,3026,3029,3,1118,559,0,
	3027,3029,7,31,0,0,3028,3026,1,0,0,0,3028,3027,1,0,0,0,3029,291,1,0,0,0,
	3030,3058,5,528,0,0,3031,3032,5,589,0,0,3032,3034,3,1144,572,0,3033,3035,
	3,988,494,0,3034,3033,1,0,0,0,3034,3035,1,0,0,0,3035,3037,1,0,0,0,3036,
	3038,3,990,495,0,3037,3036,1,0,0,0,3037,3038,1,0,0,0,3038,3040,1,0,0,0,
	3039,3041,3,994,497,0,3040,3039,1,0,0,0,3040,3041,1,0,0,0,3041,3059,1,0,
	0,0,3042,3043,5,123,0,0,3043,3059,3,1144,572,0,3044,3047,3,1170,585,0,3045,
	3047,3,732,366,0,3046,3044,1,0,0,0,3046,3045,1,0,0,0,3047,3055,1,0,0,0,
	3048,3051,5,406,0,0,3049,3052,3,1170,585,0,3050,3052,3,732,366,0,3051,3049,
	1,0,0,0,3051,3050,1,0,0,0,3052,3054,1,0,0,0,3053,3048,1,0,0,0,3054,3057,
	1,0,0,0,3055,3053,1,0,0,0,3055,3056,1,0,0,0,3056,3059,1,0,0,0,3057,3055,
	1,0,0,0,3058,3031,1,0,0,0,3058,3042,1,0,0,0,3058,3046,1,0,0,0,3059,293,
	1,0,0,0,3060,3061,5,594,0,0,3061,3062,5,429,0,0,3062,3068,5,409,0,0,3063,
	3066,5,380,0,0,3064,3065,5,406,0,0,3065,3067,5,380,0,0,3066,3064,1,0,0,
	0,3066,3067,1,0,0,0,3067,3069,1,0,0,0,3068,3063,1,0,0,0,3068,3069,1,0,0,
	0,3069,3070,1,0,0,0,3070,3071,5,410,0,0,3071,295,1,0,0,0,3072,3073,5,514,
	0,0,3073,3074,3,666,333,0,3074,297,1,0,0,0,3075,3076,5,729,0,0,3076,3081,
	3,300,150,0,3077,3078,5,406,0,0,3078,3080,3,300,150,0,3079,3077,1,0,0,0,
	3080,3083,1,0,0,0,3081,3079,1,0,0,0,3081,3082,1,0,0,0,3082,299,1,0,0,0,
	3083,3081,1,0,0,0,3084,3085,3,1114,557,0,3085,3086,5,431,0,0,3086,3087,
	3,302,151,0,3087,301,1,0,0,0,3088,3089,5,409,0,0,3089,3090,3,304,152,0,
	3090,3091,5,410,0,0,3091,303,1,0,0,0,3092,3094,3,1114,557,0,3093,3092,1,
	0,0,0,3093,3094,1,0,0,0,3094,3098,1,0,0,0,3095,3096,5,32,0,0,3096,3097,
	5,444,0,0,3097,3099,3,764,382,0,3098,3095,1,0,0,0,3098,3099,1,0,0,0,3099,
	3101,1,0,0,0,3100,3102,3,328,164,0,3101,3100,1,0,0,0,3101,3102,1,0,0,0,
	3102,3104,1,0,0,0,3103,3105,3,306,153,0,3104,3103,1,0,0,0,3104,3105,1,0,
	0,0,3105,305,1,0,0,0,3106,3107,3,308,154,0,3107,3109,3,310,155,0,3108,3110,
	3,318,159,0,3109,3108,1,0,0,0,3109,3110,1,0,0,0,3110,307,1,0,0,0,3111,3112,
	7,32,0,0,3112,309,1,0,0,0,3113,3116,3,312,156,0,3114,3116,3,314,157,0,3115,
	3113,1,0,0,0,3115,3114,1,0,0,0,3116,311,1,0,0,0,3117,3118,5,728,0,0,3118,
	3132,5,723,0,0,3119,3120,3,1134,567,0,3120,3121,5,723,0,0,3121,3132,1,0,
	0,0,3122,3123,5,420,0,0,3123,3132,5,723,0,0,3124,3125,5,527,0,0,3125,3126,
	3,666,333,0,3126,3127,3,754,377,0,3127,3128,5,723,0,0,3128,3132,1,0,0,0,
	3129,3130,5,107,0,0,3130,3132,5,301,0,0,3131,3117,1,0,0,0,3131,3119,1,0,
	0,0,3131,3122,1,0,0,0,3131,3124,1,0,0,0,3131,3129,1,0,0,0,3132,313,1,0,
	0,0,3133,3134,5,435,0,0,3134,3135,3,316,158,0,3135,3136,5,430,0,0,3136,
	3137,3,316,158,0,3137,315,1,0,0,0,3138,3152,3,312,156,0,3139,3140,5,728,
	0,0,3140,3152,5,712,0,0,3141,3142,3,1134,567,0,3142,3143,5,712,0,0,3143,
	3152,1,0,0,0,3144,3145,5,420,0,0,3145,3152,5,712,0,0,3146,3147,5,527,0,
	0,3147,3148,3,666,333,0,3148,3149,3,754,377,0,3149,3150,5,712,0,0,3150,
	3152,1,0,0,0,3151,3138,1,0,0,0,3151,3139,1,0,0,0,3151,3141,1,0,0,0,3151,
	3144,1,0,0,0,3151,3146,1,0,0,0,3152,317,1,0,0,0,3153,3160,5,710,0,0,3154,
	3155,5,107,0,0,3155,3161,5,301,0,0,3156,3161,5,512,0,0,3157,3161,5,727,
	0,0,3158,3159,5,27,0,0,3159,3161,5,720,0,0,3160,3154,1,0,0,0,3160,3156,
	1,0,0,0,3160,3157,1,0,0,0,3160,3158,1,0,0,0,3161,319,1,0,0,0,3162,3164,
	5,682,0,0,3163,3165,5,695,0,0,3164,3163,1,0,0,0,3164,3165,1,0,0,0,3165,
	3166,1,0,0,0,3166,3171,3,322,161,0,3167,3168,5,406,0,0,3168,3170,3,322,
	161,0,3169,3167,1,0,0,0,3170,3173,1,0,0,0,3171,3169,1,0,0,0,3171,3172,1,
	0,0,0,3172,321,1,0,0,0,3173,3171,1,0,0,0,3174,3176,3,1118,559,0,3175,3177,
	3,1034,517,0,3176,3175,1,0,0,0,3176,3177,1,0,0,0,3177,3178,1,0,0,0,3178,
	3179,5,431,0,0,3179,3180,3,280,140,0,3180,323,1,0,0,0,3181,3182,5,512,0,
	0,3182,3183,5,444,0,0,3183,3185,3,764,382,0,3184,3186,3,326,163,0,3185,
	3184,1,0,0,0,3185,3186,1,0,0,0,3186,325,1,0,0,0,3187,3188,5,682,0,0,3188,
	3193,5,295,0,0,3189,3190,4,163,47,0,3190,3191,5,682,0,0,3191,3193,5,106,
	0,0,3192,3187,1,0,0,0,3192,3189,1,0,0,0,3193,327,1,0,0,0,3194,3195,5,586,
	0,0,3195,3196,5,444,0,0,3196,3197,3,764,382,0,3197,329,1,0,0,0,3198,3199,
	7,33,0,0,3199,331,1,0,0,0,3200,3203,5,507,0,0,3201,3204,5,488,0,0,3202,
	3204,3,334,167,0,3203,3201,1,0,0,0,3203,3202,1,0,0,0,3204,333,1,0,0,0,3205,
	3210,3,352,176,0,3206,3207,5,406,0,0,3207,3209,3,352,176,0,3208,3206,1,
	0,0,0,3209,3212,1,0,0,0,3210,3208,1,0,0,0,3210,3211,1,0,0,0,3211,335,1,
	0,0,0,3212,3210,1,0,0,0,3213,3222,3,282,141,0,3214,3222,5,320,0,0,3215,
	3216,4,168,48,0,3216,3222,5,318,0,0,3217,3218,4,168,49,0,3218,3219,5,209,
	0,0,3219,3220,5,383,0,0,3220,3222,3,1132,566,0,3221,3213,1,0,0,0,3221,3214,
	1,0,0,0,3221,3215,1,0,0,0,3221,3217,1,0,0,0,3222,337,1,0,0,0,3223,3224,
	5,506,0,0,3224,3228,3,340,170,0,3225,3226,4,169,50,0,3226,3227,5,698,0,
	0,3227,3229,3,1096,548,0,3228,3225,1,0,0,0,3228,3229,1,0,0,0,3229,3232,
	1,0,0,0,3230,3231,4,169,51,0,3231,3233,3,342,171,0,3232,3230,1,0,0,0,3232,
	3233,1,0,0,0,3233,3239,1,0,0,0,3234,3235,5,548,0,0,3235,3236,5,530,0,0,
	3236,3237,5,310,0,0,3237,3239,5,222,0,0,3238,3223,1,0,0,0,3238,3234,1,0,
	0,0,3239,339,1,0,0,0,3240,3244,5,663,0,0,3241,3242,4,170,52,0,3242,3244,
	5,310,0,0,3243,3240,1,0,0,0,3243,3241,1,0,0,0,3244,341,1,0,0,0,3245,3246,
	5,699,0,0,3246,3249,5,700,0,0,3247,3249,5,701,0,0,3248,3245,1,0,0,0,3248,
	3247,1,0,0,0,3249,343,1,0,0,0,3250,3253,3,346,173,0,3251,3253,5,393,0,0,
	3252,3250,1,0,0,0,3252,3251,1,0,0,0,3253,3258,1,0,0,0,3254,3255,5,406,0,
	0,3255,3257,3,346,173,0,3256,3254,1,0,0,0,3257,3260,1,0,0,0,3258,3256,1,
	0,0,0,3258,3259,1,0,0,0,3259,345,1,0,0,0,3260,3258,1,0,0,0,3261,3267,3,
	1044,522,0,3262,3264,3,666,333,0,3263,3265,3,348,174,0,3264,3263,1,0,0,
	0,3264,3265,1,0,0,0,3265,3267,1,0,0,0,3266,3261,1,0,0,0,3266,3262,1,0,0,
	0,3267,347,1,0,0,0,3268,3270,5,431,0,0,3269,3268,1,0,0,0,3269,3270,1,0,
	0,0,3270,3273,1,0,0,0,3271,3274,3,1118,559,0,3272,3274,3,1144,572,0,3273,
	3271,1,0,0,0,3273,3272,1,0,0,0,3274,349,1,0,0,0,3275,3276,5,680,0,0,3276,
	3277,3,666,333,0,3277,351,1,0,0,0,3278,3289,3,364,182,0,3279,3283,5,411,
	0,0,3280,3281,4,176,53,0,3281,3284,3,1118,559,0,3282,3284,5,762,0,0,3283,
	3280,1,0,0,0,3283,3282,1,0,0,0,3284,3285,1,0,0,0,3285,3286,3,354,177,0,
	3286,3287,5,412,0,0,3287,3289,1,0,0,0,3288,3278,1,0,0,0,3288,3279,1,0,0,
	0,3289,3293,1,0,0,0,3290,3292,3,356,178,0,3291,3290,1,0,0,0,3292,3295,1,
	0,0,0,3293,3291,1,0,0,0,3293,3294,1,0,0,0,3294,353,1,0,0,0,3295,3293,1,
	0,0,0,3296,3300,3,364,182,0,3297,3299,3,356,178,0,3298,3297,1,0,0,0,3299,
	3302,1,0,0,0,3300,3298,1,0,0,0,3300,3301,1,0,0,0,3301,355,1,0,0,0,3302,
	3300,1,0,0,0,3303,3304,3,360,180,0,3304,3309,3,352,176,0,3305,3306,5,579,
	0,0,3306,3310,3,666,333,0,3307,3308,5,666,0,0,3308,3310,3,1122,561,0,3309,
	3305,1,0,0,0,3309,3307,1,0,0,0,3309,3310,1,0,0,0,3310,3323,1,0,0,0,3311,
	3312,3,362,181,0,3312,3317,3,352,176,0,3313,3314,5,579,0,0,3314,3318,3,
	666,333,0,3315,3316,5,666,0,0,3316,3318,3,1122,561,0,3317,3313,1,0,0,0,
	3317,3315,1,0,0,0,3318,3323,1,0,0,0,3319,3320,3,358,179,0,3320,3321,3,364,
	182,0,3321,3323,1,0,0,0,3322,3303,1,0,0,0,3322,3311,1,0,0,0,3322,3319,1,
	0,0,0,3323,357,1,0,0,0,3324,3326,5,569,0,0,3325,3327,5,523,0,0,3326,3325,
	1,0,0,0,3326,3327,1,0,0,0,3327,3328,1,0,0,0,3328,3336,5,535,0,0,3329,3330,
	5,569,0,0,3330,3332,7,34,0,0,3331,3333,5,588,0,0,3332,3331,1,0,0,0,3332,
	3333,1,0,0,0,3333,3334,1,0,0,0,3334,3336,5,535,0,0,3335,3324,1,0,0,0,3335,
	3329,1,0,0,0,3336,359,1,0,0,0,3337,3339,7,35,0,0,3338,3337,1,0,0,0,3338,
	3339,1,0,0,0,3339,3340,1,0,0,0,3340,3343,5,535,0,0,3341,3343,5,640,0,0,
	3342,3338,1,0,0,0,3342,3341,1,0,0,0,3343,361,1,0,0,0,3344,3346,7,34,0,0,
	3345,3347,5,588,0,0,3346,3345,1,0,0,0,3346,3347,1,0,0,0,3347,3348,1,0,0,
	0,3348,3349,5,535,0,0,3349,363,1,0,0,0,3350,3357,3,366,183,0,3351,3357,
	3,368,184,0,3352,3357,3,370,185,0,3353,3357,3,372,186,0,3354,3355,4,182,
	54,0,3355,3357,3,374,187,0,3356,3350,1,0,0,0,3356,3351,1,0,0,0,3356,3352,
	1,0,0,0,3356,3353,1,0,0,0,3356,3354,1,0,0,0,3357,365,1,0,0,0,3358,3360,
	3,1092,546,0,3359,3361,3,1026,513,0,3360,3359,1,0,0,0,3360,3361,1,0,0,0,
	3361,3363,1,0,0,0,3362,3364,3,390,195,0,3363,3362,1,0,0,0,3363,3364,1,0,
	0,0,3364,3366,1,0,0,0,3365,3367,3,392,196,0,3366,3365,1,0,0,0,3366,3367,
	1,0,0,0,3367,367,1,0,0,0,3368,3371,5,409,0,0,3369,3372,3,366,183,0,3370,
	3372,3,368,184,0,3371,3369,1,0,0,0,3371,3370,1,0,0,0,3372,3373,1,0,0,0,
	3373,3374,5,410,0,0,3374,369,1,0,0,0,3375,3377,3,280,140,0,3376,3378,3,
	390,195,0,3377,3376,1,0,0,0,3377,3378,1,0,0,0,3378,3381,1,0,0,0,3379,3380,
	4,185,55,0,3380,3382,3,1034,517,0,3381,3379,1,0,0,0,3381,3382,1,0,0,0,3382,
	3393,1,0,0,0,3383,3384,4,185,56,0,3384,3385,5,756,0,0,3385,3387,3,280,140,
	0,3386,3388,3,390,195,0,3387,3386,1,0,0,0,3387,3388,1,0,0,0,3388,3390,1,
	0,0,0,3389,3391,3,1034,517,0,3390,3389,1,0,0,0,3390,3391,1,0,0,0,3391,3393,
	1,0,0,0,3392,3375,1,0,0,0,3392,3383,1,0,0,0,3393,371,1,0,0,0,3394,3397,
	5,409,0,0,3395,3398,3,334,167,0,3396,3398,3,372,186,0,3397,3395,1,0,0,0,
	3397,3396,1,0,0,0,3398,3399,1,0,0,0,3399,3400,5,410,0,0,3400,373,1,0,0,
	0,3401,3402,5,731,0,0,3402,3403,5,409,0,0,3403,3404,3,666,333,0,3404,3405,
	5,406,0,0,3405,3406,3,1144,572,0,3406,3407,3,376,188,0,3407,3409,5,410,
	0,0,3408,3410,3,390,195,0,3409,3408,1,0,0,0,3409,3410,1,0,0,0,3410,375,
	1,0,0,0,3411,3412,5,90,0,0,3412,3413,5,409,0,0,3413,3418,3,378,189,0,3414,
	3415,5,406,0,0,3415,3417,3,378,189,0,3416,3414,1,0,0,0,3417,3420,1,0,0,
	0,3418,3416,1,0,0,0,3418,3419,1,0,0,0,3419,3421,1,0,0,0,3420,3418,1,0,0,
	0,3421,3422,5,410,0,0,3422,377,1,0,0,0,3423,3424,3,1118,559,0,3424,3425,
	5,506,0,0,3425,3426,5,733,0,0,3426,3447,1,0,0,0,3427,3428,3,1118,559,0,
	3428,3431,3,906,453,0,3429,3430,4,189,57,0,3430,3432,3,976,488,0,3431,3429,
	1,0,0,0,3431,3432,1,0,0,0,3432,3434,1,0,0,0,3433,3435,5,496,0,0,3434,3433,
	1,0,0,0,3434,3435,1,0,0,0,3435,3436,1,0,0,0,3436,3437,5,734,0,0,3437,3439,
	3,1144,572,0,3438,3440,3,380,190,0,3439,3438,1,0,0,0,3439,3440,1,0,0,0,
	3440,3447,1,0,0,0,3441,3442,5,732,0,0,3442,3443,5,734,0,0,3443,3444,3,1144,
	572,0,3444,3445,3,376,188,0,3445,3447,1,0,0,0,3446,3423,1,0,0,0,3446,3427,
	1,0,0,0,3446,3441,1,0,0,0,3447,379,1,0,0,0,3448,3450,3,382,191,0,3449,3451,
	3,384,192,0,3450,3449,1,0,0,0,3450,3451,1,0,0,0,3451,3457,1,0,0,0,3452,
	3454,3,384,192,0,3453,3455,3,382,191,0,3454,3453,1,0,0,0,3454,3455,1,0,
	0,0,3455,3457,1,0,0,0,3456,3448,1,0,0,0,3456,3452,1,0,0,0,3457,381,1,0,
	0,0,3458,3459,3,386,193,0,3459,3460,5,579,0,0,3460,3461,5,730,0,0,3461,
	383,1,0,0,0,3462,3463,3,386,193,0,3463,3464,5,579,0,0,3464,3465,5,130,0,
	0,3465,385,1,0,0,0,3466,3471,5,130,0,0,3467,3471,5,576,0,0,3468,3469,5,
	478,0,0,3469,3471,3,1144,572,0,3470,3466,1,0,0,0,3470,3467,1,0,0,0,3470,
	3468,1,0,0,0,3471,387,1,0,0,0,3472,3473,7,36,0,0,3473,389,1,0,0,0,3474,
	3478,5,431,0,0,3475,3476,4,195,58,0,3476,3478,5,383,0,0,3477,3474,1,0,0,
	0,3477,3475,1,0,0,0,3477,3478,1,0,0,0,3478,3479,1,0,0,0,3479,3480,3,1118,
	559,0,3480,391,1,0,0,0,3481,3486,3,394,197,0,3482,3483,5,406,0,0,3483,3485,
	3,394,197,0,3484,3482,1,0,0,0,3485,3488,1,0,0,0,3486,3484,1,0,0,0,3486,
	3487,1,0,0,0,3487,393,1,0,0,0,3488,3486,1,0,0,0,3489,3490,3,396,198,0,3490,
	3492,3,398,199,0,3491,3493,3,402,201,0,3492,3491,1,0,0,0,3492,3493,1,0,
	0,0,3493,3494,1,0,0,0,3494,3495,5,409,0,0,3495,3496,3,404,202,0,3496,3497,
	5,410,0,0,3497,3510,1,0,0,0,3498,3499,5,665,0,0,3499,3501,3,398,199,0,3500,
	3502,3,402,201,0,3501,3500,1,0,0,0,3501,3502,1,0,0,0,3502,3503,1,0,0,0,
	3503,3505,5,409,0,0,3504,3506,3,404,202,0,3505,3504,1,0,0,0,3505,3506,1,
	0,0,0,3506,3507,1,0,0,0,3507,3508,5,410,0,0,3508,3510,1,0,0,0,3509,3489,
	1,0,0,0,3509,3498,1,0,0,0,3510,395,1,0,0,0,3511,3512,7,37,0,0,3512,397,
	1,0,0,0,3513,3514,7,38,0,0,3514,399,1,0,0,0,3515,3516,5,593,0,0,3516,3522,
	5,537,0,0,3517,3519,5,660,0,0,3518,3520,3,398,199,0,3519,3518,1,0,0,0,3519,
	3520,1,0,0,0,3520,3522,1,0,0,0,3521,3515,1,0,0,0,3521,3517,1,0,0,0,3522,
	401,1,0,0,0,3523,3529,5,506,0,0,3524,3530,5,535,0,0,3525,3526,5,586,0,0,
	3526,3530,5,444,0,0,3527,3528,5,512,0,0,3528,3530,5,444,0,0,3529,3524,1,
	0,0,0,3529,3525,1,0,0,0,3529,3527,1,0,0,0,3530,403,1,0,0,0,3531,3536,3,
	406,203,0,3532,3533,5,406,0,0,3533,3535,3,406,203,0,3534,3532,1,0,0,0,3535,
	3538,1,0,0,0,3536,3534,1,0,0,0,3536,3537,1,0,0,0,3537,405,1,0,0,0,3538,
	3536,1,0,0,0,3539,3542,3,1118,559,0,3540,3542,5,593,0,0,3541,3539,1,0,0,
	0,3541,3540,1,0,0,0,3542,407,1,0,0,0,3543,3544,4,204,59,0,3544,3546,3,320,
	160,0,3545,3543,1,0,0,0,3545,3546,1,0,0,0,3546,3547,1,0,0,0,3547,3549,5,
	663,0,0,3548,3550,5,554,0,0,3549,3548,1,0,0,0,3549,3550,1,0,0,0,3550,3552,
	1,0,0,0,3551,3553,5,520,0,0,3552,3551,1,0,0,0,3552,3553,1,0,0,0,3553,3554,
	1,0,0,0,3554,3555,3,334,167,0,3555,3556,5,619,0,0,3556,3558,3,984,492,0,
	3557,3559,3,350,175,0,3558,3557,1,0,0,0,3558,3559,1,0,0,0,3559,3561,1,0,
	0,0,3560,3562,3,328,164,0,3561,3560,1,0,0,0,3561,3562,1,0,0,0,3562,3564,
	1,0,0,0,3563,3565,3,286,143,0,3564,3563,1,0,0,0,3564,3565,1,0,0,0,3565,
	409,1,0,0,0,3566,3571,3,412,206,0,3567,3571,3,418,209,0,3568,3571,3,420,
	210,0,3569,3571,3,426,213,0,3570,3566,1,0,0,0,3570,3567,1,0,0,0,3570,3568,
	1,0,0,0,3570,3569,1,0,0,0,3571,411,1,0,0,0,3572,3573,5,48,0,0,3573,3577,
	5,347,0,0,3574,3576,3,416,208,0,3575,3574,1,0,0,0,3576,3579,1,0,0,0,3577,
	3575,1,0,0,0,3577,3578,1,0,0,0,3578,3598,1,0,0,0,3579,3577,1,0,0,0,3580,
	3582,5,12,0,0,3581,3583,5,372,0,0,3582,3581,1,0,0,0,3582,3583,1,0,0,0,3583,
	3589,1,0,0,0,3584,3586,5,430,0,0,3585,3587,5,27,0,0,3586,3585,1,0,0,0,3586,
	3587,1,0,0,0,3587,3588,1,0,0,0,3588,3590,5,79,0,0,3589,3584,1,0,0,0,3589,
	3590,1,0,0,0,3590,3595,1,0,0,0,3591,3593,5,27,0,0,3592,3591,1,0,0,0,3592,
	3593,1,0,0,0,3593,3594,1,0,0,0,3594,3596,5,603,0,0,3595,3592,1,0,0,0,3595,
	3596,1,0,0,0,3596,3598,1,0,0,0,3597,3572,1,0,0,0,3597,3580,1,0,0,0,3598,
	413,1,0,0,0,3599,3601,5,5,0,0,3600,3602,5,372,0,0,3601,3600,1,0,0,0,3601,
	3602,1,0,0,0,3602,415,1,0,0,0,3603,3604,5,682,0,0,3604,3605,5,99,0,0,3605,
	3610,5,312,0,0,3606,3607,4,208,60,0,3607,3608,5,598,0,0,3608,3610,7,39,
	0,0,3609,3603,1,0,0,0,3609,3606,1,0,0,0,3610,417,1,0,0,0,3611,3612,5,41,
	0,0,3612,3641,3,1118,559,0,3613,3615,5,40,0,0,3614,3616,5,372,0,0,3615,
	3614,1,0,0,0,3615,3616,1,0,0,0,3616,3635,1,0,0,0,3617,3619,5,653,0,0,3618,
	3620,5,41,0,0,3619,3618,1,0,0,0,3619,3620,1,0,0,0,3620,3621,1,0,0,0,3621,
	3636,3,1118,559,0,3622,3624,5,430,0,0,3623,3625,5,27,0,0,3624,3623,1,0,
	0,0,3624,3625,1,0,0,0,3625,3626,1,0,0,0,3626,3628,5,79,0,0,3627,3622,1,
	0,0,0,3627,3628,1,0,0,0,3628,3633,1,0,0,0,3629,3631,5,27,0,0,3630,3629,
	1,0,0,0,3630,3631,1,0,0,0,3631,3632,1,0,0,0,3632,3634,5,603,0,0,3633,3630,
	1,0,0,0,3633,3634,1,0,0,0,3634,3636,1,0,0,0,3635,3617,1,0,0,0,3635,3627,
	1,0,0,0,3636,3641,1,0,0,0,3637,3638,5,603,0,0,3638,3639,5,41,0,0,3639,3641,
	3,1118,559,0,3640,3611,1,0,0,0,3640,3613,1,0,0,0,3640,3637,1,0,0,0,3641,
	419,1,0,0,0,3642,3643,5,548,0,0,3643,3644,7,18,0,0,3644,3649,3,422,211,
	0,3645,3646,5,406,0,0,3646,3648,3,422,211,0,3647,3645,1,0,0,0,3648,3651,
	1,0,0,0,3649,3647,1,0,0,0,3649,3650,1,0,0,0,3650,3665,1,0,0,0,3651,3649,
	1,0,0,0,3652,3653,4,210,61,0,3653,3654,5,548,0,0,3654,3655,5,165,0,0,3655,
	3656,5,506,0,0,3656,3665,5,4,0,0,3657,3662,5,661,0,0,3658,3663,5,340,0,
	0,3659,3663,5,647,0,0,3660,3661,4,210,62,0,3661,3663,5,165,0,0,3662,3658,
	1,0,0,0,3662,3659,1,0,0,0,3662,3660,1,0,0,0,3663,3665,1,0,0,0,3664,3642,
	1,0,0,0,3664,3652,1,0,0,0,3664,3657,1,0,0,0,3665,421,1,0,0,0,3666,3668,
	3,1092,546,0,3667,3669,3,390,195,0,3668,3667,1,0,0,0,3668,3669,1,0,0,0,
	3669,3670,1,0,0,0,3670,3671,3,424,212,0,3671,423,1,0,0,0,3672,3674,5,598,
	0,0,3673,3675,5,180,0,0,3674,3673,1,0,0,0,3674,3675,1,0,0,0,3675,3681,1,
	0,0,0,3676,3678,5,554,0,0,3677,3676,1,0,0,0,3677,3678,1,0,0,0,3678,3679,
	1,0,0,0,3679,3681,5,684,0,0,3680,3672,1,0,0,0,3680,3677,1,0,0,0,3681,425,
	1,0,0,0,3682,3709,5,55,0,0,3683,3684,7,40,0,0,3684,3686,3,430,215,0,3685,
	3687,7,41,0,0,3686,3685,1,0,0,0,3686,3687,1,0,0,0,3687,3710,1,0,0,0,3688,
	3689,5,16,0,0,3689,3695,3,430,215,0,3690,3693,5,336,0,0,3691,3692,5,506,
	0,0,3692,3694,5,218,0,0,3693,3691,1,0,0,0,3693,3694,1,0,0,0,3694,3696,1,
	0,0,0,3695,3690,1,0,0,0,3695,3696,1,0,0,0,3696,3710,1,0,0,0,3697,3698,5,
	35,0,0,3698,3710,3,430,215,0,3699,3700,5,12,0,0,3700,3703,3,430,215,0,3701,
	3702,5,245,0,0,3702,3704,5,252,0,0,3703,3701,1,0,0,0,3703,3704,1,0,0,0,
	3704,3710,1,0,0,0,3705,3706,5,40,0,0,3706,3710,3,430,215,0,3707,3708,5,
	271,0,0,3708,3710,3,428,214,0,3709,3683,1,0,0,0,3709,3688,1,0,0,0,3709,
	3697,1,0,0,0,3709,3699,1,0,0,0,3709,3705,1,0,0,0,3709,3707,1,0,0,0,3710,
	427,1,0,0,0,3711,3714,4,214,63,0,3712,3713,5,457,0,0,3713,3715,5,375,0,
	0,3714,3712,1,0,0,0,3714,3715,1,0,0,0,3715,3718,1,0,0,0,3716,3718,1,0,0,
	0,3717,3711,1,0,0,0,3717,3716,1,0,0,0,3718,429,1,0,0,0,3719,3726,3,1146,
	573,0,3720,3721,5,406,0,0,3721,3724,3,1146,573,0,3722,3723,5,406,0,0,3723,
	3725,3,1130,565,0,3724,3722,1,0,0,0,3724,3725,1,0,0,0,3725,3727,1,0,0,0,
	3726,3720,1,0,0,0,3726,3727,1,0,0,0,3727,431,1,0,0,0,3728,3729,5,595,0,
	0,3729,3730,7,42,0,0,3730,3735,5,183,0,0,3731,3732,5,653,0,0,3732,3736,
	3,1150,575,0,3733,3734,5,434,0,0,3734,3736,3,666,333,0,3735,3731,1,0,0,
	0,3735,3733,1,0,0,0,3736,3762,1,0,0,0,3737,3762,3,440,220,0,3738,3739,5,
	38,0,0,3739,3744,3,434,217,0,3740,3741,5,406,0,0,3741,3743,3,434,217,0,
	3742,3740,1,0,0,0,3743,3746,1,0,0,0,3744,3742,1,0,0,0,3744,3745,1,0,0,0,
	3745,3762,1,0,0,0,3746,3744,1,0,0,0,3747,3748,4,216,64,0,3748,3749,5,38,
	0,0,3749,3753,5,688,0,0,3750,3751,3,968,484,0,3751,3752,3,1118,559,0,3752,
	3754,1,0,0,0,3753,3750,1,0,0,0,3753,3754,1,0,0,0,3754,3762,1,0,0,0,3755,
	3762,3,468,234,0,3756,3757,4,216,65,0,3757,3762,3,454,227,0,3758,3762,3,
	438,219,0,3759,3760,4,216,66,0,3760,3762,3,478,239,0,3761,3728,1,0,0,0,
	3761,3737,1,0,0,0,3761,3738,1,0,0,0,3761,3747,1,0,0,0,3761,3755,1,0,0,0,
	3761,3756,1,0,0,0,3761,3758,1,0,0,0,3761,3759,1,0,0,0,3762,433,1,0,0,0,
	3763,3765,5,185,0,0,3764,3766,3,436,218,0,3765,3764,1,0,0,0,3765,3766,1,
	0,0,0,3766,3778,1,0,0,0,3767,3768,4,217,67,0,3768,3769,5,267,0,0,3769,3778,
	5,7,0,0,3770,3772,5,45,0,0,3771,3773,5,427,0,0,3772,3771,1,0,0,0,3772,3773,
	1,0,0,0,3773,3775,1,0,0,0,3774,3776,3,772,386,0,3775,3774,1,0,0,0,3775,
	3776,1,0,0,0,3776,3778,1,0,0,0,3777,3763,1,0,0,0,3777,3767,1,0,0,0,3777,
	3770,1,0,0,0,3778,435,1,0,0,0,3779,3780,4,218,68,0,3780,3785,5,653,0,0,
	3781,3782,4,218,69,0,3782,3786,3,1132,566,0,3783,3784,4,218,70,0,3784,3786,
	3,1136,568,0,3785,3781,1,0,0,0,3785,3783,1,0,0,0,3786,437,1,0,0,0,3787,
	3791,5,546,0,0,3788,3792,5,109,0,0,3789,3790,5,647,0,0,3790,3792,3,1092,
	546,0,3791,3788,1,0,0,0,3791,3789,1,0,0,0,3792,3793,1,0,0,0,3793,3794,5,
	507,0,0,3794,3795,5,185,0,0,3795,439,1,0,0,0,3796,3797,5,449,0,0,3797,3798,
	5,185,0,0,3798,3799,5,653,0,0,3799,3801,3,442,221,0,3800,3802,3,772,386,
	0,3801,3800,1,0,0,0,3801,3802,1,0,0,0,3802,441,1,0,0,0,3803,3808,3,444,
	222,0,3804,3805,5,406,0,0,3805,3807,3,444,222,0,3806,3804,1,0,0,0,3807,
	3810,1,0,0,0,3808,3806,1,0,0,0,3808,3809,1,0,0,0,3809,443,1,0,0,0,3810,
	3808,1,0,0,0,3811,3812,5,187,0,0,3812,3813,5,383,0,0,3813,3897,3,1152,576,
	0,3814,3815,5,759,0,0,3815,3816,5,383,0,0,3816,3897,3,1152,576,0,3817,3818,
	5,555,0,0,3818,3819,5,383,0,0,3819,3897,3,1152,576,0,3820,3821,5,191,0,
	0,3821,3822,5,383,0,0,3822,3897,3,1152,576,0,3823,3824,5,192,0,0,3824,3825,
	5,383,0,0,3825,3897,3,1152,576,0,3826,3827,5,188,0,0,3827,3828,5,383,0,
	0,3828,3897,3,1130,565,0,3829,3830,5,194,0,0,3830,3831,5,383,0,0,3831,3897,
	3,1130,565,0,3832,3833,5,195,0,0,3833,3834,5,383,0,0,3834,3897,3,1130,565,
	0,3835,3836,5,196,0,0,3836,3837,5,383,0,0,3837,3897,3,1130,565,0,3838,3839,
	5,197,0,0,3839,3840,5,383,0,0,3840,3897,3,1130,565,0,3841,3842,5,198,0,
	0,3842,3843,5,383,0,0,3843,3897,3,1152,576,0,3844,3845,5,199,0,0,3845,3846,
	5,383,0,0,3846,3897,3,1152,576,0,3847,3848,5,200,0,0,3848,3849,5,383,0,
	0,3849,3897,3,1152,576,0,3850,3851,5,201,0,0,3851,3852,5,383,0,0,3852,3897,
	3,1152,576,0,3853,3854,5,768,0,0,3854,3855,5,383,0,0,3855,3897,3,448,224,
	0,3856,3857,5,202,0,0,3857,3858,5,383,0,0,3858,3897,3,1152,576,0,3859,3860,
	5,205,0,0,3860,3861,5,383,0,0,3861,3897,3,1152,576,0,3862,3863,5,556,0,
	0,3863,3864,5,383,0,0,3864,3897,3,1130,565,0,3865,3866,5,203,0,0,3866,3867,
	5,383,0,0,3867,3897,3,1150,575,0,3868,3869,5,204,0,0,3869,3870,5,383,0,
	0,3870,3897,3,1152,576,0,3871,3872,5,742,0,0,3872,3873,5,383,0,0,3873,3897,
	3,1152,576,0,3874,3875,5,743,0,0,3875,3876,5,383,0,0,3876,3897,3,1130,565,
	0,3877,3878,5,186,0,0,3878,3879,5,383,0,0,3879,3897,3,1130,565,0,3880,3881,
	5,160,0,0,3881,3882,5,383,0,0,3882,3897,3,452,226,0,3883,3884,5,765,0,0,
	3884,3885,5,383,0,0,3885,3897,3,1144,572,0,3886,3887,5,766,0,0,3887,3888,
	5,383,0,0,3888,3897,3,1130,565,0,3889,3890,5,206,0,0,3890,3891,5,383,0,
	0,3891,3897,3,1130,565,0,3892,3893,5,767,0,0,3893,3894,5,383,0,0,3894,3897,
	3,446,223,0,3895,3897,3,450,225,0,3896,3811,1,0,0,0,3896,3814,1,0,0,0,3896,
	3817,1,0,0,0,3896,3820,1,0,0,0,3896,3823,1,0,0,0,3896,3826,1,0,0,0,3896,
	3829,1,0,0,0,3896,3832,1,0,0,0,3896,3835,1,0,0,0,3896,3838,1,0,0,0,3896,
	3841,1,0,0,0,3896,3844,1,0,0,0,3896,3847,1,0,0,0,3896,3850,1,0,0,0,3896,
	3853,1,0,0,0,3896,3856,1,0,0,0,3896,3859,1,0,0,0,3896,3862,1,0,0,0,3896,
	3865,1,0,0,0,3896,3868,1,0,0,0,3896,3871,1,0,0,0,3896,3874,1,0,0,0,3896,
	3877,1,0,0,0,3896,3880,1,0,0,0,3896,3883,1,0,0,0,3896,3886,1,0,0,0,3896,
	3889,1,0,0,0,3896,3892,1,0,0,0,3896,3895,1,0,0,0,3897,445,1,0,0,0,3898,
	3901,3,1014,507,0,3899,3901,5,576,0,0,3900,3898,1,0,0,0,3900,3899,1,0,0,
	0,3901,447,1,0,0,0,3902,3905,3,1152,576,0,3903,3905,5,576,0,0,3904,3902,
	1,0,0,0,3904,3903,1,0,0,0,3905,449,1,0,0,0,3906,3907,5,189,0,0,3907,3908,
	5,383,0,0,3908,3919,3,1152,576,0,3909,3910,5,190,0,0,3910,3911,5,383,0,
	0,3911,3919,3,1134,567,0,3912,3913,5,277,0,0,3913,3914,5,383,0,0,3914,3919,
	3,1152,576,0,3915,3916,5,278,0,0,3916,3917,5,383,0,0,3917,3919,3,1130,565,
	0,3918,3906,1,0,0,0,3918,3909,1,0,0,0,3918,3912,1,0,0,0,3918,3915,1,0,0,
	0,3919,451,1,0,0,0,3920,3929,5,409,0,0,3921,3926,3,1130,565,0,3922,3923,
	5,406,0,0,3923,3925,3,1130,565,0,3924,3922,1,0,0,0,3925,3928,1,0,0,0,3926,
	3924,1,0,0,0,3926,3927,1,0,0,0,3927,3930,1,0,0,0,3928,3926,1,0,0,0,3929,
	3921,1,0,0,0,3929,3930,1,0,0,0,3930,3931,1,0,0,0,3931,3932,5,410,0,0,3932,
	453,1,0,0,0,3933,3934,5,449,0,0,3934,3935,5,283,0,0,3935,3936,5,147,0,0,
	3936,3941,3,456,228,0,3937,3938,5,406,0,0,3938,3940,3,456,228,0,3939,3937,
	1,0,0,0,3940,3943,1,0,0,0,3941,3939,1,0,0,0,3941,3942,1,0,0,0,3942,3946,
	1,0,0,0,3943,3941,1,0,0,0,3944,3945,4,227,71,0,3945,3947,3,772,386,0,3946,
	3944,1,0,0,0,3946,3947,1,0,0,0,3947,455,1,0,0,0,3948,3949,5,284,0,0,3949,
	3950,5,383,0,0,3950,3952,5,409,0,0,3951,3953,3,458,229,0,3952,3951,1,0,
	0,0,3952,3953,1,0,0,0,3953,3954,1,0,0,0,3954,3998,5,410,0,0,3955,3956,5,
	285,0,0,3956,3957,5,383,0,0,3957,3959,5,409,0,0,3958,3960,3,458,229,0,3959,
	3958,1,0,0,0,3959,3960,1,0,0,0,3960,3961,1,0,0,0,3961,3998,5,410,0,0,3962,
	3963,5,286,0,0,3963,3964,5,383,0,0,3964,3966,5,409,0,0,3965,3967,3,460,
	230,0,3966,3965,1,0,0,0,3966,3967,1,0,0,0,3967,3968,1,0,0,0,3968,3998,5,
	410,0,0,3969,3970,5,287,0,0,3970,3971,5,383,0,0,3971,3973,5,409,0,0,3972,
	3974,3,460,230,0,3973,3972,1,0,0,0,3973,3974,1,0,0,0,3974,3975,1,0,0,0,
	3975,3998,5,410,0,0,3976,3977,5,288,0,0,3977,3978,5,383,0,0,3978,3980,5,
	409,0,0,3979,3981,3,462,231,0,3980,3979,1,0,0,0,3980,3981,1,0,0,0,3981,
	3982,1,0,0,0,3982,3998,5,410,0,0,3983,3984,5,289,0,0,3984,3985,5,383,0,
	0,3985,3987,5,409,0,0,3986,3988,3,462,231,0,3987,3986,1,0,0,0,3987,3988,
	1,0,0,0,3988,3989,1,0,0,0,3989,3998,5,410,0,0,3990,3991,5,290,0,0,3991,
	3992,5,383,0,0,3992,3994,5,409,0,0,3993,3995,3,466,233,0,3994,3993,1,0,
	0,0,3994,3995,1,0,0,0,3995,3996,1,0,0,0,3996,3998,5,410,0,0,3997,3948,1,
	0,0,0,3997,3955,1,0,0,0,3997,3962,1,0,0,0,3997,3969,1,0,0,0,3997,3976,1,
	0,0,0,3997,3983,1,0,0,0,3997,3990,1,0,0,0,3998,457,1,0,0,0,3999,4004,3,
	1048,524,0,4000,4001,5,406,0,0,4001,4003,3,1048,524,0,4002,4000,1,0,0,0,
	4003,4006,1,0,0,0,4004,4002,1,0,0,0,4004,4005,1,0,0,0,4005,459,1,0,0,0,
	4006,4004,1,0,0,0,4007,4012,3,1088,544,0,4008,4009,5,406,0,0,4009,4011,
	3,1088,544,0,4010,4008,1,0,0,0,4011,4014,1,0,0,0,4012,4010,1,0,0,0,4012,
	4013,1,0,0,0,4013,461,1,0,0,0,4014,4012,1,0,0,0,4015,4020,3,464,232,0,4016,
	4017,5,406,0,0,4017,4019,3,464,232,0,4018,4016,1,0,0,0,4019,4022,1,0,0,
	0,4020,4018,1,0,0,0,4020,4021,1,0,0,0,4021,463,1,0,0,0,4022,4020,1,0,0,
	0,4023,4024,3,1152,576,0,4024,465,1,0,0,0,4025,4030,3,980,490,0,4026,4027,
	5,406,0,0,4027,4029,3,980,490,0,4028,4026,1,0,0,0,4029,4032,1,0,0,0,4030,
	4028,1,0,0,0,4030,4031,1,0,0,0,4031,467,1,0,0,0,4032,4030,1,0,0,0,4033,
	4034,5,48,0,0,4034,4036,5,45,0,0,4035,4037,3,474,237,0,4036,4035,1,0,0,
	0,4036,4037,1,0,0,0,4037,4040,1,0,0,0,4038,4039,5,362,0,0,4039,4041,3,470,
	235,0,4040,4038,1,0,0,0,4040,4041,1,0,0,0,4041,4042,1,0,0,0,4042,4044,3,
	472,236,0,4043,4045,3,772,386,0,4044,4043,1,0,0,0,4044,4045,1,0,0,0,4045,
	4055,1,0,0,0,4046,4047,5,49,0,0,4047,4049,5,45,0,0,4048,4050,3,474,237,
	0,4049,4048,1,0,0,0,4049,4050,1,0,0,0,4050,4052,1,0,0,0,4051,4053,3,772,
	386,0,4052,4051,1,0,0,0,4052,4053,1,0,0,0,4053,4055,1,0,0,0,4054,4033,1,
	0,0,0,4054,4046,1,0,0,0,4055,469,1,0,0,0,4056,4064,3,450,225,0,4057,4058,
	4,235,72,0,4058,4059,7,43,0,0,4059,4060,5,383,0,0,4060,4064,3,1146,573,
	0,4061,4062,4,235,73,0,4062,4064,5,316,0,0,4063,4056,1,0,0,0,4063,4057,
	1,0,0,0,4063,4061,1,0,0,0,4064,4069,1,0,0,0,4065,4066,5,406,0,0,4066,4068,
	3,450,225,0,4067,4065,1,0,0,0,4068,4071,1,0,0,0,4069,4067,1,0,0,0,4069,
	4070,1,0,0,0,4070,471,1,0,0,0,4071,4069,1,0,0,0,4072,4076,4,236,74,0,4073,
	4074,5,364,0,0,4074,4075,5,383,0,0,4075,4077,3,1146,573,0,4076,4073,1,0,
	0,0,4076,4077,1,0,0,0,4077,4081,1,0,0,0,4078,4079,5,251,0,0,4079,4080,5,
	383,0,0,4080,4082,3,1146,573,0,4081,4078,1,0,0,0,4081,4082,1,0,0,0,4082,
	4086,1,0,0,0,4083,4084,5,114,0,0,4084,4085,5,383,0,0,4085,4087,3,1146,573,
	0,4086,4083,1,0,0,0,4086,4087,1,0,0,0,4087,4091,1,0,0,0,4088,4089,5,253,
	0,0,4089,4090,5,383,0,0,4090,4092,3,1146,573,0,4091,4088,1,0,0,0,4091,4092,
	1,0,0,0,4092,4095,1,0,0,0,4093,4095,1,0,0,0,4094,4072,1,0,0,0,4094,4093,
	1,0,0,0,4095,473,1,0,0,0,4096,4101,3,476,238,0,4097,4098,5,406,0,0,4098,
	4100,3,476,238,0,4099,4097,1,0,0,0,4100,4103,1,0,0,0,4101,4099,1,0,0,0,
	4101,4102,1,0,0,0,4102,475,1,0,0,0,4103,4101,1,0,0,0,4104,4105,7,44,0,0,
	4105,477,1,0,0,0,4106,4107,7,45,0,0,4107,4108,5,21,0,0,4108,479,1,0,0,0,
	4109,4110,5,35,0,0,4110,4111,3,1118,559,0,4111,4114,5,507,0,0,4112,4115,
	3,1150,575,0,4113,4115,3,732,366,0,4114,4112,1,0,0,0,4114,4113,1,0,0,0,
	4115,4121,1,0,0,0,4116,4121,3,482,241,0,4117,4118,7,46,0,0,4118,4119,5,
	35,0,0,4119,4121,3,1118,559,0,4120,4109,1,0,0,0,4120,4116,1,0,0,0,4120,
	4117,1,0,0,0,4121,481,1,0,0,0,4122,4123,5,17,0,0,4123,4126,3,1118,559,0,
	4124,4125,5,666,0,0,4125,4127,3,484,242,0,4126,4124,1,0,0,0,4126,4127,1,
	0,0,0,4127,483,1,0,0,0,4128,4133,3,732,366,0,4129,4130,5,406,0,0,4130,4132,
	3,732,366,0,4131,4129,1,0,0,0,4132,4135,1,0,0,0,4133,4131,1,0,0,0,4133,
	4134,1,0,0,0,4134,485,1,0,0,0,4135,4133,1,0,0,0,4136,4161,5,707,0,0,4137,
	4138,5,180,0,0,4138,4139,5,109,0,0,4139,4141,5,119,0,0,4140,4142,3,1180,
	590,0,4141,4140,1,0,0,0,4141,4142,1,0,0,0,4142,4143,1,0,0,0,4143,4162,3,
	1144,572,0,4144,4147,5,706,0,0,4145,4146,5,506,0,0,4146,4148,5,283,0,0,
	4147,4145,1,0,0,0,4147,4148,1,0,0,0,4148,4162,1,0,0,0,4149,4150,4,243,75,
	0,4150,4151,5,165,0,0,4151,4152,5,507,0,0,4152,4153,3,1016,508,0,4153,4154,
	5,408,0,0,4154,4155,3,1130,565,0,4155,4156,5,159,0,0,4156,4157,5,444,0,
	0,4157,4159,3,1144,572,0,4158,4160,3,488,244,0,4159,4158,1,0,0,0,4159,4160,
	1,0,0,0,4160,4162,1,0,0,0,4161,4137,1,0,0,0,4161,4144,1,0,0,0,4161,4149,
	1,0,0,0,4162,487,1,0,0,0,4163,4174,3,490,245,0,4164,4165,5,109,0,0,4165,
	4167,5,119,0,0,4166,4168,3,1180,590,0,4167,4166,1,0,0,0,4167,4168,1,0,0,
	0,4168,4169,1,0,0,0,4169,4171,3,1144,572,0,4170,4172,3,490,245,0,4171,4170,
	1,0,0,0,4171,4172,1,0,0,0,4172,4174,1,0,0,0,4173,4163,1,0,0,0,4173,4164,
	1,0,0,0,4174,489,1,0,0,0,4175,4177,5,607,0,0,4176,4178,5,27,0,0,4177,4176,
	1,0,0,0,4177,4178,1,0,0,0,4178,4179,1,0,0,0,4179,4180,5,633,0,0,4180,491,
	1,0,0,0,4181,4182,4,246,76,0,4182,4191,3,494,247,0,4183,4191,3,500,250,
	0,4184,4191,3,512,256,0,4185,4191,3,514,257,0,4186,4191,3,528,264,0,4187,
	4191,3,530,265,0,4188,4189,4,246,77,0,4189,4191,3,548,274,0,4190,4181,1,
	0,0,0,4190,4183,1,0,0,0,4190,4184,1,0,0,0,4190,4185,1,0,0,0,4190,4186,1,
	0,0,0,4190,4187,1,0,0,0,4190,4188,1,0,0,0,4191,493,1,0,0,0,4192,4193,5,
	428,0,0,4193,4196,5,364,0,0,4194,4195,4,247,78,0,4195,4197,3,968,484,0,
	4196,4194,1,0,0,0,4196,4197,1,0,0,0,4197,4198,1,0,0,0,4198,4199,3,496,248,
	0,4199,495,1,0,0,0,4200,4201,4,248,79,0,4201,4205,3,1000,500,0,4202,4203,
	4,248,80,0,4203,4205,3,1002,501,0,4204,4200,1,0,0,0,4204,4202,1,0,0,0,4205,
	4206,1,0,0,0,4206,4207,3,502,251,0,4207,4248,1,0,0,0,4208,4209,4,248,81,
	0,4209,4210,3,1016,508,0,4210,4211,5,159,0,0,4211,4212,5,444,0,0,4212,4215,
	3,1146,573,0,4213,4214,4,248,82,0,4214,4216,3,1012,506,0,4215,4213,1,0,
	0,0,4215,4216,1,0,0,0,4216,4219,1,0,0,0,4217,4218,4,248,83,0,4218,4220,
	3,1008,504,0,4219,4217,1,0,0,0,4219,4220,1,0,0,0,4220,4248,1,0,0,0,4221,
	4222,4,248,84,0,4222,4223,3,1016,508,0,4223,4224,3,1010,505,0,4224,4248,
	1,0,0,0,4225,4226,4,248,85,0,4226,4227,3,1016,508,0,4227,4228,5,478,0,0,
	4228,4232,5,689,0,0,4229,4233,5,427,0,0,4230,4233,5,239,0,0,4231,4233,3,
	550,275,0,4232,4229,1,0,0,0,4232,4230,1,0,0,0,4232,4231,1,0,0,0,4233,4248,
	1,0,0,0,4234,4235,4,248,86,0,4235,4236,3,1016,508,0,4236,4239,5,159,0,0,
	4237,4238,5,682,0,0,4238,4240,3,1170,585,0,4239,4237,1,0,0,0,4239,4240,
	1,0,0,0,4240,4241,1,0,0,0,4241,4242,5,444,0,0,4242,4243,5,764,0,0,4243,
	4245,5,251,0,0,4244,4246,3,1008,504,0,4245,4244,1,0,0,0,4245,4246,1,0,0,
	0,4246,4248,1,0,0,0,4247,4204,1,0,0,0,4247,4208,1,0,0,0,4247,4221,1,0,0,
	0,4247,4225,1,0,0,0,4247,4234,1,0,0,0,4248,497,1,0,0,0,4249,4250,5,364,
	0,0,4250,4251,3,1178,589,0,4251,499,1,0,0,0,4252,4253,5,459,0,0,4253,4257,
	5,364,0,0,4254,4255,4,250,87,0,4255,4258,3,970,485,0,4256,4258,1,0,0,0,
	4257,4254,1,0,0,0,4257,4256,1,0,0,0,4258,4259,1,0,0,0,4259,4260,3,1000,
	500,0,4260,4261,3,504,252,0,4261,4262,3,502,251,0,4262,501,1,0,0,0,4263,
	4265,4,251,88,0,4264,4266,3,506,253,0,4265,4264,1,0,0,0,4265,4266,1,0,0,
	0,4266,4268,1,0,0,0,4267,4269,3,508,254,0,4268,4267,1,0,0,0,4268,4269,1,
	0,0,0,4269,4273,1,0,0,0,4270,4272,3,510,255,0,4271,4270,1,0,0,0,4272,4275,
	1,0,0,0,4273,4271,1,0,0,0,4273,4274,1,0,0,0,4274,4278,1,0,0,0,4275,4273,
	1,0,0,0,4276,4278,1,0,0,0,4277,4263,1,0,0,0,4277,4276,1,0,0,0,4278,503,
	1,0,0,0,4279,4283,4,252,89,0,4280,4281,5,478,0,0,4281,4282,5,689,0,0,4282,
	4284,3,550,275,0,4283,4280,1,0,0,0,4283,4284,1,0,0,0,4284,4287,1,0,0,0,
	4285,4287,1,0,0,0,4286,4279,1,0,0,0,4286,4285,1,0,0,0,4287,505,1,0,0,0,
	4288,4291,5,607,0,0,4289,4292,3,542,271,0,4290,4292,7,47,0,0,4291,4289,
	1,0,0,0,4291,4290,1,0,0,0,4292,507,1,0,0,0,4293,4302,5,682,0,0,4294,4295,
	5,208,0,0,4295,4303,3,1130,565,0,4296,4297,5,211,0,0,4297,4303,3,1130,565,
	0,4298,4299,5,207,0,0,4299,4303,3,1130,565,0,4300,4301,5,212,0,0,4301,4303,
	3,1130,565,0,4302,4294,1,0,0,0,4302,4296,1,0,0,0,4302,4298,1,0,0,0,4302,
	4300,1,0,0,0,4303,4304,1,0,0,0,4304,4302,1,0,0,0,4304,4305,1,0,0,0,4305,
	509,1,0,0,0,4306,4307,5,1,0,0,4307,4340,7,48,0,0,4308,4337,5,251,0,0,4309,
	4316,5,498,0,0,4310,4311,5,527,0,0,4311,4312,3,1132,566,0,4312,4313,5,113,
	0,0,4313,4317,1,0,0,0,4314,4317,5,234,0,0,4315,4317,5,478,0,0,4316,4310,
	1,0,0,0,4316,4314,1,0,0,0,4316,4315,1,0,0,0,4316,4317,1,0,0,0,4317,4338,
	1,0,0,0,4318,4321,5,735,0,0,4319,4322,3,1132,566,0,4320,4322,5,478,0,0,
	4321,4319,1,0,0,0,4321,4320,1,0,0,0,4322,4338,1,0,0,0,4323,4324,5,736,0,
	0,4324,4329,5,527,0,0,4325,4326,3,1132,566,0,4326,4327,5,113,0,0,4327,4330,
	1,0,0,0,4328,4330,5,478,0,0,4329,4325,1,0,0,0,4329,4328,1,0,0,0,4330,4338,
	1,0,0,0,4331,4332,4,255,90,0,4332,4333,5,607,0,0,4333,4335,5,107,0,0,4334,
	4336,7,49,0,0,4335,4334,1,0,0,0,4335,4336,1,0,0,0,4336,4338,1,0,0,0,4337,
	4309,1,0,0,0,4337,4318,1,0,0,0,4337,4323,1,0,0,0,4337,4331,1,0,0,0,4338,
	4340,1,0,0,0,4339,4306,1,0,0,0,4339,4308,1,0,0,0,4340,511,1,0,0,0,4341,
	4342,5,487,0,0,4342,4345,5,364,0,0,4343,4344,4,256,91,0,4344,4346,3,968,
	484,0,4345,4343,1,0,0,0,4345,4346,1,0,0,0,4346,4347,1,0,0,0,4347,4348,3,
	998,499,0,4348,513,1,0,0,0,4349,4392,5,511,0,0,4350,4351,4,257,92,0,4351,
	4352,3,536,268,0,4352,4353,5,653,0,0,4353,4357,3,998,499,0,4354,4355,5,
	682,0,0,4355,4356,5,690,0,0,4356,4358,5,584,0,0,4357,4354,1,0,0,0,4357,
	4358,1,0,0,0,4358,4393,1,0,0,0,4359,4365,3,536,268,0,4360,4362,5,427,0,
	0,4361,4363,5,260,0,0,4362,4361,1,0,0,0,4362,4363,1,0,0,0,4363,4365,1,0,
	0,0,4364,4359,1,0,0,0,4364,4360,1,0,0,0,4365,4366,1,0,0,0,4366,4368,5,579,
	0,0,4367,4369,3,534,267,0,4368,4367,1,0,0,0,4368,4369,1,0,0,0,4369,4370,
	1,0,0,0,4370,4371,3,540,270,0,4371,4372,5,653,0,0,4372,4374,3,516,258,0,
	4373,4375,3,526,263,0,4374,4373,1,0,0,0,4374,4375,1,0,0,0,4375,4377,1,0,
	0,0,4376,4378,3,518,259,0,4377,4376,1,0,0,0,4377,4378,1,0,0,0,4378,4380,
	1,0,0,0,4379,4381,3,524,262,0,4380,4379,1,0,0,0,4380,4381,1,0,0,0,4381,
	4393,1,0,0,0,4382,4383,5,265,0,0,4383,4384,5,579,0,0,4384,4385,3,1016,508,
	0,4385,4386,5,653,0,0,4386,4390,3,516,258,0,4387,4388,5,682,0,0,4388,4389,
	5,511,0,0,4389,4391,5,584,0,0,4390,4387,1,0,0,0,4390,4391,1,0,0,0,4391,
	4393,1,0,0,0,4392,4350,1,0,0,0,4392,4364,1,0,0,0,4392,4382,1,0,0,0,4393,
	515,1,0,0,0,4394,4395,4,258,93,0,4395,4399,3,1000,500,0,4396,4397,4,258,
	94,0,4397,4399,3,998,499,0,4398,4394,1,0,0,0,4398,4396,1,0,0,0,4399,517,
	1,0,0,0,4400,4401,4,259,95,0,4401,4403,5,682,0,0,4402,4404,3,546,273,0,
	4403,4402,1,0,0,0,4404,4405,1,0,0,0,4405,4403,1,0,0,0,4405,4406,1,0,0,0,
	4406,4412,1,0,0,0,4407,4408,4,259,96,0,4408,4409,5,682,0,0,4409,4410,5,
	511,0,0,4410,4412,5,584,0,0,4411,4400,1,0,0,0,4411,4407,1,0,0,0,4412,519,
	1,0,0,0,4413,4414,5,693,0,0,4414,4415,3,550,275,0,4415,521,1,0,0,0,4416,
	4417,5,682,0,0,4417,4425,5,689,0,0,4418,4426,3,550,275,0,4419,4421,5,427,
	0,0,4420,4422,3,520,260,0,4421,4420,1,0,0,0,4421,4422,1,0,0,0,4422,4426,
	1,0,0,0,4423,4426,5,239,0,0,4424,4426,5,478,0,0,4425,4418,1,0,0,0,4425,
	4419,1,0,0,0,4425,4423,1,0,0,0,4425,4424,1,0,0,0,4426,523,1,0,0,0,4427,
	4428,5,431,0,0,4428,4430,5,364,0,0,4429,4431,3,522,261,0,4430,4429,1,0,
	0,0,4430,4431,1,0,0,0,4431,525,1,0,0,0,4432,4433,4,263,97,0,4433,4434,3,
	506,253,0,4434,527,1,0,0,0,4435,4436,5,604,0,0,4436,4437,5,364,0,0,4437,
	4438,3,1016,508,0,4438,4439,5,653,0,0,4439,4447,3,1016,508,0,4440,4441,
	5,406,0,0,4441,4442,3,1016,508,0,4442,4443,5,653,0,0,4443,4444,3,1016,508,
	0,4444,4446,1,0,0,0,4445,4440,1,0,0,0,4446,4449,1,0,0,0,4447,4445,1,0,0,
	0,4447,4448,1,0,0,0,4448,529,1,0,0,0,4449,4447,1,0,0,0,4450,4484,5,611,
	0,0,4451,4452,4,265,98,0,4452,4453,3,536,268,0,4453,4454,5,507,0,0,4454,
	4455,3,998,499,0,4455,4485,1,0,0,0,4456,4457,3,536,268,0,4457,4458,3,532,
	266,0,4458,4459,5,507,0,0,4459,4460,3,998,499,0,4460,4485,1,0,0,0,4461,
	4463,5,427,0,0,4462,4464,5,260,0,0,4463,4462,1,0,0,0,4463,4464,1,0,0,0,
	4464,4476,1,0,0,0,4465,4466,4,265,99,0,4466,4468,5,579,0,0,4467,4469,3,
	534,267,0,4468,4467,1,0,0,0,4468,4469,1,0,0,0,4469,4470,1,0,0,0,4470,4477,
	3,540,270,0,4471,4472,5,406,0,0,4472,4473,5,511,0,0,4473,4474,5,584,0,0,
	4474,4475,5,507,0,0,4475,4477,3,998,499,0,4476,4465,1,0,0,0,4476,4471,1,
	0,0,0,4477,4485,1,0,0,0,4478,4479,5,265,0,0,4479,4480,5,579,0,0,4480,4481,
	3,1016,508,0,4481,4482,5,507,0,0,4482,4483,3,998,499,0,4483,4485,1,0,0,
	0,4484,4451,1,0,0,0,4484,4456,1,0,0,0,4484,4461,1,0,0,0,4484,4478,1,0,0,
	0,4485,531,1,0,0,0,4486,4487,4,266,100,0,4487,4489,5,579,0,0,4488,4490,
	3,534,267,0,4489,4488,1,0,0,0,4489,4490,1,0,0,0,4490,4491,1,0,0,0,4491,
	4501,3,540,270,0,4492,4498,4,266,101,0,4493,4495,5,579,0,0,4494,4496,3,
	534,267,0,4495,4494,1,0,0,0,4495,4496,1,0,0,0,4496,4497,1,0,0,0,4497,4499,
	3,540,270,0,4498,4493,1,0,0,0,4498,4499,1,0,0,0,4499,4501,1,0,0,0,4500,
	4486,1,0,0,0,4500,4492,1,0,0,0,4501,533,1,0,0,0,4502,4503,7,50,0,0,4503,
	535,1,0,0,0,4504,4509,3,538,269,0,4505,4506,5,406,0,0,4506,4508,3,538,269,
	0,4507,4505,1,0,0,0,4508,4511,1,0,0,0,4509,4507,1,0,0,0,4509,4510,1,0,0,
	0,4510,537,1,0,0,0,4511,4509,1,0,0,0,4512,4523,4,269,102,0,4513,4515,3,
	1174,587,0,4514,4516,3,1034,517,0,4515,4514,1,0,0,0,4515,4516,1,0,0,0,4516,
	4524,1,0,0,0,4517,4521,3,1174,587,0,4518,4522,5,417,0,0,4519,4520,5,416,
	0,0,4520,4522,3,1170,585,0,4521,4518,1,0,0,0,4521,4519,1,0,0,0,4522,4524,
	1,0,0,0,4523,4513,1,0,0,0,4523,4517,1,0,0,0,4524,4554,1,0,0,0,4525,4527,
	7,51,0,0,4526,4528,3,1034,517,0,4527,4526,1,0,0,0,4527,4528,1,0,0,0,4528,
	4554,1,0,0,0,4529,4554,7,52,0,0,4530,4531,5,511,0,0,4531,4554,5,584,0,0,
	4532,4533,5,621,0,0,4533,4554,5,468,0,0,4534,4538,5,459,0,0,4535,4536,5,
	343,0,0,4536,4539,5,340,0,0,4537,4539,7,53,0,0,4538,4535,1,0,0,0,4538,4537,
	1,0,0,0,4538,4539,1,0,0,0,4539,4554,1,0,0,0,4540,4541,5,548,0,0,4541,4554,
	5,340,0,0,4542,4543,5,283,0,0,4543,4554,7,54,0,0,4544,4545,5,621,0,0,4545,
	4554,5,367,0,0,4546,4548,5,428,0,0,4547,4549,5,297,0,0,4548,4547,1,0,0,
	0,4548,4549,1,0,0,0,4549,4554,1,0,0,0,4550,4551,4,269,103,0,4551,4552,7,
	55,0,0,4552,4554,5,689,0,0,4553,4512,1,0,0,0,4553,4525,1,0,0,0,4553,4529,
	1,0,0,0,4553,4530,1,0,0,0,4553,4532,1,0,0,0,4553,4534,1,0,0,0,4553,4540,
	1,0,0,0,4553,4542,1,0,0,0,4553,4544,1,0,0,0,4553,4546,1,0,0,0,4553,4550,
	1,0,0,0,4554,539,1,0,0,0,4555,4558,5,393,0,0,4556,4557,5,405,0,0,4557,4559,
	5,393,0,0,4558,4556,1,0,0,0,4558,4559,1,0,0,0,4559,4572,1,0,0,0,4560,4563,
	3,1048,524,0,4561,4562,5,405,0,0,4562,4564,5,393,0,0,4563,4561,1,0,0,0,
	4563,4564,1,0,0,0,4564,4572,1,0,0,0,4565,4572,3,1092,546,0,4566,4567,4,
	270,104,0,4567,4568,3,1048,524,0,4568,4569,5,405,0,0,4569,4570,3,1092,546,
	0,4570,4572,1,0,0,0,4571,4555,1,0,0,0,4571,4560,1,0,0,0,4571,4565,1,0,0,
	0,4571,4566,1,0,0,0,4572,541,1,0,0,0,4573,4580,3,544,272,0,4574,4576,5,
	430,0,0,4575,4574,1,0,0,0,4575,4576,1,0,0,0,4576,4577,1,0,0,0,4577,4579,
	3,544,272,0,4578,4575,1,0,0,0,4579,4582,1,0,0,0,4580,4578,1,0,0,0,4580,
	4581,1,0,0,0,4581,543,1,0,0,0,4582,4580,1,0,0,0,4583,4584,5,82,0,0,4584,
	4590,3,1146,573,0,4585,4586,5,170,0,0,4586,4590,3,1146,573,0,4587,4588,
	5,332,0,0,4588,4590,3,1146,573,0,4589,4583,1,0,0,0,4589,4585,1,0,0,0,4589,
	4587,1,0,0,0,4590,545,1,0,0,0,4591,4592,5,511,0,0,4592,4602,5,584,0,0,4593,
	4594,5,208,0,0,4594,4602,3,1130,565,0,4595,4596,5,211,0,0,4596,4602,3,1130,
	565,0,4597,4598,5,207,0,0,4598,4602,3,1130,565,0,4599,4600,5,212,0,0,4600,
	4602,3,1130,565,0,4601,4591,1,0,0,0,4601,4593,1,0,0,0,4601,4595,1,0,0,0,
	4601,4597,1,0,0,0,4601,4599,1,0,0,0,4602,547,1,0,0,0,4603,4604,5,619,0,
	0,4604,4605,5,689,0,0,4605,4627,3,550,275,0,4606,4607,5,619,0,0,4607,4608,
	5,689,0,0,4608,4627,7,56,0,0,4609,4610,5,619,0,0,4610,4611,5,478,0,0,4611,
	4615,5,689,0,0,4612,4616,3,550,275,0,4613,4616,5,239,0,0,4614,4616,5,427,
	0,0,4615,4612,1,0,0,0,4615,4613,1,0,0,0,4615,4614,1,0,0,0,4616,4617,1,0,
	0,0,4617,4618,5,653,0,0,4618,4627,3,550,275,0,4619,4620,5,619,0,0,4620,
	4621,5,689,0,0,4621,4624,5,427,0,0,4622,4623,5,693,0,0,4623,4625,3,550,
	275,0,4624,4622,1,0,0,0,4624,4625,1,0,0,0,4625,4627,1,0,0,0,4626,4603,1,
	0,0,0,4626,4606,1,0,0,0,4626,4609,1,0,0,0,4626,4619,1,0,0,0,4627,549,1,
	0,0,0,4628,4633,3,552,276,0,4629,4630,5,406,0,0,4630,4632,3,552,276,0,4631,
	4629,1,0,0,0,4632,4635,1,0,0,0,4633,4631,1,0,0,0,4633,4634,1,0,0,0,4634,
	551,1,0,0,0,4635,4633,1,0,0,0,4636,4640,3,1174,587,0,4637,4638,5,416,0,
	0,4638,4641,3,1170,585,0,4639,4641,5,417,0,0,4640,4637,1,0,0,0,4640,4639,
	1,0,0,0,4640,4641,1,0,0,0,4641,553,1,0,0,0,4642,4644,5,63,0,0,4643,4645,
	3,1024,512,0,4644,4643,1,0,0,0,4644,4645,1,0,0,0,4645,4646,1,0,0,0,4646,
	4647,5,647,0,0,4647,4650,3,1094,547,0,4648,4649,4,277,105,0,4649,4651,3,
	556,278,0,4650,4648,1,0,0,0,4650,4651,1,0,0,0,4651,4686,1,0,0,0,4652,4653,
	5,451,0,0,4653,4654,5,647,0,0,4654,4658,3,1094,547,0,4655,4657,3,558,279,
	0,4656,4655,1,0,0,0,4657,4660,1,0,0,0,4658,4656,1,0,0,0,4658,4659,1,0,0,
	0,4659,4686,1,0,0,0,4660,4658,1,0,0,0,4661,4662,5,9,0,0,4662,4663,5,647,
	0,0,4663,4665,3,1094,547,0,4664,4666,7,57,0,0,4665,4664,1,0,0,0,4665,4666,
	1,0,0,0,4666,4686,1,0,0,0,4667,4669,5,582,0,0,4668,4670,3,1024,512,0,4669,
	4668,1,0,0,0,4669,4670,1,0,0,0,4670,4671,1,0,0,0,4671,4672,5,647,0,0,4672,
	4686,3,1094,547,0,4673,4675,5,37,0,0,4674,4676,3,1024,512,0,4675,4674,1,
	0,0,0,4675,4676,1,0,0,0,4676,4677,1,0,0,0,4677,4678,5,647,0,0,4678,4682,
	3,1094,547,0,4679,4681,3,560,280,0,4680,4679,1,0,0,0,4681,4684,1,0,0,0,
	4682,4680,1,0,0,0,4682,4683,1,0,0,0,4683,4686,1,0,0,0,4684,4682,1,0,0,0,
	4685,4642,1,0,0,0,4685,4652,1,0,0,0,4685,4661,1,0,0,0,4685,4667,1,0,0,0,
	4685,4673,1,0,0,0,4686,555,1,0,0,0,4687,4688,5,663,0,0,4688,4689,5,704,
	0,0,4689,4690,5,579,0,0,4690,4694,3,1120,560,0,4691,4692,5,682,0,0,4692,
	4693,5,380,0,0,4693,4695,5,705,0,0,4694,4691,1,0,0,0,4694,4695,1,0,0,0,
	4695,4701,1,0,0,0,4696,4697,5,487,0,0,4697,4698,5,704,0,0,4698,4699,5,579,
	0,0,4699,4701,3,1120,560,0,4700,4687,1,0,0,0,4700,4696,1,0,0,0,4701,557,
	1,0,0,0,4702,4703,5,506,0,0,4703,4706,5,53,0,0,4704,4706,7,58,0,0,4705,
	4702,1,0,0,0,4705,4704,1,0,0,0,4706,559,1,0,0,0,4707,4708,7,59,0,0,4708,
	561,1,0,0,0,4709,4710,5,25,0,0,4710,4711,5,254,0,0,4711,4712,3,1118,559,
	0,4712,4713,5,47,0,0,4713,4714,3,1144,572,0,4714,4732,1,0,0,0,4715,4716,
	5,25,0,0,4716,4717,5,694,0,0,4717,4732,3,1154,577,0,4718,4719,5,52,0,0,
	4719,4720,5,254,0,0,4720,4732,3,1108,554,0,4721,4722,5,52,0,0,4722,4723,
	5,694,0,0,4723,4728,3,1110,555,0,4724,4725,5,406,0,0,4725,4727,3,1110,555,
	0,4726,4724,1,0,0,0,4727,4730,1,0,0,0,4728,4726,1,0,0,0,4728,4729,1,0,0,
	0,4729,4732,1,0,0,0,4730,4728,1,0,0,0,4731,4709,1,0,0,0,4731,4715,1,0,0,
	0,4731,4718,1,0,0,0,4731,4721,1,0,0,0,4732,563,1,0,0,0,4733,4734,5,619,
	0,0,4734,4735,3,566,283,0,4735,565,1,0,0,0,4736,4737,3,576,288,0,4737,4738,
	3,574,287,0,4738,4793,1,0,0,0,4739,4740,5,347,0,0,4740,4793,3,568,284,0,
	4741,4742,3,1182,591,0,4742,4743,3,582,291,0,4743,4793,1,0,0,0,4744,4747,
	5,251,0,0,4745,4746,5,506,0,0,4746,4748,3,1016,508,0,4747,4745,1,0,0,0,
	4747,4748,1,0,0,0,4748,4749,1,0,0,0,4749,4776,3,1180,590,0,4750,4752,3,
	1146,573,0,4751,4753,3,1012,506,0,4752,4751,1,0,0,0,4752,4753,1,0,0,0,4753,
	4755,1,0,0,0,4754,4756,3,1008,504,0,4755,4754,1,0,0,0,4755,4756,1,0,0,0,
	4756,4777,1,0,0,0,4757,4759,3,1146,573,0,4758,4760,3,1012,506,0,4759,4758,
	1,0,0,0,4759,4760,1,0,0,0,4760,4762,1,0,0,0,4761,4763,3,1008,504,0,4762,
	4761,1,0,0,0,4762,4763,1,0,0,0,4763,4777,1,0,0,0,4764,4765,4,283,106,0,
	4765,4766,5,243,0,0,4766,4767,5,409,0,0,4767,4768,3,1146,573,0,4768,4769,
	5,410,0,0,4769,4777,1,0,0,0,4770,4771,4,283,107,0,4771,4772,5,251,0,0,4772,
	4773,5,409,0,0,4773,4774,3,1146,573,0,4774,4775,5,410,0,0,4775,4777,1,0,
	0,0,4776,4750,1,0,0,0,4776,4757,1,0,0,0,4776,4764,1,0,0,0,4776,4770,1,0,
	0,0,4777,4793,1,0,0,0,4778,4779,4,283,108,0,4779,4782,5,251,0,0,4780,4781,
	5,506,0,0,4781,4783,3,1016,508,0,4782,4780,1,0,0,0,4782,4783,1,0,0,0,4783,
	4784,1,0,0,0,4784,4785,5,653,0,0,4785,4787,5,764,0,0,4786,4788,3,1012,506,
	0,4787,4786,1,0,0,0,4787,4788,1,0,0,0,4788,4790,1,0,0,0,4789,4791,3,1008,
	504,0,4790,4789,1,0,0,0,4790,4791,1,0,0,0,4791,4793,1,0,0,0,4792,4736,1,
	0,0,0,4792,4739,1,0,0,0,4792,4741,1,0,0,0,4792,4744,1,0,0,0,4792,4778,1,
	0,0,0,4793,567,1,0,0,0,4794,4796,3,570,285,0,4795,4797,3,572,286,0,4796,
	4795,1,0,0,0,4796,4797,1,0,0,0,4797,4804,1,0,0,0,4798,4801,3,572,286,0,
	4799,4800,5,406,0,0,4800,4802,3,570,285,0,4801,4799,1,0,0,0,4801,4802,1,
	0,0,0,4802,4804,1,0,0,0,4803,4794,1,0,0,0,4803,4798,1,0,0,0,4804,569,1,
	0,0,0,4805,4806,5,598,0,0,4806,4807,7,39,0,0,4807,571,1,0,0,0,4808,4809,
	5,169,0,0,4809,4815,5,177,0,0,4810,4811,5,282,0,0,4811,4816,5,598,0,0,4812,
	4813,5,598,0,0,4813,4816,7,60,0,0,4814,4816,5,307,0,0,4815,4810,1,0,0,0,
	4815,4812,1,0,0,0,4815,4814,1,0,0,0,4816,573,1,0,0,0,4817,4818,5,406,0,
	0,4818,4820,3,578,289,0,4819,4817,1,0,0,0,4820,4823,1,0,0,0,4821,4819,1,
	0,0,0,4821,4822,1,0,0,0,4822,575,1,0,0,0,4823,4821,1,0,0,0,4824,4825,3,
	736,368,0,4825,4826,3,1180,590,0,4826,4827,3,586,293,0,4827,4850,1,0,0,
	0,4828,4850,3,988,494,0,4829,4830,3,732,366,0,4830,4831,3,1180,590,0,4831,
	4832,3,666,333,0,4832,4850,1,0,0,0,4833,4834,3,580,290,0,4834,4835,3,1180,
	590,0,4835,4836,3,586,293,0,4836,4850,1,0,0,0,4837,4847,5,230,0,0,4838,
	4839,3,1180,590,0,4839,4840,3,666,333,0,4840,4848,1,0,0,0,4841,4843,3,926,
	463,0,4842,4844,3,976,488,0,4843,4842,1,0,0,0,4843,4844,1,0,0,0,4844,4848,
	1,0,0,0,4845,4846,4,288,109,0,4846,4848,5,478,0,0,4847,4838,1,0,0,0,4847,
	4841,1,0,0,0,4847,4845,1,0,0,0,4848,4850,1,0,0,0,4849,4824,1,0,0,0,4849,
	4828,1,0,0,0,4849,4829,1,0,0,0,4849,4833,1,0,0,0,4849,4837,1,0,0,0,4850,
	577,1,0,0,0,4851,4852,3,1182,591,0,4852,4853,3,736,368,0,4853,4854,3,1180,
	590,0,4854,4855,3,586,293,0,4855,4858,1,0,0,0,4856,4858,3,576,288,0,4857,
	4851,1,0,0,0,4857,4856,1,0,0,0,4858,579,1,0,0,0,4859,4861,5,418,0,0,4860,
	4862,3,1186,593,0,4861,4860,1,0,0,0,4861,4862,1,0,0,0,4862,4863,1,0,0,0,
	4863,4864,3,736,368,0,4864,581,1,0,0,0,4865,4866,3,584,292,0,4866,4867,
	3,574,287,0,4867,4871,1,0,0,0,4868,4869,5,347,0,0,4869,4871,3,568,284,0,
	4870,4865,1,0,0,0,4870,4868,1,0,0,0,4871,583,1,0,0,0,4872,4873,3,736,368,
	0,4873,4874,3,1180,590,0,4874,4875,3,586,293,0,4875,585,1,0,0,0,4876,4881,
	3,666,333,0,4877,4881,7,61,0,0,4878,4879,4,293,110,0,4879,4881,7,62,0,0,
	4880,4876,1,0,0,0,4880,4877,1,0,0,0,4880,4878,1,0,0,0,4881,587,1,0,0,0,
	4882,5102,5,621,0,0,4883,4884,4,294,111,0,4884,5103,5,66,0,0,4885,4887,
	5,468,0,0,4886,4888,3,1020,510,0,4887,4886,1,0,0,0,4887,4888,1,0,0,0,4888,
	5103,1,0,0,0,4889,4891,3,590,295,0,4890,4889,1,0,0,0,4890,4891,1,0,0,0,
	4891,4892,1,0,0,0,4892,4894,5,340,0,0,4893,4895,3,596,298,0,4894,4893,1,
	0,0,0,4894,4895,1,0,0,0,4895,4897,1,0,0,0,4896,4898,3,1020,510,0,4897,4896,
	1,0,0,0,4897,4898,1,0,0,0,4898,5103,1,0,0,0,4899,4901,5,144,0,0,4900,4899,
	1,0,0,0,4900,4901,1,0,0,0,4901,4902,1,0,0,0,4902,4904,5,348,0,0,4903,4905,
	3,596,298,0,4904,4903,1,0,0,0,4904,4905,1,0,0,0,4905,4907,1,0,0,0,4906,
	4908,3,1020,510,0,4907,4906,1,0,0,0,4907,4908,1,0,0,0,4908,5103,1,0,0,0,
	4909,4911,5,134,0,0,4910,4912,3,596,298,0,4911,4910,1,0,0,0,4911,4912,1,
	0,0,0,4912,4914,1,0,0,0,4913,4915,3,1020,510,0,4914,4913,1,0,0,0,4914,4915,
	1,0,0,0,4915,5103,1,0,0,0,4916,4917,5,647,0,0,4917,4919,5,327,0,0,4918,
	4920,3,596,298,0,4919,4918,1,0,0,0,4919,4920,1,0,0,0,4920,4922,1,0,0,0,
	4921,4923,3,1020,510,0,4922,4921,1,0,0,0,4922,4923,1,0,0,0,4923,5103,1,
	0,0,0,4924,4925,5,28,0,0,4925,4927,5,340,0,0,4926,4928,3,596,298,0,4927,
	4926,1,0,0,0,4927,4928,1,0,0,0,4928,4930,1,0,0,0,4929,4931,3,1020,510,0,
	4930,4929,1,0,0,0,4930,4931,1,0,0,0,4931,5103,1,0,0,0,4932,5103,5,255,0,
	0,4933,4936,5,128,0,0,4934,4937,3,1084,542,0,4935,4937,5,427,0,0,4936,4934,
	1,0,0,0,4936,4935,1,0,0,0,4937,4938,1,0,0,0,4938,5103,7,63,0,0,4939,4941,
	3,590,295,0,4940,4939,1,0,0,0,4940,4941,1,0,0,0,4941,4942,1,0,0,0,4942,
	4943,5,90,0,0,4943,4944,7,64,0,0,4944,4946,3,1092,546,0,4945,4947,3,596,
	298,0,4946,4945,1,0,0,0,4946,4947,1,0,0,0,4947,4949,1,0,0,0,4948,4950,3,
	1020,510,0,4949,4948,1,0,0,0,4949,4950,1,0,0,0,4950,5103,1,0,0,0,4951,4952,
	7,42,0,0,4952,5103,5,183,0,0,4953,4960,5,45,0,0,4954,4961,5,157,0,0,4955,
	4956,5,327,0,0,4956,4958,3,592,296,0,4957,4959,3,772,386,0,4958,4957,1,
	0,0,0,4958,4959,1,0,0,0,4959,4961,1,0,0,0,4960,4954,1,0,0,0,4960,4955,1,
	0,0,0,4961,5103,1,0,0,0,4962,4963,7,65,0,0,4963,4966,5,134,0,0,4964,4965,
	5,530,0,0,4965,4967,3,1146,573,0,4966,4964,1,0,0,0,4966,4967,1,0,0,0,4967,
	4970,1,0,0,0,4968,4969,5,507,0,0,4969,4971,3,1134,567,0,4970,4968,1,0,0,
	0,4970,4971,1,0,0,0,4971,4973,1,0,0,0,4972,4974,3,284,142,0,4973,4972,1,
	0,0,0,4973,4974,1,0,0,0,4974,4976,1,0,0,0,4975,4977,3,772,386,0,4976,4975,
	1,0,0,0,4976,4977,1,0,0,0,4977,5103,1,0,0,0,4978,4979,4,294,112,0,4979,
	4981,5,138,0,0,4980,4978,1,0,0,0,4980,4981,1,0,0,0,4981,4982,1,0,0,0,4982,
	4983,7,66,0,0,4983,4984,3,594,297,0,4984,4986,3,1092,546,0,4985,4987,3,
	596,298,0,4986,4985,1,0,0,0,4986,4987,1,0,0,0,4987,4989,1,0,0,0,4988,4990,
	3,350,175,0,4989,4988,1,0,0,0,4989,4990,1,0,0,0,4990,5103,1,0,0,0,4991,
	4993,5,328,0,0,4992,4991,1,0,0,0,4992,4993,1,0,0,0,4993,4994,1,0,0,0,4994,
	5103,5,129,0,0,4995,4996,5,458,0,0,4996,4997,5,409,0,0,4997,4998,5,393,
	0,0,4998,4999,5,410,0,0,4999,5103,7,67,0,0,5000,5002,5,369,0,0,5001,5003,
	3,284,142,0,5002,5001,1,0,0,0,5002,5003,1,0,0,0,5003,5103,1,0,0,0,5004,
	5006,5,131,0,0,5005,5007,3,284,142,0,5006,5005,1,0,0,0,5006,5007,1,0,0,
	0,5007,5103,1,0,0,0,5008,5103,5,264,0,0,5009,5018,5,263,0,0,5010,5015,3,
	598,299,0,5011,5012,5,406,0,0,5012,5014,3,598,299,0,5013,5011,1,0,0,0,5014,
	5017,1,0,0,0,5015,5013,1,0,0,0,5015,5016,1,0,0,0,5016,5019,1,0,0,0,5017,
	5015,1,0,0,0,5018,5010,1,0,0,0,5018,5019,1,0,0,0,5019,5023,1,0,0,0,5020,
	5021,5,506,0,0,5021,5022,5,267,0,0,5022,5024,5,380,0,0,5023,5020,1,0,0,
	0,5023,5024,1,0,0,0,5024,5026,1,0,0,0,5025,5027,3,284,142,0,5026,5025,1,
	0,0,0,5026,5027,1,0,0,0,5027,5103,1,0,0,0,5028,5030,3,1182,591,0,5029,5028,
	1,0,0,0,5029,5030,1,0,0,0,5030,5031,1,0,0,0,5031,5033,7,68,0,0,5032,5034,
	3,1020,510,0,5033,5032,1,0,0,0,5033,5034,1,0,0,0,5034,5103,1,0,0,0,5035,
	5037,5,144,0,0,5036,5035,1,0,0,0,5036,5037,1,0,0,0,5037,5038,1,0,0,0,5038,
	5103,5,262,0,0,5039,5041,3,748,374,0,5040,5042,3,1020,510,0,5041,5040,1,
	0,0,0,5041,5042,1,0,0,0,5042,5103,1,0,0,0,5043,5045,5,87,0,0,5044,5046,
	3,1020,510,0,5045,5044,1,0,0,0,5045,5046,1,0,0,0,5046,5103,1,0,0,0,5047,
	5048,4,294,113,0,5048,5103,5,104,0,0,5049,5103,5,260,0,0,5050,5053,5,154,
	0,0,5051,5052,5,506,0,0,5052,5054,3,1016,508,0,5053,5051,1,0,0,0,5053,5054,
	1,0,0,0,5054,5103,1,0,0,0,5055,5056,5,154,0,0,5056,5057,5,506,0,0,5057,
	5058,3,1016,508,0,5058,5059,5,666,0,0,5059,5060,3,998,499,0,5060,5103,1,
	0,0,0,5061,5062,5,185,0,0,5062,5103,5,327,0,0,5063,5084,5,459,0,0,5064,
	5066,5,467,0,0,5065,5067,3,970,485,0,5066,5065,1,0,0,0,5066,5067,1,0,0,
	0,5067,5068,1,0,0,0,5068,5085,3,1048,524,0,5069,5070,5,133,0,0,5070,5085,
	3,1076,538,0,5071,5072,5,356,0,0,5072,5085,3,1056,528,0,5073,5074,5,594,
	0,0,5074,5085,3,1052,526,0,5075,5076,5,647,0,0,5076,5085,3,1092,546,0,5077,
	5078,5,655,0,0,5078,5085,3,1060,530,0,5079,5080,5,367,0,0,5080,5085,3,1064,
	532,0,5081,5082,4,294,114,0,5082,5083,5,364,0,0,5083,5085,3,1016,508,0,
	5084,5064,1,0,0,0,5084,5069,1,0,0,0,5084,5071,1,0,0,0,5084,5073,1,0,0,0,
	5084,5075,1,0,0,0,5084,5077,1,0,0,0,5084,5079,1,0,0,0,5084,5081,1,0,0,0,
	5085,5103,1,0,0,0,5086,5087,5,594,0,0,5087,5089,5,327,0,0,5088,5090,3,1020,
	510,0,5089,5088,1,0,0,0,5089,5090,1,0,0,0,5090,5103,1,0,0,0,5091,5092,5,
	356,0,0,5092,5094,5,327,0,0,5093,5095,3,1020,510,0,5094,5093,1,0,0,0,5094,
	5095,1,0,0,0,5095,5103,1,0,0,0,5096,5097,5,594,0,0,5097,5098,5,86,0,0,5098,
	5103,3,1052,526,0,5099,5100,5,356,0,0,5100,5101,5,86,0,0,5101,5103,3,1056,
	528,0,5102,4883,1,0,0,0,5102,4885,1,0,0,0,5102,4890,1,0,0,0,5102,4900,1,
	0,0,0,5102,4909,1,0,0,0,5102,4916,1,0,0,0,5102,4924,1,0,0,0,5102,4932,1,
	0,0,0,5102,4933,1,0,0,0,5102,4940,1,0,0,0,5102,4951,1,0,0,0,5102,4953,1,
	0,0,0,5102,4962,1,0,0,0,5102,4980,1,0,0,0,5102,4992,1,0,0,0,5102,4995,1,
	0,0,0,5102,5000,1,0,0,0,5102,5004,1,0,0,0,5102,5008,1,0,0,0,5102,5009,1,
	0,0,0,5102,5029,1,0,0,0,5102,5036,1,0,0,0,5102,5039,1,0,0,0,5102,5043,1,
	0,0,0,5102,5047,1,0,0,0,5102,5049,1,0,0,0,5102,5050,1,0,0,0,5102,5055,1,
	0,0,0,5102,5061,1,0,0,0,5102,5063,1,0,0,0,5102,5086,1,0,0,0,5102,5091,1,
	0,0,0,5102,5096,1,0,0,0,5102,5099,1,0,0,0,5103,589,1,0,0,0,5104,5111,5,
	144,0,0,5105,5106,4,295,115,0,5106,5108,5,138,0,0,5107,5109,5,144,0,0,5108,
	5107,1,0,0,0,5108,5109,1,0,0,0,5109,5111,1,0,0,0,5110,5104,1,0,0,0,5110,
	5105,1,0,0,0,5111,591,1,0,0,0,5112,5114,4,296,116,0,5113,5115,5,572,0,0,
	5114,5113,1,0,0,0,5114,5115,1,0,0,0,5115,5118,1,0,0,0,5116,5118,1,0,0,0,
	5117,5112,1,0,0,0,5117,5116,1,0,0,0,5118,593,1,0,0,0,5119,5120,7,64,0,0,
	5120,595,1,0,0,0,5121,5122,3,594,297,0,5122,5123,3,1118,559,0,5123,597,
	1,0,0,0,5124,5125,5,73,0,0,5125,5132,5,167,0,0,5126,5127,5,103,0,0,5127,
	5132,5,338,0,0,5128,5129,5,247,0,0,5129,5132,5,140,0,0,5130,5132,7,69,0,
	0,5131,5124,1,0,0,0,5131,5126,1,0,0,0,5131,5128,1,0,0,0,5131,5130,1,0,0,
	0,5132,599,1,0,0,0,5133,5134,5,71,0,0,5134,5171,3,1150,575,0,5135,5136,
	5,7,0,0,5136,5137,5,521,0,0,5137,5138,3,602,301,0,5138,5141,5,530,0,0,5139,
	5142,3,1118,559,0,5140,5142,5,478,0,0,5141,5139,1,0,0,0,5141,5140,1,0,0,
	0,5142,5171,1,0,0,0,5143,5145,5,18,0,0,5144,5146,3,1024,512,0,5145,5144,
	1,0,0,0,5145,5146,1,0,0,0,5146,5156,1,0,0,0,5147,5157,3,620,310,0,5148,
	5153,3,616,308,0,5149,5150,5,406,0,0,5150,5152,3,616,308,0,5151,5149,1,
	0,0,0,5152,5155,1,0,0,0,5153,5151,1,0,0,0,5153,5154,1,0,0,0,5154,5157,1,
	0,0,0,5155,5153,1,0,0,0,5156,5147,1,0,0,0,5156,5148,1,0,0,0,5157,5171,1,
	0,0,0,5158,5160,5,538,0,0,5159,5161,7,70,0,0,5160,5159,1,0,0,0,5160,5161,
	1,0,0,0,5161,5162,1,0,0,0,5162,5171,3,666,333,0,5163,5164,5,546,0,0,5164,
	5165,5,521,0,0,5165,5166,5,528,0,0,5166,5167,5,7,0,0,5167,5171,3,624,312,
	0,5168,5169,4,300,117,0,5169,5171,5,56,0,0,5170,5133,1,0,0,0,5170,5135,
	1,0,0,0,5170,5143,1,0,0,0,5170,5158,1,0,0,0,5170,5163,1,0,0,0,5170,5168,
	1,0,0,0,5171,601,1,0,0,0,5172,5175,3,604,302,0,5173,5175,3,608,304,0,5174,
	5172,1,0,0,0,5174,5173,1,0,0,0,5175,603,1,0,0,0,5176,5181,3,606,303,0,5177,
	5178,5,406,0,0,5178,5180,3,606,303,0,5179,5177,1,0,0,0,5180,5183,1,0,0,
	0,5181,5179,1,0,0,0,5181,5182,1,0,0,0,5182,605,1,0,0,0,5183,5181,1,0,0,
	0,5184,5186,3,1092,546,0,5185,5187,3,610,305,0,5186,5185,1,0,0,0,5186,5187,
	1,0,0,0,5187,607,1,0,0,0,5188,5189,3,1092,546,0,5189,5190,5,32,0,0,5190,
	5191,5,409,0,0,5191,5192,3,52,26,0,5192,5194,5,410,0,0,5193,5195,3,610,
	305,0,5194,5193,1,0,0,0,5194,5195,1,0,0,0,5195,609,1,0,0,0,5196,5197,3,
	398,199,0,5197,5199,5,409,0,0,5198,5200,3,614,307,0,5199,5198,1,0,0,0,5199,
	5200,1,0,0,0,5200,5201,1,0,0,0,5201,5202,5,410,0,0,5202,611,1,0,0,0,5203,
	5206,3,1118,559,0,5204,5206,5,593,0,0,5205,5203,1,0,0,0,5205,5204,1,0,0,
	0,5206,613,1,0,0,0,5207,5212,3,612,306,0,5208,5209,5,406,0,0,5209,5211,
	3,612,306,0,5210,5208,1,0,0,0,5211,5214,1,0,0,0,5212,5210,1,0,0,0,5212,
	5213,1,0,0,0,5213,615,1,0,0,0,5214,5212,1,0,0,0,5215,5231,7,71,0,0,5216,
	5218,3,618,309,0,5217,5216,1,0,0,0,5217,5218,1,0,0,0,5218,5219,1,0,0,0,
	5219,5231,5,183,0,0,5220,5221,5,275,0,0,5221,5223,5,183,0,0,5222,5224,3,
	772,386,0,5223,5222,1,0,0,0,5223,5224,1,0,0,0,5224,5231,1,0,0,0,5225,5226,
	4,308,118,0,5226,5227,5,267,0,0,5227,5231,5,7,0,0,5228,5229,4,308,119,0,
	5229,5231,5,583,0,0,5230,5215,1,0,0,0,5230,5217,1,0,0,0,5230,5220,1,0,0,
	0,5230,5225,1,0,0,0,5230,5228,1,0,0,0,5231,617,1,0,0,0,5232,5233,7,72,0,
	0,5233,619,1,0,0,0,5234,5242,7,18,0,0,5235,5236,5,682,0,0,5236,5237,5,598,
	0,0,5237,5243,5,548,0,0,5238,5240,3,1120,560,0,5239,5241,3,622,311,0,5240,
	5239,1,0,0,0,5240,5241,1,0,0,0,5241,5243,1,0,0,0,5242,5235,1,0,0,0,5242,
	5238,1,0,0,0,5242,5243,1,0,0,0,5243,621,1,0,0,0,5244,5245,4,311,120,0,5245,
	5246,5,506,0,0,5246,5251,5,137,0,0,5247,5248,5,682,0,0,5248,5249,5,598,
	0,0,5249,5251,5,548,0,0,5250,5244,1,0,0,0,5250,5247,1,0,0,0,5251,623,1,
	0,0,0,5252,5253,3,1092,546,0,5253,5255,3,630,315,0,5254,5256,3,610,305,
	0,5255,5254,1,0,0,0,5255,5256,1,0,0,0,5256,5259,1,0,0,0,5257,5258,5,520,
	0,0,5258,5260,5,175,0,0,5259,5257,1,0,0,0,5259,5260,1,0,0,0,5260,5263,1,
	0,0,0,5261,5263,3,626,313,0,5262,5252,1,0,0,0,5262,5261,1,0,0,0,5263,625,
	1,0,0,0,5264,5269,3,628,314,0,5265,5266,5,406,0,0,5266,5268,3,628,314,0,
	5267,5265,1,0,0,0,5268,5271,1,0,0,0,5269,5267,1,0,0,0,5269,5270,1,0,0,0,
	5270,627,1,0,0,0,5271,5269,1,0,0,0,5272,5274,3,1092,546,0,5273,5275,3,610,
	305,0,5274,5273,1,0,0,0,5274,5275,1,0,0,0,5275,5278,1,0,0,0,5276,5277,5,
	520,0,0,5277,5279,5,175,0,0,5278,5276,1,0,0,0,5278,5279,1,0,0,0,5279,629,
	1,0,0,0,5280,5281,5,32,0,0,5281,5282,5,409,0,0,5282,5283,3,52,26,0,5283,
	5284,5,410,0,0,5284,631,1,0,0,0,5285,5290,3,634,317,0,5286,5290,3,644,322,
	0,5287,5290,3,646,323,0,5288,5290,3,650,325,0,5289,5285,1,0,0,0,5289,5286,
	1,0,0,0,5289,5287,1,0,0,0,5289,5288,1,0,0,0,5290,633,1,0,0,0,5291,5292,
	5,459,0,0,5292,5293,5,739,0,0,5293,5294,5,512,0,0,5294,5295,3,1118,559,
	0,5295,5297,5,354,0,0,5296,5298,3,1180,590,0,5297,5296,1,0,0,0,5297,5298,
	1,0,0,0,5298,5299,1,0,0,0,5299,5301,7,73,0,0,5300,5302,3,636,318,0,5301,
	5300,1,0,0,0,5301,5302,1,0,0,0,5302,5304,1,0,0,0,5303,5305,3,640,320,0,
	5304,5303,1,0,0,0,5304,5305,1,0,0,0,5305,5307,1,0,0,0,5306,5308,3,642,321,
	0,5307,5306,1,0,0,0,5307,5308,1,0,0,0,5308,635,1,0,0,0,5309,5311,5,741,
	0,0,5310,5312,3,1180,590,0,5311,5310,1,0,0,0,5311,5312,1,0,0,0,5312,5313,
	1,0,0,0,5313,5320,3,638,319,0,5314,5316,5,406,0,0,5315,5314,1,0,0,0,5315,
	5316,1,0,0,0,5316,5317,1,0,0,0,5317,5319,3,638,319,0,5318,5315,1,0,0,0,
	5319,5322,1,0,0,0,5320,5318,1,0,0,0,5320,5321,1,0,0,0,5321,637,1,0,0,0,
	5322,5320,1,0,0,0,5323,5326,5,380,0,0,5324,5325,5,392,0,0,5325,5327,5,380,
	0,0,5326,5324,1,0,0,0,5326,5327,1,0,0,0,5327,639,1,0,0,0,5328,5330,5,738,
	0,0,5329,5331,3,1180,590,0,5330,5329,1,0,0,0,5330,5331,1,0,0,0,5331,5332,
	1,0,0,0,5332,5333,5,380,0,0,5333,641,1,0,0,0,5334,5335,7,74,0,0,5335,643,
	1,0,0,0,5336,5337,5,428,0,0,5337,5338,5,739,0,0,5338,5339,5,512,0,0,5339,
	5341,3,1112,556,0,5340,5342,3,636,318,0,5341,5340,1,0,0,0,5341,5342,1,0,
	0,0,5342,5344,1,0,0,0,5343,5345,3,640,320,0,5344,5343,1,0,0,0,5344,5345,
	1,0,0,0,5345,5347,1,0,0,0,5346,5348,3,642,321,0,5347,5346,1,0,0,0,5347,
	5348,1,0,0,0,5348,5350,1,0,0,0,5349,5351,5,504,0,0,5350,5349,1,0,0,0,5350,
	5351,1,0,0,0,5351,645,1,0,0,0,5352,5353,5,619,0,0,5353,5354,5,739,0,0,5354,
	5355,5,512,0,0,5355,5358,3,1118,559,0,5356,5357,5,506,0,0,5357,5359,3,648,
	324,0,5358,5356,1,0,0,0,5358,5359,1,0,0,0,5359,647,1,0,0,0,5360,5367,3,
	1132,566,0,5361,5363,5,406,0,0,5362,5361,1,0,0,0,5362,5363,1,0,0,0,5363,
	5364,1,0,0,0,5364,5366,3,1132,566,0,5365,5362,1,0,0,0,5366,5369,1,0,0,0,
	5367,5365,1,0,0,0,5367,5368,1,0,0,0,5368,649,1,0,0,0,5369,5367,1,0,0,0,
	5370,5371,5,487,0,0,5371,5372,5,739,0,0,5372,5373,5,512,0,0,5373,5375,3,
	1112,556,0,5374,5376,5,504,0,0,5375,5374,1,0,0,0,5375,5376,1,0,0,0,5376,
	651,1,0,0,0,5377,5384,3,654,327,0,5378,5384,3,656,328,0,5379,5384,3,660,
	330,0,5380,5384,3,662,331,0,5381,5382,4,326,121,0,5382,5384,3,664,332,0,
	5383,5377,1,0,0,0,5383,5378,1,0,0,0,5383,5379,1,0,0,0,5383,5380,1,0,0,0,
	5383,5381,1,0,0,0,5384,653,1,0,0,0,5385,5386,7,75,0,0,5386,5389,3,1092,
	546,0,5387,5390,3,1146,573,0,5388,5390,3,1036,518,0,5389,5387,1,0,0,0,5389,
	5388,1,0,0,0,5389,5390,1,0,0,0,5390,655,1,0,0,0,5391,5402,7,75,0,0,5392,
	5393,4,328,122,0,5393,5403,5,138,0,0,5394,5395,4,328,123,0,5395,5403,5,
	250,0,0,5396,5397,4,328,124,0,5397,5398,5,20,0,0,5398,5399,5,383,0,0,5399,
	5403,3,1170,585,0,5400,5401,4,328,125,0,5401,5403,5,63,0,0,5402,5392,1,
	0,0,0,5402,5394,1,0,0,0,5402,5396,1,0,0,0,5402,5400,1,0,0,0,5402,5403,1,
	0,0,0,5403,5404,1,0,0,0,5404,5405,3,658,329,0,5405,657,1,0,0,0,5406,5419,
	3,268,134,0,5407,5412,4,329,126,0,5408,5413,3,222,111,0,5409,5413,3,234,
	117,0,5410,5413,3,266,133,0,5411,5413,3,408,204,0,5412,5408,1,0,0,0,5412,
	5409,1,0,0,0,5412,5410,1,0,0,0,5412,5411,1,0,0,0,5413,5419,1,0,0,0,5414,
	5415,4,329,127,0,5415,5416,5,506,0,0,5416,5417,5,98,0,0,5417,5419,3,1132,
	566,0,5418,5406,1,0,0,0,5418,5407,1,0,0,0,5418,5414,1,0,0,0,5419,659,1,
	0,0,0,5420,5421,5,23,0,0,5421,5422,3,1170,585,0,5422,661,1,0,0,0,5423,5424,
	5,665,0,0,5424,5425,3,1118,559,0,5425,663,1,0,0,0,5426,5427,5,744,0,0,5427,
	665,1,0,0,0,5428,5429,6,333,-1,0,5429,5435,3,668,334,0,5430,5432,5,533,
	0,0,5431,5433,3,750,375,0,5432,5431,1,0,0,0,5432,5433,1,0,0,0,5433,5434,
	1,0,0,0,5434,5436,7,76,0,0,5435,5430,1,0,0,0,5435,5436,1,0,0,0,5436,5440,
	1,0,0,0,5437,5438,5,573,0,0,5438,5440,3,666,333,4,5439,5428,1,0,0,0,5439,
	5437,1,0,0,0,5440,5452,1,0,0,0,5441,5442,10,3,0,0,5442,5443,7,77,0,0,5443,
	5451,3,666,333,4,5444,5445,10,2,0,0,5445,5446,5,685,0,0,5446,5451,3,666,
	333,3,5447,5448,10,1,0,0,5448,5449,7,78,0,0,5449,5451,3,666,333,2,5450,
	5441,1,0,0,0,5450,5444,1,0,0,0,5450,5447,1,0,0,0,5451,5454,1,0,0,0,5452,
	5450,1,0,0,0,5452,5453,1,0,0,0,5453,667,1,0,0,0,5454,5452,1,0,0,0,5455,
	5456,6,334,-1,0,5456,5457,3,672,336,0,5457,5475,1,0,0,0,5458,5459,10,3,
	0,0,5459,5461,5,533,0,0,5460,5462,3,750,375,0,5461,5460,1,0,0,0,5461,5462,
	1,0,0,0,5462,5463,1,0,0,0,5463,5474,5,576,0,0,5464,5465,10,2,0,0,5465,5466,
	3,670,335,0,5466,5467,3,672,336,0,5467,5474,1,0,0,0,5468,5469,10,1,0,0,
	5469,5470,3,670,335,0,5470,5471,7,79,0,0,5471,5472,3,280,140,0,5472,5474,
	1,0,0,0,5473,5458,1,0,0,0,5473,5464,1,0,0,0,5473,5468,1,0,0,0,5474,5477,
	1,0,0,0,5475,5473,1,0,0,0,5475,5476,1,0,0,0,5476,669,1,0,0,0,5477,5475,
	1,0,0,0,5478,5479,7,80,0,0,5479,671,1,0,0,0,5480,5494,3,676,338,0,5481,
	5483,3,750,375,0,5482,5481,1,0,0,0,5482,5483,1,0,0,0,5483,5484,1,0,0,0,
	5484,5495,3,674,337,0,5485,5486,4,336,134,0,5486,5488,5,763,0,0,5487,5489,
	5,698,0,0,5488,5487,1,0,0,0,5488,5489,1,0,0,0,5489,5490,1,0,0,0,5490,5495,
	3,762,381,0,5491,5492,5,313,0,0,5492,5493,5,542,0,0,5493,5495,3,676,338,
	0,5494,5482,1,0,0,0,5494,5485,1,0,0,0,5494,5491,1,0,0,0,5494,5495,1,0,0,
	0,5495,673,1,0,0,0,5496,5502,5,530,0,0,5497,5503,3,280,140,0,5498,5499,
	5,409,0,0,5499,5500,3,746,373,0,5500,5501,5,410,0,0,5501,5503,1,0,0,0,5502,
	5497,1,0,0,0,5502,5498,1,0,0,0,5503,5518,1,0,0,0,5504,5505,5,435,0,0,5505,
	5506,3,676,338,0,5506,5507,5,430,0,0,5507,5508,3,672,336,0,5508,5518,1,
	0,0,0,5509,5510,5,542,0,0,5510,5513,3,678,339,0,5511,5512,5,132,0,0,5512,
	5514,3,678,339,0,5513,5511,1,0,0,0,5513,5514,1,0,0,0,5514,5518,1,0,0,0,
	5515,5516,5,602,0,0,5516,5518,3,676,338,0,5517,5496,1,0,0,0,5517,5504,1,
	0,0,0,5517,5509,1,0,0,0,5517,5515,1,0,0,0,5518,675,1,0,0,0,5519,5520,6,
	338,-1,0,5520,5521,3,678,339,0,5521,5548,1,0,0,0,5522,5523,10,7,0,0,5523,
	5524,5,402,0,0,5524,5547,3,676,338,8,5525,5526,10,6,0,0,5526,5527,7,81,
	0,0,5527,5547,3,676,338,7,5528,5529,10,5,0,0,5529,5530,7,82,0,0,5530,5547,
	3,676,338,6,5531,5532,10,3,0,0,5532,5533,7,83,0,0,5533,5547,3,676,338,4,
	5534,5535,10,2,0,0,5535,5536,5,401,0,0,5536,5547,3,676,338,3,5537,5538,
	10,1,0,0,5538,5539,5,404,0,0,5539,5547,3,676,338,2,5540,5541,10,4,0,0,5541,
	5542,7,82,0,0,5542,5543,5,527,0,0,5543,5544,3,666,333,0,5544,5545,3,754,
	377,0,5545,5547,1,0,0,0,5546,5522,1,0,0,0,5546,5525,1,0,0,0,5546,5528,1,
	0,0,0,5546,5531,1,0,0,0,5546,5534,1,0,0,0,5546,5537,1,0,0,0,5546,5540,1,
	0,0,0,5547,5550,1,0,0,0,5548,5546,1,0,0,0,5548,5549,1,0,0,0,5549,677,1,
	0,0,0,5550,5548,1,0,0,0,5551,5552,6,339,-1,0,5552,5656,3,730,365,0,5553,
	5555,3,1036,518,0,5554,5556,3,682,341,0,5555,5554,1,0,0,0,5555,5556,1,0,
	0,0,5556,5656,1,0,0,0,5557,5656,3,706,353,0,5558,5656,3,724,362,0,5559,
	5656,3,1138,569,0,5560,5656,5,420,0,0,5561,5656,3,684,342,0,5562,5563,4,
	339,142,0,5563,5656,3,686,343,0,5564,5565,4,339,143,0,5565,5656,3,688,344,
	0,5566,5567,7,84,0,0,5567,5656,3,678,339,14,5568,5569,3,752,376,0,5569,
	5570,3,678,339,13,5570,5656,1,0,0,0,5571,5573,5,301,0,0,5572,5571,1,0,0,
	0,5572,5573,1,0,0,0,5573,5574,1,0,0,0,5574,5575,5,409,0,0,5575,5576,3,746,
	373,0,5576,5577,5,410,0,0,5577,5656,1,0,0,0,5578,5580,5,496,0,0,5579,5578,
	1,0,0,0,5579,5580,1,0,0,0,5580,5581,1,0,0,0,5581,5656,3,280,140,0,5582,
	5583,5,411,0,0,5583,5584,3,1118,559,0,5584,5585,3,666,333,0,5585,5586,5,
	412,0,0,5586,5656,1,0,0,0,5587,5588,5,557,0,0,5588,5589,3,700,350,0,5589,
	5590,5,60,0,0,5590,5591,5,409,0,0,5591,5593,3,676,338,0,5592,5594,3,704,
	352,0,5593,5592,1,0,0,0,5593,5594,1,0,0,0,5594,5595,1,0,0,0,5595,5596,5,
	410,0,0,5596,5656,1,0,0,0,5597,5598,5,437,0,0,5598,5656,3,678,339,8,5599,
	5600,5,448,0,0,5600,5601,5,409,0,0,5601,5602,3,666,333,0,5602,5603,5,431,
	0,0,5603,5605,3,744,372,0,5604,5606,3,680,340,0,5605,5604,1,0,0,0,5605,
	5606,1,0,0,0,5606,5607,1,0,0,0,5607,5608,5,410,0,0,5608,5656,1,0,0,0,5609,
	5611,5,447,0,0,5610,5612,3,666,333,0,5611,5610,1,0,0,0,5611,5612,1,0,0,
	0,5612,5616,1,0,0,0,5613,5614,3,738,369,0,5614,5615,3,740,370,0,5615,5617,
	1,0,0,0,5616,5613,1,0,0,0,5617,5618,1,0,0,0,5618,5616,1,0,0,0,5618,5619,
	1,0,0,0,5619,5621,1,0,0,0,5620,5622,3,742,371,0,5621,5620,1,0,0,0,5621,
	5622,1,0,0,0,5622,5623,1,0,0,0,5623,5624,5,16,0,0,5624,5656,1,0,0,0,5625,
	5626,5,457,0,0,5626,5627,5,409,0,0,5627,5628,3,666,333,0,5628,5629,5,406,
	0,0,5629,5630,3,744,372,0,5630,5631,5,410,0,0,5631,5656,1,0,0,0,5632,5633,
	5,457,0,0,5633,5634,5,409,0,0,5634,5635,3,666,333,0,5635,5636,5,666,0,0,
	5636,5637,3,926,463,0,5637,5638,5,410,0,0,5638,5656,1,0,0,0,5639,5640,5,
	478,0,0,5640,5641,5,409,0,0,5641,5642,3,1126,563,0,5642,5643,5,410,0,0,
	5643,5656,1,0,0,0,5644,5645,5,671,0,0,5645,5646,5,409,0,0,5646,5647,3,1126,
	563,0,5647,5648,5,410,0,0,5648,5656,1,0,0,0,5649,5650,5,527,0,0,5650,5651,
	3,666,333,0,5651,5652,3,754,377,0,5652,5653,5,391,0,0,5653,5654,3,666,333,
	0,5654,5656,1,0,0,0,5655,5551,1,0,0,0,5655,5553,1,0,0,0,5655,5557,1,0,0,
	0,5655,5558,1,0,0,0,5655,5559,1,0,0,0,5655,5560,1,0,0,0,5655,5561,1,0,0,
	0,5655,5562,1,0,0,0,5655,5564,1,0,0,0,5655,5566,1,0,0,0,5655,5568,1,0,0,
	0,5655,5572,1,0,0,0,5655,5579,1,0,0,0,5655,5582,1,0,0,0,5655,5587,1,0,0,
	0,5655,5597,1,0,0,0,5655,5599,1,0,0,0,5655,5609,1,0,0,0,5655,5625,1,0,0,
	0,5655,5632,1,0,0,0,5655,5639,1,0,0,0,5655,5644,1,0,0,0,5655,5649,1,0,0,
	0,5656,5665,1,0,0,0,5657,5658,10,15,0,0,5658,5659,5,379,0,0,5659,5664,3,
	678,339,16,5660,5661,10,21,0,0,5661,5662,5,452,0,0,5662,5664,3,1170,585,
	0,5663,5657,1,0,0,0,5663,5660,1,0,0,0,5664,5667,1,0,0,0,5665,5663,1,0,0,
	0,5665,5666,1,0,0,0,5666,679,1,0,0,0,5667,5665,1,0,0,0,5668,5669,4,340,
	146,0,5669,5670,5,761,0,0,5670,681,1,0,0,0,5671,5672,4,341,147,0,5672,5673,
	5,414,0,0,5673,5678,3,1144,572,0,5674,5675,4,341,148,0,5675,5676,5,415,
	0,0,5676,5678,3,1144,572,0,5677,5671,1,0,0,0,5677,5674,1,0,0,0,5678,683,
	1,0,0,0,5679,5680,5,70,0,0,5680,5682,5,409,0,0,5681,5683,5,484,0,0,5682,
	5681,1,0,0,0,5682,5683,1,0,0,0,5683,5684,1,0,0,0,5684,5685,3,698,349,0,
	5685,5688,5,410,0,0,5686,5687,4,342,149,0,5687,5689,3,690,345,0,5688,5686,
	1,0,0,0,5688,5689,1,0,0,0,5689,5811,1,0,0,0,5690,5691,7,85,0,0,5691,5692,
	5,409,0,0,5692,5693,3,698,349,0,5693,5696,5,410,0,0,5694,5695,4,342,150,
	0,5695,5697,3,690,345,0,5696,5694,1,0,0,0,5696,5697,1,0,0,0,5697,5811,1,
	0,0,0,5698,5699,4,342,151,0,5699,5811,3,696,348,0,5700,5701,5,458,0,0,5701,
	5703,5,409,0,0,5702,5704,5,427,0,0,5703,5702,1,0,0,0,5703,5704,1,0,0,0,
	5704,5705,1,0,0,0,5705,5706,5,393,0,0,5706,5709,5,410,0,0,5707,5708,4,342,
	152,0,5708,5710,3,690,345,0,5709,5707,1,0,0,0,5709,5710,1,0,0,0,5710,5811,
	1,0,0,0,5711,5712,5,458,0,0,5712,5720,5,409,0,0,5713,5715,5,427,0,0,5714,
	5713,1,0,0,0,5714,5715,1,0,0,0,5715,5716,1,0,0,0,5716,5721,5,393,0,0,5717,
	5721,3,698,349,0,5718,5719,5,484,0,0,5719,5721,3,746,373,0,5720,5714,1,
	0,0,0,5720,5717,1,0,0,0,5720,5718,1,0,0,0,5721,5722,1,0,0,0,5722,5725,5,
	410,0,0,5723,5724,4,342,153,0,5724,5726,3,690,345,0,5725,5723,1,0,0,0,5725,
	5726,1,0,0,0,5726,5811,1,0,0,0,5727,5728,5,566,0,0,5728,5730,5,409,0,0,
	5729,5731,5,484,0,0,5730,5729,1,0,0,0,5730,5731,1,0,0,0,5731,5732,1,0,0,
	0,5732,5733,3,698,349,0,5733,5736,5,410,0,0,5734,5735,4,342,154,0,5735,
	5737,3,690,345,0,5736,5734,1,0,0,0,5736,5737,1,0,0,0,5737,5811,1,0,0,0,
	5738,5739,5,558,0,0,5739,5741,5,409,0,0,5740,5742,5,484,0,0,5741,5740,1,
	0,0,0,5741,5742,1,0,0,0,5742,5743,1,0,0,0,5743,5744,3,698,349,0,5744,5747,
	5,410,0,0,5745,5746,4,342,155,0,5746,5748,3,690,345,0,5747,5745,1,0,0,0,
	5747,5748,1,0,0,0,5748,5811,1,0,0,0,5749,5750,5,638,0,0,5750,5751,5,409,
	0,0,5751,5752,3,698,349,0,5752,5755,5,410,0,0,5753,5754,4,342,156,0,5754,
	5756,3,690,345,0,5755,5753,1,0,0,0,5755,5756,1,0,0,0,5756,5811,1,0,0,0,
	5757,5758,5,674,0,0,5758,5759,5,409,0,0,5759,5760,3,698,349,0,5760,5763,
	5,410,0,0,5761,5762,4,342,157,0,5762,5764,3,690,345,0,5763,5761,1,0,0,0,
	5763,5764,1,0,0,0,5764,5811,1,0,0,0,5765,5766,5,635,0,0,5766,5767,5,409,
	0,0,5767,5768,3,698,349,0,5768,5771,5,410,0,0,5769,5770,4,342,158,0,5770,
	5772,3,690,345,0,5771,5769,1,0,0,0,5771,5772,1,0,0,0,5772,5811,1,0,0,0,
	5773,5774,5,677,0,0,5774,5775,5,409,0,0,5775,5776,3,698,349,0,5776,5779,
	5,410,0,0,5777,5778,4,342,159,0,5778,5780,3,690,345,0,5779,5777,1,0,0,0,
	5779,5780,1,0,0,0,5780,5811,1,0,0,0,5781,5782,5,643,0,0,5782,5784,5,409,
	0,0,5783,5785,5,484,0,0,5784,5783,1,0,0,0,5784,5785,1,0,0,0,5785,5786,1,
	0,0,0,5786,5787,3,698,349,0,5787,5790,5,410,0,0,5788,5789,4,342,160,0,5789,
	5791,3,690,345,0,5790,5788,1,0,0,0,5790,5791,1,0,0,0,5791,5811,1,0,0,0,
	5792,5793,5,513,0,0,5793,5795,5,409,0,0,5794,5796,5,484,0,0,5795,5794,1,
	0,0,0,5795,5796,1,0,0,0,5796,5797,1,0,0,0,5797,5799,3,746,373,0,5798,5800,
	3,328,164,0,5799,5798,1,0,0,0,5799,5800,1,0,0,0,5800,5803,1,0,0,0,5801,
	5802,5,616,0,0,5802,5804,3,1146,573,0,5803,5801,1,0,0,0,5803,5804,1,0,0,
	0,5804,5805,1,0,0,0,5805,5808,5,410,0,0,5806,5807,4,342,161,0,5807,5809,
	3,690,345,0,5808,5806,1,0,0,0,5808,5809,1,0,0,0,5809,5811,1,0,0,0,5810,
	5679,1,0,0,0,5810,5690,1,0,0,0,5810,5698,1,0,0,0,5810,5700,1,0,0,0,5810,
	5711,1,0,0,0,5810,5727,1,0,0,0,5810,5738,1,0,0,0,5810,5749,1,0,0,0,5810,
	5757,1,0,0,0,5810,5765,1,0,0,0,5810,5773,1,0,0,0,5810,5781,1,0,0,0,5810,
	5792,1,0,0,0,5811,685,1,0,0,0,5812,5813,5,702,0,0,5813,5814,5,409,0,0,5814,
	5815,3,746,373,0,5815,5816,5,410,0,0,5816,687,1,0,0,0,5817,5818,7,86,0,
	0,5818,5819,3,1178,589,0,5819,5820,3,690,345,0,5820,5860,1,0,0,0,5821,5822,
	5,718,0,0,5822,5823,3,762,381,0,5823,5824,3,690,345,0,5824,5860,1,0,0,0,
	5825,5826,7,87,0,0,5826,5827,5,409,0,0,5827,5829,3,666,333,0,5828,5830,
	3,692,346,0,5829,5828,1,0,0,0,5829,5830,1,0,0,0,5830,5831,1,0,0,0,5831,
	5833,5,410,0,0,5832,5834,3,694,347,0,5833,5832,1,0,0,0,5833,5834,1,0,0,
	0,5834,5835,1,0,0,0,5835,5836,3,690,345,0,5836,5860,1,0,0,0,5837,5838,7,
	88,0,0,5838,5840,3,760,380,0,5839,5841,3,694,347,0,5840,5839,1,0,0,0,5840,
	5841,1,0,0,0,5841,5842,1,0,0,0,5842,5843,3,690,345,0,5843,5860,1,0,0,0,
	5844,5845,5,717,0,0,5845,5846,5,409,0,0,5846,5847,3,666,333,0,5847,5848,
	5,406,0,0,5848,5849,3,678,339,0,5849,5852,5,410,0,0,5850,5851,5,507,0,0,
	5851,5853,7,89,0,0,5852,5850,1,0,0,0,5852,5853,1,0,0,0,5853,5855,1,0,0,
	0,5854,5856,3,694,347,0,5855,5854,1,0,0,0,5855,5856,1,0,0,0,5856,5857,1,
	0,0,0,5857,5858,3,690,345,0,5858,5860,1,0,0,0,5859,5817,1,0,0,0,5859,5821,
	1,0,0,0,5859,5825,1,0,0,0,5859,5837,1,0,0,0,5859,5844,1,0,0,0,5860,689,
	1,0,0,0,5861,5864,5,721,0,0,5862,5865,3,1114,557,0,5863,5865,3,302,151,
	0,5864,5862,1,0,0,0,5864,5863,1,0,0,0,5865,691,1,0,0,0,5866,5869,5,406,
	0,0,5867,5870,3,1134,567,0,5868,5870,5,420,0,0,5869,5867,1,0,0,0,5869,5868,
	1,0,0,0,5870,5873,1,0,0,0,5871,5872,5,406,0,0,5872,5874,3,666,333,0,5873,
	5871,1,0,0,0,5873,5874,1,0,0,0,5874,693,1,0,0,0,5875,5876,7,90,0,0,5876,
	5877,5,719,0,0,5877,695,1,0,0,0,5878,5879,5,697,0,0,5879,5880,5,409,0,0,
	5880,5881,3,698,349,0,5881,5883,5,410,0,0,5882,5884,3,690,345,0,5883,5882,
	1,0,0,0,5883,5884,1,0,0,0,5884,5895,1,0,0,0,5885,5886,5,696,0,0,5886,5887,
	5,409,0,0,5887,5888,3,698,349,0,5888,5889,5,406,0,0,5889,5890,3,698,349,
	0,5890,5892,5,410,0,0,5891,5893,3,690,345,0,5892,5891,1,0,0,0,5892,5893,
	1,0,0,0,5893,5895,1,0,0,0,5894,5878,1,0,0,0,5894,5885,1,0,0,0,5895,697,
	1,0,0,0,5896,5898,5,427,0,0,5897,5896,1,0,0,0,5897,5898,1,0,0,0,5898,5899,
	1,0,0,0,5899,5900,3,666,333,0,5900,699,1,0,0,0,5901,5907,3,702,351,0,5902,
	5903,5,409,0,0,5903,5904,3,702,351,0,5904,5905,5,410,0,0,5905,5907,1,0,
	0,0,5906,5901,1,0,0,0,5906,5902,1,0,0,0,5907,701,1,0,0,0,5908,5913,3,1126,
	563,0,5909,5910,5,406,0,0,5910,5912,3,1126,563,0,5911,5909,1,0,0,0,5912,
	5915,1,0,0,0,5913,5911,1,0,0,0,5913,5914,1,0,0,0,5914,703,1,0,0,0,5915,
	5913,1,0,0,0,5916,5917,5,530,0,0,5917,5918,5,75,0,0,5918,5932,5,222,0,0,
	5919,5920,5,530,0,0,5920,5921,5,569,0,0,5921,5922,5,26,0,0,5922,5926,5,
	222,0,0,5923,5924,5,682,0,0,5924,5925,5,267,0,0,5925,5927,5,136,0,0,5926,
	5923,1,0,0,0,5926,5927,1,0,0,0,5927,5932,1,0,0,0,5928,5929,5,682,0,0,5929,
	5930,5,267,0,0,5930,5932,5,136,0,0,5931,5916,1,0,0,0,5931,5919,1,0,0,0,
	5931,5928,1,0,0,0,5932,705,1,0,0,0,5933,5934,5,450,0,0,5934,5935,5,409,
	0,0,5935,5938,3,746,373,0,5936,5937,5,666,0,0,5937,5939,3,926,463,0,5938,
	5936,1,0,0,0,5938,5939,1,0,0,0,5939,5940,1,0,0,0,5940,5941,5,410,0,0,5941,
	6207,1,0,0,0,5942,5944,5,464,0,0,5943,5945,3,1178,589,0,5944,5943,1,0,0,
	0,5944,5945,1,0,0,0,5945,6207,1,0,0,0,5946,5947,5,112,0,0,5947,6207,3,760,
	380,0,5948,5949,5,113,0,0,5949,6207,3,760,380,0,5950,5951,5,158,0,0,5951,
	6207,3,760,380,0,5952,5953,5,526,0,0,5953,5954,5,409,0,0,5954,5955,3,666,
	333,0,5955,5956,5,406,0,0,5956,5957,3,666,333,0,5957,5958,5,406,0,0,5958,
	5959,3,666,333,0,5959,5960,5,406,0,0,5960,5961,3,666,333,0,5961,5962,5,
	410,0,0,5962,6207,1,0,0,0,5963,5964,5,527,0,0,5964,5965,5,409,0,0,5965,
	5968,3,666,333,0,5966,5967,5,406,0,0,5967,5969,3,666,333,0,5968,5966,1,
	0,0,0,5969,5970,1,0,0,0,5970,5968,1,0,0,0,5970,5971,1,0,0,0,5971,5972,1,
	0,0,0,5972,5973,5,410,0,0,5973,6207,1,0,0,0,5974,5975,5,541,0,0,5975,5976,
	5,409,0,0,5976,5977,3,666,333,0,5977,5978,5,406,0,0,5978,5979,3,666,333,
	0,5979,5980,5,410,0,0,5980,6207,1,0,0,0,5981,5982,5,219,0,0,5982,6207,3,
	760,380,0,5983,5984,5,223,0,0,5984,6207,3,760,380,0,5985,5986,5,612,0,0,
	5986,5987,5,409,0,0,5987,5988,3,666,333,0,5988,5989,5,406,0,0,5989,5990,
	3,666,333,0,5990,5991,5,410,0,0,5991,6207,1,0,0,0,5992,5993,5,305,0,0,5993,
	6207,3,760,380,0,5994,5995,5,352,0,0,5995,6207,3,760,380,0,5996,5997,5,
	349,0,0,5997,5998,5,409,0,0,5998,6001,3,666,333,0,5999,6000,5,406,0,0,6000,
	6002,3,666,333,0,6001,5999,1,0,0,0,6001,6002,1,0,0,0,6002,6003,1,0,0,0,
	6003,6004,5,410,0,0,6004,6207,1,0,0,0,6005,6207,3,720,360,0,6006,6007,5,
	364,0,0,6007,6207,3,1178,589,0,6008,6009,5,671,0,0,6009,6207,3,760,380,
	0,6010,6011,5,377,0,0,6011,6207,3,760,380,0,6012,6013,7,91,0,0,6013,6014,
	5,409,0,0,6014,6015,3,666,333,0,6015,6021,5,406,0,0,6016,6022,3,666,333,
	0,6017,6018,5,527,0,0,6018,6019,3,666,333,0,6019,6020,3,754,377,0,6020,
	6022,1,0,0,0,6021,6016,1,0,0,0,6021,6017,1,0,0,0,6022,6023,1,0,0,0,6023,
	6024,5,410,0,0,6024,6207,1,0,0,0,6025,6027,5,461,0,0,6026,6028,3,1178,589,
	0,6027,6026,1,0,0,0,6027,6028,1,0,0,0,6028,6207,1,0,0,0,6029,6031,5,466,
	0,0,6030,6032,3,710,355,0,6031,6030,1,0,0,0,6031,6032,1,0,0,0,6032,6207,
	1,0,0,0,6033,6034,7,92,0,0,6034,6035,5,409,0,0,6035,6036,3,666,333,0,6036,
	6037,5,406,0,0,6037,6038,5,527,0,0,6038,6039,3,666,333,0,6039,6040,3,754,
	377,0,6040,6041,5,410,0,0,6041,6207,1,0,0,0,6042,6043,5,500,0,0,6043,6044,
	5,409,0,0,6044,6045,3,754,377,0,6045,6046,5,507,0,0,6046,6047,3,666,333,
	0,6047,6048,5,410,0,0,6048,6207,1,0,0,0,6049,6050,5,153,0,0,6050,6051,5,
	409,0,0,6051,6052,3,718,359,0,6052,6053,5,406,0,0,6053,6054,3,666,333,0,
	6054,6055,5,410,0,0,6055,6207,1,0,0,0,6056,6058,5,574,0,0,6057,6059,3,710,
	355,0,6058,6057,1,0,0,0,6058,6059,1,0,0,0,6059,6207,1,0,0,0,6060,6061,5,
	591,0,0,6061,6062,5,409,0,0,6062,6063,3,676,338,0,6063,6064,5,530,0,0,6064,
	6065,3,666,333,0,6065,6066,5,410,0,0,6066,6207,1,0,0,0,6067,6207,3,722,
	361,0,6068,6070,5,644,0,0,6069,6071,3,710,355,0,6070,6069,1,0,0,0,6070,
	6071,1,0,0,0,6071,6207,1,0,0,0,6072,6073,7,93,0,0,6073,6074,5,409,0,0,6074,
	6075,3,756,378,0,6075,6076,5,406,0,0,6076,6077,3,666,333,0,6077,6078,5,
	406,0,0,6078,6079,3,666,333,0,6079,6080,5,410,0,0,6080,6207,1,0,0,0,6081,
	6083,5,667,0,0,6082,6084,3,1178,589,0,6083,6082,1,0,0,0,6083,6084,1,0,0,
	0,6084,6207,1,0,0,0,6085,6087,5,669,0,0,6086,6088,3,710,355,0,6087,6086,
	1,0,0,0,6087,6088,1,0,0,0,6088,6207,1,0,0,0,6089,6091,5,668,0,0,6090,6092,
	3,710,355,0,6091,6090,1,0,0,0,6091,6092,1,0,0,0,6092,6207,1,0,0,0,6093,
	6094,5,2,0,0,6094,6207,3,760,380,0,6095,6096,5,8,0,0,6096,6207,3,760,380,
	0,6097,6098,5,85,0,0,6098,6207,3,758,379,0,6099,6100,5,87,0,0,6100,6207,
	3,760,380,0,6101,6102,5,467,0,0,6102,6207,3,1178,589,0,6103,6104,5,519,
	0,0,6104,6105,5,409,0,0,6105,6106,3,666,333,0,6106,6107,5,406,0,0,6107,
	6108,3,666,333,0,6108,6109,5,406,0,0,6109,6110,3,666,333,0,6110,6111,5,
	410,0,0,6111,6207,1,0,0,0,6112,6113,5,20,0,0,6113,6114,5,409,0,0,6114,6115,
	3,666,333,0,6115,6116,5,406,0,0,6116,6119,3,666,333,0,6117,6118,5,406,0,
	0,6118,6120,3,666,333,0,6119,6117,1,0,0,0,6119,6120,1,0,0,0,6120,6121,1,
	0,0,0,6121,6122,5,410,0,0,6122,6207,1,0,0,0,6123,6124,5,217,0,0,6124,6207,
	3,760,380,0,6125,6126,5,568,0,0,6126,6127,5,409,0,0,6127,6128,3,666,333,
	0,6128,6129,5,406,0,0,6129,6130,3,666,333,0,6130,6131,5,410,0,0,6131,6207,
	1,0,0,0,6132,6133,4,353,162,0,6133,6134,5,243,0,0,6134,6135,5,409,0,0,6135,
	6136,3,1150,575,0,6136,6137,5,410,0,0,6137,6207,1,0,0,0,6138,6139,4,353,
	163,0,6139,6140,5,251,0,0,6140,6207,3,760,380,0,6141,6142,5,266,0,0,6142,
	6207,3,760,380,0,6143,6144,5,605,0,0,6144,6145,5,409,0,0,6145,6146,3,666,
	333,0,6146,6147,5,406,0,0,6147,6148,3,666,333,0,6148,6149,5,410,0,0,6149,
	6207,1,0,0,0,6150,6151,5,606,0,0,6151,6152,5,409,0,0,6152,6153,3,666,333,
	0,6153,6154,5,406,0,0,6154,6155,3,666,333,0,6155,6156,5,406,0,0,6156,6157,
	3,666,333,0,6157,6158,5,410,0,0,6158,6207,1,0,0,0,6159,6160,5,294,0,0,6160,
	6207,3,760,380,0,6161,6162,5,299,0,0,6162,6207,3,1178,589,0,6163,6164,5,
	50,0,0,6164,6165,5,409,0,0,6165,6166,3,666,333,0,6166,6167,5,406,0,0,6167,
	6168,3,666,333,0,6168,6169,5,410,0,0,6169,6207,1,0,0,0,6170,6171,5,371,
	0,0,6171,6172,5,409,0,0,6172,6175,3,666,333,0,6173,6174,5,406,0,0,6174,
	6176,3,666,333,0,6175,6173,1,0,0,0,6175,6176,1,0,0,0,6176,6177,1,0,0,0,
	6177,6178,5,410,0,0,6178,6207,1,0,0,0,6179,6180,5,373,0,0,6180,6181,5,409,
	0,0,6181,6201,3,666,333,0,6182,6183,5,431,0,0,6183,6184,5,450,0,0,6184,
	6186,3,922,461,0,6185,6182,1,0,0,0,6185,6186,1,0,0,0,6186,6189,1,0,0,0,
	6187,6188,4,353,164,0,6188,6190,3,714,357,0,6189,6187,1,0,0,0,6189,6190,
	1,0,0,0,6190,6202,1,0,0,0,6191,6192,5,431,0,0,6192,6193,5,437,0,0,6193,
	6202,3,922,461,0,6194,6195,5,406,0,0,6195,6196,3,1130,565,0,6196,6197,5,
	406,0,0,6197,6198,3,1130,565,0,6198,6199,5,406,0,0,6199,6200,3,1130,565,
	0,6200,6202,1,0,0,0,6201,6185,1,0,0,0,6201,6191,1,0,0,0,6201,6194,1,0,0,
	0,6202,6203,1,0,0,0,6203,6204,5,410,0,0,6204,6207,1,0,0,0,6205,6207,3,708,
	354,0,6206,5933,1,0,0,0,6206,5942,1,0,0,0,6206,5946,1,0,0,0,6206,5948,1,
	0,0,0,6206,5950,1,0,0,0,6206,5952,1,0,0,0,6206,5963,1,0,0,0,6206,5974,1,
	0,0,0,6206,5981,1,0,0,0,6206,5983,1,0,0,0,6206,5985,1,0,0,0,6206,5992,1,
	0,0,0,6206,5994,1,0,0,0,6206,5996,1,0,0,0,6206,6005,1,0,0,0,6206,6006,1,
	0,0,0,6206,6008,1,0,0,0,6206,6010,1,0,0,0,6206,6012,1,0,0,0,6206,6025,1,
	0,0,0,6206,6029,1,0,0,0,6206,6033,1,0,0,0,6206,6042,1,0,0,0,6206,6049,1,
	0,0,0,6206,6056,1,0,0,0,6206,6060,1,0,0,0,6206,6067,1,0,0,0,6206,6068,1,
	0,0,0,6206,6072,1,0,0,0,6206,6081,1,0,0,0,6206,6085,1,0,0,0,6206,6089,1,
	0,0,0,6206,6093,1,0,0,0,6206,6095,1,0,0,0,6206,6097,1,0,0,0,6206,6099,1,
	0,0,0,6206,6101,1,0,0,0,6206,6103,1,0,0,0,6206,6112,1,0,0,0,6206,6123,1,
	0,0,0,6206,6125,1,0,0,0,6206,6132,1,0,0,0,6206,6138,1,0,0,0,6206,6141,1,
	0,0,0,6206,6143,1,0,0,0,6206,6150,1,0,0,0,6206,6159,1,0,0,0,6206,6161,1,
	0,0,0,6206,6163,1,0,0,0,6206,6170,1,0,0,0,6206,6179,1,0,0,0,6206,6205,1,
	0,0,0,6207,707,1,0,0,0,6208,6209,4,354,165,0,6209,6210,5,13,0,0,6210,6211,
	5,409,0,0,6211,6212,3,666,333,0,6212,6213,5,406,0,0,6213,6214,3,666,333,
	0,6214,6215,5,410,0,0,6215,6240,1,0,0,0,6216,6217,5,152,0,0,6217,6219,5,
	409,0,0,6218,6220,3,746,373,0,6219,6218,1,0,0,0,6219,6220,1,0,0,0,6220,
	6221,1,0,0,0,6221,6240,5,410,0,0,6222,6223,5,178,0,0,6223,6240,3,758,379,
	0,6224,6225,5,224,0,0,6225,6240,3,758,379,0,6226,6227,5,225,0,0,6227,6240,
	3,758,379,0,6228,6229,5,226,0,0,6229,6240,3,758,379,0,6230,6231,5,256,0,
	0,6231,6232,5,409,0,0,6232,6233,3,666,333,0,6233,6234,5,406,0,0,6234,6235,
	3,666,333,0,6235,6236,5,410,0,0,6236,6240,1,0,0,0,6237,6238,5,257,0,0,6238,
	6240,3,758,379,0,6239,6208,1,0,0,0,6239,6216,1,0,0,0,6239,6222,1,0,0,0,
	6239,6224,1,0,0,0,6239,6226,1,0,0,0,6239,6228,1,0,0,0,6239,6230,1,0,0,0,
	6239,6237,1,0,0,0,6240,709,1,0,0,0,6241,6243,5,409,0,0,6242,6244,3,712,
	356,0,6243,6242,1,0,0,0,6243,6244,1,0,0,0,6244,6245,1,0,0,0,6245,6246,5,
	410,0,0,6246,711,1,0,0,0,6247,6248,4,356,166,0,6248,6249,5,380,0,0,6249,
	713,1,0,0,0,6250,6263,5,177,0,0,6251,6252,3,1132,566,0,6252,6253,5,392,
	0,0,6253,6254,3,1132,566,0,6254,6264,1,0,0,0,6255,6260,3,716,358,0,6256,
	6257,5,406,0,0,6257,6259,3,716,358,0,6258,6256,1,0,0,0,6259,6262,1,0,0,
	0,6260,6258,1,0,0,0,6260,6261,1,0,0,0,6261,6264,1,0,0,0,6262,6260,1,0,0,
	0,6263,6251,1,0,0,0,6263,6255,1,0,0,0,6264,715,1,0,0,0,6265,6271,3,1132,
	566,0,6266,6268,7,33,0,0,6267,6269,5,294,0,0,6268,6267,1,0,0,0,6268,6269,
	1,0,0,0,6269,6272,1,0,0,0,6270,6272,5,294,0,0,6271,6266,1,0,0,0,6271,6270,
	1,0,0,0,6271,6272,1,0,0,0,6272,717,1,0,0,0,6273,6274,7,94,0,0,6274,719,
	1,0,0,0,6275,6276,5,656,0,0,6276,6300,5,409,0,0,6277,6280,3,666,333,0,6278,
	6279,5,507,0,0,6279,6281,3,666,333,0,6280,6278,1,0,0,0,6280,6281,1,0,0,
	0,6281,6301,1,0,0,0,6282,6284,5,539,0,0,6283,6285,3,666,333,0,6284,6283,
	1,0,0,0,6284,6285,1,0,0,0,6285,6286,1,0,0,0,6286,6287,5,507,0,0,6287,6301,
	3,666,333,0,6288,6290,5,654,0,0,6289,6291,3,666,333,0,6290,6289,1,0,0,0,
	6290,6291,1,0,0,0,6291,6292,1,0,0,0,6292,6293,5,507,0,0,6293,6301,3,666,
	333,0,6294,6296,5,443,0,0,6295,6297,3,666,333,0,6296,6295,1,0,0,0,6296,
	6297,1,0,0,0,6297,6298,1,0,0,0,6298,6299,5,507,0,0,6299,6301,3,666,333,
	0,6300,6277,1,0,0,0,6300,6282,1,0,0,0,6300,6288,1,0,0,0,6300,6294,1,0,0,
	0,6301,6302,1,0,0,0,6302,6303,5,410,0,0,6303,721,1,0,0,0,6304,6305,5,642,
	0,0,6305,6306,5,409,0,0,6306,6319,3,666,333,0,6307,6308,5,406,0,0,6308,
	6311,3,666,333,0,6309,6310,5,406,0,0,6310,6312,3,666,333,0,6311,6309,1,
	0,0,0,6311,6312,1,0,0,0,6312,6320,1,0,0,0,6313,6314,5,507,0,0,6314,6317,
	3,666,333,0,6315,6316,5,506,0,0,6316,6318,3,666,333,0,6317,6315,1,0,0,0,
	6317,6318,1,0,0,0,6318,6320,1,0,0,0,6319,6307,1,0,0,0,6319,6313,1,0,0,0,
	6320,6321,1,0,0,0,6321,6322,5,410,0,0,6322,723,1,0,0,0,6323,6324,3,1116,
	558,0,6324,6326,5,409,0,0,6325,6327,3,726,363,0,6326,6325,1,0,0,0,6326,
	6327,1,0,0,0,6327,6328,1,0,0,0,6328,6329,5,410,0,0,6329,6338,1,0,0,0,6330,
	6331,3,1124,562,0,6331,6333,5,409,0,0,6332,6334,3,746,373,0,6333,6332,1,
	0,0,0,6333,6334,1,0,0,0,6334,6335,1,0,0,0,6335,6336,5,410,0,0,6336,6338,
	1,0,0,0,6337,6323,1,0,0,0,6337,6330,1,0,0,0,6338,725,1,0,0,0,6339,6344,
	3,728,364,0,6340,6341,5,406,0,0,6341,6343,3,728,364,0,6342,6340,1,0,0,0,
	6343,6346,1,0,0,0,6344,6342,1,0,0,0,6344,6345,1,0,0,0,6345,727,1,0,0,0,
	6346,6344,1,0,0,0,6347,6349,3,666,333,0,6348,6350,3,348,174,0,6349,6348,
	1,0,0,0,6349,6350,1,0,0,0,6350,729,1,0,0,0,6351,6354,3,732,366,0,6352,6353,
	5,384,0,0,6353,6355,3,666,333,0,6354,6352,1,0,0,0,6354,6355,1,0,0,0,6355,
	6358,1,0,0,0,6356,6358,3,734,367,0,6357,6351,1,0,0,0,6357,6356,1,0,0,0,
	6358,731,1,0,0,0,6359,6360,5,416,0,0,6360,6363,3,1170,585,0,6361,6363,5,
	417,0,0,6362,6359,1,0,0,0,6362,6361,1,0,0,0,6363,733,1,0,0,0,6364,6366,
	5,418,0,0,6365,6367,3,1184,592,0,6366,6365,1,0,0,0,6366,6367,1,0,0,0,6367,
	6368,1,0,0,0,6368,6370,3,1170,585,0,6369,6371,3,1128,564,0,6370,6369,1,
	0,0,0,6370,6371,1,0,0,0,6371,735,1,0,0,0,6372,6373,4,368,167,0,6373,6375,
	3,1118,559,0,6374,6376,3,1128,564,0,6375,6374,1,0,0,0,6375,6376,1,0,0,0,
	6376,6383,1,0,0,0,6377,6378,4,368,168,0,6378,6380,3,1172,586,0,6379,6381,
	3,1128,564,0,6380,6379,1,0,0,0,6380,6381,1,0,0,0,6381,6383,1,0,0,0,6382,
	6372,1,0,0,0,6382,6377,1,0,0,0,6383,6387,1,0,0,0,6384,6385,5,478,0,0,6385,
	6387,3,1128,564,0,6386,6382,1,0,0,0,6386,6384,1,0,0,0,6387,737,1,0,0,0,
	6388,6389,5,679,0,0,6389,6390,3,666,333,0,6390,739,1,0,0,0,6391,6392,5,
	649,0,0,6392,6393,3,666,333,0,6393,741,1,0,0,0,6394,6395,5,490,0,0,6395,
	6396,3,666,333,0,6396,743,1,0,0,0,6397,6399,5,437,0,0,6398,6400,3,912,456,
	0,6399,6398,1,0,0,0,6399,6400,1,0,0,0,6400,6443,1,0,0,0,6401,6403,5,450,
	0,0,6402,6404,3,912,456,0,6403,6402,1,0,0,0,6403,6404,1,0,0,0,6404,6406,
	1,0,0,0,6405,6407,3,916,458,0,6406,6405,1,0,0,0,6406,6407,1,0,0,0,6407,
	6443,1,0,0,0,6408,6410,3,908,454,0,6409,6411,3,912,456,0,6410,6409,1,0,
	0,0,6410,6411,1,0,0,0,6411,6443,1,0,0,0,6412,6414,5,44,0,0,6413,6415,5,
	529,0,0,6414,6413,1,0,0,0,6414,6415,1,0,0,0,6415,6443,1,0,0,0,6416,6418,
	5,662,0,0,6417,6419,5,529,0,0,6418,6417,1,0,0,0,6418,6419,1,0,0,0,6419,
	6443,1,0,0,0,6420,6443,5,112,0,0,6421,6423,5,352,0,0,6422,6424,3,924,462,
	0,6423,6422,1,0,0,0,6423,6424,1,0,0,0,6424,6443,1,0,0,0,6425,6427,5,111,
	0,0,6426,6428,3,924,462,0,6427,6426,1,0,0,0,6427,6428,1,0,0,0,6428,6443,
	1,0,0,0,6429,6431,5,476,0,0,6430,6432,3,1164,582,0,6431,6430,1,0,0,0,6431,
	6432,1,0,0,0,6432,6443,1,0,0,0,6433,6434,4,372,169,0,6434,6443,5,172,0,
	0,6435,6436,4,372,170,0,6436,6443,3,910,455,0,6437,6438,4,372,171,0,6438,
	6440,5,503,0,0,6439,6441,3,1166,583,0,6440,6439,1,0,0,0,6440,6441,1,0,0,
	0,6441,6443,1,0,0,0,6442,6397,1,0,0,0,6442,6401,1,0,0,0,6442,6408,1,0,0,
	0,6442,6412,1,0,0,0,6442,6416,1,0,0,0,6442,6420,1,0,0,0,6442,6421,1,0,0,
	0,6442,6425,1,0,0,0,6442,6429,1,0,0,0,6442,6433,1,0,0,0,6442,6435,1,0,0,
	0,6442,6437,1,0,0,0,6443,745,1,0,0,0,6444,6449,3,666,333,0,6445,6446,5,
	406,0,0,6446,6448,3,666,333,0,6447,6445,1,0,0,0,6448,6451,1,0,0,0,6449,
	6447,1,0,0,0,6449,6450,1,0,0,0,6450,747,1,0,0,0,6451,6449,1,0,0,0,6452,
	6453,5,450,0,0,6453,6456,5,619,0,0,6454,6456,5,8,0,0,6455,6452,1,0,0,0,
	6455,6454,1,0,0,0,6456,749,1,0,0,0,6457,6458,7,95,0,0,6458,751,1,0,0,0,
	6459,6460,7,96,0,0,6460,753,1,0,0,0,6461,6464,3,756,378,0,6462,6464,7,97,
	0,0,6463,6461,1,0,0,0,6463,6462,1,0,0,0,6464,755,1,0,0,0,6465,6466,7,98,
	0,0,6466,757,1,0,0,0,6467,6468,5,409,0,0,6468,6469,3,746,373,0,6469,6470,
	5,410,0,0,6470,759,1,0,0,0,6471,6472,5,409,0,0,6472,6473,3,666,333,0,6473,
	6474,5,410,0,0,6474,761,1,0,0,0,6475,6476,5,409,0,0,6476,6477,3,678,339,
	0,6477,6478,5,410,0,0,6478,763,1,0,0,0,6479,6484,3,766,383,0,6480,6481,
	5,406,0,0,6481,6483,3,766,383,0,6482,6480,1,0,0,0,6483,6486,1,0,0,0,6484,
	6482,1,0,0,0,6484,6485,1,0,0,0,6485,765,1,0,0,0,6486,6484,1,0,0,0,6487,
	6489,3,666,333,0,6488,6490,3,330,165,0,6489,6488,1,0,0,0,6489,6490,1,0,
	0,0,6490,767,1,0,0,0,6491,6496,3,770,385,0,6492,6493,5,406,0,0,6493,6495,
	3,770,385,0,6494,6492,1,0,0,0,6495,6498,1,0,0,0,6496,6494,1,0,0,0,6496,
	6497,1,0,0,0,6497,769,1,0,0,0,6498,6496,1,0,0,0,6499,6500,3,666,333,0,6500,
	771,1,0,0,0,6501,6502,4,386,172,0,6502,6503,5,506,0,0,6503,6504,5,81,0,
	0,6504,6505,3,1152,576,0,6505,773,1,0,0,0,6506,6520,3,2,1,0,6507,6520,3,
	776,388,0,6508,6520,3,778,389,0,6509,6520,3,786,393,0,6510,6520,3,790,395,
	0,6511,6520,3,792,396,0,6512,6520,3,798,399,0,6513,6520,3,800,400,0,6514,
	6520,3,828,414,0,6515,6520,3,826,413,0,6516,6520,3,846,423,0,6517,6520,
	3,850,425,0,6518,6520,3,848,424,0,6519,6506,1,0,0,0,6519,6507,1,0,0,0,6519,
	6508,1,0,0,0,6519,6509,1,0,0,0,6519,6510,1,0,0,0,6519,6511,1,0,0,0,6519,
	6512,1,0,0,0,6519,6513,1,0,0,0,6519,6514,1,0,0,0,6519,6515,1,0,0,0,6519,
	6516,1,0,0,0,6519,6517,1,0,0,0,6519,6518,1,0,0,0,6520,775,1,0,0,0,6521,
	6522,5,610,0,0,6522,6523,3,666,333,0,6523,777,1,0,0,0,6524,6525,5,519,0,
	0,6525,6526,3,780,390,0,6526,6527,5,16,0,0,6527,6528,5,519,0,0,6528,779,
	1,0,0,0,6529,6530,3,666,333,0,6530,6535,3,782,391,0,6531,6532,5,491,0,0,
	6532,6536,3,780,390,0,6533,6534,5,490,0,0,6534,6536,3,784,392,0,6535,6531,
	1,0,0,0,6535,6533,1,0,0,0,6535,6536,1,0,0,0,6536,781,1,0,0,0,6537,6538,
	5,649,0,0,6538,6539,3,784,392,0,6539,783,1,0,0,0,6540,6541,3,774,387,0,
	6541,6542,5,407,0,0,6542,6544,1,0,0,0,6543,6540,1,0,0,0,6544,6545,1,0,0,
	0,6545,6543,1,0,0,0,6545,6546,1,0,0,0,6546,785,1,0,0,0,6547,6549,5,447,
	0,0,6548,6550,3,666,333,0,6549,6548,1,0,0,0,6549,6550,1,0,0,0,6550,6554,
	1,0,0,0,6551,6552,3,738,369,0,6552,6553,3,782,391,0,6553,6555,1,0,0,0,6554,
	6551,1,0,0,0,6555,6556,1,0,0,0,6556,6554,1,0,0,0,6556,6557,1,0,0,0,6557,
	6559,1,0,0,0,6558,6560,3,788,394,0,6559,6558,1,0,0,0,6559,6560,1,0,0,0,
	6560,6561,1,0,0,0,6561,6562,5,16,0,0,6562,6563,5,447,0,0,6563,787,1,0,0,
	0,6564,6565,5,490,0,0,6565,6566,3,784,392,0,6566,789,1,0,0,0,6567,6568,
	3,794,397,0,6568,6570,3,796,398,0,6569,6571,3,1102,551,0,6570,6569,1,0,
	0,0,6570,6571,1,0,0,0,6571,791,1,0,0,0,6572,6573,3,796,398,0,6573,793,1,
	0,0,0,6574,6575,3,1100,550,0,6575,6576,5,408,0,0,6576,795,1,0,0,0,6577,
	6579,5,5,0,0,6578,6580,3,808,404,0,6579,6578,1,0,0,0,6579,6580,1,0,0,0,
	6580,6582,1,0,0,0,6581,6583,3,784,392,0,6582,6581,1,0,0,0,6582,6583,1,0,
	0,0,6583,6584,1,0,0,0,6584,6585,5,16,0,0,6585,797,1,0,0,0,6586,6587,3,794,
	397,0,6587,6589,3,800,400,0,6588,6590,3,1102,551,0,6589,6588,1,0,0,0,6589,
	6590,1,0,0,0,6590,799,1,0,0,0,6591,6595,3,802,401,0,6592,6595,3,804,402,
	0,6593,6595,3,806,403,0,6594,6591,1,0,0,0,6594,6592,1,0,0,0,6594,6593,1,
	0,0,0,6595,801,1,0,0,0,6596,6597,5,553,0,0,6597,6598,3,784,392,0,6598,6599,
	5,16,0,0,6599,6600,5,553,0,0,6600,803,1,0,0,0,6601,6602,5,681,0,0,6602,
	6603,3,666,333,0,6603,6604,5,15,0,0,6604,6605,3,784,392,0,6605,6606,5,16,
	0,0,6606,6607,5,681,0,0,6607,805,1,0,0,0,6608,6609,5,605,0,0,6609,6610,
	3,784,392,0,6610,6611,5,362,0,0,6611,6612,3,666,333,0,6612,6613,5,16,0,
	0,6613,6614,5,605,0,0,6614,807,1,0,0,0,6615,6616,3,810,405,0,6616,6617,
	5,407,0,0,6617,6619,1,0,0,0,6618,6615,1,0,0,0,6619,6620,1,0,0,0,6620,6618,
	1,0,0,0,6620,6621,1,0,0,0,6621,809,1,0,0,0,6622,6627,3,812,406,0,6623,6627,
	3,814,407,0,6624,6627,3,820,410,0,6625,6627,3,824,412,0,6626,6622,1,0,0,
	0,6626,6623,1,0,0,0,6626,6624,1,0,0,0,6626,6625,1,0,0,0,6627,811,1,0,0,
	0,6628,6629,5,477,0,0,6629,6630,3,1120,560,0,6630,6632,3,906,453,0,6631,
	6633,3,976,488,0,6632,6631,1,0,0,0,6632,6633,1,0,0,0,6633,6636,1,0,0,0,
	6634,6635,5,478,0,0,6635,6637,3,666,333,0,6636,6634,1,0,0,0,6636,6637,1,
	0,0,0,6637,813,1,0,0,0,6638,6639,5,477,0,0,6639,6640,3,1118,559,0,6640,
	6641,5,454,0,0,6641,6642,5,506,0,0,6642,6643,3,816,408,0,6643,815,1,0,0,
	0,6644,6647,3,1130,565,0,6645,6647,3,818,409,0,6646,6644,1,0,0,0,6646,6645,
	1,0,0,0,6647,817,1,0,0,0,6648,6650,5,627,0,0,6649,6651,5,368,0,0,6650,6649,
	1,0,0,0,6650,6651,1,0,0,0,6651,6652,1,0,0,0,6652,6653,3,1150,575,0,6653,
	819,1,0,0,0,6654,6655,5,477,0,0,6655,6656,7,99,0,0,6656,6657,5,22,0,0,6657,
	6658,5,506,0,0,6658,6663,3,822,411,0,6659,6660,5,406,0,0,6660,6662,3,822,
	411,0,6661,6659,1,0,0,0,6662,6665,1,0,0,0,6663,6661,1,0,0,0,6663,6664,1,
	0,0,0,6664,6666,1,0,0,0,6665,6663,1,0,0,0,6666,6667,3,774,387,0,6667,821,
	1,0,0,0,6668,6676,3,816,408,0,6669,6676,3,1118,559,0,6670,6676,5,628,0,
	0,6671,6672,3,750,375,0,6672,6673,5,142,0,0,6673,6676,1,0,0,0,6674,6676,
	5,626,0,0,6675,6668,1,0,0,0,6675,6669,1,0,0,0,6675,6670,1,0,0,0,6675,6671,
	1,0,0,0,6675,6674,1,0,0,0,6676,823,1,0,0,0,6677,6678,5,477,0,0,6678,6679,
	3,1118,559,0,6679,6680,5,465,0,0,6680,6681,5,506,0,0,6681,6682,3,268,134,
	0,6682,825,1,0,0,0,6683,6684,5,534,0,0,6684,6685,3,1102,551,0,6685,827,
	1,0,0,0,6686,6687,5,540,0,0,6687,6688,3,1102,551,0,6688,829,1,0,0,0,6689,
	6693,5,509,0,0,6690,6694,5,107,0,0,6691,6692,4,415,173,0,6692,6694,5,322,
	0,0,6693,6690,1,0,0,0,6693,6691,1,0,0,0,6693,6694,1,0,0,0,6694,6695,1,0,
	0,0,6695,6714,5,118,0,0,6696,6701,3,834,417,0,6697,6698,5,406,0,0,6698,
	6700,3,834,417,0,6699,6697,1,0,0,0,6700,6703,1,0,0,0,6701,6699,1,0,0,0,
	6701,6702,1,0,0,0,6702,6715,1,0,0,0,6703,6701,1,0,0,0,6704,6705,5,454,0,
	0,6705,6706,3,832,416,0,6706,6711,3,836,418,0,6707,6708,5,406,0,0,6708,
	6710,3,836,418,0,6709,6707,1,0,0,0,6710,6713,1,0,0,0,6711,6709,1,0,0,0,
	6711,6712,1,0,0,0,6712,6715,1,0,0,0,6713,6711,1,0,0,0,6714,6696,1,0,0,0,
	6714,6704,1,0,0,0,6715,831,1,0,0,0,6716,6720,3,1138,569,0,6717,6720,3,730,
	365,0,6718,6720,3,1124,562,0,6719,6716,1,0,0,0,6719,6717,1,0,0,0,6719,6718,
	1,0,0,0,6720,833,1,0,0,0,6721,6724,3,730,365,0,6722,6724,3,1118,559,0,6723,
	6721,1,0,0,0,6723,6722,1,0,0,0,6724,6725,1,0,0,0,6725,6726,5,383,0,0,6726,
	6727,7,100,0,0,6727,835,1,0,0,0,6728,6731,3,730,365,0,6729,6731,3,1118,
	559,0,6730,6728,1,0,0,0,6730,6729,1,0,0,0,6731,6732,1,0,0,0,6732,6735,5,
	383,0,0,6733,6736,3,838,419,0,6734,6736,5,292,0,0,6735,6733,1,0,0,0,6735,
	6734,1,0,0,0,6736,837,1,0,0,0,6737,6738,7,101,0,0,6738,839,1,0,0,0,6739,
	6742,5,622,0,0,6740,6743,3,1118,559,0,6741,6743,3,818,409,0,6742,6740,1,
	0,0,0,6742,6741,1,0,0,0,6743,6753,1,0,0,0,6744,6745,5,619,0,0,6745,6750,
	3,844,422,0,6746,6747,5,406,0,0,6747,6749,3,844,422,0,6748,6746,1,0,0,0,
	6749,6752,1,0,0,0,6750,6748,1,0,0,0,6750,6751,1,0,0,0,6751,6754,1,0,0,0,
	6752,6750,1,0,0,0,6753,6744,1,0,0,0,6753,6754,1,0,0,0,6754,841,1,0,0,0,
	6755,6761,5,608,0,0,6756,6758,5,627,0,0,6757,6759,5,368,0,0,6758,6757,1,
	0,0,0,6758,6759,1,0,0,0,6759,6760,1,0,0,0,6760,6762,3,1170,585,0,6761,6756,
	1,0,0,0,6761,6762,1,0,0,0,6762,6772,1,0,0,0,6763,6764,5,619,0,0,6764,6769,
	3,844,422,0,6765,6766,5,406,0,0,6766,6768,3,844,422,0,6767,6765,1,0,0,0,
	6768,6771,1,0,0,0,6769,6767,1,0,0,0,6769,6770,1,0,0,0,6770,6773,1,0,0,0,
	6771,6769,1,0,0,0,6772,6763,1,0,0,0,6772,6773,1,0,0,0,6773,843,1,0,0,0,
	6774,6775,3,838,419,0,6775,6776,5,383,0,0,6776,6777,3,832,416,0,6777,845,
	1,0,0,0,6778,6779,5,28,0,0,6779,6780,3,1118,559,0,6780,847,1,0,0,0,6781,
	6782,5,10,0,0,6782,6783,3,1118,559,0,6783,849,1,0,0,0,6784,6789,5,502,0,
	0,6785,6787,5,235,0,0,6786,6785,1,0,0,0,6786,6787,1,0,0,0,6787,6788,1,0,
	0,0,6788,6790,5,507,0,0,6789,6786,1,0,0,0,6789,6790,1,0,0,0,6790,6791,1,
	0,0,0,6791,6792,3,1118,559,0,6792,6793,5,528,0,0,6793,6794,3,1120,560,0,
	6794,851,1,0,0,0,6795,6796,5,65,0,0,6796,6809,3,666,333,0,6797,6798,5,135,
	0,0,6798,6799,3,666,333,0,6799,6802,3,754,377,0,6800,6801,5,323,0,0,6801,
	6803,3,666,333,0,6802,6800,1,0,0,0,6802,6803,1,0,0,0,6803,6806,1,0,0,0,
	6804,6805,5,126,0,0,6805,6807,3,666,333,0,6806,6804,1,0,0,0,6806,6807,1,
	0,0,0,6807,6809,1,0,0,0,6808,6795,1,0,0,0,6808,6797,1,0,0,0,6809,853,1,
	0,0,0,6810,6811,3,1030,515,0,6811,6813,3,866,433,0,6812,6814,3,856,428,
	0,6813,6812,1,0,0,0,6813,6814,1,0,0,0,6814,855,1,0,0,0,6815,6816,4,428,
	174,0,6816,6819,3,858,429,0,6817,6819,3,876,438,0,6818,6815,1,0,0,0,6818,
	6817,1,0,0,0,6819,857,1,0,0,0,6820,6821,5,451,0,0,6821,6822,3,760,380,0,
	6822,859,1,0,0,0,6823,6825,5,573,0,0,6824,6823,1,0,0,0,6824,6825,1,0,0,
	0,6825,6826,1,0,0,0,6826,6827,5,760,0,0,6827,861,1,0,0,0,6828,6830,7,38,
	0,0,6829,6831,3,110,55,0,6830,6829,1,0,0,0,6830,6831,1,0,0,0,6831,6832,
	1,0,0,0,6832,6836,3,888,444,0,6833,6835,3,892,446,0,6834,6833,1,0,0,0,6835,
	6838,1,0,0,0,6836,6834,1,0,0,0,6836,6837,1,0,0,0,6837,6904,1,0,0,0,6838,
	6836,1,0,0,0,6839,6841,5,508,0,0,6840,6842,3,398,199,0,6841,6840,1,0,0,
	0,6841,6842,1,0,0,0,6842,6844,1,0,0,0,6843,6845,3,1040,520,0,6844,6843,
	1,0,0,0,6844,6845,1,0,0,0,6845,6846,1,0,0,0,6846,6850,3,888,444,0,6847,
	6849,3,900,450,0,6848,6847,1,0,0,0,6849,6852,1,0,0,0,6850,6848,1,0,0,0,
	6850,6851,1,0,0,0,6851,6904,1,0,0,0,6852,6850,1,0,0,0,6853,6855,5,624,0,
	0,6854,6856,3,398,199,0,6855,6854,1,0,0,0,6855,6856,1,0,0,0,6856,6858,1,
	0,0,0,6857,6859,3,1040,520,0,6858,6857,1,0,0,0,6858,6859,1,0,0,0,6859,6860,
	1,0,0,0,6860,6864,3,888,444,0,6861,6863,3,902,451,0,6862,6861,1,0,0,0,6863,
	6866,1,0,0,0,6864,6862,1,0,0,0,6864,6865,1,0,0,0,6865,6904,1,0,0,0,6866,
	6864,1,0,0,0,6867,6869,3,864,432,0,6868,6867,1,0,0,0,6868,6869,1,0,0,0,
	6869,6901,1,0,0,0,6870,6871,5,593,0,0,6871,6877,5,537,0,0,6872,6874,5,660,
	0,0,6873,6875,3,398,199,0,6874,6873,1,0,0,0,6874,6875,1,0,0,0,6875,6877,
	1,0,0,0,6876,6870,1,0,0,0,6876,6872,1,0,0,0,6877,6879,1,0,0,0,6878,6880,
	3,110,55,0,6879,6878,1,0,0,0,6879,6880,1,0,0,0,6880,6881,1,0,0,0,6881,6885,
	3,888,444,0,6882,6884,3,892,446,0,6883,6882,1,0,0,0,6884,6887,1,0,0,0,6885,
	6883,1,0,0,0,6885,6886,1,0,0,0,6886,6902,1,0,0,0,6887,6885,1,0,0,0,6888,
	6889,5,505,0,0,6889,6891,5,537,0,0,6890,6892,3,1040,520,0,6891,6890,1,0,
	0,0,6891,6892,1,0,0,0,6892,6893,1,0,0,0,6893,6894,3,880,440,0,6894,6895,
	3,876,438,0,6895,6902,1,0,0,0,6896,6899,3,858,429,0,6897,6898,4,431,175,
	0,6898,6900,3,860,430,0,6899,6897,1,0,0,0,6899,6900,1,0,0,0,6900,6902,1,
	0,0,0,6901,6876,1,0,0,0,6901,6888,1,0,0,0,6901,6896,1,0,0,0,6902,6904,1,
	0,0,0,6903,6828,1,0,0,0,6903,6839,1,0,0,0,6903,6853,1,0,0,0,6903,6868,1,
	0,0,0,6904,863,1,0,0,0,6905,6907,5,455,0,0,6906,6908,3,1118,559,0,6907,
	6906,1,0,0,0,6907,6908,1,0,0,0,6908,865,1,0,0,0,6909,6945,3,906,453,0,6910,
	6912,3,868,434,0,6911,6910,1,0,0,0,6912,6915,1,0,0,0,6913,6911,1,0,0,0,
	6913,6914,1,0,0,0,6914,6946,1,0,0,0,6915,6913,1,0,0,0,6916,6918,4,433,176,
	0,6917,6919,3,976,488,0,6918,6917,1,0,0,0,6918,6919,1,0,0,0,6919,6922,1,
	0,0,0,6920,6921,5,510,0,0,6921,6923,5,3,0,0,6922,6920,1,0,0,0,6922,6923,
	1,0,0,0,6923,6924,1,0,0,0,6924,6925,5,431,0,0,6925,6927,3,760,380,0,6926,
	6928,7,102,0,0,6927,6926,1,0,0,0,6927,6928,1,0,0,0,6928,6943,1,0,0,0,6929,
	6933,4,433,177,0,6930,6932,3,874,437,0,6931,6930,1,0,0,0,6932,6935,1,0,
	0,0,6933,6931,1,0,0,0,6933,6934,1,0,0,0,6934,6944,1,0,0,0,6935,6933,1,0,
	0,0,6936,6940,4,433,178,0,6937,6939,3,868,434,0,6938,6937,1,0,0,0,6939,
	6942,1,0,0,0,6940,6938,1,0,0,0,6940,6941,1,0,0,0,6941,6944,1,0,0,0,6942,
	6940,1,0,0,0,6943,6929,1,0,0,0,6943,6936,1,0,0,0,6944,6946,1,0,0,0,6945,
	6913,1,0,0,0,6945,6916,1,0,0,0,6946,867,1,0,0,0,6947,6949,5,573,0,0,6948,
	6947,1,0,0,0,6948,6949,1,0,0,0,6949,6950,1,0,0,0,6950,7000,3,1160,580,0,
	6951,6952,4,434,179,0,6952,6953,5,573,0,0,6953,7000,5,750,0,0,6954,6962,
	5,478,0,0,6955,6963,3,1140,570,0,6956,6958,5,574,0,0,6957,6959,3,710,355,
	0,6958,6957,1,0,0,0,6958,6959,1,0,0,0,6959,6963,1,0,0,0,6960,6961,4,434,
	180,0,6961,6963,3,760,380,0,6962,6955,1,0,0,0,6962,6956,1,0,0,0,6962,6960,
	1,0,0,0,6963,7000,1,0,0,0,6964,6965,5,579,0,0,6965,6966,5,663,0,0,6966,
	6968,5,574,0,0,6967,6969,3,710,355,0,6968,6967,1,0,0,0,6968,6969,1,0,0,
	0,6969,7000,1,0,0,0,6970,7000,5,67,0,0,6971,6972,5,306,0,0,6972,6973,5,
	478,0,0,6973,7000,5,368,0,0,6974,6976,5,593,0,0,6975,6974,1,0,0,0,6975,
	6976,1,0,0,0,6976,6977,1,0,0,0,6977,7000,5,537,0,0,6978,6980,5,660,0,0,
	6979,6981,5,537,0,0,6980,6979,1,0,0,0,6980,6981,1,0,0,0,6981,7000,1,0,0,
	0,6982,6983,5,11,0,0,6983,7000,3,1150,575,0,6984,7000,3,976,488,0,6985,
	6986,5,89,0,0,6986,7000,3,870,435,0,6987,6988,5,328,0,0,6988,7000,3,872,
	436,0,6989,6990,4,434,181,0,6990,6991,5,737,0,0,6991,7000,3,1136,568,0,
	6992,6994,4,434,182,0,6993,6995,3,864,432,0,6994,6993,1,0,0,0,6994,6995,
	1,0,0,0,6995,6996,1,0,0,0,6996,7000,3,858,429,0,6997,6998,4,434,183,0,6998,
	7000,3,860,430,0,6999,6948,1,0,0,0,6999,6951,1,0,0,0,6999,6954,1,0,0,0,
	6999,6964,1,0,0,0,6999,6970,1,0,0,0,6999,6971,1,0,0,0,6999,6975,1,0,0,0,
	6999,6978,1,0,0,0,6999,6982,1,0,0,0,6999,6984,1,0,0,0,6999,6985,1,0,0,0,
	6999,6987,1,0,0,0,6999,6989,1,0,0,0,6999,6992,1,0,0,0,6999,6997,1,0,0,0,
	7000,869,1,0,0,0,7001,7002,7,103,0,0,7002,871,1,0,0,0,7003,7004,7,104,0,
	0,7004,873,1,0,0,0,7005,7007,5,660,0,0,7006,7008,5,537,0,0,7007,7006,1,
	0,0,0,7007,7008,1,0,0,0,7008,7020,1,0,0,0,7009,7010,5,11,0,0,7010,7020,
	3,1146,573,0,7011,7013,3,750,375,0,7012,7011,1,0,0,0,7012,7013,1,0,0,0,
	7013,7014,1,0,0,0,7014,7020,5,576,0,0,7015,7017,5,593,0,0,7016,7015,1,0,
	0,0,7016,7017,1,0,0,0,7017,7018,1,0,0,0,7018,7020,5,537,0,0,7019,7005,1,
	0,0,0,7019,7009,1,0,0,0,7019,7012,1,0,0,0,7019,7016,1,0,0,0,7020,875,1,
	0,0,0,7021,7022,5,601,0,0,7022,7024,3,1092,546,0,7023,7025,3,1122,561,0,
	7024,7023,1,0,0,0,7024,7025,1,0,0,0,7025,7028,1,0,0,0,7026,7027,5,557,0,
	0,7027,7029,7,105,0,0,7028,7026,1,0,0,0,7028,7029,1,0,0,0,7029,7046,1,0,
	0,0,7030,7031,5,579,0,0,7031,7032,5,663,0,0,7032,7036,3,878,439,0,7033,
	7034,5,579,0,0,7034,7035,5,480,0,0,7035,7037,3,878,439,0,7036,7033,1,0,
	0,0,7036,7037,1,0,0,0,7037,7047,1,0,0,0,7038,7039,5,579,0,0,7039,7040,5,
	480,0,0,7040,7044,3,878,439,0,7041,7042,5,579,0,0,7042,7043,5,663,0,0,7043,
	7045,3,878,439,0,7044,7041,1,0,0,0,7044,7045,1,0,0,0,7045,7047,1,0,0,0,
	7046,7030,1,0,0,0,7046,7038,1,0,0,0,7046,7047,1,0,0,0,7047,877,1,0,0,0,
	7048,7054,7,2,0,0,7049,7050,5,619,0,0,7050,7054,3,1160,580,0,7051,7052,
	5,27,0,0,7052,7054,5,57,0,0,7053,7048,1,0,0,0,7053,7049,1,0,0,0,7053,7051,
	1,0,0,0,7054,879,1,0,0,0,7055,7056,5,409,0,0,7056,7061,3,882,441,0,7057,
	7058,5,406,0,0,7058,7060,3,882,441,0,7059,7057,1,0,0,0,7060,7063,1,0,0,
	0,7061,7059,1,0,0,0,7061,7062,1,0,0,0,7062,7064,1,0,0,0,7063,7061,1,0,0,
	0,7064,7065,5,410,0,0,7065,881,1,0,0,0,7066,7068,3,1118,559,0,7067,7069,
	3,912,456,0,7068,7067,1,0,0,0,7068,7069,1,0,0,0,7069,7071,1,0,0,0,7070,
	7072,3,330,165,0,7071,7070,1,0,0,0,7071,7072,1,0,0,0,7072,883,1,0,0,0,7073,
	7074,5,409,0,0,7074,7079,3,886,443,0,7075,7076,5,406,0,0,7076,7078,3,886,
	443,0,7077,7075,1,0,0,0,7078,7081,1,0,0,0,7079,7077,1,0,0,0,7079,7080,1,
	0,0,0,7080,7082,1,0,0,0,7081,7079,1,0,0,0,7082,7083,5,410,0,0,7083,885,
	1,0,0,0,7084,7090,3,882,441,0,7085,7087,3,760,380,0,7086,7088,3,330,165,
	0,7087,7086,1,0,0,0,7087,7088,1,0,0,0,7088,7090,1,0,0,0,7089,7084,1,0,0,
	0,7089,7085,1,0,0,0,7090,887,1,0,0,0,7091,7092,4,444,184,0,7092,7096,3,
	884,442,0,7093,7094,4,444,185,0,7094,7096,3,880,440,0,7095,7091,1,0,0,0,
	7095,7093,1,0,0,0,7096,889,1,0,0,0,7097,7098,7,106,0,0,7098,891,1,0,0,0,
	7099,7102,3,894,447,0,7100,7102,3,898,449,0,7101,7099,1,0,0,0,7101,7100,
	1,0,0,0,7102,893,1,0,0,0,7103,7105,5,173,0,0,7104,7106,5,383,0,0,7105,7104,
	1,0,0,0,7105,7106,1,0,0,0,7106,7107,1,0,0,0,7107,7113,3,1130,565,0,7108,
	7109,5,11,0,0,7109,7113,3,1150,575,0,7110,7111,4,447,186,0,7111,7113,3,
	896,448,0,7112,7103,1,0,0,0,7112,7108,1,0,0,0,7112,7110,1,0,0,0,7113,895,
	1,0,0,0,7114,7115,7,107,0,0,7115,897,1,0,0,0,7116,7117,7,108,0,0,7117,7118,
	3,890,445,0,7118,899,1,0,0,0,7119,7124,3,894,447,0,7120,7121,5,682,0,0,
	7121,7122,5,31,0,0,7122,7124,3,1118,559,0,7123,7119,1,0,0,0,7123,7120,1,
	0,0,0,7124,901,1,0,0,0,7125,7126,3,894,447,0,7126,903,1,0,0,0,7127,7128,
	3,906,453,0,7128,7129,5,0,0,1,7129,905,1,0,0,0,7130,7132,7,109,0,0,7131,
	7133,3,912,456,0,7132,7131,1,0,0,0,7132,7133,1,0,0,0,7133,7135,1,0,0,0,
	7134,7136,3,914,457,0,7135,7134,1,0,0,0,7135,7136,1,0,0,0,7136,7278,1,0,
	0,0,7137,7143,5,600,0,0,7138,7140,5,486,0,0,7139,7141,5,592,0,0,7140,7139,
	1,0,0,0,7140,7141,1,0,0,0,7141,7143,1,0,0,0,7142,7137,1,0,0,0,7142,7138,
	1,0,0,0,7143,7145,1,0,0,0,7144,7146,3,1168,584,0,7145,7144,1,0,0,0,7145,
	7146,1,0,0,0,7146,7148,1,0,0,0,7147,7149,3,914,457,0,7148,7147,1,0,0,0,
	7148,7149,1,0,0,0,7149,7278,1,0,0,0,7150,7152,7,110,0,0,7151,7153,3,1164,
	582,0,7152,7151,1,0,0,0,7152,7153,1,0,0,0,7153,7155,1,0,0,0,7154,7156,3,
	914,457,0,7155,7154,1,0,0,0,7155,7156,1,0,0,0,7156,7278,1,0,0,0,7157,7159,
	5,72,0,0,7158,7160,3,912,456,0,7159,7158,1,0,0,0,7159,7160,1,0,0,0,7160,
	7278,1,0,0,0,7161,7278,7,111,0,0,7162,7164,5,450,0,0,7163,7165,3,912,456,
	0,7164,7163,1,0,0,0,7164,7165,1,0,0,0,7165,7167,1,0,0,0,7166,7168,3,916,
	458,0,7167,7166,1,0,0,0,7167,7168,1,0,0,0,7168,7278,1,0,0,0,7169,7171,3,
	908,454,0,7170,7172,3,912,456,0,7171,7170,1,0,0,0,7171,7172,1,0,0,0,7172,
	7174,1,0,0,0,7173,7175,5,437,0,0,7174,7173,1,0,0,0,7174,7175,1,0,0,0,7175,
	7278,1,0,0,0,7176,7178,5,437,0,0,7177,7179,3,912,456,0,7178,7177,1,0,0,
	0,7178,7179,1,0,0,0,7179,7278,1,0,0,0,7180,7181,5,450,0,0,7181,7184,5,675,
	0,0,7182,7184,5,673,0,0,7183,7180,1,0,0,0,7183,7182,1,0,0,0,7184,7185,1,
	0,0,0,7185,7187,3,912,456,0,7186,7188,3,916,458,0,7187,7186,1,0,0,0,7187,
	7188,1,0,0,0,7188,7278,1,0,0,0,7189,7190,5,231,0,0,7190,7200,5,673,0,0,
	7191,7200,5,241,0,0,7192,7193,5,232,0,0,7193,7200,5,673,0,0,7194,7195,5,
	231,0,0,7195,7196,5,450,0,0,7196,7200,5,675,0,0,7197,7198,5,232,0,0,7198,
	7200,5,675,0,0,7199,7189,1,0,0,0,7199,7191,1,0,0,0,7199,7192,1,0,0,0,7199,
	7194,1,0,0,0,7199,7197,1,0,0,0,7200,7201,1,0,0,0,7201,7203,3,912,456,0,
	7202,7204,5,437,0,0,7203,7202,1,0,0,0,7203,7204,1,0,0,0,7204,7278,1,0,0,
	0,7205,7206,5,672,0,0,7206,7278,3,912,456,0,7207,7209,5,377,0,0,7208,7210,
	3,912,456,0,7209,7208,1,0,0,0,7209,7210,1,0,0,0,7210,7212,1,0,0,0,7211,
	7213,3,914,457,0,7212,7211,1,0,0,0,7212,7213,1,0,0,0,7213,7278,1,0,0,0,
	7214,7278,5,112,0,0,7215,7217,5,352,0,0,7216,7218,3,924,462,0,7217,7216,
	1,0,0,0,7217,7218,1,0,0,0,7218,7278,1,0,0,0,7219,7221,5,349,0,0,7220,7222,
	3,924,462,0,7221,7220,1,0,0,0,7221,7222,1,0,0,0,7222,7278,1,0,0,0,7223,
	7225,5,111,0,0,7224,7226,3,924,462,0,7225,7224,1,0,0,0,7225,7226,1,0,0,
	0,7226,7278,1,0,0,0,7227,7278,5,650,0,0,7228,7230,5,442,0,0,7229,7231,3,
	912,456,0,7230,7229,1,0,0,0,7230,7231,1,0,0,0,7231,7278,1,0,0,0,7232,7278,
	7,112,0,0,7233,7234,5,552,0,0,7234,7278,5,672,0,0,7235,7239,5,552,0,0,7236,
	7237,5,450,0,0,7237,7240,5,675,0,0,7238,7240,5,673,0,0,7239,7236,1,0,0,
	0,7239,7238,1,0,0,0,7239,7240,1,0,0,0,7240,7242,1,0,0,0,7241,7243,3,916,
	458,0,7242,7241,1,0,0,0,7242,7243,1,0,0,0,7243,7278,1,0,0,0,7244,7246,5,
	652,0,0,7245,7247,3,916,458,0,7246,7245,1,0,0,0,7246,7247,1,0,0,0,7247,
	7278,1,0,0,0,7248,7250,5,345,0,0,7249,7251,3,912,456,0,7250,7249,1,0,0,
	0,7250,7251,1,0,0,0,7251,7253,1,0,0,0,7252,7254,3,916,458,0,7253,7252,1,
	0,0,0,7253,7254,1,0,0,0,7254,7278,1,0,0,0,7255,7257,5,562,0,0,7256,7258,
	3,916,458,0,7257,7256,1,0,0,0,7257,7258,1,0,0,0,7258,7278,1,0,0,0,7259,
	7261,5,550,0,0,7260,7262,3,916,458,0,7261,7260,1,0,0,0,7261,7262,1,0,0,
	0,7262,7278,1,0,0,0,7263,7264,5,127,0,0,7264,7266,3,1142,571,0,7265,7267,
	3,916,458,0,7266,7265,1,0,0,0,7266,7267,1,0,0,0,7267,7278,1,0,0,0,7268,
	7269,5,619,0,0,7269,7271,3,1142,571,0,7270,7272,3,916,458,0,7271,7270,1,
	0,0,0,7271,7272,1,0,0,0,7272,7278,1,0,0,0,7273,7278,5,306,0,0,7274,7275,
	4,453,187,0,7275,7278,5,172,0,0,7276,7278,7,113,0,0,7277,7130,1,0,0,0,7277,
	7142,1,0,0,0,7277,7150,1,0,0,0,7277,7157,1,0,0,0,7277,7161,1,0,0,0,7277,
	7162,1,0,0,0,7277,7169,1,0,0,0,7277,7176,1,0,0,0,7277,7183,1,0,0,0,7277,
	7199,1,0,0,0,7277,7205,1,0,0,0,7277,7207,1,0,0,0,7277,7214,1,0,0,0,7277,
	7215,1,0,0,0,7277,7219,1,0,0,0,7277,7223,1,0,0,0,7277,7227,1,0,0,0,7277,
	7228,1,0,0,0,7277,7232,1,0,0,0,7277,7233,1,0,0,0,7277,7235,1,0,0,0,7277,
	7244,1,0,0,0,7277,7248,1,0,0,0,7277,7255,1,0,0,0,7277,7259,1,0,0,0,7277,
	7263,1,0,0,0,7277,7268,1,0,0,0,7277,7273,1,0,0,0,7277,7274,1,0,0,0,7277,
	7276,1,0,0,0,7278,907,1,0,0,0,7279,7283,5,232,0,0,7280,7281,5,231,0,0,7281,
	7283,5,450,0,0,7282,7279,1,0,0,0,7282,7280,1,0,0,0,7283,909,1,0,0,0,7284,
	7290,5,600,0,0,7285,7287,5,486,0,0,7286,7288,5,592,0,0,7287,7286,1,0,0,
	0,7287,7288,1,0,0,0,7288,7290,1,0,0,0,7289,7284,1,0,0,0,7289,7285,1,0,0,
	0,7290,911,1,0,0,0,7291,7294,5,409,0,0,7292,7295,3,1136,568,0,7293,7295,
	5,423,0,0,7294,7292,1,0,0,0,7294,7293,1,0,0,0,7295,7296,1,0,0,0,7296,7297,
	5,410,0,0,7297,913,1,0,0,0,7298,7300,7,114,0,0,7299,7298,1,0,0,0,7300,7301,
	1,0,0,0,7301,7299,1,0,0,0,7301,7302,1,0,0,0,7302,915,1,0,0,0,7303,7318,
	3,918,459,0,7304,7318,3,920,460,0,7305,7318,5,6,0,0,7306,7307,3,748,374,
	0,7307,7309,3,926,463,0,7308,7310,5,437,0,0,7309,7308,1,0,0,0,7309,7310,
	1,0,0,0,7310,7318,1,0,0,0,7311,7315,5,437,0,0,7312,7313,3,748,374,0,7313,
	7314,3,926,463,0,7314,7316,1,0,0,0,7315,7312,1,0,0,0,7315,7316,1,0,0,0,
	7316,7318,1,0,0,0,7317,7303,1,0,0,0,7317,7304,1,0,0,0,7317,7305,1,0,0,0,
	7317,7306,1,0,0,0,7317,7311,1,0,0,0,7318,917,1,0,0,0,7319,7321,5,2,0,0,
	7320,7322,5,437,0,0,7321,7320,1,0,0,0,7321,7322,1,0,0,0,7322,7326,1,0,0,
	0,7323,7324,5,437,0,0,7324,7326,5,2,0,0,7325,7319,1,0,0,0,7325,7323,1,0,
	0,0,7326,919,1,0,0,0,7327,7329,5,51,0,0,7328,7330,5,437,0,0,7329,7328,1,
	0,0,0,7329,7330,1,0,0,0,7330,7334,1,0,0,0,7331,7332,5,437,0,0,7332,7334,
	5,51,0,0,7333,7327,1,0,0,0,7333,7331,1,0,0,0,7334,921,1,0,0,0,7335,7336,
	5,409,0,0,7336,7337,3,1132,566,0,7337,7338,5,410,0,0,7338,923,1,0,0,0,7339,
	7340,5,409,0,0,7340,7341,5,380,0,0,7341,7342,5,410,0,0,7342,925,1,0,0,0,
	7343,7348,3,1170,585,0,7344,7348,5,437,0,0,7345,7346,4,463,188,0,7346,7348,
	5,478,0,0,7347,7343,1,0,0,0,7347,7344,1,0,0,0,7347,7345,1,0,0,0,7348,927,
	1,0,0,0,7349,7355,3,1170,585,0,7350,7351,4,464,189,0,7351,7355,5,478,0,
	0,7352,7353,4,464,190,0,7353,7355,5,437,0,0,7354,7349,1,0,0,0,7354,7350,
	1,0,0,0,7354,7352,1,0,0,0,7355,929,1,0,0,0,7356,7363,3,934,467,0,7357,7359,
	5,406,0,0,7358,7357,1,0,0,0,7358,7359,1,0,0,0,7359,7360,1,0,0,0,7360,7362,
	3,934,467,0,7361,7358,1,0,0,0,7362,7365,1,0,0,0,7363,7361,1,0,0,0,7363,
	7364,1,0,0,0,7364,931,1,0,0,0,7365,7363,1,0,0,0,7366,7368,3,934,467,0,7367,
	7366,1,0,0,0,7368,7369,1,0,0,0,7369,7367,1,0,0,0,7369,7370,1,0,0,0,7370,
	933,1,0,0,0,7371,7373,5,128,0,0,7372,7374,5,383,0,0,7373,7372,1,0,0,0,7373,
	7374,1,0,0,0,7374,7375,1,0,0,0,7375,7501,3,1084,542,0,7376,7377,4,467,191,
	0,7377,7379,5,751,0,0,7378,7380,3,1180,590,0,7379,7378,1,0,0,0,7379,7380,
	1,0,0,0,7380,7383,1,0,0,0,7381,7384,5,576,0,0,7382,7384,3,1170,585,0,7383,
	7381,1,0,0,0,7383,7382,1,0,0,0,7384,7501,1,0,0,0,7385,7387,5,184,0,0,7386,
	7388,5,383,0,0,7387,7386,1,0,0,0,7387,7388,1,0,0,0,7388,7389,1,0,0,0,7389,
	7501,3,1134,567,0,7390,7392,5,220,0,0,7391,7393,5,383,0,0,7392,7391,1,0,
	0,0,7392,7393,1,0,0,0,7393,7394,1,0,0,0,7394,7501,3,1134,567,0,7395,7397,
	5,69,0,0,7396,7398,5,383,0,0,7397,7396,1,0,0,0,7397,7398,1,0,0,0,7398,7399,
	1,0,0,0,7399,7501,3,1130,565,0,7400,7402,5,251,0,0,7401,7403,5,383,0,0,
	7402,7401,1,0,0,0,7402,7403,1,0,0,0,7403,7404,1,0,0,0,7404,7501,3,1144,
	572,0,7405,7407,5,11,0,0,7406,7408,5,383,0,0,7407,7406,1,0,0,0,7407,7408,
	1,0,0,0,7408,7409,1,0,0,0,7409,7501,3,1144,572,0,7410,7411,4,467,192,0,
	7411,7413,5,95,0,0,7412,7414,5,383,0,0,7413,7412,1,0,0,0,7413,7414,1,0,
	0,0,7414,7415,1,0,0,0,7415,7501,3,1146,573,0,7416,7417,4,467,193,0,7417,
	7419,5,96,0,0,7418,7420,5,383,0,0,7419,7418,1,0,0,0,7419,7420,1,0,0,0,7420,
	7421,1,0,0,0,7421,7501,3,1146,573,0,7422,7424,5,67,0,0,7423,7425,5,383,
	0,0,7424,7423,1,0,0,0,7424,7425,1,0,0,0,7425,7426,1,0,0,0,7426,7501,3,1134,
	567,0,7427,7429,5,246,0,0,7428,7430,5,383,0,0,7429,7428,1,0,0,0,7429,7430,
	1,0,0,0,7430,7431,1,0,0,0,7431,7501,3,936,468,0,7432,7434,7,115,0,0,7433,
	7435,5,383,0,0,7434,7433,1,0,0,0,7434,7435,1,0,0,0,7435,7436,1,0,0,0,7436,
	7501,3,936,468,0,7437,7439,7,116,0,0,7438,7440,5,383,0,0,7439,7438,1,0,
	0,0,7439,7440,1,0,0,0,7440,7441,1,0,0,0,7441,7501,3,1130,565,0,7442,7444,
	5,116,0,0,7443,7445,5,383,0,0,7444,7443,1,0,0,0,7444,7445,1,0,0,0,7445,
	7446,1,0,0,0,7446,7501,3,1130,565,0,7447,7449,5,300,0,0,7448,7450,5,383,
	0,0,7449,7448,1,0,0,0,7449,7450,1,0,0,0,7450,7451,1,0,0,0,7451,7501,7,117,
	0,0,7452,7454,5,659,0,0,7453,7455,5,383,0,0,7454,7453,1,0,0,0,7454,7455,
	1,0,0,0,7455,7456,1,0,0,0,7456,7457,5,409,0,0,7457,7458,3,1094,547,0,7458,
	7459,5,410,0,0,7459,7501,1,0,0,0,7460,7501,3,942,471,0,7461,7501,3,938,
	469,0,7462,7464,5,171,0,0,7463,7465,5,383,0,0,7464,7463,1,0,0,0,7464,7465,
	1,0,0,0,7465,7466,1,0,0,0,7466,7501,7,118,0,0,7467,7468,5,109,0,0,7468,
	7470,5,119,0,0,7469,7471,5,383,0,0,7470,7469,1,0,0,0,7470,7471,1,0,0,0,
	7471,7472,1,0,0,0,7472,7501,3,1146,573,0,7473,7474,5,521,0,0,7474,7476,
	5,119,0,0,7475,7477,5,383,0,0,7476,7475,1,0,0,0,7476,7477,1,0,0,0,7477,
	7478,1,0,0,0,7478,7501,3,1146,573,0,7479,7485,5,342,0,0,7480,7482,4,467,
	194,0,7481,7483,5,383,0,0,7482,7481,1,0,0,0,7482,7483,1,0,0,0,7483,7486,
	1,0,0,0,7484,7486,1,0,0,0,7485,7480,1,0,0,0,7485,7484,1,0,0,0,7486,7487,
	1,0,0,0,7487,7501,3,1118,559,0,7488,7489,5,328,0,0,7489,7501,7,119,0,0,
	7490,7492,5,98,0,0,7491,7493,5,383,0,0,7492,7491,1,0,0,0,7492,7493,1,0,
	0,0,7493,7494,1,0,0,0,7494,7501,3,1146,573,0,7495,7497,5,173,0,0,7496,7498,
	5,383,0,0,7497,7496,1,0,0,0,7497,7498,1,0,0,0,7498,7499,1,0,0,0,7499,7501,
	3,1130,565,0,7500,7371,1,0,0,0,7500,7376,1,0,0,0,7500,7385,1,0,0,0,7500,
	7390,1,0,0,0,7500,7395,1,0,0,0,7500,7400,1,0,0,0,7500,7405,1,0,0,0,7500,
	7410,1,0,0,0,7500,7416,1,0,0,0,7500,7422,1,0,0,0,7500,7427,1,0,0,0,7500,
	7432,1,0,0,0,7500,7437,1,0,0,0,7500,7442,1,0,0,0,7500,7447,1,0,0,0,7500,
	7452,1,0,0,0,7500,7460,1,0,0,0,7500,7461,1,0,0,0,7500,7462,1,0,0,0,7500,
	7467,1,0,0,0,7500,7473,1,0,0,0,7500,7479,1,0,0,0,7500,7488,1,0,0,0,7500,
	7490,1,0,0,0,7500,7495,1,0,0,0,7501,935,1,0,0,0,7502,7505,3,1130,565,0,
	7503,7505,5,478,0,0,7504,7502,1,0,0,0,7504,7503,1,0,0,0,7505,937,1,0,0,
	0,7506,7508,5,478,0,0,7507,7506,1,0,0,0,7507,7508,1,0,0,0,7508,7509,1,0,
	0,0,7509,7511,5,452,0,0,7510,7512,5,383,0,0,7511,7510,1,0,0,0,7511,7512,
	1,0,0,0,7512,7513,1,0,0,0,7513,7514,3,928,464,0,7514,939,1,0,0,0,7515,7517,
	5,478,0,0,7516,7515,1,0,0,0,7516,7517,1,0,0,0,7517,7518,1,0,0,0,7518,7520,
	5,96,0,0,7519,7521,5,383,0,0,7520,7519,1,0,0,0,7520,7521,1,0,0,0,7521,7522,
	1,0,0,0,7522,7523,3,1144,572,0,7523,941,1,0,0,0,7524,7526,5,478,0,0,7525,
	7524,1,0,0,0,7525,7526,1,0,0,0,7526,7527,1,0,0,0,7527,7529,3,748,374,0,
	7528,7530,5,383,0,0,7529,7528,1,0,0,0,7529,7530,1,0,0,0,7530,7531,1,0,0,
	0,7531,7532,3,926,463,0,7532,943,1,0,0,0,7533,7534,5,32,0,0,7534,7535,5,
	444,0,0,7535,7538,3,946,473,0,7536,7537,5,250,0,0,7537,7539,3,1132,566,
	0,7538,7536,1,0,0,0,7538,7539,1,0,0,0,7539,7541,1,0,0,0,7540,7542,3,948,
	474,0,7541,7540,1,0,0,0,7541,7542,1,0,0,0,7542,7544,1,0,0,0,7543,7545,3,
	952,476,0,7544,7543,1,0,0,0,7544,7545,1,0,0,0,7545,945,1,0,0,0,7546,7548,
	5,544,0,0,7547,7546,1,0,0,0,7547,7548,1,0,0,0,7548,7549,1,0,0,0,7549,7551,
	5,537,0,0,7550,7552,3,950,475,0,7551,7550,1,0,0,0,7551,7552,1,0,0,0,7552,
	7553,1,0,0,0,7553,7555,5,409,0,0,7554,7556,3,1120,560,0,7555,7554,1,0,0,
	0,7555,7556,1,0,0,0,7556,7557,1,0,0,0,7557,7580,5,410,0,0,7558,7560,5,544,
	0,0,7559,7558,1,0,0,0,7559,7560,1,0,0,0,7560,7561,1,0,0,0,7561,7562,5,156,
	0,0,7562,7563,5,409,0,0,7563,7564,3,676,338,0,7564,7565,5,410,0,0,7565,
	7580,1,0,0,0,7566,7577,7,120,0,0,7567,7568,5,409,0,0,7568,7569,3,676,338,
	0,7569,7570,5,410,0,0,7570,7578,1,0,0,0,7571,7572,5,90,0,0,7572,7574,5,
	409,0,0,7573,7575,3,1120,560,0,7574,7573,1,0,0,0,7574,7575,1,0,0,0,7575,
	7576,1,0,0,0,7576,7578,5,410,0,0,7577,7567,1,0,0,0,7577,7571,1,0,0,0,7578,
	7580,1,0,0,0,7579,7547,1,0,0,0,7579,7559,1,0,0,0,7579,7566,1,0,0,0,7580,
	947,1,0,0,0,7581,7582,5,333,0,0,7582,7584,5,444,0,0,7583,7585,5,544,0,0,
	7584,7583,1,0,0,0,7584,7585,1,0,0,0,7585,7596,1,0,0,0,7586,7587,5,156,0,
	0,7587,7588,5,409,0,0,7588,7589,3,676,338,0,7589,7590,5,410,0,0,7590,7597,
	1,0,0,0,7591,7593,5,537,0,0,7592,7594,3,950,475,0,7593,7592,1,0,0,0,7593,
	7594,1,0,0,0,7594,7595,1,0,0,0,7595,7597,3,1122,561,0,7596,7586,1,0,0,0,
	7596,7591,1,0,0,0,7597,7600,1,0,0,0,7598,7599,5,334,0,0,7599,7601,3,1132,
	566,0,7600,7598,1,0,0,0,7600,7601,1,0,0,0,7601,949,1,0,0,0,7602,7603,4,
	475,195,0,7603,7604,5,62,0,0,7604,7605,5,383,0,0,7605,7606,3,1132,566,0,
	7606,951,1,0,0,0,7607,7608,5,409,0,0,7608,7613,3,954,477,0,7609,7610,5,
	406,0,0,7610,7612,3,954,477,0,7611,7609,1,0,0,0,7612,7615,1,0,0,0,7613,
	7611,1,0,0,0,7613,7614,1,0,0,0,7614,7616,1,0,0,0,7615,7613,1,0,0,0,7616,
	7617,5,410,0,0,7617,953,1,0,0,0,7618,7619,5,32,0,0,7619,7630,3,1118,559,
	0,7620,7621,5,671,0,0,7621,7622,5,176,0,0,7622,7625,5,346,0,0,7623,7626,
	3,962,481,0,7624,7626,5,559,0,0,7625,7623,1,0,0,0,7625,7624,1,0,0,0,7626,
	7631,1,0,0,0,7627,7628,5,671,0,0,7628,7629,5,530,0,0,7629,7631,3,956,478,
	0,7630,7620,1,0,0,0,7630,7627,1,0,0,0,7630,7631,1,0,0,0,7631,7635,1,0,0,
	0,7632,7634,3,958,479,0,7633,7632,1,0,0,0,7634,7637,1,0,0,0,7635,7633,1,
	0,0,0,7635,7636,1,0,0,0,7636,7649,1,0,0,0,7637,7635,1,0,0,0,7638,7639,5,
	409,0,0,7639,7644,3,960,480,0,7640,7641,5,406,0,0,7641,7643,3,960,480,0,
	7642,7640,1,0,0,0,7643,7646,1,0,0,0,7644,7642,1,0,0,0,7644,7645,1,0,0,0,
	7645,7647,1,0,0,0,7646,7644,1,0,0,0,7647,7648,5,410,0,0,7648,7650,1,0,0,
	0,7649,7638,1,0,0,0,7649,7650,1,0,0,0,7650,955,1,0,0,0,7651,7664,3,962,
	481,0,7652,7653,5,409,0,0,7653,7658,3,962,481,0,7654,7655,5,406,0,0,7655,
	7657,3,962,481,0,7656,7654,1,0,0,0,7657,7660,1,0,0,0,7658,7656,1,0,0,0,
	7658,7659,1,0,0,0,7659,7661,1,0,0,0,7660,7658,1,0,0,0,7661,7662,5,410,0,
	0,7662,7664,1,0,0,0,7663,7651,1,0,0,0,7663,7652,1,0,0,0,7664,957,1,0,0,
	0,7665,7667,5,342,0,0,7666,7668,5,383,0,0,7667,7666,1,0,0,0,7667,7668,1,
	0,0,0,7668,7669,1,0,0,0,7669,7700,3,1118,559,0,7670,7672,5,328,0,0,7671,
	7670,1,0,0,0,7671,7672,1,0,0,0,7672,7673,1,0,0,0,7673,7675,5,128,0,0,7674,
	7676,5,383,0,0,7675,7674,1,0,0,0,7675,7676,1,0,0,0,7676,7677,1,0,0,0,7677,
	7700,3,1084,542,0,7678,7680,5,238,0,0,7679,7681,5,383,0,0,7680,7679,1,0,
	0,0,7680,7681,1,0,0,0,7681,7682,1,0,0,0,7682,7700,3,1132,566,0,7683,7685,
	7,121,0,0,7684,7686,5,383,0,0,7685,7684,1,0,0,0,7685,7686,1,0,0,0,7686,
	7687,1,0,0,0,7687,7700,3,1132,566,0,7688,7689,7,122,0,0,7689,7691,5,119,
	0,0,7690,7692,5,383,0,0,7691,7690,1,0,0,0,7691,7692,1,0,0,0,7692,7693,1,
	0,0,0,7693,7700,3,1150,575,0,7694,7696,5,11,0,0,7695,7697,5,383,0,0,7696,
	7695,1,0,0,0,7696,7697,1,0,0,0,7697,7698,1,0,0,0,7698,7700,3,1150,575,0,
	7699,7665,1,0,0,0,7699,7671,1,0,0,0,7699,7678,1,0,0,0,7699,7683,1,0,0,0,
	7699,7688,1,0,0,0,7699,7694,1,0,0,0,7700,959,1,0,0,0,7701,7702,5,333,0,
	0,7702,7706,3,1170,585,0,7703,7705,3,958,479,0,7704,7703,1,0,0,0,7705,7708,
	1,0,0,0,7706,7704,1,0,0,0,7706,7707,1,0,0,0,7707,961,1,0,0,0,7708,7706,
	1,0,0,0,7709,7710,5,409,0,0,7710,7715,3,964,482,0,7711,7712,5,406,0,0,7712,
	7714,3,964,482,0,7713,7711,1,0,0,0,7714,7717,1,0,0,0,7715,7713,1,0,0,0,
	7715,7716,1,0,0,0,7716,7718,1,0,0,0,7717,7715,1,0,0,0,7718,7719,5,410,0,
	0,7719,963,1,0,0,0,7720,7723,3,676,338,0,7721,7723,5,559,0,0,7722,7720,
	1,0,0,0,7722,7721,1,0,0,0,7723,965,1,0,0,0,7724,7725,5,115,0,0,7725,7726,
	5,383,0,0,7726,7727,3,1016,508,0,7727,967,1,0,0,0,7728,7729,5,519,0,0,7729,
	7730,5,496,0,0,7730,969,1,0,0,0,7731,7732,5,519,0,0,7732,7733,3,750,375,
	0,7733,7734,5,496,0,0,7734,971,1,0,0,0,7735,7737,7,123,0,0,7736,7735,1,
	0,0,0,7736,7737,1,0,0,0,7737,7738,1,0,0,0,7738,7739,3,974,487,0,7739,973,
	1,0,0,0,7740,7741,3,1098,549,0,7741,7742,3,978,489,0,7742,975,1,0,0,0,7743,
	7744,5,452,0,0,7744,7745,3,928,464,0,7745,977,1,0,0,0,7746,7748,3,906,453,
	0,7747,7749,3,976,488,0,7748,7747,1,0,0,0,7748,7749,1,0,0,0,7749,979,1,
	0,0,0,7750,7751,5,409,0,0,7751,7752,3,1048,524,0,7752,7753,5,406,0,0,7753,
	7754,3,1048,524,0,7754,7755,5,410,0,0,7755,981,1,0,0,0,7756,7761,3,1064,
	532,0,7757,7758,5,406,0,0,7758,7760,3,1064,532,0,7759,7757,1,0,0,0,7760,
	7763,1,0,0,0,7761,7759,1,0,0,0,7761,7762,1,0,0,0,7762,983,1,0,0,0,7763,
	7761,1,0,0,0,7764,7769,3,986,493,0,7765,7766,5,406,0,0,7766,7768,3,986,
	493,0,7767,7765,1,0,0,0,7768,7771,1,0,0,0,7769,7767,1,0,0,0,7769,7770,1,
	0,0,0,7770,985,1,0,0,0,7771,7769,1,0,0,0,7772,7773,3,1036,518,0,7773,7776,
	5,383,0,0,7774,7777,3,666,333,0,7775,7777,5,478,0,0,7776,7774,1,0,0,0,7776,
	7775,1,0,0,0,7777,987,1,0,0,0,7778,7779,3,748,374,0,7779,7780,3,926,463,
	0,7780,989,1,0,0,0,7781,7783,5,90,0,0,7782,7784,3,992,496,0,7783,7782,1,
	0,0,0,7784,7785,1,0,0,0,7785,7783,1,0,0,0,7785,7786,1,0,0,0,7786,991,1,
	0,0,0,7787,7788,5,648,0,0,7788,7789,5,444,0,0,7789,7800,3,1146,573,0,7790,
	7792,5,585,0,0,7791,7790,1,0,0,0,7791,7792,1,0,0,0,7792,7793,1,0,0,0,7793,
	7794,5,492,0,0,7794,7795,5,444,0,0,7795,7800,3,1146,573,0,7796,7797,5,494,
	0,0,7797,7798,5,444,0,0,7798,7800,3,1146,573,0,7799,7787,1,0,0,0,7799,7791,
	1,0,0,0,7799,7796,1,0,0,0,7800,993,1,0,0,0,7801,7803,5,545,0,0,7802,7804,
	3,996,498,0,7803,7802,1,0,0,0,7804,7805,1,0,0,0,7805,7803,1,0,0,0,7805,
	7806,1,0,0,0,7806,995,1,0,0,0,7807,7808,7,124,0,0,7808,7809,5,444,0,0,7809,
	7810,3,1146,573,0,7810,997,1,0,0,0,7811,7816,3,1016,508,0,7812,7813,5,406,
	0,0,7813,7815,3,1016,508,0,7814,7812,1,0,0,0,7815,7818,1,0,0,0,7816,7814,
	1,0,0,0,7816,7817,1,0,0,0,7817,999,1,0,0,0,7818,7816,1,0,0,0,7819,7824,
	3,1004,502,0,7820,7821,5,406,0,0,7821,7823,3,1004,502,0,7822,7820,1,0,0,
	0,7823,7826,1,0,0,0,7824,7822,1,0,0,0,7824,7825,1,0,0,0,7825,1001,1,0,0,
	0,7826,7824,1,0,0,0,7827,7832,3,1006,503,0,7828,7829,5,406,0,0,7829,7831,
	3,1006,503,0,7830,7828,1,0,0,0,7831,7834,1,0,0,0,7832,7830,1,0,0,0,7832,
	7833,1,0,0,0,7833,1003,1,0,0,0,7834,7832,1,0,0,0,7835,7862,3,1016,508,0,
	7836,7860,5,159,0,0,7837,7840,5,444,0,0,7838,7839,4,502,196,0,7839,7841,
	5,251,0,0,7840,7838,1,0,0,0,7840,7841,1,0,0,0,7841,7842,1,0,0,0,7842,7861,
	3,1146,573,0,7843,7844,5,682,0,0,7844,7850,3,1170,585,0,7845,7846,5,431,
	0,0,7846,7851,3,1148,574,0,7847,7848,4,502,197,0,7848,7849,5,444,0,0,7849,
	7851,3,1146,573,0,7850,7845,1,0,0,0,7850,7847,1,0,0,0,7850,7851,1,0,0,0,
	7851,7861,1,0,0,0,7852,7855,4,502,198,0,7853,7854,5,682,0,0,7854,7856,3,
	1170,585,0,7855,7853,1,0,0,0,7855,7856,1,0,0,0,7856,7857,1,0,0,0,7857,7858,
	5,444,0,0,7858,7859,5,764,0,0,7859,7861,5,251,0,0,7860,7837,1,0,0,0,7860,
	7843,1,0,0,0,7860,7852,1,0,0,0,7861,7863,1,0,0,0,7862,7836,1,0,0,0,7862,
	7863,1,0,0,0,7863,1005,1,0,0,0,7864,7893,3,1016,508,0,7865,7888,5,159,0,
	0,7866,7867,5,682,0,0,7867,7869,3,1170,585,0,7868,7866,1,0,0,0,7868,7869,
	1,0,0,0,7869,7870,1,0,0,0,7870,7871,5,444,0,0,7871,7874,3,1146,573,0,7872,
	7873,5,606,0,0,7873,7875,3,1146,573,0,7874,7872,1,0,0,0,7874,7875,1,0,0,
	0,7875,7877,1,0,0,0,7876,7878,3,1008,504,0,7877,7876,1,0,0,0,7877,7878,
	1,0,0,0,7878,7889,1,0,0,0,7879,7880,5,682,0,0,7880,7886,3,1170,585,0,7881,
	7882,5,431,0,0,7882,7884,3,1148,574,0,7883,7885,3,1008,504,0,7884,7883,
	1,0,0,0,7884,7885,1,0,0,0,7885,7887,1,0,0,0,7886,7881,1,0,0,0,7886,7887,
	1,0,0,0,7887,7889,1,0,0,0,7888,7868,1,0,0,0,7888,7879,1,0,0,0,7888,7889,
	1,0,0,0,7889,7894,1,0,0,0,7890,7892,3,1010,505,0,7891,7890,1,0,0,0,7891,
	7892,1,0,0,0,7892,7894,1,0,0,0,7893,7865,1,0,0,0,7893,7891,1,0,0,0,7894,
	1007,1,0,0,0,7895,7896,5,757,0,0,7896,7897,5,107,0,0,7897,7898,5,251,0,
	0,7898,1009,1,0,0,0,7899,7900,5,121,0,0,7900,7901,5,758,0,0,7901,7902,5,
	251,0,0,7902,1011,1,0,0,0,7903,7904,5,606,0,0,7904,7905,3,1146,573,0,7905,
	1013,1,0,0,0,7906,7910,3,1170,585,0,7907,7908,5,416,0,0,7908,7911,3,1170,
	585,0,7909,7911,5,417,0,0,7910,7907,1,0,0,0,7910,7909,1,0,0,0,7910,7911,
	1,0,0,0,7911,1015,1,0,0,0,7912,7918,3,1014,507,0,7913,7915,5,464,0,0,7914,
	7916,3,1178,589,0,7915,7914,1,0,0,0,7915,7916,1,0,0,0,7916,7918,1,0,0,0,
	7917,7912,1,0,0,0,7917,7913,1,0,0,0,7918,1017,1,0,0,0,7919,7920,5,542,0,
	0,7920,7921,3,1144,572,0,7921,1019,1,0,0,0,7922,7925,3,1018,509,0,7923,
	7925,3,350,175,0,7924,7922,1,0,0,0,7924,7923,1,0,0,0,7925,1021,1,0,0,0,
	7926,7927,7,125,0,0,7927,1023,1,0,0,0,7928,7929,7,126,0,0,7929,1025,1,0,
	0,0,7930,7931,4,513,199,0,7931,7932,5,32,0,0,7932,7933,3,1122,561,0,7933,
	1027,1,0,0,0,7934,7940,3,1128,564,0,7935,7937,3,1124,562,0,7936,7938,3,
	1128,564,0,7937,7936,1,0,0,0,7937,7938,1,0,0,0,7938,7940,1,0,0,0,7939,7934,
	1,0,0,0,7939,7935,1,0,0,0,7940,1029,1,0,0,0,7941,7942,4,515,200,0,7942,
	7946,3,1118,559,0,7943,7944,4,515,201,0,7944,7946,3,1028,514,0,7945,7941,
	1,0,0,0,7945,7943,1,0,0,0,7946,1031,1,0,0,0,7947,7948,3,1118,559,0,7948,
	1033,1,0,0,0,7949,7950,5,409,0,0,7950,7955,3,1032,516,0,7951,7952,5,406,
	0,0,7952,7954,3,1032,516,0,7953,7951,1,0,0,0,7954,7957,1,0,0,0,7955,7953,
	1,0,0,0,7955,7956,1,0,0,0,7956,7958,1,0,0,0,7957,7955,1,0,0,0,7958,7959,
	5,410,0,0,7959,1035,1,0,0,0,7960,7961,3,1028,514,0,7961,1037,1,0,0,0,7962,
	7965,3,1036,518,0,7963,7965,3,1044,522,0,7964,7962,1,0,0,0,7964,7963,1,
	0,0,0,7965,1039,1,0,0,0,7966,7967,3,1118,559,0,7967,1041,1,0,0,0,7968,7969,
	3,1028,514,0,7969,1043,1,0,0,0,7970,7971,3,1118,559,0,7971,7975,5,405,0,
	0,7972,7973,3,1118,559,0,7973,7974,5,405,0,0,7974,7976,1,0,0,0,7975,7972,
	1,0,0,0,7975,7976,1,0,0,0,7976,7977,1,0,0,0,7977,7978,5,393,0,0,7978,1045,
	1,0,0,0,7979,7980,3,1118,559,0,7980,1047,1,0,0,0,7981,7982,3,1118,559,0,
	7982,1049,1,0,0,0,7983,7984,3,1124,562,0,7984,1051,1,0,0,0,7985,7986,3,
	1124,562,0,7986,1053,1,0,0,0,7987,7988,3,1124,562,0,7988,1055,1,0,0,0,7989,
	7990,3,1124,562,0,7990,1057,1,0,0,0,7991,7992,3,1124,562,0,7992,1059,1,
	0,0,0,7993,7994,3,1124,562,0,7994,1061,1,0,0,0,7995,7998,3,1124,562,0,7996,
	7998,3,1128,564,0,7997,7995,1,0,0,0,7997,7996,1,0,0,0,7998,1063,1,0,0,0,
	7999,8002,3,1124,562,0,8000,8002,3,1128,564,0,8001,7999,1,0,0,0,8001,8000,
	1,0,0,0,8002,1065,1,0,0,0,8003,8004,3,1118,559,0,8004,1067,1,0,0,0,8005,
	8006,3,1118,559,0,8006,1069,1,0,0,0,8007,8008,3,1118,559,0,8008,1071,1,
	0,0,0,8009,8010,3,1118,559,0,8010,1073,1,0,0,0,8011,8012,3,1124,562,0,8012,
	1075,1,0,0,0,8013,8014,3,1124,562,0,8014,1077,1,0,0,0,8015,8016,3,1118,
	559,0,8016,1079,1,0,0,0,8017,8018,3,1170,585,0,8018,1081,1,0,0,0,8019,8020,
	3,1170,585,0,8020,1083,1,0,0,0,8021,8022,3,1170,585,0,8022,1085,1,0,0,0,
	8023,8026,3,1124,562,0,8024,8026,3,1128,564,0,8025,8023,1,0,0,0,8025,8024,
	1,0,0,0,8026,1087,1,0,0,0,8027,8028,3,1048,524,0,8028,8029,3,1128,564,0,
	8029,1089,1,0,0,0,8030,8038,3,1118,559,0,8031,8032,5,405,0,0,8032,8039,
	5,393,0,0,8033,8036,3,1128,564,0,8034,8035,5,405,0,0,8035,8037,5,393,0,
	0,8036,8034,1,0,0,0,8036,8037,1,0,0,0,8037,8039,1,0,0,0,8038,8031,1,0,0,
	0,8038,8033,1,0,0,0,8038,8039,1,0,0,0,8039,1091,1,0,0,0,8040,8043,3,1124,
	562,0,8041,8043,3,1128,564,0,8042,8040,1,0,0,0,8042,8041,1,0,0,0,8043,1093,
	1,0,0,0,8044,8049,3,1092,546,0,8045,8046,5,406,0,0,8046,8048,3,1092,546,
	0,8047,8045,1,0,0,0,8048,8051,1,0,0,0,8049,8047,1,0,0,0,8049,8050,1,0,0,
	0,8050,1095,1,0,0,0,8051,8049,1,0,0,0,8052,8057,3,1090,545,0,8053,8054,
	5,406,0,0,8054,8056,3,1090,545,0,8055,8053,1,0,0,0,8056,8059,1,0,0,0,8057,
	8055,1,0,0,0,8057,8058,1,0,0,0,8058,1097,1,0,0,0,8059,8057,1,0,0,0,8060,
	8061,3,1118,559,0,8061,1099,1,0,0,0,8062,8065,3,1116,558,0,8063,8065,3,
	1194,597,0,8064,8062,1,0,0,0,8064,8063,1,0,0,0,8065,1101,1,0,0,0,8066,8067,
	3,1100,550,0,8067,1103,1,0,0,0,8068,8071,3,1116,558,0,8069,8071,3,1200,
	600,0,8070,8068,1,0,0,0,8070,8069,1,0,0,0,8071,1105,1,0,0,0,8072,8073,3,
	1104,552,0,8073,1107,1,0,0,0,8074,8075,3,1118,559,0,8075,1109,1,0,0,0,8076,
	8077,3,1144,572,0,8077,1111,1,0,0,0,8078,8079,3,1118,559,0,8079,1113,1,
	0,0,0,8080,8081,3,1118,559,0,8081,1115,1,0,0,0,8082,8086,7,127,0,0,8083,
	8084,4,558,202,0,8084,8086,5,775,0,0,8085,8082,1,0,0,0,8085,8083,1,0,0,
	0,8086,1117,1,0,0,0,8087,8090,3,1116,558,0,8088,8090,3,1188,594,0,8089,
	8087,1,0,0,0,8089,8088,1,0,0,0,8090,1119,1,0,0,0,8091,8096,3,1118,559,0,
	8092,8093,5,406,0,0,8093,8095,3,1118,559,0,8094,8092,1,0,0,0,8095,8098,
	1,0,0,0,8096,8094,1,0,0,0,8096,8097,1,0,0,0,8097,1121,1,0,0,0,8098,8096,
	1,0,0,0,8099,8100,5,409,0,0,8100,8101,3,1120,560,0,8101,8102,5,410,0,0,
	8102,1123,1,0,0,0,8103,8105,3,1118,559,0,8104,8106,3,1128,564,0,8105,8104,
	1,0,0,0,8105,8106,1,0,0,0,8106,1125,1,0,0,0,8107,8112,3,1118,559,0,8108,
	8110,3,1128,564,0,8109,8111,3,1128,564,0,8110,8109,1,0,0,0,8110,8111,1,
	0,0,0,8111,8113,1,0,0,0,8112,8108,1,0,0,0,8112,8113,1,0,0,0,8113,8119,1,
	0,0,0,8114,8115,4,563,203,0,8115,8116,3,1128,564,0,8116,8117,3,1128,564,
	0,8117,8119,1,0,0,0,8118,8107,1,0,0,0,8118,8114,1,0,0,0,8119,1127,1,0,0,
	0,8120,8121,5,405,0,0,8121,8122,3,1118,559,0,8122,1129,1,0,0,0,8123,8124,
	7,128,0,0,8124,1131,1,0,0,0,8125,8126,7,129,0,0,8126,1133,1,0,0,0,8127,
	8128,7,130,0,0,8128,1135,1,0,0,0,8129,8135,5,380,0,0,8130,8131,4,568,204,
	0,8131,8135,5,421,0,0,8132,8135,5,382,0,0,8133,8135,5,381,0,0,8134,8129,
	1,0,0,0,8134,8130,1,0,0,0,8134,8132,1,0,0,0,8134,8133,1,0,0,0,8135,1137,
	1,0,0,0,8136,8146,3,1150,575,0,8137,8146,3,1156,578,0,8138,8146,3,1162,
	581,0,8139,8146,3,1160,580,0,8140,8146,3,1158,579,0,8141,8143,5,771,0,0,
	8142,8141,1,0,0,0,8142,8143,1,0,0,0,8143,8144,1,0,0,0,8144,8146,7,131,0,
	0,8145,8136,1,0,0,0,8145,8137,1,0,0,0,8145,8138,1,0,0,0,8145,8139,1,0,0,
	0,8145,8140,1,0,0,0,8145,8142,1,0,0,0,8146,1139,1,0,0,0,8147,8153,3,1138,
	569,0,8148,8149,5,391,0,0,8149,8153,3,1130,565,0,8150,8151,5,392,0,0,8151,
	8153,3,1130,565,0,8152,8147,1,0,0,0,8152,8148,1,0,0,0,8152,8150,1,0,0,0,
	8153,1141,1,0,0,0,8154,8155,5,409,0,0,8155,8160,3,1146,573,0,8156,8157,
	5,406,0,0,8157,8159,3,1146,573,0,8158,8156,1,0,0,0,8159,8162,1,0,0,0,8160,
	8158,1,0,0,0,8160,8161,1,0,0,0,8161,8163,1,0,0,0,8162,8160,1,0,0,0,8163,
	8164,5,410,0,0,8164,1143,1,0,0,0,8165,8169,5,776,0,0,8166,8167,4,572,205,
	0,8167,8169,5,775,0,0,8168,8165,1,0,0,0,8168,8166,1,0,0,0,8169,1145,1,0,
	0,0,8170,8174,3,1144,572,0,8171,8174,5,421,0,0,8172,8174,5,422,0,0,8173,
	8170,1,0,0,0,8173,8171,1,0,0,0,8173,8172,1,0,0,0,8174,1147,1,0,0,0,8175,
	8179,3,1144,572,0,8176,8177,4,574,206,0,8177,8179,5,421,0,0,8178,8175,1,
	0,0,0,8178,8176,1,0,0,0,8179,1149,1,0,0,0,8180,8182,5,771,0,0,8181,8180,
	1,0,0,0,8181,8182,1,0,0,0,8182,8183,1,0,0,0,8183,8186,3,1144,572,0,8184,
	8186,5,773,0,0,8185,8181,1,0,0,0,8185,8184,1,0,0,0,8186,8190,1,0,0,0,8187,
	8189,3,1144,572,0,8188,8187,1,0,0,0,8189,8192,1,0,0,0,8190,8188,1,0,0,0,
	8190,8191,1,0,0,0,8191,1151,1,0,0,0,8192,8190,1,0,0,0,8193,8194,3,1144,
	572,0,8194,1153,1,0,0,0,8195,8200,3,1144,572,0,8196,8197,5,406,0,0,8197,
	8199,3,1144,572,0,8198,8196,1,0,0,0,8199,8202,1,0,0,0,8200,8198,1,0,0,0,
	8200,8201,1,0,0,0,8201,1155,1,0,0,0,8202,8200,1,0,0,0,8203,8204,7,130,0,
	0,8204,1157,1,0,0,0,8205,8206,7,132,0,0,8206,1159,1,0,0,0,8207,8208,7,133,
	0,0,8208,1161,1,0,0,0,8209,8210,5,112,0,0,8210,8216,5,776,0,0,8211,8212,
	5,352,0,0,8212,8216,5,776,0,0,8213,8214,5,349,0,0,8214,8216,5,776,0,0,8215,
	8209,1,0,0,0,8215,8211,1,0,0,0,8215,8213,1,0,0,0,8216,1163,1,0,0,0,8217,
	8220,3,912,456,0,8218,8220,3,1168,584,0,8219,8217,1,0,0,0,8219,8218,1,0,
	0,0,8220,1165,1,0,0,0,8221,8222,3,1168,584,0,8222,1167,1,0,0,0,8223,8224,
	5,409,0,0,8224,8225,5,380,0,0,8225,8226,5,406,0,0,8226,8227,5,380,0,0,8227,
	8228,5,410,0,0,8228,1169,1,0,0,0,8229,8232,5,776,0,0,8230,8232,3,1118,559,
	0,8231,8229,1,0,0,0,8231,8230,1,0,0,0,8232,1171,1,0,0,0,8233,8236,3,1116,
	558,0,8234,8236,3,1202,601,0,8235,8233,1,0,0,0,8235,8234,1,0,0,0,8236,1173,
	1,0,0,0,8237,8240,3,1104,552,0,8238,8240,3,1144,572,0,8239,8237,1,0,0,0,
	8239,8238,1,0,0,0,8240,1175,1,0,0,0,8241,8244,3,1136,568,0,8242,8244,3,
	1116,558,0,8243,8241,1,0,0,0,8243,8242,1,0,0,0,8244,1177,1,0,0,0,8245,8246,
	5,409,0,0,8246,8247,5,410,0,0,8247,1179,1,0,0,0,8248,8249,7,134,0,0,8249,
	1181,1,0,0,0,8250,8251,7,135,0,0,8251,1183,1,0,0,0,8252,8253,5,155,0,0,
	8253,8259,5,405,0,0,8254,8255,5,180,0,0,8255,8259,5,405,0,0,8256,8257,5,
	308,0,0,8257,8259,5,405,0,0,8258,8252,1,0,0,0,8258,8254,1,0,0,0,8258,8256,
	1,0,0,0,8259,1185,1,0,0,0,8260,8261,5,688,0,0,8261,8271,5,405,0,0,8262,
	8263,5,703,0,0,8263,8271,5,405,0,0,8264,8265,5,155,0,0,8265,8271,5,405,
	0,0,8266,8267,5,180,0,0,8267,8271,5,405,0,0,8268,8269,5,308,0,0,8269,8271,
	5,405,0,0,8270,8260,1,0,0,0,8270,8262,1,0,0,0,8270,8264,1,0,0,0,8270,8266,
	1,0,0,0,8270,8268,1,0,0,0,8271,1187,1,0,0,0,8272,8280,4,594,207,0,8273,
	8281,3,1194,597,0,8274,8281,3,1206,603,0,8275,8281,5,17,0,0,8276,8277,4,
	594,208,0,8277,8281,5,56,0,0,8278,8279,4,594,209,0,8279,8281,5,744,0,0,
	8280,8273,1,0,0,0,8280,8274,1,0,0,0,8280,8275,1,0,0,0,8280,8276,1,0,0,0,
	8280,8278,1,0,0,0,8281,8290,1,0,0,0,8282,8288,3,1198,599,0,8283,8288,3,
	1190,595,0,8284,8288,3,1192,596,0,8285,8288,3,1196,598,0,8286,8288,3,1204,
	602,0,8287,8282,1,0,0,0,8287,8283,1,0,0,0,8287,8284,1,0,0,0,8287,8285,1,
	0,0,0,8287,8286,1,0,0,0,8288,8290,1,0,0,0,8289,8272,1,0,0,0,8289,8287,1,
	0,0,0,8290,1189,1,0,0,0,8291,8292,7,136,0,0,8292,1191,1,0,0,0,8293,8294,
	7,137,0,0,8294,1193,1,0,0,0,8295,8306,4,597,210,0,8296,8307,3,1208,604,
	0,8297,8307,5,133,0,0,8298,8307,5,145,0,0,8299,8307,5,239,0,0,8300,8307,
	5,261,0,0,8301,8307,5,265,0,0,8302,8307,5,280,0,0,8303,8307,5,283,0,0,8304,
	8307,5,739,0,0,8305,8307,5,335,0,0,8306,8296,1,0,0,0,8306,8297,1,0,0,0,
	8306,8298,1,0,0,0,8306,8299,1,0,0,0,8306,8300,1,0,0,0,8306,8301,1,0,0,0,
	8306,8302,1,0,0,0,8306,8303,1,0,0,0,8306,8304,1,0,0,0,8306,8305,1,0,0,0,
	8307,8314,1,0,0,0,8308,8312,3,1198,599,0,8309,8312,3,1196,598,0,8310,8312,
	3,1204,602,0,8311,8308,1,0,0,0,8311,8309,1,0,0,0,8311,8310,1,0,0,0,8312,
	8314,1,0,0,0,8313,8295,1,0,0,0,8313,8311,1,0,0,0,8314,1195,1,0,0,0,8315,
	8316,7,138,0,0,8316,1197,1,0,0,0,8317,8318,7,139,0,0,8318,1199,1,0,0,0,
	8319,8322,4,600,211,0,8320,8323,3,1208,604,0,8321,8323,3,1206,603,0,8322,
	8320,1,0,0,0,8322,8321,1,0,0,0,8323,8330,1,0,0,0,8324,8328,3,1198,599,0,
	8325,8328,3,1192,596,0,8326,8328,3,1204,602,0,8327,8324,1,0,0,0,8327,8325,
	1,0,0,0,8327,8326,1,0,0,0,8328,8330,1,0,0,0,8329,8319,1,0,0,0,8329,8327,
	1,0,0,0,8330,1201,1,0,0,0,8331,8336,3,1198,599,0,8332,8336,3,1190,595,0,
	8333,8336,3,1192,596,0,8334,8336,3,1196,598,0,8335,8331,1,0,0,0,8335,8332,
	1,0,0,0,8335,8333,1,0,0,0,8335,8334,1,0,0,0,8336,1203,1,0,0,0,8337,8338,
	7,135,0,0,8338,1205,1,0,0,0,8339,8345,7,140,0,0,8340,8341,4,603,212,0,8341,
	8345,5,56,0,0,8342,8343,4,603,213,0,8343,8345,5,162,0,0,8344,8339,1,0,0,
	0,8344,8340,1,0,0,0,8344,8342,1,0,0,0,8345,1207,1,0,0,0,8346,8356,7,141,
	0,0,8347,8348,4,604,214,0,8348,8356,5,56,0,0,8349,8350,4,604,215,0,8350,
	8356,7,142,0,0,8351,8352,4,604,216,0,8352,8356,7,143,0,0,8353,8354,4,604,
	217,0,8354,8356,5,690,0,0,8355,8346,1,0,0,0,8355,8347,1,0,0,0,8355,8349,
	1,0,0,0,8355,8351,1,0,0,0,8355,8353,1,0,0,0,8356,1209,1,0,0,0,1120,1213,
	1217,1220,1222,1258,1266,1271,1287,1294,1301,1304,1311,1316,1319,1324,1330,
	1332,1336,1340,1349,1353,1358,1364,1371,1375,1380,1385,1392,1395,1401,1404,
	1411,1421,1426,1431,1439,1445,1449,1454,1463,1469,1475,1481,1491,1497,1506,
	1520,1524,1530,1534,1540,1544,1549,1552,1558,1564,1570,1574,1579,1583,1587,
	1595,1597,1604,1612,1620,1624,1647,1663,1666,1675,1680,1686,1691,1695,1700,
	1704,1708,1712,1716,1720,1722,1733,1738,1744,1752,1761,1766,1769,1774,1781,
	1789,1793,1798,1805,1810,1815,1823,1827,1832,1835,1838,1841,1848,1855,1859,
	1883,1887,1893,1900,1903,1907,1914,1917,1920,1923,1932,1939,1944,1947,1950,
	1956,1962,1965,1970,1980,1983,1989,1995,2005,2008,2016,2022,2033,2036,2041,
	2060,2063,2066,2072,2075,2077,2083,2093,2103,2106,2109,2114,2120,2133,2137,
	2142,2151,2168,2187,2196,2199,2207,2212,2216,2223,2228,2243,2247,2253,2259,
	2265,2271,2277,2282,2286,2294,2300,2306,2311,2314,2317,2326,2329,2340,2352,
	2361,2365,2374,2377,2383,2385,2389,2396,2409,2416,2422,2425,2442,2462,2466,
	2472,2478,2484,2489,2496,2503,2508,2511,2515,2519,2524,2528,2532,2538,2543,
	2546,2550,2556,2560,2564,2572,2580,2589,2598,2611,2614,2618,2624,2632,2637,
	2640,2643,2646,2649,2651,2657,2659,2674,2680,2687,2690,2692,2694,2704,2706,
	2710,2713,2716,2720,2725,2731,2734,2737,2743,2746,2755,2764,2768,2772,2778,
	2783,2788,2793,2797,2803,2814,2817,2822,2828,2831,2834,2837,2840,2854,2857,
	2861,2865,2871,2876,2880,2885,2888,2892,2898,2903,2912,2916,2920,2923,2928,
	2931,2933,2937,2940,2946,2948,2955,2959,2961,2966,2970,2974,2980,2988,2993,
	2996,2999,3002,3005,3009,3024,3028,3034,3037,3040,3046,3051,3055,3058,3066,
	3068,3081,3093,3098,3101,3104,3109,3115,3131,3151,3160,3164,3171,3176,3185,
	3192,3203,3210,3221,3228,3232,3238,3243,3248,3252,3258,3264,3266,3269,3273,
	3283,3288,3293,3300,3309,3317,3322,3326,3332,3335,3338,3342,3346,3356,3360,
	3363,3366,3371,3377,3381,3387,3390,3392,3397,3409,3418,3431,3434,3439,3446,
	3450,3454,3456,3470,3477,3486,3492,3501,3505,3509,3519,3521,3529,3536,3541,
	3545,3549,3552,3558,3561,3564,3570,3577,3582,3586,3589,3592,3595,3597,3601,
	3609,3615,3619,3624,3627,3630,3633,3635,3640,3649,3662,3664,3668,3674,3677,
	3680,3686,3693,3695,3703,3709,3714,3717,3724,3726,3735,3744,3753,3761,3765,
	3772,3775,3777,3785,3791,3801,3808,3896,3900,3904,3918,3926,3929,3941,3946,
	3952,3959,3966,3973,3980,3987,3994,3997,4004,4012,4020,4030,4036,4040,4044,
	4049,4052,4054,4063,4069,4076,4081,4086,4091,4094,4101,4114,4120,4126,4133,
	4141,4147,4159,4161,4167,4171,4173,4177,4190,4196,4204,4215,4219,4232,4239,
	4245,4247,4257,4265,4268,4273,4277,4283,4286,4291,4302,4304,4316,4321,4329,
	4335,4337,4339,4345,4357,4362,4364,4368,4374,4377,4380,4390,4392,4398,4405,
	4411,4421,4425,4430,4447,4463,4468,4476,4484,4489,4495,4498,4500,4509,4515,
	4521,4523,4527,4538,4548,4553,4558,4563,4571,4575,4580,4589,4601,4615,4624,
	4626,4633,4640,4644,4650,4658,4665,4669,4675,4682,4685,4694,4700,4705,4728,
	4731,4747,4752,4755,4759,4762,4776,4782,4787,4790,4792,4796,4801,4803,4815,
	4821,4843,4847,4849,4857,4861,4870,4880,4887,4890,4894,4897,4900,4904,4907,
	4911,4914,4919,4922,4927,4930,4936,4940,4946,4949,4958,4960,4966,4970,4973,
	4976,4980,4986,4989,4992,5002,5006,5015,5018,5023,5026,5029,5033,5036,5041,
	5045,5053,5066,5084,5089,5094,5102,5108,5110,5114,5117,5131,5141,5145,5153,
	5156,5160,5170,5174,5181,5186,5194,5199,5205,5212,5217,5223,5230,5240,5242,
	5250,5255,5259,5262,5269,5274,5278,5289,5297,5301,5304,5307,5311,5315,5320,
	5326,5330,5341,5344,5347,5350,5358,5362,5367,5375,5383,5389,5402,5412,5418,
	5432,5435,5439,5450,5452,5461,5473,5475,5482,5488,5494,5502,5513,5517,5546,
	5548,5555,5572,5579,5593,5605,5611,5618,5621,5655,5663,5665,5677,5682,5688,
	5696,5703,5709,5714,5720,5725,5730,5736,5741,5747,5755,5763,5771,5779,5784,
	5790,5795,5799,5803,5808,5810,5829,5833,5840,5852,5855,5859,5864,5869,5873,
	5883,5892,5894,5897,5906,5913,5926,5931,5938,5944,5970,6001,6021,6027,6031,
	6058,6070,6083,6087,6091,6119,6175,6185,6189,6201,6206,6219,6239,6243,6260,
	6263,6268,6271,6280,6284,6290,6296,6300,6311,6317,6319,6326,6333,6337,6344,
	6349,6354,6357,6362,6366,6370,6375,6380,6382,6386,6399,6403,6406,6410,6414,
	6418,6423,6427,6431,6440,6442,6449,6455,6463,6484,6489,6496,6519,6535,6545,
	6549,6556,6559,6570,6579,6582,6589,6594,6620,6626,6632,6636,6646,6650,6663,
	6675,6693,6701,6711,6714,6719,6723,6730,6735,6742,6750,6753,6758,6761,6769,
	6772,6786,6789,6802,6806,6808,6813,6818,6824,6830,6836,6841,6844,6850,6855,
	6858,6864,6868,6874,6876,6879,6885,6891,6899,6901,6903,6907,6913,6918,6922,
	6927,6933,6940,6943,6945,6948,6958,6962,6968,6975,6980,6994,6999,7007,7012,
	7016,7019,7024,7028,7036,7044,7046,7053,7061,7068,7071,7079,7087,7089,7095,
	7101,7105,7112,7123,7132,7135,7140,7142,7145,7148,7152,7155,7159,7164,7167,
	7171,7174,7178,7183,7187,7199,7203,7209,7212,7217,7221,7225,7230,7239,7242,
	7246,7250,7253,7257,7261,7266,7271,7277,7282,7287,7289,7294,7301,7309,7315,
	7317,7321,7325,7329,7333,7347,7354,7358,7363,7369,7373,7379,7383,7387,7392,
	7397,7402,7407,7413,7419,7424,7429,7434,7439,7444,7449,7454,7464,7470,7476,
	7482,7485,7492,7497,7500,7504,7507,7511,7516,7520,7525,7529,7538,7541,7544,
	7547,7551,7555,7559,7574,7577,7579,7584,7593,7596,7600,7613,7625,7630,7635,
	7644,7649,7658,7663,7667,7671,7675,7680,7685,7691,7696,7699,7706,7715,7722,
	7736,7748,7761,7769,7776,7785,7791,7799,7805,7816,7824,7832,7840,7850,7855,
	7860,7862,7868,7874,7877,7884,7886,7888,7891,7893,7910,7915,7917,7924,7937,
	7939,7945,7955,7964,7975,7997,8001,8025,8036,8038,8042,8049,8057,8064,8070,
	8085,8089,8096,8105,8110,8112,8118,8134,8142,8145,8152,8160,8168,8173,8178,
	8181,8185,8190,8200,8215,8219,8231,8235,8239,8243,8258,8270,8280,8287,8289,
	8306,8311,8313,8322,8327,8329,8335,8344,8355];

	private static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!MySQLParser.__ATN) {
			MySQLParser.__ATN = new ATNDeserializer().deserialize(MySQLParser._serializedATN);
		}

		return MySQLParser.__ATN;
	}


	static DecisionsToDFA = MySQLParser._ATN.decisionToState.map( (ds: DecisionState, index: number) => new DFA(ds, index) );

}

export class QueryContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public EOF(): TerminalNode {
		return this.getToken(MySQLParser.EOF, 0);
	}
	public simpleStatement(): SimpleStatementContext {
		return this.getTypedRuleContext(SimpleStatementContext, 0) as SimpleStatementContext;
	}
	public beginWork(): BeginWorkContext {
		return this.getTypedRuleContext(BeginWorkContext, 0) as BeginWorkContext;
	}
	public SEMICOLON_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SEMICOLON_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_query;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterQuery) {
	 		listener.enterQuery(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitQuery) {
	 		listener.exitQuery(this);
		}
	}
}


export class SimpleStatementContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public alterStatement(): AlterStatementContext {
		return this.getTypedRuleContext(AlterStatementContext, 0) as AlterStatementContext;
	}
	public createStatement(): CreateStatementContext {
		return this.getTypedRuleContext(CreateStatementContext, 0) as CreateStatementContext;
	}
	public dropStatement(): DropStatementContext {
		return this.getTypedRuleContext(DropStatementContext, 0) as DropStatementContext;
	}
	public renameTableStatement(): RenameTableStatementContext {
		return this.getTypedRuleContext(RenameTableStatementContext, 0) as RenameTableStatementContext;
	}
	public truncateTableStatement(): TruncateTableStatementContext {
		return this.getTypedRuleContext(TruncateTableStatementContext, 0) as TruncateTableStatementContext;
	}
	public importStatement(): ImportStatementContext {
		return this.getTypedRuleContext(ImportStatementContext, 0) as ImportStatementContext;
	}
	public callStatement(): CallStatementContext {
		return this.getTypedRuleContext(CallStatementContext, 0) as CallStatementContext;
	}
	public deleteStatement(): DeleteStatementContext {
		return this.getTypedRuleContext(DeleteStatementContext, 0) as DeleteStatementContext;
	}
	public doStatement(): DoStatementContext {
		return this.getTypedRuleContext(DoStatementContext, 0) as DoStatementContext;
	}
	public handlerStatement(): HandlerStatementContext {
		return this.getTypedRuleContext(HandlerStatementContext, 0) as HandlerStatementContext;
	}
	public insertStatement(): InsertStatementContext {
		return this.getTypedRuleContext(InsertStatementContext, 0) as InsertStatementContext;
	}
	public loadStatement(): LoadStatementContext {
		return this.getTypedRuleContext(LoadStatementContext, 0) as LoadStatementContext;
	}
	public replaceStatement(): ReplaceStatementContext {
		return this.getTypedRuleContext(ReplaceStatementContext, 0) as ReplaceStatementContext;
	}
	public selectStatement(): SelectStatementContext {
		return this.getTypedRuleContext(SelectStatementContext, 0) as SelectStatementContext;
	}
	public updateStatement(): UpdateStatementContext {
		return this.getTypedRuleContext(UpdateStatementContext, 0) as UpdateStatementContext;
	}
	public transactionOrLockingStatement(): TransactionOrLockingStatementContext {
		return this.getTypedRuleContext(TransactionOrLockingStatementContext, 0) as TransactionOrLockingStatementContext;
	}
	public replicationStatement(): ReplicationStatementContext {
		return this.getTypedRuleContext(ReplicationStatementContext, 0) as ReplicationStatementContext;
	}
	public preparedStatement(): PreparedStatementContext {
		return this.getTypedRuleContext(PreparedStatementContext, 0) as PreparedStatementContext;
	}
	public cloneStatement(): CloneStatementContext {
		return this.getTypedRuleContext(CloneStatementContext, 0) as CloneStatementContext;
	}
	public accountManagementStatement(): AccountManagementStatementContext {
		return this.getTypedRuleContext(AccountManagementStatementContext, 0) as AccountManagementStatementContext;
	}
	public tableAdministrationStatement(): TableAdministrationStatementContext {
		return this.getTypedRuleContext(TableAdministrationStatementContext, 0) as TableAdministrationStatementContext;
	}
	public installUninstallStatment(): InstallUninstallStatmentContext {
		return this.getTypedRuleContext(InstallUninstallStatmentContext, 0) as InstallUninstallStatmentContext;
	}
	public setStatement(): SetStatementContext {
		return this.getTypedRuleContext(SetStatementContext, 0) as SetStatementContext;
	}
	public showStatement(): ShowStatementContext {
		return this.getTypedRuleContext(ShowStatementContext, 0) as ShowStatementContext;
	}
	public resourceGroupManagement(): ResourceGroupManagementContext {
		return this.getTypedRuleContext(ResourceGroupManagementContext, 0) as ResourceGroupManagementContext;
	}
	public otherAdministrativeStatement(): OtherAdministrativeStatementContext {
		return this.getTypedRuleContext(OtherAdministrativeStatementContext, 0) as OtherAdministrativeStatementContext;
	}
	public utilityStatement(): UtilityStatementContext {
		return this.getTypedRuleContext(UtilityStatementContext, 0) as UtilityStatementContext;
	}
	public getDiagnostics(): GetDiagnosticsContext {
		return this.getTypedRuleContext(GetDiagnosticsContext, 0) as GetDiagnosticsContext;
	}
	public signalStatement(): SignalStatementContext {
		return this.getTypedRuleContext(SignalStatementContext, 0) as SignalStatementContext;
	}
	public resignalStatement(): ResignalStatementContext {
		return this.getTypedRuleContext(ResignalStatementContext, 0) as ResignalStatementContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_simpleStatement;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterSimpleStatement) {
	 		listener.enterSimpleStatement(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitSimpleStatement) {
	 		listener.exitSimpleStatement(this);
		}
	}
}


export class AlterStatementContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public ALTER_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ALTER_SYMBOL, 0);
	}
	public alterTable(): AlterTableContext {
		return this.getTypedRuleContext(AlterTableContext, 0) as AlterTableContext;
	}
	public alterDatabase(): AlterDatabaseContext {
		return this.getTypedRuleContext(AlterDatabaseContext, 0) as AlterDatabaseContext;
	}
	public PROCEDURE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.PROCEDURE_SYMBOL, 0);
	}
	public procedureRef(): ProcedureRefContext {
		return this.getTypedRuleContext(ProcedureRefContext, 0) as ProcedureRefContext;
	}
	public FUNCTION_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.FUNCTION_SYMBOL, 0);
	}
	public functionRef(): FunctionRefContext {
		return this.getTypedRuleContext(FunctionRefContext, 0) as FunctionRefContext;
	}
	public alterView(): AlterViewContext {
		return this.getTypedRuleContext(AlterViewContext, 0) as AlterViewContext;
	}
	public alterEvent(): AlterEventContext {
		return this.getTypedRuleContext(AlterEventContext, 0) as AlterEventContext;
	}
	public alterTablespace(): AlterTablespaceContext {
		return this.getTypedRuleContext(AlterTablespaceContext, 0) as AlterTablespaceContext;
	}
	public alterUndoTablespace(): AlterUndoTablespaceContext {
		return this.getTypedRuleContext(AlterUndoTablespaceContext, 0) as AlterUndoTablespaceContext;
	}
	public alterLogfileGroup(): AlterLogfileGroupContext {
		return this.getTypedRuleContext(AlterLogfileGroupContext, 0) as AlterLogfileGroupContext;
	}
	public alterServer(): AlterServerContext {
		return this.getTypedRuleContext(AlterServerContext, 0) as AlterServerContext;
	}
	public INSTANCE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.INSTANCE_SYMBOL, 0);
	}
	public ROTATE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ROTATE_SYMBOL, 0);
	}
	public textOrIdentifier(): TextOrIdentifierContext {
		return this.getTypedRuleContext(TextOrIdentifierContext, 0) as TextOrIdentifierContext;
	}
	public MASTER_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.MASTER_SYMBOL, 0);
	}
	public KEY_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.KEY_SYMBOL, 0);
	}
	public routineAlterOptions(): RoutineAlterOptionsContext {
		return this.getTypedRuleContext(RoutineAlterOptionsContext, 0) as RoutineAlterOptionsContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_alterStatement;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterAlterStatement) {
	 		listener.enterAlterStatement(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitAlterStatement) {
	 		listener.exitAlterStatement(this);
		}
	}
}


export class AlterDatabaseContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public DATABASE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.DATABASE_SYMBOL, 0);
	}
	public schemaRef(): SchemaRefContext {
		return this.getTypedRuleContext(SchemaRefContext, 0) as SchemaRefContext;
	}
	public UPGRADE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.UPGRADE_SYMBOL, 0);
	}
	public DATA_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.DATA_SYMBOL, 0);
	}
	public DIRECTORY_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.DIRECTORY_SYMBOL, 0);
	}
	public NAME_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.NAME_SYMBOL, 0);
	}
	public createDatabaseOption_list(): CreateDatabaseOptionContext[] {
		return this.getTypedRuleContexts(CreateDatabaseOptionContext) as CreateDatabaseOptionContext[];
	}
	public createDatabaseOption(i: number): CreateDatabaseOptionContext {
		return this.getTypedRuleContext(CreateDatabaseOptionContext, i) as CreateDatabaseOptionContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_alterDatabase;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterAlterDatabase) {
	 		listener.enterAlterDatabase(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitAlterDatabase) {
	 		listener.exitAlterDatabase(this);
		}
	}
}


export class AlterEventContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public EVENT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.EVENT_SYMBOL, 0);
	}
	public eventRef(): EventRefContext {
		return this.getTypedRuleContext(EventRefContext, 0) as EventRefContext;
	}
	public definerClause(): DefinerClauseContext {
		return this.getTypedRuleContext(DefinerClauseContext, 0) as DefinerClauseContext;
	}
	public ON_SYMBOL_list(): TerminalNode[] {
	    	return this.getTokens(MySQLParser.ON_SYMBOL);
	}
	public ON_SYMBOL(i: number): TerminalNode {
		return this.getToken(MySQLParser.ON_SYMBOL, i);
	}
	public SCHEDULE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SCHEDULE_SYMBOL, 0);
	}
	public schedule(): ScheduleContext {
		return this.getTypedRuleContext(ScheduleContext, 0) as ScheduleContext;
	}
	public COMPLETION_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.COMPLETION_SYMBOL, 0);
	}
	public PRESERVE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.PRESERVE_SYMBOL, 0);
	}
	public RENAME_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.RENAME_SYMBOL, 0);
	}
	public TO_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.TO_SYMBOL, 0);
	}
	public identifier(): IdentifierContext {
		return this.getTypedRuleContext(IdentifierContext, 0) as IdentifierContext;
	}
	public ENABLE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ENABLE_SYMBOL, 0);
	}
	public DISABLE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.DISABLE_SYMBOL, 0);
	}
	public COMMENT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.COMMENT_SYMBOL, 0);
	}
	public textLiteral(): TextLiteralContext {
		return this.getTypedRuleContext(TextLiteralContext, 0) as TextLiteralContext;
	}
	public DO_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.DO_SYMBOL, 0);
	}
	public compoundStatement(): CompoundStatementContext {
		return this.getTypedRuleContext(CompoundStatementContext, 0) as CompoundStatementContext;
	}
	public NOT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.NOT_SYMBOL, 0);
	}
	public SLAVE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SLAVE_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_alterEvent;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterAlterEvent) {
	 		listener.enterAlterEvent(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitAlterEvent) {
	 		listener.exitAlterEvent(this);
		}
	}
}


export class AlterLogfileGroupContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LOGFILE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.LOGFILE_SYMBOL, 0);
	}
	public GROUP_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.GROUP_SYMBOL, 0);
	}
	public logfileGroupRef(): LogfileGroupRefContext {
		return this.getTypedRuleContext(LogfileGroupRefContext, 0) as LogfileGroupRefContext;
	}
	public ADD_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ADD_SYMBOL, 0);
	}
	public UNDOFILE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.UNDOFILE_SYMBOL, 0);
	}
	public textLiteral(): TextLiteralContext {
		return this.getTypedRuleContext(TextLiteralContext, 0) as TextLiteralContext;
	}
	public alterLogfileGroupOptions(): AlterLogfileGroupOptionsContext {
		return this.getTypedRuleContext(AlterLogfileGroupOptionsContext, 0) as AlterLogfileGroupOptionsContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_alterLogfileGroup;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterAlterLogfileGroup) {
	 		listener.enterAlterLogfileGroup(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitAlterLogfileGroup) {
	 		listener.exitAlterLogfileGroup(this);
		}
	}
}


export class AlterLogfileGroupOptionsContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public alterLogfileGroupOption_list(): AlterLogfileGroupOptionContext[] {
		return this.getTypedRuleContexts(AlterLogfileGroupOptionContext) as AlterLogfileGroupOptionContext[];
	}
	public alterLogfileGroupOption(i: number): AlterLogfileGroupOptionContext {
		return this.getTypedRuleContext(AlterLogfileGroupOptionContext, i) as AlterLogfileGroupOptionContext;
	}
	public COMMA_SYMBOL_list(): TerminalNode[] {
	    	return this.getTokens(MySQLParser.COMMA_SYMBOL);
	}
	public COMMA_SYMBOL(i: number): TerminalNode {
		return this.getToken(MySQLParser.COMMA_SYMBOL, i);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_alterLogfileGroupOptions;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterAlterLogfileGroupOptions) {
	 		listener.enterAlterLogfileGroupOptions(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitAlterLogfileGroupOptions) {
	 		listener.exitAlterLogfileGroupOptions(this);
		}
	}
}


export class AlterLogfileGroupOptionContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public tsOptionInitialSize(): TsOptionInitialSizeContext {
		return this.getTypedRuleContext(TsOptionInitialSizeContext, 0) as TsOptionInitialSizeContext;
	}
	public tsOptionEngine(): TsOptionEngineContext {
		return this.getTypedRuleContext(TsOptionEngineContext, 0) as TsOptionEngineContext;
	}
	public tsOptionWait(): TsOptionWaitContext {
		return this.getTypedRuleContext(TsOptionWaitContext, 0) as TsOptionWaitContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_alterLogfileGroupOption;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterAlterLogfileGroupOption) {
	 		listener.enterAlterLogfileGroupOption(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitAlterLogfileGroupOption) {
	 		listener.exitAlterLogfileGroupOption(this);
		}
	}
}


export class AlterServerContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public SERVER_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SERVER_SYMBOL, 0);
	}
	public serverRef(): ServerRefContext {
		return this.getTypedRuleContext(ServerRefContext, 0) as ServerRefContext;
	}
	public serverOptions(): ServerOptionsContext {
		return this.getTypedRuleContext(ServerOptionsContext, 0) as ServerOptionsContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_alterServer;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterAlterServer) {
	 		listener.enterAlterServer(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitAlterServer) {
	 		listener.exitAlterServer(this);
		}
	}
}


export class AlterTableContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public TABLE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.TABLE_SYMBOL, 0);
	}
	public tableRef(): TableRefContext {
		return this.getTypedRuleContext(TableRefContext, 0) as TableRefContext;
	}
	public onlineOption(): OnlineOptionContext {
		return this.getTypedRuleContext(OnlineOptionContext, 0) as OnlineOptionContext;
	}
	public IGNORE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.IGNORE_SYMBOL, 0);
	}
	public alterTableActions(): AlterTableActionsContext {
		return this.getTypedRuleContext(AlterTableActionsContext, 0) as AlterTableActionsContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_alterTable;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterAlterTable) {
	 		listener.enterAlterTable(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitAlterTable) {
	 		listener.exitAlterTable(this);
		}
	}
}


export class AlterTableActionsContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public alterCommandList(): AlterCommandListContext {
		return this.getTypedRuleContext(AlterCommandListContext, 0) as AlterCommandListContext;
	}
	public partitionClause(): PartitionClauseContext {
		return this.getTypedRuleContext(PartitionClauseContext, 0) as PartitionClauseContext;
	}
	public removePartitioning(): RemovePartitioningContext {
		return this.getTypedRuleContext(RemovePartitioningContext, 0) as RemovePartitioningContext;
	}
	public standaloneAlterCommands(): StandaloneAlterCommandsContext {
		return this.getTypedRuleContext(StandaloneAlterCommandsContext, 0) as StandaloneAlterCommandsContext;
	}
	public alterCommandsModifierList(): AlterCommandsModifierListContext {
		return this.getTypedRuleContext(AlterCommandsModifierListContext, 0) as AlterCommandsModifierListContext;
	}
	public COMMA_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.COMMA_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_alterTableActions;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterAlterTableActions) {
	 		listener.enterAlterTableActions(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitAlterTableActions) {
	 		listener.exitAlterTableActions(this);
		}
	}
}


export class AlterCommandListContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public alterCommandsModifierList(): AlterCommandsModifierListContext {
		return this.getTypedRuleContext(AlterCommandsModifierListContext, 0) as AlterCommandsModifierListContext;
	}
	public alterList(): AlterListContext {
		return this.getTypedRuleContext(AlterListContext, 0) as AlterListContext;
	}
	public COMMA_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.COMMA_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_alterCommandList;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterAlterCommandList) {
	 		listener.enterAlterCommandList(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitAlterCommandList) {
	 		listener.exitAlterCommandList(this);
		}
	}
}


export class AlterCommandsModifierListContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public alterCommandsModifier_list(): AlterCommandsModifierContext[] {
		return this.getTypedRuleContexts(AlterCommandsModifierContext) as AlterCommandsModifierContext[];
	}
	public alterCommandsModifier(i: number): AlterCommandsModifierContext {
		return this.getTypedRuleContext(AlterCommandsModifierContext, i) as AlterCommandsModifierContext;
	}
	public COMMA_SYMBOL_list(): TerminalNode[] {
	    	return this.getTokens(MySQLParser.COMMA_SYMBOL);
	}
	public COMMA_SYMBOL(i: number): TerminalNode {
		return this.getToken(MySQLParser.COMMA_SYMBOL, i);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_alterCommandsModifierList;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterAlterCommandsModifierList) {
	 		listener.enterAlterCommandsModifierList(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitAlterCommandsModifierList) {
	 		listener.exitAlterCommandsModifierList(this);
		}
	}
}


export class StandaloneAlterCommandsContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public DISCARD_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.DISCARD_SYMBOL, 0);
	}
	public TABLESPACE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.TABLESPACE_SYMBOL, 0);
	}
	public IMPORT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.IMPORT_SYMBOL, 0);
	}
	public alterPartition(): AlterPartitionContext {
		return this.getTypedRuleContext(AlterPartitionContext, 0) as AlterPartitionContext;
	}
	public SECONDARY_LOAD_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SECONDARY_LOAD_SYMBOL, 0);
	}
	public SECONDARY_UNLOAD_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SECONDARY_UNLOAD_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_standaloneAlterCommands;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterStandaloneAlterCommands) {
	 		listener.enterStandaloneAlterCommands(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitStandaloneAlterCommands) {
	 		listener.exitStandaloneAlterCommands(this);
		}
	}
}


export class AlterPartitionContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public ADD_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ADD_SYMBOL, 0);
	}
	public PARTITION_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.PARTITION_SYMBOL, 0);
	}
	public partitionDefinitions(): PartitionDefinitionsContext {
		return this.getTypedRuleContext(PartitionDefinitionsContext, 0) as PartitionDefinitionsContext;
	}
	public PARTITIONS_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.PARTITIONS_SYMBOL, 0);
	}
	public real_ulong_number(): Real_ulong_numberContext {
		return this.getTypedRuleContext(Real_ulong_numberContext, 0) as Real_ulong_numberContext;
	}
	public noWriteToBinLog_list(): NoWriteToBinLogContext[] {
		return this.getTypedRuleContexts(NoWriteToBinLogContext) as NoWriteToBinLogContext[];
	}
	public noWriteToBinLog(i: number): NoWriteToBinLogContext {
		return this.getTypedRuleContext(NoWriteToBinLogContext, i) as NoWriteToBinLogContext;
	}
	public DROP_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.DROP_SYMBOL, 0);
	}
	public identifierList(): IdentifierListContext {
		return this.getTypedRuleContext(IdentifierListContext, 0) as IdentifierListContext;
	}
	public REBUILD_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.REBUILD_SYMBOL, 0);
	}
	public allOrPartitionNameList(): AllOrPartitionNameListContext {
		return this.getTypedRuleContext(AllOrPartitionNameListContext, 0) as AllOrPartitionNameListContext;
	}
	public OPTIMIZE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.OPTIMIZE_SYMBOL, 0);
	}
	public ANALYZE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ANALYZE_SYMBOL, 0);
	}
	public CHECK_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CHECK_SYMBOL, 0);
	}
	public checkOption_list(): CheckOptionContext[] {
		return this.getTypedRuleContexts(CheckOptionContext) as CheckOptionContext[];
	}
	public checkOption(i: number): CheckOptionContext {
		return this.getTypedRuleContext(CheckOptionContext, i) as CheckOptionContext;
	}
	public REPAIR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.REPAIR_SYMBOL, 0);
	}
	public repairType_list(): RepairTypeContext[] {
		return this.getTypedRuleContexts(RepairTypeContext) as RepairTypeContext[];
	}
	public repairType(i: number): RepairTypeContext {
		return this.getTypedRuleContext(RepairTypeContext, i) as RepairTypeContext;
	}
	public COALESCE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.COALESCE_SYMBOL, 0);
	}
	public TRUNCATE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.TRUNCATE_SYMBOL, 0);
	}
	public reorgPartitionRule(): ReorgPartitionRuleContext {
		return this.getTypedRuleContext(ReorgPartitionRuleContext, 0) as ReorgPartitionRuleContext;
	}
	public REORGANIZE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.REORGANIZE_SYMBOL, 0);
	}
	public INTO_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.INTO_SYMBOL, 0);
	}
	public EXCHANGE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.EXCHANGE_SYMBOL, 0);
	}
	public identifier(): IdentifierContext {
		return this.getTypedRuleContext(IdentifierContext, 0) as IdentifierContext;
	}
	public WITH_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.WITH_SYMBOL, 0);
	}
	public TABLE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.TABLE_SYMBOL, 0);
	}
	public tableRef(): TableRefContext {
		return this.getTypedRuleContext(TableRefContext, 0) as TableRefContext;
	}
	public withValidation(): WithValidationContext {
		return this.getTypedRuleContext(WithValidationContext, 0) as WithValidationContext;
	}
	public DISCARD_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.DISCARD_SYMBOL, 0);
	}
	public TABLESPACE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.TABLESPACE_SYMBOL, 0);
	}
	public IMPORT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.IMPORT_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_alterPartition;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterAlterPartition) {
	 		listener.enterAlterPartition(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitAlterPartition) {
	 		listener.exitAlterPartition(this);
		}
	}
}


export class AlterListContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public alterListItem_list(): AlterListItemContext[] {
		return this.getTypedRuleContexts(AlterListItemContext) as AlterListItemContext[];
	}
	public alterListItem(i: number): AlterListItemContext {
		return this.getTypedRuleContext(AlterListItemContext, i) as AlterListItemContext;
	}
	public createTableOptionsSpaceSeparated_list(): CreateTableOptionsSpaceSeparatedContext[] {
		return this.getTypedRuleContexts(CreateTableOptionsSpaceSeparatedContext) as CreateTableOptionsSpaceSeparatedContext[];
	}
	public createTableOptionsSpaceSeparated(i: number): CreateTableOptionsSpaceSeparatedContext {
		return this.getTypedRuleContext(CreateTableOptionsSpaceSeparatedContext, i) as CreateTableOptionsSpaceSeparatedContext;
	}
	public COMMA_SYMBOL_list(): TerminalNode[] {
	    	return this.getTokens(MySQLParser.COMMA_SYMBOL);
	}
	public COMMA_SYMBOL(i: number): TerminalNode {
		return this.getToken(MySQLParser.COMMA_SYMBOL, i);
	}
	public alterCommandsModifier_list(): AlterCommandsModifierContext[] {
		return this.getTypedRuleContexts(AlterCommandsModifierContext) as AlterCommandsModifierContext[];
	}
	public alterCommandsModifier(i: number): AlterCommandsModifierContext {
		return this.getTypedRuleContext(AlterCommandsModifierContext, i) as AlterCommandsModifierContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_alterList;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterAlterList) {
	 		listener.enterAlterList(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitAlterList) {
	 		listener.exitAlterList(this);
		}
	}
}


export class AlterCommandsModifierContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public alterAlgorithmOption(): AlterAlgorithmOptionContext {
		return this.getTypedRuleContext(AlterAlgorithmOptionContext, 0) as AlterAlgorithmOptionContext;
	}
	public alterLockOption(): AlterLockOptionContext {
		return this.getTypedRuleContext(AlterLockOptionContext, 0) as AlterLockOptionContext;
	}
	public withValidation(): WithValidationContext {
		return this.getTypedRuleContext(WithValidationContext, 0) as WithValidationContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_alterCommandsModifier;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterAlterCommandsModifier) {
	 		listener.enterAlterCommandsModifier(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitAlterCommandsModifier) {
	 		listener.exitAlterCommandsModifier(this);
		}
	}
}


export class AlterListItemContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public ADD_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ADD_SYMBOL, 0);
	}
	public identifier(): IdentifierContext {
		return this.getTypedRuleContext(IdentifierContext, 0) as IdentifierContext;
	}
	public fieldDefinition(): FieldDefinitionContext {
		return this.getTypedRuleContext(FieldDefinitionContext, 0) as FieldDefinitionContext;
	}
	public OPEN_PAR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
	}
	public tableElementList(): TableElementListContext {
		return this.getTypedRuleContext(TableElementListContext, 0) as TableElementListContext;
	}
	public CLOSE_PAR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
	}
	public COLUMN_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.COLUMN_SYMBOL, 0);
	}
	public checkOrReferences(): CheckOrReferencesContext {
		return this.getTypedRuleContext(CheckOrReferencesContext, 0) as CheckOrReferencesContext;
	}
	public place(): PlaceContext {
		return this.getTypedRuleContext(PlaceContext, 0) as PlaceContext;
	}
	public tableConstraintDef(): TableConstraintDefContext {
		return this.getTypedRuleContext(TableConstraintDefContext, 0) as TableConstraintDefContext;
	}
	public CHANGE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CHANGE_SYMBOL, 0);
	}
	public columnInternalRef(): ColumnInternalRefContext {
		return this.getTypedRuleContext(ColumnInternalRefContext, 0) as ColumnInternalRefContext;
	}
	public MODIFY_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.MODIFY_SYMBOL, 0);
	}
	public DROP_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.DROP_SYMBOL, 0);
	}
	public FOREIGN_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.FOREIGN_SYMBOL, 0);
	}
	public KEY_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.KEY_SYMBOL, 0);
	}
	public PRIMARY_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.PRIMARY_SYMBOL, 0);
	}
	public keyOrIndex(): KeyOrIndexContext {
		return this.getTypedRuleContext(KeyOrIndexContext, 0) as KeyOrIndexContext;
	}
	public indexRef(): IndexRefContext {
		return this.getTypedRuleContext(IndexRefContext, 0) as IndexRefContext;
	}
	public restrict(): RestrictContext {
		return this.getTypedRuleContext(RestrictContext, 0) as RestrictContext;
	}
	public DISABLE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.DISABLE_SYMBOL, 0);
	}
	public KEYS_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.KEYS_SYMBOL, 0);
	}
	public ENABLE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ENABLE_SYMBOL, 0);
	}
	public ALTER_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ALTER_SYMBOL, 0);
	}
	public SET_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SET_SYMBOL, 0);
	}
	public DEFAULT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
	}
	public exprWithParentheses(): ExprWithParenthesesContext {
		return this.getTypedRuleContext(ExprWithParenthesesContext, 0) as ExprWithParenthesesContext;
	}
	public signedLiteral(): SignedLiteralContext {
		return this.getTypedRuleContext(SignedLiteralContext, 0) as SignedLiteralContext;
	}
	public INDEX_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.INDEX_SYMBOL, 0);
	}
	public visibility(): VisibilityContext {
		return this.getTypedRuleContext(VisibilityContext, 0) as VisibilityContext;
	}
	public CHECK_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CHECK_SYMBOL, 0);
	}
	public constraintEnforcement(): ConstraintEnforcementContext {
		return this.getTypedRuleContext(ConstraintEnforcementContext, 0) as ConstraintEnforcementContext;
	}
	public RENAME_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.RENAME_SYMBOL, 0);
	}
	public TO_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.TO_SYMBOL, 0);
	}
	public tableName(): TableNameContext {
		return this.getTypedRuleContext(TableNameContext, 0) as TableNameContext;
	}
	public AS_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.AS_SYMBOL, 0);
	}
	public indexName(): IndexNameContext {
		return this.getTypedRuleContext(IndexNameContext, 0) as IndexNameContext;
	}
	public CONVERT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CONVERT_SYMBOL, 0);
	}
	public charset(): CharsetContext {
		return this.getTypedRuleContext(CharsetContext, 0) as CharsetContext;
	}
	public charsetName(): CharsetNameContext {
		return this.getTypedRuleContext(CharsetNameContext, 0) as CharsetNameContext;
	}
	public collate(): CollateContext {
		return this.getTypedRuleContext(CollateContext, 0) as CollateContext;
	}
	public FORCE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.FORCE_SYMBOL, 0);
	}
	public ORDER_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ORDER_SYMBOL, 0);
	}
	public BY_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.BY_SYMBOL, 0);
	}
	public alterOrderList(): AlterOrderListContext {
		return this.getTypedRuleContext(AlterOrderListContext, 0) as AlterOrderListContext;
	}
	public UPGRADE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.UPGRADE_SYMBOL, 0);
	}
	public PARTITIONING_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.PARTITIONING_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_alterListItem;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterAlterListItem) {
	 		listener.enterAlterListItem(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitAlterListItem) {
	 		listener.exitAlterListItem(this);
		}
	}
}


export class PlaceContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public AFTER_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.AFTER_SYMBOL, 0);
	}
	public identifier(): IdentifierContext {
		return this.getTypedRuleContext(IdentifierContext, 0) as IdentifierContext;
	}
	public FIRST_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.FIRST_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_place;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterPlace) {
	 		listener.enterPlace(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitPlace) {
	 		listener.exitPlace(this);
		}
	}
}


export class RestrictContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public RESTRICT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.RESTRICT_SYMBOL, 0);
	}
	public CASCADE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CASCADE_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_restrict;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterRestrict) {
	 		listener.enterRestrict(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitRestrict) {
	 		listener.exitRestrict(this);
		}
	}
}


export class AlterOrderListContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public identifier_list(): IdentifierContext[] {
		return this.getTypedRuleContexts(IdentifierContext) as IdentifierContext[];
	}
	public identifier(i: number): IdentifierContext {
		return this.getTypedRuleContext(IdentifierContext, i) as IdentifierContext;
	}
	public direction_list(): DirectionContext[] {
		return this.getTypedRuleContexts(DirectionContext) as DirectionContext[];
	}
	public direction(i: number): DirectionContext {
		return this.getTypedRuleContext(DirectionContext, i) as DirectionContext;
	}
	public COMMA_SYMBOL_list(): TerminalNode[] {
	    	return this.getTokens(MySQLParser.COMMA_SYMBOL);
	}
	public COMMA_SYMBOL(i: number): TerminalNode {
		return this.getToken(MySQLParser.COMMA_SYMBOL, i);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_alterOrderList;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterAlterOrderList) {
	 		listener.enterAlterOrderList(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitAlterOrderList) {
	 		listener.exitAlterOrderList(this);
		}
	}
}


export class AlterAlgorithmOptionContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public ALGORITHM_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ALGORITHM_SYMBOL, 0);
	}
	public DEFAULT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
	}
	public identifier(): IdentifierContext {
		return this.getTypedRuleContext(IdentifierContext, 0) as IdentifierContext;
	}
	public EQUAL_OPERATOR(): TerminalNode {
		return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_alterAlgorithmOption;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterAlterAlgorithmOption) {
	 		listener.enterAlterAlgorithmOption(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitAlterAlgorithmOption) {
	 		listener.exitAlterAlgorithmOption(this);
		}
	}
}


export class AlterLockOptionContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LOCK_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.LOCK_SYMBOL, 0);
	}
	public DEFAULT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
	}
	public identifier(): IdentifierContext {
		return this.getTypedRuleContext(IdentifierContext, 0) as IdentifierContext;
	}
	public EQUAL_OPERATOR(): TerminalNode {
		return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_alterLockOption;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterAlterLockOption) {
	 		listener.enterAlterLockOption(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitAlterLockOption) {
	 		listener.exitAlterLockOption(this);
		}
	}
}


export class IndexLockAndAlgorithmContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public alterAlgorithmOption(): AlterAlgorithmOptionContext {
		return this.getTypedRuleContext(AlterAlgorithmOptionContext, 0) as AlterAlgorithmOptionContext;
	}
	public alterLockOption(): AlterLockOptionContext {
		return this.getTypedRuleContext(AlterLockOptionContext, 0) as AlterLockOptionContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_indexLockAndAlgorithm;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterIndexLockAndAlgorithm) {
	 		listener.enterIndexLockAndAlgorithm(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitIndexLockAndAlgorithm) {
	 		listener.exitIndexLockAndAlgorithm(this);
		}
	}
}


export class WithValidationContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public VALIDATION_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.VALIDATION_SYMBOL, 0);
	}
	public WITH_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.WITH_SYMBOL, 0);
	}
	public WITHOUT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.WITHOUT_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_withValidation;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterWithValidation) {
	 		listener.enterWithValidation(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitWithValidation) {
	 		listener.exitWithValidation(this);
		}
	}
}


export class RemovePartitioningContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public REMOVE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.REMOVE_SYMBOL, 0);
	}
	public PARTITIONING_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.PARTITIONING_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_removePartitioning;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterRemovePartitioning) {
	 		listener.enterRemovePartitioning(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitRemovePartitioning) {
	 		listener.exitRemovePartitioning(this);
		}
	}
}


export class AllOrPartitionNameListContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public ALL_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ALL_SYMBOL, 0);
	}
	public identifierList(): IdentifierListContext {
		return this.getTypedRuleContext(IdentifierListContext, 0) as IdentifierListContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_allOrPartitionNameList;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterAllOrPartitionNameList) {
	 		listener.enterAllOrPartitionNameList(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitAllOrPartitionNameList) {
	 		listener.exitAllOrPartitionNameList(this);
		}
	}
}


export class ReorgPartitionRuleContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public REORGANIZE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.REORGANIZE_SYMBOL, 0);
	}
	public PARTITION_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.PARTITION_SYMBOL, 0);
	}
	public noWriteToBinLog(): NoWriteToBinLogContext {
		return this.getTypedRuleContext(NoWriteToBinLogContext, 0) as NoWriteToBinLogContext;
	}
	public identifierList(): IdentifierListContext {
		return this.getTypedRuleContext(IdentifierListContext, 0) as IdentifierListContext;
	}
	public INTO_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.INTO_SYMBOL, 0);
	}
	public partitionDefinitions(): PartitionDefinitionsContext {
		return this.getTypedRuleContext(PartitionDefinitionsContext, 0) as PartitionDefinitionsContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_reorgPartitionRule;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterReorgPartitionRule) {
	 		listener.enterReorgPartitionRule(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitReorgPartitionRule) {
	 		listener.exitReorgPartitionRule(this);
		}
	}
}


export class AlterTablespaceContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public TABLESPACE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.TABLESPACE_SYMBOL, 0);
	}
	public tablespaceRef(): TablespaceRefContext {
		return this.getTypedRuleContext(TablespaceRefContext, 0) as TablespaceRefContext;
	}
	public DATAFILE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.DATAFILE_SYMBOL, 0);
	}
	public textLiteral(): TextLiteralContext {
		return this.getTypedRuleContext(TextLiteralContext, 0) as TextLiteralContext;
	}
	public RENAME_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.RENAME_SYMBOL, 0);
	}
	public TO_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.TO_SYMBOL, 0);
	}
	public identifier(): IdentifierContext {
		return this.getTypedRuleContext(IdentifierContext, 0) as IdentifierContext;
	}
	public alterTablespaceOptions(): AlterTablespaceOptionsContext {
		return this.getTypedRuleContext(AlterTablespaceOptionsContext, 0) as AlterTablespaceOptionsContext;
	}
	public ADD_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ADD_SYMBOL, 0);
	}
	public DROP_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.DROP_SYMBOL, 0);
	}
	public CHANGE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CHANGE_SYMBOL, 0);
	}
	public NOT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.NOT_SYMBOL, 0);
	}
	public ACCESSIBLE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ACCESSIBLE_SYMBOL, 0);
	}
	public READ_ONLY_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.READ_ONLY_SYMBOL, 0);
	}
	public READ_WRITE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.READ_WRITE_SYMBOL, 0);
	}
	public changeTablespaceOption_list(): ChangeTablespaceOptionContext[] {
		return this.getTypedRuleContexts(ChangeTablespaceOptionContext) as ChangeTablespaceOptionContext[];
	}
	public changeTablespaceOption(i: number): ChangeTablespaceOptionContext {
		return this.getTypedRuleContext(ChangeTablespaceOptionContext, i) as ChangeTablespaceOptionContext;
	}
	public COMMA_SYMBOL_list(): TerminalNode[] {
	    	return this.getTokens(MySQLParser.COMMA_SYMBOL);
	}
	public COMMA_SYMBOL(i: number): TerminalNode {
		return this.getToken(MySQLParser.COMMA_SYMBOL, i);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_alterTablespace;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterAlterTablespace) {
	 		listener.enterAlterTablespace(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitAlterTablespace) {
	 		listener.exitAlterTablespace(this);
		}
	}
}


export class AlterUndoTablespaceContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public UNDO_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.UNDO_SYMBOL, 0);
	}
	public TABLESPACE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.TABLESPACE_SYMBOL, 0);
	}
	public tablespaceRef(): TablespaceRefContext {
		return this.getTypedRuleContext(TablespaceRefContext, 0) as TablespaceRefContext;
	}
	public SET_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SET_SYMBOL, 0);
	}
	public ACTIVE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ACTIVE_SYMBOL, 0);
	}
	public INACTIVE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.INACTIVE_SYMBOL, 0);
	}
	public undoTableSpaceOptions(): UndoTableSpaceOptionsContext {
		return this.getTypedRuleContext(UndoTableSpaceOptionsContext, 0) as UndoTableSpaceOptionsContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_alterUndoTablespace;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterAlterUndoTablespace) {
	 		listener.enterAlterUndoTablespace(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitAlterUndoTablespace) {
	 		listener.exitAlterUndoTablespace(this);
		}
	}
}


export class UndoTableSpaceOptionsContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public undoTableSpaceOption_list(): UndoTableSpaceOptionContext[] {
		return this.getTypedRuleContexts(UndoTableSpaceOptionContext) as UndoTableSpaceOptionContext[];
	}
	public undoTableSpaceOption(i: number): UndoTableSpaceOptionContext {
		return this.getTypedRuleContext(UndoTableSpaceOptionContext, i) as UndoTableSpaceOptionContext;
	}
	public COMMA_SYMBOL_list(): TerminalNode[] {
	    	return this.getTokens(MySQLParser.COMMA_SYMBOL);
	}
	public COMMA_SYMBOL(i: number): TerminalNode {
		return this.getToken(MySQLParser.COMMA_SYMBOL, i);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_undoTableSpaceOptions;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterUndoTableSpaceOptions) {
	 		listener.enterUndoTableSpaceOptions(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitUndoTableSpaceOptions) {
	 		listener.exitUndoTableSpaceOptions(this);
		}
	}
}


export class UndoTableSpaceOptionContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public tsOptionEngine(): TsOptionEngineContext {
		return this.getTypedRuleContext(TsOptionEngineContext, 0) as TsOptionEngineContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_undoTableSpaceOption;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterUndoTableSpaceOption) {
	 		listener.enterUndoTableSpaceOption(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitUndoTableSpaceOption) {
	 		listener.exitUndoTableSpaceOption(this);
		}
	}
}


export class AlterTablespaceOptionsContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public alterTablespaceOption_list(): AlterTablespaceOptionContext[] {
		return this.getTypedRuleContexts(AlterTablespaceOptionContext) as AlterTablespaceOptionContext[];
	}
	public alterTablespaceOption(i: number): AlterTablespaceOptionContext {
		return this.getTypedRuleContext(AlterTablespaceOptionContext, i) as AlterTablespaceOptionContext;
	}
	public COMMA_SYMBOL_list(): TerminalNode[] {
	    	return this.getTokens(MySQLParser.COMMA_SYMBOL);
	}
	public COMMA_SYMBOL(i: number): TerminalNode {
		return this.getToken(MySQLParser.COMMA_SYMBOL, i);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_alterTablespaceOptions;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterAlterTablespaceOptions) {
	 		listener.enterAlterTablespaceOptions(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitAlterTablespaceOptions) {
	 		listener.exitAlterTablespaceOptions(this);
		}
	}
}


export class AlterTablespaceOptionContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public INITIAL_SIZE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.INITIAL_SIZE_SYMBOL, 0);
	}
	public sizeNumber(): SizeNumberContext {
		return this.getTypedRuleContext(SizeNumberContext, 0) as SizeNumberContext;
	}
	public EQUAL_OPERATOR(): TerminalNode {
		return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
	}
	public tsOptionAutoextendSize(): TsOptionAutoextendSizeContext {
		return this.getTypedRuleContext(TsOptionAutoextendSizeContext, 0) as TsOptionAutoextendSizeContext;
	}
	public tsOptionMaxSize(): TsOptionMaxSizeContext {
		return this.getTypedRuleContext(TsOptionMaxSizeContext, 0) as TsOptionMaxSizeContext;
	}
	public tsOptionEngine(): TsOptionEngineContext {
		return this.getTypedRuleContext(TsOptionEngineContext, 0) as TsOptionEngineContext;
	}
	public tsOptionWait(): TsOptionWaitContext {
		return this.getTypedRuleContext(TsOptionWaitContext, 0) as TsOptionWaitContext;
	}
	public tsOptionEncryption(): TsOptionEncryptionContext {
		return this.getTypedRuleContext(TsOptionEncryptionContext, 0) as TsOptionEncryptionContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_alterTablespaceOption;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterAlterTablespaceOption) {
	 		listener.enterAlterTablespaceOption(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitAlterTablespaceOption) {
	 		listener.exitAlterTablespaceOption(this);
		}
	}
}


export class ChangeTablespaceOptionContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public INITIAL_SIZE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.INITIAL_SIZE_SYMBOL, 0);
	}
	public sizeNumber(): SizeNumberContext {
		return this.getTypedRuleContext(SizeNumberContext, 0) as SizeNumberContext;
	}
	public EQUAL_OPERATOR(): TerminalNode {
		return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
	}
	public tsOptionAutoextendSize(): TsOptionAutoextendSizeContext {
		return this.getTypedRuleContext(TsOptionAutoextendSizeContext, 0) as TsOptionAutoextendSizeContext;
	}
	public tsOptionMaxSize(): TsOptionMaxSizeContext {
		return this.getTypedRuleContext(TsOptionMaxSizeContext, 0) as TsOptionMaxSizeContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_changeTablespaceOption;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterChangeTablespaceOption) {
	 		listener.enterChangeTablespaceOption(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitChangeTablespaceOption) {
	 		listener.exitChangeTablespaceOption(this);
		}
	}
}


export class AlterViewContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public VIEW_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.VIEW_SYMBOL, 0);
	}
	public viewRef(): ViewRefContext {
		return this.getTypedRuleContext(ViewRefContext, 0) as ViewRefContext;
	}
	public viewTail(): ViewTailContext {
		return this.getTypedRuleContext(ViewTailContext, 0) as ViewTailContext;
	}
	public viewAlgorithm(): ViewAlgorithmContext {
		return this.getTypedRuleContext(ViewAlgorithmContext, 0) as ViewAlgorithmContext;
	}
	public definerClause(): DefinerClauseContext {
		return this.getTypedRuleContext(DefinerClauseContext, 0) as DefinerClauseContext;
	}
	public viewSuid(): ViewSuidContext {
		return this.getTypedRuleContext(ViewSuidContext, 0) as ViewSuidContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_alterView;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterAlterView) {
	 		listener.enterAlterView(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitAlterView) {
	 		listener.exitAlterView(this);
		}
	}
}


export class ViewTailContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public AS_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.AS_SYMBOL, 0);
	}
	public viewSelect(): ViewSelectContext {
		return this.getTypedRuleContext(ViewSelectContext, 0) as ViewSelectContext;
	}
	public columnInternalRefList(): ColumnInternalRefListContext {
		return this.getTypedRuleContext(ColumnInternalRefListContext, 0) as ColumnInternalRefListContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_viewTail;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterViewTail) {
	 		listener.enterViewTail(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitViewTail) {
	 		listener.exitViewTail(this);
		}
	}
}


export class ViewSelectContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public queryExpressionOrParens(): QueryExpressionOrParensContext {
		return this.getTypedRuleContext(QueryExpressionOrParensContext, 0) as QueryExpressionOrParensContext;
	}
	public viewCheckOption(): ViewCheckOptionContext {
		return this.getTypedRuleContext(ViewCheckOptionContext, 0) as ViewCheckOptionContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_viewSelect;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterViewSelect) {
	 		listener.enterViewSelect(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitViewSelect) {
	 		listener.exitViewSelect(this);
		}
	}
}


export class ViewCheckOptionContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public WITH_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.WITH_SYMBOL, 0);
	}
	public CHECK_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CHECK_SYMBOL, 0);
	}
	public OPTION_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.OPTION_SYMBOL, 0);
	}
	public CASCADED_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CASCADED_SYMBOL, 0);
	}
	public LOCAL_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.LOCAL_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_viewCheckOption;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterViewCheckOption) {
	 		listener.enterViewCheckOption(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitViewCheckOption) {
	 		listener.exitViewCheckOption(this);
		}
	}
}


export class CreateStatementContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public CREATE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CREATE_SYMBOL, 0);
	}
	public createDatabase(): CreateDatabaseContext {
		return this.getTypedRuleContext(CreateDatabaseContext, 0) as CreateDatabaseContext;
	}
	public createTable(): CreateTableContext {
		return this.getTypedRuleContext(CreateTableContext, 0) as CreateTableContext;
	}
	public createFunction(): CreateFunctionContext {
		return this.getTypedRuleContext(CreateFunctionContext, 0) as CreateFunctionContext;
	}
	public createProcedure(): CreateProcedureContext {
		return this.getTypedRuleContext(CreateProcedureContext, 0) as CreateProcedureContext;
	}
	public createUdf(): CreateUdfContext {
		return this.getTypedRuleContext(CreateUdfContext, 0) as CreateUdfContext;
	}
	public createLogfileGroup(): CreateLogfileGroupContext {
		return this.getTypedRuleContext(CreateLogfileGroupContext, 0) as CreateLogfileGroupContext;
	}
	public createView(): CreateViewContext {
		return this.getTypedRuleContext(CreateViewContext, 0) as CreateViewContext;
	}
	public createTrigger(): CreateTriggerContext {
		return this.getTypedRuleContext(CreateTriggerContext, 0) as CreateTriggerContext;
	}
	public createIndex(): CreateIndexContext {
		return this.getTypedRuleContext(CreateIndexContext, 0) as CreateIndexContext;
	}
	public createServer(): CreateServerContext {
		return this.getTypedRuleContext(CreateServerContext, 0) as CreateServerContext;
	}
	public createTablespace(): CreateTablespaceContext {
		return this.getTypedRuleContext(CreateTablespaceContext, 0) as CreateTablespaceContext;
	}
	public createEvent(): CreateEventContext {
		return this.getTypedRuleContext(CreateEventContext, 0) as CreateEventContext;
	}
	public createRole(): CreateRoleContext {
		return this.getTypedRuleContext(CreateRoleContext, 0) as CreateRoleContext;
	}
	public createSpatialReference(): CreateSpatialReferenceContext {
		return this.getTypedRuleContext(CreateSpatialReferenceContext, 0) as CreateSpatialReferenceContext;
	}
	public createUndoTablespace(): CreateUndoTablespaceContext {
		return this.getTypedRuleContext(CreateUndoTablespaceContext, 0) as CreateUndoTablespaceContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_createStatement;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterCreateStatement) {
	 		listener.enterCreateStatement(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitCreateStatement) {
	 		listener.exitCreateStatement(this);
		}
	}
}


export class CreateDatabaseContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public DATABASE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.DATABASE_SYMBOL, 0);
	}
	public schemaName(): SchemaNameContext {
		return this.getTypedRuleContext(SchemaNameContext, 0) as SchemaNameContext;
	}
	public ifNotExists(): IfNotExistsContext {
		return this.getTypedRuleContext(IfNotExistsContext, 0) as IfNotExistsContext;
	}
	public createDatabaseOption_list(): CreateDatabaseOptionContext[] {
		return this.getTypedRuleContexts(CreateDatabaseOptionContext) as CreateDatabaseOptionContext[];
	}
	public createDatabaseOption(i: number): CreateDatabaseOptionContext {
		return this.getTypedRuleContext(CreateDatabaseOptionContext, i) as CreateDatabaseOptionContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_createDatabase;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterCreateDatabase) {
	 		listener.enterCreateDatabase(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitCreateDatabase) {
	 		listener.exitCreateDatabase(this);
		}
	}
}


export class CreateDatabaseOptionContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public defaultCharset(): DefaultCharsetContext {
		return this.getTypedRuleContext(DefaultCharsetContext, 0) as DefaultCharsetContext;
	}
	public defaultCollation(): DefaultCollationContext {
		return this.getTypedRuleContext(DefaultCollationContext, 0) as DefaultCollationContext;
	}
	public defaultEncryption(): DefaultEncryptionContext {
		return this.getTypedRuleContext(DefaultEncryptionContext, 0) as DefaultEncryptionContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_createDatabaseOption;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterCreateDatabaseOption) {
	 		listener.enterCreateDatabaseOption(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitCreateDatabaseOption) {
	 		listener.exitCreateDatabaseOption(this);
		}
	}
}


export class CreateTableContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public TABLE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.TABLE_SYMBOL, 0);
	}
	public tableName(): TableNameContext {
		return this.getTypedRuleContext(TableNameContext, 0) as TableNameContext;
	}
	public LIKE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.LIKE_SYMBOL, 0);
	}
	public tableRef(): TableRefContext {
		return this.getTypedRuleContext(TableRefContext, 0) as TableRefContext;
	}
	public OPEN_PAR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
	}
	public CLOSE_PAR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
	}
	public TEMPORARY_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.TEMPORARY_SYMBOL, 0);
	}
	public ifNotExists(): IfNotExistsContext {
		return this.getTypedRuleContext(IfNotExistsContext, 0) as IfNotExistsContext;
	}
	public tableElementList(): TableElementListContext {
		return this.getTypedRuleContext(TableElementListContext, 0) as TableElementListContext;
	}
	public createTableOptions(): CreateTableOptionsContext {
		return this.getTypedRuleContext(CreateTableOptionsContext, 0) as CreateTableOptionsContext;
	}
	public partitionClause(): PartitionClauseContext {
		return this.getTypedRuleContext(PartitionClauseContext, 0) as PartitionClauseContext;
	}
	public duplicateAsQueryExpression(): DuplicateAsQueryExpressionContext {
		return this.getTypedRuleContext(DuplicateAsQueryExpressionContext, 0) as DuplicateAsQueryExpressionContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_createTable;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterCreateTable) {
	 		listener.enterCreateTable(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitCreateTable) {
	 		listener.exitCreateTable(this);
		}
	}
}


export class TableElementListContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public tableElement_list(): TableElementContext[] {
		return this.getTypedRuleContexts(TableElementContext) as TableElementContext[];
	}
	public tableElement(i: number): TableElementContext {
		return this.getTypedRuleContext(TableElementContext, i) as TableElementContext;
	}
	public COMMA_SYMBOL_list(): TerminalNode[] {
	    	return this.getTokens(MySQLParser.COMMA_SYMBOL);
	}
	public COMMA_SYMBOL(i: number): TerminalNode {
		return this.getToken(MySQLParser.COMMA_SYMBOL, i);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_tableElementList;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterTableElementList) {
	 		listener.enterTableElementList(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitTableElementList) {
	 		listener.exitTableElementList(this);
		}
	}
}


export class TableElementContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public columnDefinition(): ColumnDefinitionContext {
		return this.getTypedRuleContext(ColumnDefinitionContext, 0) as ColumnDefinitionContext;
	}
	public tableConstraintDef(): TableConstraintDefContext {
		return this.getTypedRuleContext(TableConstraintDefContext, 0) as TableConstraintDefContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_tableElement;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterTableElement) {
	 		listener.enterTableElement(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitTableElement) {
	 		listener.exitTableElement(this);
		}
	}
}


export class DuplicateAsQueryExpressionContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public queryExpressionOrParens(): QueryExpressionOrParensContext {
		return this.getTypedRuleContext(QueryExpressionOrParensContext, 0) as QueryExpressionOrParensContext;
	}
	public AS_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.AS_SYMBOL, 0);
	}
	public REPLACE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.REPLACE_SYMBOL, 0);
	}
	public IGNORE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.IGNORE_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_duplicateAsQueryExpression;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterDuplicateAsQueryExpression) {
	 		listener.enterDuplicateAsQueryExpression(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitDuplicateAsQueryExpression) {
	 		listener.exitDuplicateAsQueryExpression(this);
		}
	}
}


export class QueryExpressionOrParensContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public queryExpression(): QueryExpressionContext {
		return this.getTypedRuleContext(QueryExpressionContext, 0) as QueryExpressionContext;
	}
	public queryExpressionParens(): QueryExpressionParensContext {
		return this.getTypedRuleContext(QueryExpressionParensContext, 0) as QueryExpressionParensContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_queryExpressionOrParens;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterQueryExpressionOrParens) {
	 		listener.enterQueryExpressionOrParens(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitQueryExpressionOrParens) {
	 		listener.exitQueryExpressionOrParens(this);
		}
	}
}


export class CreateRoutineContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public CREATE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CREATE_SYMBOL, 0);
	}
	public EOF(): TerminalNode {
		return this.getToken(MySQLParser.EOF, 0);
	}
	public createProcedure(): CreateProcedureContext {
		return this.getTypedRuleContext(CreateProcedureContext, 0) as CreateProcedureContext;
	}
	public createFunction(): CreateFunctionContext {
		return this.getTypedRuleContext(CreateFunctionContext, 0) as CreateFunctionContext;
	}
	public createUdf(): CreateUdfContext {
		return this.getTypedRuleContext(CreateUdfContext, 0) as CreateUdfContext;
	}
	public SEMICOLON_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SEMICOLON_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_createRoutine;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterCreateRoutine) {
	 		listener.enterCreateRoutine(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitCreateRoutine) {
	 		listener.exitCreateRoutine(this);
		}
	}
}


export class CreateProcedureContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public PROCEDURE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.PROCEDURE_SYMBOL, 0);
	}
	public procedureName(): ProcedureNameContext {
		return this.getTypedRuleContext(ProcedureNameContext, 0) as ProcedureNameContext;
	}
	public OPEN_PAR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
	}
	public CLOSE_PAR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
	}
	public compoundStatement(): CompoundStatementContext {
		return this.getTypedRuleContext(CompoundStatementContext, 0) as CompoundStatementContext;
	}
	public definerClause(): DefinerClauseContext {
		return this.getTypedRuleContext(DefinerClauseContext, 0) as DefinerClauseContext;
	}
	public procedureParameter_list(): ProcedureParameterContext[] {
		return this.getTypedRuleContexts(ProcedureParameterContext) as ProcedureParameterContext[];
	}
	public procedureParameter(i: number): ProcedureParameterContext {
		return this.getTypedRuleContext(ProcedureParameterContext, i) as ProcedureParameterContext;
	}
	public routineCreateOption_list(): RoutineCreateOptionContext[] {
		return this.getTypedRuleContexts(RoutineCreateOptionContext) as RoutineCreateOptionContext[];
	}
	public routineCreateOption(i: number): RoutineCreateOptionContext {
		return this.getTypedRuleContext(RoutineCreateOptionContext, i) as RoutineCreateOptionContext;
	}
	public COMMA_SYMBOL_list(): TerminalNode[] {
	    	return this.getTokens(MySQLParser.COMMA_SYMBOL);
	}
	public COMMA_SYMBOL(i: number): TerminalNode {
		return this.getToken(MySQLParser.COMMA_SYMBOL, i);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_createProcedure;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterCreateProcedure) {
	 		listener.enterCreateProcedure(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitCreateProcedure) {
	 		listener.exitCreateProcedure(this);
		}
	}
}


export class CreateFunctionContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public FUNCTION_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.FUNCTION_SYMBOL, 0);
	}
	public functionName(): FunctionNameContext {
		return this.getTypedRuleContext(FunctionNameContext, 0) as FunctionNameContext;
	}
	public OPEN_PAR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
	}
	public CLOSE_PAR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
	}
	public RETURNS_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.RETURNS_SYMBOL, 0);
	}
	public typeWithOptCollate(): TypeWithOptCollateContext {
		return this.getTypedRuleContext(TypeWithOptCollateContext, 0) as TypeWithOptCollateContext;
	}
	public compoundStatement(): CompoundStatementContext {
		return this.getTypedRuleContext(CompoundStatementContext, 0) as CompoundStatementContext;
	}
	public definerClause(): DefinerClauseContext {
		return this.getTypedRuleContext(DefinerClauseContext, 0) as DefinerClauseContext;
	}
	public functionParameter_list(): FunctionParameterContext[] {
		return this.getTypedRuleContexts(FunctionParameterContext) as FunctionParameterContext[];
	}
	public functionParameter(i: number): FunctionParameterContext {
		return this.getTypedRuleContext(FunctionParameterContext, i) as FunctionParameterContext;
	}
	public routineCreateOption_list(): RoutineCreateOptionContext[] {
		return this.getTypedRuleContexts(RoutineCreateOptionContext) as RoutineCreateOptionContext[];
	}
	public routineCreateOption(i: number): RoutineCreateOptionContext {
		return this.getTypedRuleContext(RoutineCreateOptionContext, i) as RoutineCreateOptionContext;
	}
	public COMMA_SYMBOL_list(): TerminalNode[] {
	    	return this.getTokens(MySQLParser.COMMA_SYMBOL);
	}
	public COMMA_SYMBOL(i: number): TerminalNode {
		return this.getToken(MySQLParser.COMMA_SYMBOL, i);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_createFunction;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterCreateFunction) {
	 		listener.enterCreateFunction(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitCreateFunction) {
	 		listener.exitCreateFunction(this);
		}
	}
}


export class CreateUdfContext extends ParserRuleContext {
	public _type_!: Token;
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public FUNCTION_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.FUNCTION_SYMBOL, 0);
	}
	public udfName(): UdfNameContext {
		return this.getTypedRuleContext(UdfNameContext, 0) as UdfNameContext;
	}
	public RETURNS_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.RETURNS_SYMBOL, 0);
	}
	public SONAME_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SONAME_SYMBOL, 0);
	}
	public textLiteral(): TextLiteralContext {
		return this.getTypedRuleContext(TextLiteralContext, 0) as TextLiteralContext;
	}
	public STRING_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.STRING_SYMBOL, 0);
	}
	public INT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.INT_SYMBOL, 0);
	}
	public REAL_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.REAL_SYMBOL, 0);
	}
	public DECIMAL_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.DECIMAL_SYMBOL, 0);
	}
	public AGGREGATE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.AGGREGATE_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_createUdf;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterCreateUdf) {
	 		listener.enterCreateUdf(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitCreateUdf) {
	 		listener.exitCreateUdf(this);
		}
	}
}


export class RoutineCreateOptionContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public routineOption(): RoutineOptionContext {
		return this.getTypedRuleContext(RoutineOptionContext, 0) as RoutineOptionContext;
	}
	public DETERMINISTIC_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.DETERMINISTIC_SYMBOL, 0);
	}
	public NOT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.NOT_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_routineCreateOption;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterRoutineCreateOption) {
	 		listener.enterRoutineCreateOption(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitRoutineCreateOption) {
	 		listener.exitRoutineCreateOption(this);
		}
	}
}


export class RoutineAlterOptionsContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public routineCreateOption_list(): RoutineCreateOptionContext[] {
		return this.getTypedRuleContexts(RoutineCreateOptionContext) as RoutineCreateOptionContext[];
	}
	public routineCreateOption(i: number): RoutineCreateOptionContext {
		return this.getTypedRuleContext(RoutineCreateOptionContext, i) as RoutineCreateOptionContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_routineAlterOptions;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterRoutineAlterOptions) {
	 		listener.enterRoutineAlterOptions(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitRoutineAlterOptions) {
	 		listener.exitRoutineAlterOptions(this);
		}
	}
}


export class RoutineOptionContext extends ParserRuleContext {
	public _option!: Token;
	public _security!: Token;
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public textLiteral(): TextLiteralContext {
		return this.getTypedRuleContext(TextLiteralContext, 0) as TextLiteralContext;
	}
	public COMMENT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.COMMENT_SYMBOL, 0);
	}
	public SQL_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SQL_SYMBOL, 0);
	}
	public LANGUAGE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.LANGUAGE_SYMBOL, 0);
	}
	public NO_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.NO_SYMBOL, 0);
	}
	public CONTAINS_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CONTAINS_SYMBOL, 0);
	}
	public DATA_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.DATA_SYMBOL, 0);
	}
	public READS_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.READS_SYMBOL, 0);
	}
	public MODIFIES_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.MODIFIES_SYMBOL, 0);
	}
	public SECURITY_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SECURITY_SYMBOL, 0);
	}
	public DEFINER_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.DEFINER_SYMBOL, 0);
	}
	public INVOKER_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.INVOKER_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_routineOption;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterRoutineOption) {
	 		listener.enterRoutineOption(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitRoutineOption) {
	 		listener.exitRoutineOption(this);
		}
	}
}


export class CreateIndexContext extends ParserRuleContext {
	public _type_!: Token;
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public createIndexTarget(): CreateIndexTargetContext {
		return this.getTypedRuleContext(CreateIndexTargetContext, 0) as CreateIndexTargetContext;
	}
	public INDEX_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.INDEX_SYMBOL, 0);
	}
	public indexName(): IndexNameContext {
		return this.getTypedRuleContext(IndexNameContext, 0) as IndexNameContext;
	}
	public onlineOption(): OnlineOptionContext {
		return this.getTypedRuleContext(OnlineOptionContext, 0) as OnlineOptionContext;
	}
	public FULLTEXT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.FULLTEXT_SYMBOL, 0);
	}
	public SPATIAL_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SPATIAL_SYMBOL, 0);
	}
	public indexLockAndAlgorithm(): IndexLockAndAlgorithmContext {
		return this.getTypedRuleContext(IndexLockAndAlgorithmContext, 0) as IndexLockAndAlgorithmContext;
	}
	public UNIQUE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.UNIQUE_SYMBOL, 0);
	}
	public indexOption_list(): IndexOptionContext[] {
		return this.getTypedRuleContexts(IndexOptionContext) as IndexOptionContext[];
	}
	public indexOption(i: number): IndexOptionContext {
		return this.getTypedRuleContext(IndexOptionContext, i) as IndexOptionContext;
	}
	public fulltextIndexOption_list(): FulltextIndexOptionContext[] {
		return this.getTypedRuleContexts(FulltextIndexOptionContext) as FulltextIndexOptionContext[];
	}
	public fulltextIndexOption(i: number): FulltextIndexOptionContext {
		return this.getTypedRuleContext(FulltextIndexOptionContext, i) as FulltextIndexOptionContext;
	}
	public spatialIndexOption_list(): SpatialIndexOptionContext[] {
		return this.getTypedRuleContexts(SpatialIndexOptionContext) as SpatialIndexOptionContext[];
	}
	public spatialIndexOption(i: number): SpatialIndexOptionContext {
		return this.getTypedRuleContext(SpatialIndexOptionContext, i) as SpatialIndexOptionContext;
	}
	public indexTypeClause(): IndexTypeClauseContext {
		return this.getTypedRuleContext(IndexTypeClauseContext, 0) as IndexTypeClauseContext;
	}
	public indexNameAndType(): IndexNameAndTypeContext {
		return this.getTypedRuleContext(IndexNameAndTypeContext, 0) as IndexNameAndTypeContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_createIndex;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterCreateIndex) {
	 		listener.enterCreateIndex(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitCreateIndex) {
	 		listener.exitCreateIndex(this);
		}
	}
}


export class IndexNameAndTypeContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public indexName(): IndexNameContext {
		return this.getTypedRuleContext(IndexNameContext, 0) as IndexNameContext;
	}
	public USING_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.USING_SYMBOL, 0);
	}
	public indexType(): IndexTypeContext {
		return this.getTypedRuleContext(IndexTypeContext, 0) as IndexTypeContext;
	}
	public TYPE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.TYPE_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_indexNameAndType;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterIndexNameAndType) {
	 		listener.enterIndexNameAndType(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitIndexNameAndType) {
	 		listener.exitIndexNameAndType(this);
		}
	}
}


export class CreateIndexTargetContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public ON_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ON_SYMBOL, 0);
	}
	public tableRef(): TableRefContext {
		return this.getTypedRuleContext(TableRefContext, 0) as TableRefContext;
	}
	public keyListVariants(): KeyListVariantsContext {
		return this.getTypedRuleContext(KeyListVariantsContext, 0) as KeyListVariantsContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_createIndexTarget;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterCreateIndexTarget) {
	 		listener.enterCreateIndexTarget(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitCreateIndexTarget) {
	 		listener.exitCreateIndexTarget(this);
		}
	}
}


export class CreateLogfileGroupContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LOGFILE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.LOGFILE_SYMBOL, 0);
	}
	public GROUP_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.GROUP_SYMBOL, 0);
	}
	public logfileGroupName(): LogfileGroupNameContext {
		return this.getTypedRuleContext(LogfileGroupNameContext, 0) as LogfileGroupNameContext;
	}
	public ADD_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ADD_SYMBOL, 0);
	}
	public textLiteral(): TextLiteralContext {
		return this.getTypedRuleContext(TextLiteralContext, 0) as TextLiteralContext;
	}
	public UNDOFILE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.UNDOFILE_SYMBOL, 0);
	}
	public REDOFILE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.REDOFILE_SYMBOL, 0);
	}
	public logfileGroupOptions(): LogfileGroupOptionsContext {
		return this.getTypedRuleContext(LogfileGroupOptionsContext, 0) as LogfileGroupOptionsContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_createLogfileGroup;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterCreateLogfileGroup) {
	 		listener.enterCreateLogfileGroup(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitCreateLogfileGroup) {
	 		listener.exitCreateLogfileGroup(this);
		}
	}
}


export class LogfileGroupOptionsContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public logfileGroupOption_list(): LogfileGroupOptionContext[] {
		return this.getTypedRuleContexts(LogfileGroupOptionContext) as LogfileGroupOptionContext[];
	}
	public logfileGroupOption(i: number): LogfileGroupOptionContext {
		return this.getTypedRuleContext(LogfileGroupOptionContext, i) as LogfileGroupOptionContext;
	}
	public COMMA_SYMBOL_list(): TerminalNode[] {
	    	return this.getTokens(MySQLParser.COMMA_SYMBOL);
	}
	public COMMA_SYMBOL(i: number): TerminalNode {
		return this.getToken(MySQLParser.COMMA_SYMBOL, i);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_logfileGroupOptions;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterLogfileGroupOptions) {
	 		listener.enterLogfileGroupOptions(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitLogfileGroupOptions) {
	 		listener.exitLogfileGroupOptions(this);
		}
	}
}


export class LogfileGroupOptionContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public tsOptionInitialSize(): TsOptionInitialSizeContext {
		return this.getTypedRuleContext(TsOptionInitialSizeContext, 0) as TsOptionInitialSizeContext;
	}
	public tsOptionUndoRedoBufferSize(): TsOptionUndoRedoBufferSizeContext {
		return this.getTypedRuleContext(TsOptionUndoRedoBufferSizeContext, 0) as TsOptionUndoRedoBufferSizeContext;
	}
	public tsOptionNodegroup(): TsOptionNodegroupContext {
		return this.getTypedRuleContext(TsOptionNodegroupContext, 0) as TsOptionNodegroupContext;
	}
	public tsOptionEngine(): TsOptionEngineContext {
		return this.getTypedRuleContext(TsOptionEngineContext, 0) as TsOptionEngineContext;
	}
	public tsOptionWait(): TsOptionWaitContext {
		return this.getTypedRuleContext(TsOptionWaitContext, 0) as TsOptionWaitContext;
	}
	public tsOptionComment(): TsOptionCommentContext {
		return this.getTypedRuleContext(TsOptionCommentContext, 0) as TsOptionCommentContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_logfileGroupOption;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterLogfileGroupOption) {
	 		listener.enterLogfileGroupOption(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitLogfileGroupOption) {
	 		listener.exitLogfileGroupOption(this);
		}
	}
}


export class CreateServerContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public SERVER_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SERVER_SYMBOL, 0);
	}
	public serverName(): ServerNameContext {
		return this.getTypedRuleContext(ServerNameContext, 0) as ServerNameContext;
	}
	public FOREIGN_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.FOREIGN_SYMBOL, 0);
	}
	public DATA_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.DATA_SYMBOL, 0);
	}
	public WRAPPER_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.WRAPPER_SYMBOL, 0);
	}
	public textOrIdentifier(): TextOrIdentifierContext {
		return this.getTypedRuleContext(TextOrIdentifierContext, 0) as TextOrIdentifierContext;
	}
	public serverOptions(): ServerOptionsContext {
		return this.getTypedRuleContext(ServerOptionsContext, 0) as ServerOptionsContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_createServer;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterCreateServer) {
	 		listener.enterCreateServer(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitCreateServer) {
	 		listener.exitCreateServer(this);
		}
	}
}


export class ServerOptionsContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public OPTIONS_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.OPTIONS_SYMBOL, 0);
	}
	public OPEN_PAR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
	}
	public serverOption_list(): ServerOptionContext[] {
		return this.getTypedRuleContexts(ServerOptionContext) as ServerOptionContext[];
	}
	public serverOption(i: number): ServerOptionContext {
		return this.getTypedRuleContext(ServerOptionContext, i) as ServerOptionContext;
	}
	public CLOSE_PAR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
	}
	public COMMA_SYMBOL_list(): TerminalNode[] {
	    	return this.getTokens(MySQLParser.COMMA_SYMBOL);
	}
	public COMMA_SYMBOL(i: number): TerminalNode {
		return this.getToken(MySQLParser.COMMA_SYMBOL, i);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_serverOptions;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterServerOptions) {
	 		listener.enterServerOptions(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitServerOptions) {
	 		listener.exitServerOptions(this);
		}
	}
}


export class ServerOptionContext extends ParserRuleContext {
	public _option!: Token;
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public textLiteral(): TextLiteralContext {
		return this.getTypedRuleContext(TextLiteralContext, 0) as TextLiteralContext;
	}
	public HOST_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.HOST_SYMBOL, 0);
	}
	public DATABASE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.DATABASE_SYMBOL, 0);
	}
	public USER_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.USER_SYMBOL, 0);
	}
	public PASSWORD_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.PASSWORD_SYMBOL, 0);
	}
	public SOCKET_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SOCKET_SYMBOL, 0);
	}
	public OWNER_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.OWNER_SYMBOL, 0);
	}
	public ulong_number(): Ulong_numberContext {
		return this.getTypedRuleContext(Ulong_numberContext, 0) as Ulong_numberContext;
	}
	public PORT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.PORT_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_serverOption;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterServerOption) {
	 		listener.enterServerOption(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitServerOption) {
	 		listener.exitServerOption(this);
		}
	}
}


export class CreateTablespaceContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public TABLESPACE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.TABLESPACE_SYMBOL, 0);
	}
	public tablespaceName(): TablespaceNameContext {
		return this.getTypedRuleContext(TablespaceNameContext, 0) as TablespaceNameContext;
	}
	public tsDataFileName(): TsDataFileNameContext {
		return this.getTypedRuleContext(TsDataFileNameContext, 0) as TsDataFileNameContext;
	}
	public USE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.USE_SYMBOL, 0);
	}
	public LOGFILE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.LOGFILE_SYMBOL, 0);
	}
	public GROUP_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.GROUP_SYMBOL, 0);
	}
	public logfileGroupRef(): LogfileGroupRefContext {
		return this.getTypedRuleContext(LogfileGroupRefContext, 0) as LogfileGroupRefContext;
	}
	public tablespaceOptions(): TablespaceOptionsContext {
		return this.getTypedRuleContext(TablespaceOptionsContext, 0) as TablespaceOptionsContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_createTablespace;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterCreateTablespace) {
	 		listener.enterCreateTablespace(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitCreateTablespace) {
	 		listener.exitCreateTablespace(this);
		}
	}
}


export class CreateUndoTablespaceContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public UNDO_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.UNDO_SYMBOL, 0);
	}
	public TABLESPACE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.TABLESPACE_SYMBOL, 0);
	}
	public tablespaceName(): TablespaceNameContext {
		return this.getTypedRuleContext(TablespaceNameContext, 0) as TablespaceNameContext;
	}
	public ADD_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ADD_SYMBOL, 0);
	}
	public tsDataFile(): TsDataFileContext {
		return this.getTypedRuleContext(TsDataFileContext, 0) as TsDataFileContext;
	}
	public undoTableSpaceOptions(): UndoTableSpaceOptionsContext {
		return this.getTypedRuleContext(UndoTableSpaceOptionsContext, 0) as UndoTableSpaceOptionsContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_createUndoTablespace;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterCreateUndoTablespace) {
	 		listener.enterCreateUndoTablespace(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitCreateUndoTablespace) {
	 		listener.exitCreateUndoTablespace(this);
		}
	}
}


export class TsDataFileNameContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public ADD_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ADD_SYMBOL, 0);
	}
	public tsDataFile(): TsDataFileContext {
		return this.getTypedRuleContext(TsDataFileContext, 0) as TsDataFileContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_tsDataFileName;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterTsDataFileName) {
	 		listener.enterTsDataFileName(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitTsDataFileName) {
	 		listener.exitTsDataFileName(this);
		}
	}
}


export class TsDataFileContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public DATAFILE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.DATAFILE_SYMBOL, 0);
	}
	public textLiteral(): TextLiteralContext {
		return this.getTypedRuleContext(TextLiteralContext, 0) as TextLiteralContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_tsDataFile;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterTsDataFile) {
	 		listener.enterTsDataFile(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitTsDataFile) {
	 		listener.exitTsDataFile(this);
		}
	}
}


export class TablespaceOptionsContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public tablespaceOption_list(): TablespaceOptionContext[] {
		return this.getTypedRuleContexts(TablespaceOptionContext) as TablespaceOptionContext[];
	}
	public tablespaceOption(i: number): TablespaceOptionContext {
		return this.getTypedRuleContext(TablespaceOptionContext, i) as TablespaceOptionContext;
	}
	public COMMA_SYMBOL_list(): TerminalNode[] {
	    	return this.getTokens(MySQLParser.COMMA_SYMBOL);
	}
	public COMMA_SYMBOL(i: number): TerminalNode {
		return this.getToken(MySQLParser.COMMA_SYMBOL, i);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_tablespaceOptions;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterTablespaceOptions) {
	 		listener.enterTablespaceOptions(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitTablespaceOptions) {
	 		listener.exitTablespaceOptions(this);
		}
	}
}


export class TablespaceOptionContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public tsOptionInitialSize(): TsOptionInitialSizeContext {
		return this.getTypedRuleContext(TsOptionInitialSizeContext, 0) as TsOptionInitialSizeContext;
	}
	public tsOptionAutoextendSize(): TsOptionAutoextendSizeContext {
		return this.getTypedRuleContext(TsOptionAutoextendSizeContext, 0) as TsOptionAutoextendSizeContext;
	}
	public tsOptionMaxSize(): TsOptionMaxSizeContext {
		return this.getTypedRuleContext(TsOptionMaxSizeContext, 0) as TsOptionMaxSizeContext;
	}
	public tsOptionExtentSize(): TsOptionExtentSizeContext {
		return this.getTypedRuleContext(TsOptionExtentSizeContext, 0) as TsOptionExtentSizeContext;
	}
	public tsOptionNodegroup(): TsOptionNodegroupContext {
		return this.getTypedRuleContext(TsOptionNodegroupContext, 0) as TsOptionNodegroupContext;
	}
	public tsOptionEngine(): TsOptionEngineContext {
		return this.getTypedRuleContext(TsOptionEngineContext, 0) as TsOptionEngineContext;
	}
	public tsOptionWait(): TsOptionWaitContext {
		return this.getTypedRuleContext(TsOptionWaitContext, 0) as TsOptionWaitContext;
	}
	public tsOptionComment(): TsOptionCommentContext {
		return this.getTypedRuleContext(TsOptionCommentContext, 0) as TsOptionCommentContext;
	}
	public tsOptionFileblockSize(): TsOptionFileblockSizeContext {
		return this.getTypedRuleContext(TsOptionFileblockSizeContext, 0) as TsOptionFileblockSizeContext;
	}
	public tsOptionEncryption(): TsOptionEncryptionContext {
		return this.getTypedRuleContext(TsOptionEncryptionContext, 0) as TsOptionEncryptionContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_tablespaceOption;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterTablespaceOption) {
	 		listener.enterTablespaceOption(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitTablespaceOption) {
	 		listener.exitTablespaceOption(this);
		}
	}
}


export class TsOptionInitialSizeContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public INITIAL_SIZE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.INITIAL_SIZE_SYMBOL, 0);
	}
	public sizeNumber(): SizeNumberContext {
		return this.getTypedRuleContext(SizeNumberContext, 0) as SizeNumberContext;
	}
	public EQUAL_OPERATOR(): TerminalNode {
		return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_tsOptionInitialSize;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterTsOptionInitialSize) {
	 		listener.enterTsOptionInitialSize(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitTsOptionInitialSize) {
	 		listener.exitTsOptionInitialSize(this);
		}
	}
}


export class TsOptionUndoRedoBufferSizeContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public sizeNumber(): SizeNumberContext {
		return this.getTypedRuleContext(SizeNumberContext, 0) as SizeNumberContext;
	}
	public UNDO_BUFFER_SIZE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.UNDO_BUFFER_SIZE_SYMBOL, 0);
	}
	public REDO_BUFFER_SIZE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.REDO_BUFFER_SIZE_SYMBOL, 0);
	}
	public EQUAL_OPERATOR(): TerminalNode {
		return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_tsOptionUndoRedoBufferSize;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterTsOptionUndoRedoBufferSize) {
	 		listener.enterTsOptionUndoRedoBufferSize(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitTsOptionUndoRedoBufferSize) {
	 		listener.exitTsOptionUndoRedoBufferSize(this);
		}
	}
}


export class TsOptionAutoextendSizeContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public AUTOEXTEND_SIZE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.AUTOEXTEND_SIZE_SYMBOL, 0);
	}
	public sizeNumber(): SizeNumberContext {
		return this.getTypedRuleContext(SizeNumberContext, 0) as SizeNumberContext;
	}
	public EQUAL_OPERATOR(): TerminalNode {
		return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_tsOptionAutoextendSize;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterTsOptionAutoextendSize) {
	 		listener.enterTsOptionAutoextendSize(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitTsOptionAutoextendSize) {
	 		listener.exitTsOptionAutoextendSize(this);
		}
	}
}


export class TsOptionMaxSizeContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public MAX_SIZE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.MAX_SIZE_SYMBOL, 0);
	}
	public sizeNumber(): SizeNumberContext {
		return this.getTypedRuleContext(SizeNumberContext, 0) as SizeNumberContext;
	}
	public EQUAL_OPERATOR(): TerminalNode {
		return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_tsOptionMaxSize;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterTsOptionMaxSize) {
	 		listener.enterTsOptionMaxSize(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitTsOptionMaxSize) {
	 		listener.exitTsOptionMaxSize(this);
		}
	}
}


export class TsOptionExtentSizeContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public EXTENT_SIZE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.EXTENT_SIZE_SYMBOL, 0);
	}
	public sizeNumber(): SizeNumberContext {
		return this.getTypedRuleContext(SizeNumberContext, 0) as SizeNumberContext;
	}
	public EQUAL_OPERATOR(): TerminalNode {
		return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_tsOptionExtentSize;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterTsOptionExtentSize) {
	 		listener.enterTsOptionExtentSize(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitTsOptionExtentSize) {
	 		listener.exitTsOptionExtentSize(this);
		}
	}
}


export class TsOptionNodegroupContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public NODEGROUP_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.NODEGROUP_SYMBOL, 0);
	}
	public real_ulong_number(): Real_ulong_numberContext {
		return this.getTypedRuleContext(Real_ulong_numberContext, 0) as Real_ulong_numberContext;
	}
	public EQUAL_OPERATOR(): TerminalNode {
		return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_tsOptionNodegroup;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterTsOptionNodegroup) {
	 		listener.enterTsOptionNodegroup(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitTsOptionNodegroup) {
	 		listener.exitTsOptionNodegroup(this);
		}
	}
}


export class TsOptionEngineContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public ENGINE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ENGINE_SYMBOL, 0);
	}
	public engineRef(): EngineRefContext {
		return this.getTypedRuleContext(EngineRefContext, 0) as EngineRefContext;
	}
	public STORAGE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.STORAGE_SYMBOL, 0);
	}
	public EQUAL_OPERATOR(): TerminalNode {
		return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_tsOptionEngine;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterTsOptionEngine) {
	 		listener.enterTsOptionEngine(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitTsOptionEngine) {
	 		listener.exitTsOptionEngine(this);
		}
	}
}


export class TsOptionWaitContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public WAIT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.WAIT_SYMBOL, 0);
	}
	public NO_WAIT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.NO_WAIT_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_tsOptionWait;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterTsOptionWait) {
	 		listener.enterTsOptionWait(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitTsOptionWait) {
	 		listener.exitTsOptionWait(this);
		}
	}
}


export class TsOptionCommentContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public COMMENT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.COMMENT_SYMBOL, 0);
	}
	public textLiteral(): TextLiteralContext {
		return this.getTypedRuleContext(TextLiteralContext, 0) as TextLiteralContext;
	}
	public EQUAL_OPERATOR(): TerminalNode {
		return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_tsOptionComment;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterTsOptionComment) {
	 		listener.enterTsOptionComment(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitTsOptionComment) {
	 		listener.exitTsOptionComment(this);
		}
	}
}


export class TsOptionFileblockSizeContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public FILE_BLOCK_SIZE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.FILE_BLOCK_SIZE_SYMBOL, 0);
	}
	public sizeNumber(): SizeNumberContext {
		return this.getTypedRuleContext(SizeNumberContext, 0) as SizeNumberContext;
	}
	public EQUAL_OPERATOR(): TerminalNode {
		return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_tsOptionFileblockSize;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterTsOptionFileblockSize) {
	 		listener.enterTsOptionFileblockSize(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitTsOptionFileblockSize) {
	 		listener.exitTsOptionFileblockSize(this);
		}
	}
}


export class TsOptionEncryptionContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public ENCRYPTION_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ENCRYPTION_SYMBOL, 0);
	}
	public textStringLiteral(): TextStringLiteralContext {
		return this.getTypedRuleContext(TextStringLiteralContext, 0) as TextStringLiteralContext;
	}
	public EQUAL_OPERATOR(): TerminalNode {
		return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_tsOptionEncryption;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterTsOptionEncryption) {
	 		listener.enterTsOptionEncryption(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitTsOptionEncryption) {
	 		listener.exitTsOptionEncryption(this);
		}
	}
}


export class CreateViewContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public VIEW_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.VIEW_SYMBOL, 0);
	}
	public viewName(): ViewNameContext {
		return this.getTypedRuleContext(ViewNameContext, 0) as ViewNameContext;
	}
	public viewTail(): ViewTailContext {
		return this.getTypedRuleContext(ViewTailContext, 0) as ViewTailContext;
	}
	public viewReplaceOrAlgorithm(): ViewReplaceOrAlgorithmContext {
		return this.getTypedRuleContext(ViewReplaceOrAlgorithmContext, 0) as ViewReplaceOrAlgorithmContext;
	}
	public definerClause(): DefinerClauseContext {
		return this.getTypedRuleContext(DefinerClauseContext, 0) as DefinerClauseContext;
	}
	public viewSuid(): ViewSuidContext {
		return this.getTypedRuleContext(ViewSuidContext, 0) as ViewSuidContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_createView;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterCreateView) {
	 		listener.enterCreateView(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitCreateView) {
	 		listener.exitCreateView(this);
		}
	}
}


export class ViewReplaceOrAlgorithmContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public OR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.OR_SYMBOL, 0);
	}
	public REPLACE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.REPLACE_SYMBOL, 0);
	}
	public viewAlgorithm(): ViewAlgorithmContext {
		return this.getTypedRuleContext(ViewAlgorithmContext, 0) as ViewAlgorithmContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_viewReplaceOrAlgorithm;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterViewReplaceOrAlgorithm) {
	 		listener.enterViewReplaceOrAlgorithm(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitViewReplaceOrAlgorithm) {
	 		listener.exitViewReplaceOrAlgorithm(this);
		}
	}
}


export class ViewAlgorithmContext extends ParserRuleContext {
	public _algorithm!: Token;
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public ALGORITHM_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ALGORITHM_SYMBOL, 0);
	}
	public EQUAL_OPERATOR(): TerminalNode {
		return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
	}
	public UNDEFINED_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.UNDEFINED_SYMBOL, 0);
	}
	public MERGE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.MERGE_SYMBOL, 0);
	}
	public TEMPTABLE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.TEMPTABLE_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_viewAlgorithm;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterViewAlgorithm) {
	 		listener.enterViewAlgorithm(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitViewAlgorithm) {
	 		listener.exitViewAlgorithm(this);
		}
	}
}


export class ViewSuidContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public SQL_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SQL_SYMBOL, 0);
	}
	public SECURITY_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SECURITY_SYMBOL, 0);
	}
	public DEFINER_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.DEFINER_SYMBOL, 0);
	}
	public INVOKER_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.INVOKER_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_viewSuid;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterViewSuid) {
	 		listener.enterViewSuid(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitViewSuid) {
	 		listener.exitViewSuid(this);
		}
	}
}


export class CreateTriggerContext extends ParserRuleContext {
	public _timing!: Token;
	public _event!: Token;
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public TRIGGER_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.TRIGGER_SYMBOL, 0);
	}
	public triggerName(): TriggerNameContext {
		return this.getTypedRuleContext(TriggerNameContext, 0) as TriggerNameContext;
	}
	public ON_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ON_SYMBOL, 0);
	}
	public tableRef(): TableRefContext {
		return this.getTypedRuleContext(TableRefContext, 0) as TableRefContext;
	}
	public FOR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.FOR_SYMBOL, 0);
	}
	public EACH_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.EACH_SYMBOL, 0);
	}
	public ROW_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ROW_SYMBOL, 0);
	}
	public compoundStatement(): CompoundStatementContext {
		return this.getTypedRuleContext(CompoundStatementContext, 0) as CompoundStatementContext;
	}
	public BEFORE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.BEFORE_SYMBOL, 0);
	}
	public AFTER_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.AFTER_SYMBOL, 0);
	}
	public INSERT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.INSERT_SYMBOL, 0);
	}
	public UPDATE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.UPDATE_SYMBOL, 0);
	}
	public DELETE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.DELETE_SYMBOL, 0);
	}
	public definerClause(): DefinerClauseContext {
		return this.getTypedRuleContext(DefinerClauseContext, 0) as DefinerClauseContext;
	}
	public triggerFollowsPrecedesClause(): TriggerFollowsPrecedesClauseContext {
		return this.getTypedRuleContext(TriggerFollowsPrecedesClauseContext, 0) as TriggerFollowsPrecedesClauseContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_createTrigger;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterCreateTrigger) {
	 		listener.enterCreateTrigger(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitCreateTrigger) {
	 		listener.exitCreateTrigger(this);
		}
	}
}


export class TriggerFollowsPrecedesClauseContext extends ParserRuleContext {
	public _ordering!: Token;
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public textOrIdentifier(): TextOrIdentifierContext {
		return this.getTypedRuleContext(TextOrIdentifierContext, 0) as TextOrIdentifierContext;
	}
	public FOLLOWS_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.FOLLOWS_SYMBOL, 0);
	}
	public PRECEDES_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.PRECEDES_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_triggerFollowsPrecedesClause;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterTriggerFollowsPrecedesClause) {
	 		listener.enterTriggerFollowsPrecedesClause(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitTriggerFollowsPrecedesClause) {
	 		listener.exitTriggerFollowsPrecedesClause(this);
		}
	}
}


export class CreateEventContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public EVENT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.EVENT_SYMBOL, 0);
	}
	public eventName(): EventNameContext {
		return this.getTypedRuleContext(EventNameContext, 0) as EventNameContext;
	}
	public ON_SYMBOL_list(): TerminalNode[] {
	    	return this.getTokens(MySQLParser.ON_SYMBOL);
	}
	public ON_SYMBOL(i: number): TerminalNode {
		return this.getToken(MySQLParser.ON_SYMBOL, i);
	}
	public SCHEDULE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SCHEDULE_SYMBOL, 0);
	}
	public schedule(): ScheduleContext {
		return this.getTypedRuleContext(ScheduleContext, 0) as ScheduleContext;
	}
	public DO_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.DO_SYMBOL, 0);
	}
	public compoundStatement(): CompoundStatementContext {
		return this.getTypedRuleContext(CompoundStatementContext, 0) as CompoundStatementContext;
	}
	public definerClause(): DefinerClauseContext {
		return this.getTypedRuleContext(DefinerClauseContext, 0) as DefinerClauseContext;
	}
	public ifNotExists(): IfNotExistsContext {
		return this.getTypedRuleContext(IfNotExistsContext, 0) as IfNotExistsContext;
	}
	public COMPLETION_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.COMPLETION_SYMBOL, 0);
	}
	public PRESERVE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.PRESERVE_SYMBOL, 0);
	}
	public ENABLE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ENABLE_SYMBOL, 0);
	}
	public DISABLE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.DISABLE_SYMBOL, 0);
	}
	public COMMENT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.COMMENT_SYMBOL, 0);
	}
	public textLiteral(): TextLiteralContext {
		return this.getTypedRuleContext(TextLiteralContext, 0) as TextLiteralContext;
	}
	public NOT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.NOT_SYMBOL, 0);
	}
	public SLAVE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SLAVE_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_createEvent;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterCreateEvent) {
	 		listener.enterCreateEvent(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitCreateEvent) {
	 		listener.exitCreateEvent(this);
		}
	}
}


export class CreateRoleContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public ROLE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ROLE_SYMBOL, 0);
	}
	public roleList(): RoleListContext {
		return this.getTypedRuleContext(RoleListContext, 0) as RoleListContext;
	}
	public ifNotExists(): IfNotExistsContext {
		return this.getTypedRuleContext(IfNotExistsContext, 0) as IfNotExistsContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_createRole;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterCreateRole) {
	 		listener.enterCreateRole(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitCreateRole) {
	 		listener.exitCreateRole(this);
		}
	}
}


export class CreateSpatialReferenceContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public OR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.OR_SYMBOL, 0);
	}
	public REPLACE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.REPLACE_SYMBOL, 0);
	}
	public SPATIAL_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SPATIAL_SYMBOL, 0);
	}
	public REFERENCE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.REFERENCE_SYMBOL, 0);
	}
	public SYSTEM_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SYSTEM_SYMBOL, 0);
	}
	public real_ulonglong_number(): Real_ulonglong_numberContext {
		return this.getTypedRuleContext(Real_ulonglong_numberContext, 0) as Real_ulonglong_numberContext;
	}
	public srsAttribute_list(): SrsAttributeContext[] {
		return this.getTypedRuleContexts(SrsAttributeContext) as SrsAttributeContext[];
	}
	public srsAttribute(i: number): SrsAttributeContext {
		return this.getTypedRuleContext(SrsAttributeContext, i) as SrsAttributeContext;
	}
	public ifNotExists(): IfNotExistsContext {
		return this.getTypedRuleContext(IfNotExistsContext, 0) as IfNotExistsContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_createSpatialReference;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterCreateSpatialReference) {
	 		listener.enterCreateSpatialReference(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitCreateSpatialReference) {
	 		listener.exitCreateSpatialReference(this);
		}
	}
}


export class SrsAttributeContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public NAME_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.NAME_SYMBOL, 0);
	}
	public TEXT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.TEXT_SYMBOL, 0);
	}
	public textStringNoLinebreak(): TextStringNoLinebreakContext {
		return this.getTypedRuleContext(TextStringNoLinebreakContext, 0) as TextStringNoLinebreakContext;
	}
	public DEFINITION_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.DEFINITION_SYMBOL, 0);
	}
	public ORGANIZATION_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ORGANIZATION_SYMBOL, 0);
	}
	public IDENTIFIED_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.IDENTIFIED_SYMBOL, 0);
	}
	public BY_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.BY_SYMBOL, 0);
	}
	public real_ulonglong_number(): Real_ulonglong_numberContext {
		return this.getTypedRuleContext(Real_ulonglong_numberContext, 0) as Real_ulonglong_numberContext;
	}
	public DESCRIPTION_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.DESCRIPTION_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_srsAttribute;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterSrsAttribute) {
	 		listener.enterSrsAttribute(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitSrsAttribute) {
	 		listener.exitSrsAttribute(this);
		}
	}
}


export class DropStatementContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public DROP_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.DROP_SYMBOL, 0);
	}
	public dropDatabase(): DropDatabaseContext {
		return this.getTypedRuleContext(DropDatabaseContext, 0) as DropDatabaseContext;
	}
	public dropEvent(): DropEventContext {
		return this.getTypedRuleContext(DropEventContext, 0) as DropEventContext;
	}
	public dropFunction(): DropFunctionContext {
		return this.getTypedRuleContext(DropFunctionContext, 0) as DropFunctionContext;
	}
	public dropProcedure(): DropProcedureContext {
		return this.getTypedRuleContext(DropProcedureContext, 0) as DropProcedureContext;
	}
	public dropIndex(): DropIndexContext {
		return this.getTypedRuleContext(DropIndexContext, 0) as DropIndexContext;
	}
	public dropLogfileGroup(): DropLogfileGroupContext {
		return this.getTypedRuleContext(DropLogfileGroupContext, 0) as DropLogfileGroupContext;
	}
	public dropServer(): DropServerContext {
		return this.getTypedRuleContext(DropServerContext, 0) as DropServerContext;
	}
	public dropTable(): DropTableContext {
		return this.getTypedRuleContext(DropTableContext, 0) as DropTableContext;
	}
	public dropTableSpace(): DropTableSpaceContext {
		return this.getTypedRuleContext(DropTableSpaceContext, 0) as DropTableSpaceContext;
	}
	public dropTrigger(): DropTriggerContext {
		return this.getTypedRuleContext(DropTriggerContext, 0) as DropTriggerContext;
	}
	public dropView(): DropViewContext {
		return this.getTypedRuleContext(DropViewContext, 0) as DropViewContext;
	}
	public dropRole(): DropRoleContext {
		return this.getTypedRuleContext(DropRoleContext, 0) as DropRoleContext;
	}
	public dropSpatialReference(): DropSpatialReferenceContext {
		return this.getTypedRuleContext(DropSpatialReferenceContext, 0) as DropSpatialReferenceContext;
	}
	public dropUndoTablespace(): DropUndoTablespaceContext {
		return this.getTypedRuleContext(DropUndoTablespaceContext, 0) as DropUndoTablespaceContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_dropStatement;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterDropStatement) {
	 		listener.enterDropStatement(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitDropStatement) {
	 		listener.exitDropStatement(this);
		}
	}
}


export class DropDatabaseContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public DATABASE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.DATABASE_SYMBOL, 0);
	}
	public schemaRef(): SchemaRefContext {
		return this.getTypedRuleContext(SchemaRefContext, 0) as SchemaRefContext;
	}
	public ifExists(): IfExistsContext {
		return this.getTypedRuleContext(IfExistsContext, 0) as IfExistsContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_dropDatabase;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterDropDatabase) {
	 		listener.enterDropDatabase(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitDropDatabase) {
	 		listener.exitDropDatabase(this);
		}
	}
}


export class DropEventContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public EVENT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.EVENT_SYMBOL, 0);
	}
	public eventRef(): EventRefContext {
		return this.getTypedRuleContext(EventRefContext, 0) as EventRefContext;
	}
	public ifExists(): IfExistsContext {
		return this.getTypedRuleContext(IfExistsContext, 0) as IfExistsContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_dropEvent;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterDropEvent) {
	 		listener.enterDropEvent(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitDropEvent) {
	 		listener.exitDropEvent(this);
		}
	}
}


export class DropFunctionContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public FUNCTION_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.FUNCTION_SYMBOL, 0);
	}
	public functionRef(): FunctionRefContext {
		return this.getTypedRuleContext(FunctionRefContext, 0) as FunctionRefContext;
	}
	public ifExists(): IfExistsContext {
		return this.getTypedRuleContext(IfExistsContext, 0) as IfExistsContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_dropFunction;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterDropFunction) {
	 		listener.enterDropFunction(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitDropFunction) {
	 		listener.exitDropFunction(this);
		}
	}
}


export class DropProcedureContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public PROCEDURE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.PROCEDURE_SYMBOL, 0);
	}
	public procedureRef(): ProcedureRefContext {
		return this.getTypedRuleContext(ProcedureRefContext, 0) as ProcedureRefContext;
	}
	public ifExists(): IfExistsContext {
		return this.getTypedRuleContext(IfExistsContext, 0) as IfExistsContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_dropProcedure;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterDropProcedure) {
	 		listener.enterDropProcedure(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitDropProcedure) {
	 		listener.exitDropProcedure(this);
		}
	}
}


export class DropIndexContext extends ParserRuleContext {
	public _type_!: Token;
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public indexRef(): IndexRefContext {
		return this.getTypedRuleContext(IndexRefContext, 0) as IndexRefContext;
	}
	public ON_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ON_SYMBOL, 0);
	}
	public tableRef(): TableRefContext {
		return this.getTypedRuleContext(TableRefContext, 0) as TableRefContext;
	}
	public INDEX_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.INDEX_SYMBOL, 0);
	}
	public onlineOption(): OnlineOptionContext {
		return this.getTypedRuleContext(OnlineOptionContext, 0) as OnlineOptionContext;
	}
	public indexLockAndAlgorithm(): IndexLockAndAlgorithmContext {
		return this.getTypedRuleContext(IndexLockAndAlgorithmContext, 0) as IndexLockAndAlgorithmContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_dropIndex;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterDropIndex) {
	 		listener.enterDropIndex(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitDropIndex) {
	 		listener.exitDropIndex(this);
		}
	}
}


export class DropLogfileGroupContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LOGFILE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.LOGFILE_SYMBOL, 0);
	}
	public GROUP_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.GROUP_SYMBOL, 0);
	}
	public logfileGroupRef(): LogfileGroupRefContext {
		return this.getTypedRuleContext(LogfileGroupRefContext, 0) as LogfileGroupRefContext;
	}
	public dropLogfileGroupOption_list(): DropLogfileGroupOptionContext[] {
		return this.getTypedRuleContexts(DropLogfileGroupOptionContext) as DropLogfileGroupOptionContext[];
	}
	public dropLogfileGroupOption(i: number): DropLogfileGroupOptionContext {
		return this.getTypedRuleContext(DropLogfileGroupOptionContext, i) as DropLogfileGroupOptionContext;
	}
	public COMMA_SYMBOL_list(): TerminalNode[] {
	    	return this.getTokens(MySQLParser.COMMA_SYMBOL);
	}
	public COMMA_SYMBOL(i: number): TerminalNode {
		return this.getToken(MySQLParser.COMMA_SYMBOL, i);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_dropLogfileGroup;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterDropLogfileGroup) {
	 		listener.enterDropLogfileGroup(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitDropLogfileGroup) {
	 		listener.exitDropLogfileGroup(this);
		}
	}
}


export class DropLogfileGroupOptionContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public tsOptionWait(): TsOptionWaitContext {
		return this.getTypedRuleContext(TsOptionWaitContext, 0) as TsOptionWaitContext;
	}
	public tsOptionEngine(): TsOptionEngineContext {
		return this.getTypedRuleContext(TsOptionEngineContext, 0) as TsOptionEngineContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_dropLogfileGroupOption;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterDropLogfileGroupOption) {
	 		listener.enterDropLogfileGroupOption(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitDropLogfileGroupOption) {
	 		listener.exitDropLogfileGroupOption(this);
		}
	}
}


export class DropServerContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public SERVER_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SERVER_SYMBOL, 0);
	}
	public serverRef(): ServerRefContext {
		return this.getTypedRuleContext(ServerRefContext, 0) as ServerRefContext;
	}
	public ifExists(): IfExistsContext {
		return this.getTypedRuleContext(IfExistsContext, 0) as IfExistsContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_dropServer;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterDropServer) {
	 		listener.enterDropServer(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitDropServer) {
	 		listener.exitDropServer(this);
		}
	}
}


export class DropTableContext extends ParserRuleContext {
	public _type_!: Token;
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public tableRefList(): TableRefListContext {
		return this.getTypedRuleContext(TableRefListContext, 0) as TableRefListContext;
	}
	public TABLE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.TABLE_SYMBOL, 0);
	}
	public TABLES_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.TABLES_SYMBOL, 0);
	}
	public TEMPORARY_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.TEMPORARY_SYMBOL, 0);
	}
	public ifExists(): IfExistsContext {
		return this.getTypedRuleContext(IfExistsContext, 0) as IfExistsContext;
	}
	public RESTRICT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.RESTRICT_SYMBOL, 0);
	}
	public CASCADE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CASCADE_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_dropTable;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterDropTable) {
	 		listener.enterDropTable(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitDropTable) {
	 		listener.exitDropTable(this);
		}
	}
}


export class DropTableSpaceContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public TABLESPACE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.TABLESPACE_SYMBOL, 0);
	}
	public tablespaceRef(): TablespaceRefContext {
		return this.getTypedRuleContext(TablespaceRefContext, 0) as TablespaceRefContext;
	}
	public dropLogfileGroupOption_list(): DropLogfileGroupOptionContext[] {
		return this.getTypedRuleContexts(DropLogfileGroupOptionContext) as DropLogfileGroupOptionContext[];
	}
	public dropLogfileGroupOption(i: number): DropLogfileGroupOptionContext {
		return this.getTypedRuleContext(DropLogfileGroupOptionContext, i) as DropLogfileGroupOptionContext;
	}
	public COMMA_SYMBOL_list(): TerminalNode[] {
	    	return this.getTokens(MySQLParser.COMMA_SYMBOL);
	}
	public COMMA_SYMBOL(i: number): TerminalNode {
		return this.getToken(MySQLParser.COMMA_SYMBOL, i);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_dropTableSpace;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterDropTableSpace) {
	 		listener.enterDropTableSpace(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitDropTableSpace) {
	 		listener.exitDropTableSpace(this);
		}
	}
}


export class DropTriggerContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public TRIGGER_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.TRIGGER_SYMBOL, 0);
	}
	public triggerRef(): TriggerRefContext {
		return this.getTypedRuleContext(TriggerRefContext, 0) as TriggerRefContext;
	}
	public ifExists(): IfExistsContext {
		return this.getTypedRuleContext(IfExistsContext, 0) as IfExistsContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_dropTrigger;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterDropTrigger) {
	 		listener.enterDropTrigger(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitDropTrigger) {
	 		listener.exitDropTrigger(this);
		}
	}
}


export class DropViewContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public VIEW_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.VIEW_SYMBOL, 0);
	}
	public viewRefList(): ViewRefListContext {
		return this.getTypedRuleContext(ViewRefListContext, 0) as ViewRefListContext;
	}
	public ifExists(): IfExistsContext {
		return this.getTypedRuleContext(IfExistsContext, 0) as IfExistsContext;
	}
	public RESTRICT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.RESTRICT_SYMBOL, 0);
	}
	public CASCADE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CASCADE_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_dropView;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterDropView) {
	 		listener.enterDropView(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitDropView) {
	 		listener.exitDropView(this);
		}
	}
}


export class DropRoleContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public ROLE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ROLE_SYMBOL, 0);
	}
	public roleList(): RoleListContext {
		return this.getTypedRuleContext(RoleListContext, 0) as RoleListContext;
	}
	public ifExists(): IfExistsContext {
		return this.getTypedRuleContext(IfExistsContext, 0) as IfExistsContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_dropRole;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterDropRole) {
	 		listener.enterDropRole(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitDropRole) {
	 		listener.exitDropRole(this);
		}
	}
}


export class DropSpatialReferenceContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public SPATIAL_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SPATIAL_SYMBOL, 0);
	}
	public REFERENCE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.REFERENCE_SYMBOL, 0);
	}
	public SYSTEM_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SYSTEM_SYMBOL, 0);
	}
	public real_ulonglong_number(): Real_ulonglong_numberContext {
		return this.getTypedRuleContext(Real_ulonglong_numberContext, 0) as Real_ulonglong_numberContext;
	}
	public ifExists(): IfExistsContext {
		return this.getTypedRuleContext(IfExistsContext, 0) as IfExistsContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_dropSpatialReference;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterDropSpatialReference) {
	 		listener.enterDropSpatialReference(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitDropSpatialReference) {
	 		listener.exitDropSpatialReference(this);
		}
	}
}


export class DropUndoTablespaceContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public UNDO_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.UNDO_SYMBOL, 0);
	}
	public TABLESPACE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.TABLESPACE_SYMBOL, 0);
	}
	public tablespaceRef(): TablespaceRefContext {
		return this.getTypedRuleContext(TablespaceRefContext, 0) as TablespaceRefContext;
	}
	public undoTableSpaceOptions(): UndoTableSpaceOptionsContext {
		return this.getTypedRuleContext(UndoTableSpaceOptionsContext, 0) as UndoTableSpaceOptionsContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_dropUndoTablespace;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterDropUndoTablespace) {
	 		listener.enterDropUndoTablespace(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitDropUndoTablespace) {
	 		listener.exitDropUndoTablespace(this);
		}
	}
}


export class RenameTableStatementContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public RENAME_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.RENAME_SYMBOL, 0);
	}
	public renamePair_list(): RenamePairContext[] {
		return this.getTypedRuleContexts(RenamePairContext) as RenamePairContext[];
	}
	public renamePair(i: number): RenamePairContext {
		return this.getTypedRuleContext(RenamePairContext, i) as RenamePairContext;
	}
	public TABLE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.TABLE_SYMBOL, 0);
	}
	public TABLES_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.TABLES_SYMBOL, 0);
	}
	public COMMA_SYMBOL_list(): TerminalNode[] {
	    	return this.getTokens(MySQLParser.COMMA_SYMBOL);
	}
	public COMMA_SYMBOL(i: number): TerminalNode {
		return this.getToken(MySQLParser.COMMA_SYMBOL, i);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_renameTableStatement;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterRenameTableStatement) {
	 		listener.enterRenameTableStatement(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitRenameTableStatement) {
	 		listener.exitRenameTableStatement(this);
		}
	}
}


export class RenamePairContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public tableRef(): TableRefContext {
		return this.getTypedRuleContext(TableRefContext, 0) as TableRefContext;
	}
	public TO_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.TO_SYMBOL, 0);
	}
	public tableName(): TableNameContext {
		return this.getTypedRuleContext(TableNameContext, 0) as TableNameContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_renamePair;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterRenamePair) {
	 		listener.enterRenamePair(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitRenamePair) {
	 		listener.exitRenamePair(this);
		}
	}
}


export class TruncateTableStatementContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public TRUNCATE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.TRUNCATE_SYMBOL, 0);
	}
	public tableRef(): TableRefContext {
		return this.getTypedRuleContext(TableRefContext, 0) as TableRefContext;
	}
	public TABLE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.TABLE_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_truncateTableStatement;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterTruncateTableStatement) {
	 		listener.enterTruncateTableStatement(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitTruncateTableStatement) {
	 		listener.exitTruncateTableStatement(this);
		}
	}
}


export class ImportStatementContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public IMPORT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.IMPORT_SYMBOL, 0);
	}
	public TABLE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.TABLE_SYMBOL, 0);
	}
	public FROM_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.FROM_SYMBOL, 0);
	}
	public textStringLiteralList(): TextStringLiteralListContext {
		return this.getTypedRuleContext(TextStringLiteralListContext, 0) as TextStringLiteralListContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_importStatement;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterImportStatement) {
	 		listener.enterImportStatement(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitImportStatement) {
	 		listener.exitImportStatement(this);
		}
	}
}


export class CallStatementContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public CALL_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CALL_SYMBOL, 0);
	}
	public procedureRef(): ProcedureRefContext {
		return this.getTypedRuleContext(ProcedureRefContext, 0) as ProcedureRefContext;
	}
	public OPEN_PAR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
	}
	public CLOSE_PAR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
	}
	public exprList(): ExprListContext {
		return this.getTypedRuleContext(ExprListContext, 0) as ExprListContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_callStatement;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterCallStatement) {
	 		listener.enterCallStatement(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitCallStatement) {
	 		listener.exitCallStatement(this);
		}
	}
}


export class DeleteStatementContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public DELETE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.DELETE_SYMBOL, 0);
	}
	public FROM_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.FROM_SYMBOL, 0);
	}
	public tableAliasRefList(): TableAliasRefListContext {
		return this.getTypedRuleContext(TableAliasRefListContext, 0) as TableAliasRefListContext;
	}
	public tableReferenceList(): TableReferenceListContext {
		return this.getTypedRuleContext(TableReferenceListContext, 0) as TableReferenceListContext;
	}
	public withClause(): WithClauseContext {
		return this.getTypedRuleContext(WithClauseContext, 0) as WithClauseContext;
	}
	public deleteStatementOption_list(): DeleteStatementOptionContext[] {
		return this.getTypedRuleContexts(DeleteStatementOptionContext) as DeleteStatementOptionContext[];
	}
	public deleteStatementOption(i: number): DeleteStatementOptionContext {
		return this.getTypedRuleContext(DeleteStatementOptionContext, i) as DeleteStatementOptionContext;
	}
	public USING_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.USING_SYMBOL, 0);
	}
	public tableRef(): TableRefContext {
		return this.getTypedRuleContext(TableRefContext, 0) as TableRefContext;
	}
	public whereClause(): WhereClauseContext {
		return this.getTypedRuleContext(WhereClauseContext, 0) as WhereClauseContext;
	}
	public tableAlias(): TableAliasContext {
		return this.getTypedRuleContext(TableAliasContext, 0) as TableAliasContext;
	}
	public partitionDelete(): PartitionDeleteContext {
		return this.getTypedRuleContext(PartitionDeleteContext, 0) as PartitionDeleteContext;
	}
	public orderClause(): OrderClauseContext {
		return this.getTypedRuleContext(OrderClauseContext, 0) as OrderClauseContext;
	}
	public simpleLimitClause(): SimpleLimitClauseContext {
		return this.getTypedRuleContext(SimpleLimitClauseContext, 0) as SimpleLimitClauseContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_deleteStatement;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterDeleteStatement) {
	 		listener.enterDeleteStatement(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitDeleteStatement) {
	 		listener.exitDeleteStatement(this);
		}
	}
}


export class PartitionDeleteContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public PARTITION_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.PARTITION_SYMBOL, 0);
	}
	public OPEN_PAR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
	}
	public identifierList(): IdentifierListContext {
		return this.getTypedRuleContext(IdentifierListContext, 0) as IdentifierListContext;
	}
	public CLOSE_PAR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_partitionDelete;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterPartitionDelete) {
	 		listener.enterPartitionDelete(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitPartitionDelete) {
	 		listener.exitPartitionDelete(this);
		}
	}
}


export class DeleteStatementOptionContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public QUICK_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.QUICK_SYMBOL, 0);
	}
	public LOW_PRIORITY_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.LOW_PRIORITY_SYMBOL, 0);
	}
	public IGNORE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.IGNORE_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_deleteStatementOption;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterDeleteStatementOption) {
	 		listener.enterDeleteStatementOption(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitDeleteStatementOption) {
	 		listener.exitDeleteStatementOption(this);
		}
	}
}


export class DoStatementContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public DO_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.DO_SYMBOL, 0);
	}
	public exprList(): ExprListContext {
		return this.getTypedRuleContext(ExprListContext, 0) as ExprListContext;
	}
	public selectItemList(): SelectItemListContext {
		return this.getTypedRuleContext(SelectItemListContext, 0) as SelectItemListContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_doStatement;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterDoStatement) {
	 		listener.enterDoStatement(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitDoStatement) {
	 		listener.exitDoStatement(this);
		}
	}
}


export class HandlerStatementContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public HANDLER_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.HANDLER_SYMBOL, 0);
	}
	public tableRef(): TableRefContext {
		return this.getTypedRuleContext(TableRefContext, 0) as TableRefContext;
	}
	public OPEN_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.OPEN_SYMBOL, 0);
	}
	public identifier(): IdentifierContext {
		return this.getTypedRuleContext(IdentifierContext, 0) as IdentifierContext;
	}
	public CLOSE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CLOSE_SYMBOL, 0);
	}
	public READ_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.READ_SYMBOL, 0);
	}
	public handlerReadOrScan(): HandlerReadOrScanContext {
		return this.getTypedRuleContext(HandlerReadOrScanContext, 0) as HandlerReadOrScanContext;
	}
	public tableAlias(): TableAliasContext {
		return this.getTypedRuleContext(TableAliasContext, 0) as TableAliasContext;
	}
	public whereClause(): WhereClauseContext {
		return this.getTypedRuleContext(WhereClauseContext, 0) as WhereClauseContext;
	}
	public limitClause(): LimitClauseContext {
		return this.getTypedRuleContext(LimitClauseContext, 0) as LimitClauseContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_handlerStatement;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterHandlerStatement) {
	 		listener.enterHandlerStatement(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitHandlerStatement) {
	 		listener.exitHandlerStatement(this);
		}
	}
}


export class HandlerReadOrScanContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public FIRST_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.FIRST_SYMBOL, 0);
	}
	public NEXT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.NEXT_SYMBOL, 0);
	}
	public identifier(): IdentifierContext {
		return this.getTypedRuleContext(IdentifierContext, 0) as IdentifierContext;
	}
	public OPEN_PAR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
	}
	public values(): ValuesContext {
		return this.getTypedRuleContext(ValuesContext, 0) as ValuesContext;
	}
	public CLOSE_PAR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
	}
	public PREV_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.PREV_SYMBOL, 0);
	}
	public LAST_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.LAST_SYMBOL, 0);
	}
	public EQUAL_OPERATOR(): TerminalNode {
		return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
	}
	public LESS_THAN_OPERATOR(): TerminalNode {
		return this.getToken(MySQLParser.LESS_THAN_OPERATOR, 0);
	}
	public GREATER_THAN_OPERATOR(): TerminalNode {
		return this.getToken(MySQLParser.GREATER_THAN_OPERATOR, 0);
	}
	public LESS_OR_EQUAL_OPERATOR(): TerminalNode {
		return this.getToken(MySQLParser.LESS_OR_EQUAL_OPERATOR, 0);
	}
	public GREATER_OR_EQUAL_OPERATOR(): TerminalNode {
		return this.getToken(MySQLParser.GREATER_OR_EQUAL_OPERATOR, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_handlerReadOrScan;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterHandlerReadOrScan) {
	 		listener.enterHandlerReadOrScan(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitHandlerReadOrScan) {
	 		listener.exitHandlerReadOrScan(this);
		}
	}
}


export class InsertStatementContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public INSERT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.INSERT_SYMBOL, 0);
	}
	public tableRef(): TableRefContext {
		return this.getTypedRuleContext(TableRefContext, 0) as TableRefContext;
	}
	public insertFromConstructor(): InsertFromConstructorContext {
		return this.getTypedRuleContext(InsertFromConstructorContext, 0) as InsertFromConstructorContext;
	}
	public SET_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SET_SYMBOL, 0);
	}
	public updateList(): UpdateListContext {
		return this.getTypedRuleContext(UpdateListContext, 0) as UpdateListContext;
	}
	public insertQueryExpression(): InsertQueryExpressionContext {
		return this.getTypedRuleContext(InsertQueryExpressionContext, 0) as InsertQueryExpressionContext;
	}
	public insertLockOption(): InsertLockOptionContext {
		return this.getTypedRuleContext(InsertLockOptionContext, 0) as InsertLockOptionContext;
	}
	public IGNORE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.IGNORE_SYMBOL, 0);
	}
	public INTO_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.INTO_SYMBOL, 0);
	}
	public usePartition(): UsePartitionContext {
		return this.getTypedRuleContext(UsePartitionContext, 0) as UsePartitionContext;
	}
	public insertUpdateList(): InsertUpdateListContext {
		return this.getTypedRuleContext(InsertUpdateListContext, 0) as InsertUpdateListContext;
	}
	public valuesReference(): ValuesReferenceContext {
		return this.getTypedRuleContext(ValuesReferenceContext, 0) as ValuesReferenceContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_insertStatement;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterInsertStatement) {
	 		listener.enterInsertStatement(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitInsertStatement) {
	 		listener.exitInsertStatement(this);
		}
	}
}


export class InsertLockOptionContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LOW_PRIORITY_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.LOW_PRIORITY_SYMBOL, 0);
	}
	public DELAYED_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.DELAYED_SYMBOL, 0);
	}
	public HIGH_PRIORITY_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.HIGH_PRIORITY_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_insertLockOption;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterInsertLockOption) {
	 		listener.enterInsertLockOption(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitInsertLockOption) {
	 		listener.exitInsertLockOption(this);
		}
	}
}


export class InsertFromConstructorContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public insertValues(): InsertValuesContext {
		return this.getTypedRuleContext(InsertValuesContext, 0) as InsertValuesContext;
	}
	public OPEN_PAR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
	}
	public CLOSE_PAR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
	}
	public fields(): FieldsContext {
		return this.getTypedRuleContext(FieldsContext, 0) as FieldsContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_insertFromConstructor;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterInsertFromConstructor) {
	 		listener.enterInsertFromConstructor(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitInsertFromConstructor) {
	 		listener.exitInsertFromConstructor(this);
		}
	}
}


export class FieldsContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public insertIdentifier_list(): InsertIdentifierContext[] {
		return this.getTypedRuleContexts(InsertIdentifierContext) as InsertIdentifierContext[];
	}
	public insertIdentifier(i: number): InsertIdentifierContext {
		return this.getTypedRuleContext(InsertIdentifierContext, i) as InsertIdentifierContext;
	}
	public COMMA_SYMBOL_list(): TerminalNode[] {
	    	return this.getTokens(MySQLParser.COMMA_SYMBOL);
	}
	public COMMA_SYMBOL(i: number): TerminalNode {
		return this.getToken(MySQLParser.COMMA_SYMBOL, i);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_fields;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterFields) {
	 		listener.enterFields(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitFields) {
	 		listener.exitFields(this);
		}
	}
}


export class InsertValuesContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public valueList(): ValueListContext {
		return this.getTypedRuleContext(ValueListContext, 0) as ValueListContext;
	}
	public VALUES_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.VALUES_SYMBOL, 0);
	}
	public VALUE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.VALUE_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_insertValues;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterInsertValues) {
	 		listener.enterInsertValues(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitInsertValues) {
	 		listener.exitInsertValues(this);
		}
	}
}


export class InsertQueryExpressionContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public queryExpressionOrParens(): QueryExpressionOrParensContext {
		return this.getTypedRuleContext(QueryExpressionOrParensContext, 0) as QueryExpressionOrParensContext;
	}
	public OPEN_PAR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
	}
	public CLOSE_PAR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
	}
	public fields(): FieldsContext {
		return this.getTypedRuleContext(FieldsContext, 0) as FieldsContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_insertQueryExpression;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterInsertQueryExpression) {
	 		listener.enterInsertQueryExpression(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitInsertQueryExpression) {
	 		listener.exitInsertQueryExpression(this);
		}
	}
}


export class ValueListContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public OPEN_PAR_SYMBOL_list(): TerminalNode[] {
	    	return this.getTokens(MySQLParser.OPEN_PAR_SYMBOL);
	}
	public OPEN_PAR_SYMBOL(i: number): TerminalNode {
		return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, i);
	}
	public CLOSE_PAR_SYMBOL_list(): TerminalNode[] {
	    	return this.getTokens(MySQLParser.CLOSE_PAR_SYMBOL);
	}
	public CLOSE_PAR_SYMBOL(i: number): TerminalNode {
		return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, i);
	}
	public values_list(): ValuesContext[] {
		return this.getTypedRuleContexts(ValuesContext) as ValuesContext[];
	}
	public values(i: number): ValuesContext {
		return this.getTypedRuleContext(ValuesContext, i) as ValuesContext;
	}
	public COMMA_SYMBOL_list(): TerminalNode[] {
	    	return this.getTokens(MySQLParser.COMMA_SYMBOL);
	}
	public COMMA_SYMBOL(i: number): TerminalNode {
		return this.getToken(MySQLParser.COMMA_SYMBOL, i);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_valueList;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterValueList) {
	 		listener.enterValueList(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitValueList) {
	 		listener.exitValueList(this);
		}
	}
}


export class ValuesContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public expr_list(): ExprContext[] {
		return this.getTypedRuleContexts(ExprContext) as ExprContext[];
	}
	public expr(i: number): ExprContext {
		return this.getTypedRuleContext(ExprContext, i) as ExprContext;
	}
	public DEFAULT_SYMBOL_list(): TerminalNode[] {
	    	return this.getTokens(MySQLParser.DEFAULT_SYMBOL);
	}
	public DEFAULT_SYMBOL(i: number): TerminalNode {
		return this.getToken(MySQLParser.DEFAULT_SYMBOL, i);
	}
	public COMMA_SYMBOL_list(): TerminalNode[] {
	    	return this.getTokens(MySQLParser.COMMA_SYMBOL);
	}
	public COMMA_SYMBOL(i: number): TerminalNode {
		return this.getToken(MySQLParser.COMMA_SYMBOL, i);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_values;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterValues) {
	 		listener.enterValues(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitValues) {
	 		listener.exitValues(this);
		}
	}
}


export class ValuesReferenceContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public AS_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.AS_SYMBOL, 0);
	}
	public identifier(): IdentifierContext {
		return this.getTypedRuleContext(IdentifierContext, 0) as IdentifierContext;
	}
	public columnInternalRefList(): ColumnInternalRefListContext {
		return this.getTypedRuleContext(ColumnInternalRefListContext, 0) as ColumnInternalRefListContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_valuesReference;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterValuesReference) {
	 		listener.enterValuesReference(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitValuesReference) {
	 		listener.exitValuesReference(this);
		}
	}
}


export class InsertUpdateListContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public ON_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ON_SYMBOL, 0);
	}
	public DUPLICATE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.DUPLICATE_SYMBOL, 0);
	}
	public KEY_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.KEY_SYMBOL, 0);
	}
	public UPDATE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.UPDATE_SYMBOL, 0);
	}
	public updateList(): UpdateListContext {
		return this.getTypedRuleContext(UpdateListContext, 0) as UpdateListContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_insertUpdateList;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterInsertUpdateList) {
	 		listener.enterInsertUpdateList(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitInsertUpdateList) {
	 		listener.exitInsertUpdateList(this);
		}
	}
}


export class LoadStatementContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LOAD_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.LOAD_SYMBOL, 0);
	}
	public dataOrXml(): DataOrXmlContext {
		return this.getTypedRuleContext(DataOrXmlContext, 0) as DataOrXmlContext;
	}
	public INFILE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.INFILE_SYMBOL, 0);
	}
	public textLiteral(): TextLiteralContext {
		return this.getTypedRuleContext(TextLiteralContext, 0) as TextLiteralContext;
	}
	public INTO_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.INTO_SYMBOL, 0);
	}
	public TABLE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.TABLE_SYMBOL, 0);
	}
	public tableRef(): TableRefContext {
		return this.getTypedRuleContext(TableRefContext, 0) as TableRefContext;
	}
	public loadDataFileTail(): LoadDataFileTailContext {
		return this.getTypedRuleContext(LoadDataFileTailContext, 0) as LoadDataFileTailContext;
	}
	public LOCAL_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.LOCAL_SYMBOL, 0);
	}
	public usePartition(): UsePartitionContext {
		return this.getTypedRuleContext(UsePartitionContext, 0) as UsePartitionContext;
	}
	public charsetClause(): CharsetClauseContext {
		return this.getTypedRuleContext(CharsetClauseContext, 0) as CharsetClauseContext;
	}
	public xmlRowsIdentifiedBy(): XmlRowsIdentifiedByContext {
		return this.getTypedRuleContext(XmlRowsIdentifiedByContext, 0) as XmlRowsIdentifiedByContext;
	}
	public fieldsClause(): FieldsClauseContext {
		return this.getTypedRuleContext(FieldsClauseContext, 0) as FieldsClauseContext;
	}
	public linesClause(): LinesClauseContext {
		return this.getTypedRuleContext(LinesClauseContext, 0) as LinesClauseContext;
	}
	public LOW_PRIORITY_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.LOW_PRIORITY_SYMBOL, 0);
	}
	public CONCURRENT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CONCURRENT_SYMBOL, 0);
	}
	public REPLACE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.REPLACE_SYMBOL, 0);
	}
	public IGNORE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.IGNORE_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_loadStatement;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterLoadStatement) {
	 		listener.enterLoadStatement(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitLoadStatement) {
	 		listener.exitLoadStatement(this);
		}
	}
}


export class DataOrXmlContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public DATA_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.DATA_SYMBOL, 0);
	}
	public XML_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.XML_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_dataOrXml;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterDataOrXml) {
	 		listener.enterDataOrXml(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitDataOrXml) {
	 		listener.exitDataOrXml(this);
		}
	}
}


export class XmlRowsIdentifiedByContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public ROWS_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ROWS_SYMBOL, 0);
	}
	public IDENTIFIED_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.IDENTIFIED_SYMBOL, 0);
	}
	public BY_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.BY_SYMBOL, 0);
	}
	public textString(): TextStringContext {
		return this.getTypedRuleContext(TextStringContext, 0) as TextStringContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_xmlRowsIdentifiedBy;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterXmlRowsIdentifiedBy) {
	 		listener.enterXmlRowsIdentifiedBy(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitXmlRowsIdentifiedBy) {
	 		listener.exitXmlRowsIdentifiedBy(this);
		}
	}
}


export class LoadDataFileTailContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public IGNORE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.IGNORE_SYMBOL, 0);
	}
	public INT_NUMBER(): TerminalNode {
		return this.getToken(MySQLParser.INT_NUMBER, 0);
	}
	public loadDataFileTargetList(): LoadDataFileTargetListContext {
		return this.getTypedRuleContext(LoadDataFileTargetListContext, 0) as LoadDataFileTargetListContext;
	}
	public SET_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SET_SYMBOL, 0);
	}
	public updateList(): UpdateListContext {
		return this.getTypedRuleContext(UpdateListContext, 0) as UpdateListContext;
	}
	public LINES_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.LINES_SYMBOL, 0);
	}
	public ROWS_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ROWS_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_loadDataFileTail;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterLoadDataFileTail) {
	 		listener.enterLoadDataFileTail(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitLoadDataFileTail) {
	 		listener.exitLoadDataFileTail(this);
		}
	}
}


export class LoadDataFileTargetListContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public OPEN_PAR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
	}
	public CLOSE_PAR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
	}
	public fieldOrVariableList(): FieldOrVariableListContext {
		return this.getTypedRuleContext(FieldOrVariableListContext, 0) as FieldOrVariableListContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_loadDataFileTargetList;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterLoadDataFileTargetList) {
	 		listener.enterLoadDataFileTargetList(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitLoadDataFileTargetList) {
	 		listener.exitLoadDataFileTargetList(this);
		}
	}
}


export class FieldOrVariableListContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public columnRef_list(): ColumnRefContext[] {
		return this.getTypedRuleContexts(ColumnRefContext) as ColumnRefContext[];
	}
	public columnRef(i: number): ColumnRefContext {
		return this.getTypedRuleContext(ColumnRefContext, i) as ColumnRefContext;
	}
	public userVariable_list(): UserVariableContext[] {
		return this.getTypedRuleContexts(UserVariableContext) as UserVariableContext[];
	}
	public userVariable(i: number): UserVariableContext {
		return this.getTypedRuleContext(UserVariableContext, i) as UserVariableContext;
	}
	public COMMA_SYMBOL_list(): TerminalNode[] {
	    	return this.getTokens(MySQLParser.COMMA_SYMBOL);
	}
	public COMMA_SYMBOL(i: number): TerminalNode {
		return this.getToken(MySQLParser.COMMA_SYMBOL, i);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_fieldOrVariableList;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterFieldOrVariableList) {
	 		listener.enterFieldOrVariableList(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitFieldOrVariableList) {
	 		listener.exitFieldOrVariableList(this);
		}
	}
}


export class ReplaceStatementContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public REPLACE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.REPLACE_SYMBOL, 0);
	}
	public tableRef(): TableRefContext {
		return this.getTypedRuleContext(TableRefContext, 0) as TableRefContext;
	}
	public insertFromConstructor(): InsertFromConstructorContext {
		return this.getTypedRuleContext(InsertFromConstructorContext, 0) as InsertFromConstructorContext;
	}
	public SET_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SET_SYMBOL, 0);
	}
	public updateList(): UpdateListContext {
		return this.getTypedRuleContext(UpdateListContext, 0) as UpdateListContext;
	}
	public insertQueryExpression(): InsertQueryExpressionContext {
		return this.getTypedRuleContext(InsertQueryExpressionContext, 0) as InsertQueryExpressionContext;
	}
	public INTO_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.INTO_SYMBOL, 0);
	}
	public usePartition(): UsePartitionContext {
		return this.getTypedRuleContext(UsePartitionContext, 0) as UsePartitionContext;
	}
	public LOW_PRIORITY_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.LOW_PRIORITY_SYMBOL, 0);
	}
	public DELAYED_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.DELAYED_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_replaceStatement;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterReplaceStatement) {
	 		listener.enterReplaceStatement(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitReplaceStatement) {
	 		listener.exitReplaceStatement(this);
		}
	}
}


export class SelectStatementContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public queryExpression(): QueryExpressionContext {
		return this.getTypedRuleContext(QueryExpressionContext, 0) as QueryExpressionContext;
	}
	public queryExpressionParens(): QueryExpressionParensContext {
		return this.getTypedRuleContext(QueryExpressionParensContext, 0) as QueryExpressionParensContext;
	}
	public selectStatementWithInto(): SelectStatementWithIntoContext {
		return this.getTypedRuleContext(SelectStatementWithIntoContext, 0) as SelectStatementWithIntoContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_selectStatement;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterSelectStatement) {
	 		listener.enterSelectStatement(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitSelectStatement) {
	 		listener.exitSelectStatement(this);
		}
	}
}


export class SelectStatementWithIntoContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public OPEN_PAR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
	}
	public selectStatementWithInto(): SelectStatementWithIntoContext {
		return this.getTypedRuleContext(SelectStatementWithIntoContext, 0) as SelectStatementWithIntoContext;
	}
	public CLOSE_PAR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
	}
	public queryExpression(): QueryExpressionContext {
		return this.getTypedRuleContext(QueryExpressionContext, 0) as QueryExpressionContext;
	}
	public intoClause(): IntoClauseContext {
		return this.getTypedRuleContext(IntoClauseContext, 0) as IntoClauseContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_selectStatementWithInto;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterSelectStatementWithInto) {
	 		listener.enterSelectStatementWithInto(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitSelectStatementWithInto) {
	 		listener.exitSelectStatementWithInto(this);
		}
	}
}


export class QueryExpressionContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public queryExpressionBody(): QueryExpressionBodyContext {
		return this.getTypedRuleContext(QueryExpressionBodyContext, 0) as QueryExpressionBodyContext;
	}
	public queryExpressionParens(): QueryExpressionParensContext {
		return this.getTypedRuleContext(QueryExpressionParensContext, 0) as QueryExpressionParensContext;
	}
	public withClause(): WithClauseContext {
		return this.getTypedRuleContext(WithClauseContext, 0) as WithClauseContext;
	}
	public procedureAnalyseClause(): ProcedureAnalyseClauseContext {
		return this.getTypedRuleContext(ProcedureAnalyseClauseContext, 0) as ProcedureAnalyseClauseContext;
	}
	public lockingClause(): LockingClauseContext {
		return this.getTypedRuleContext(LockingClauseContext, 0) as LockingClauseContext;
	}
	public orderClause(): OrderClauseContext {
		return this.getTypedRuleContext(OrderClauseContext, 0) as OrderClauseContext;
	}
	public limitClause(): LimitClauseContext {
		return this.getTypedRuleContext(LimitClauseContext, 0) as LimitClauseContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_queryExpression;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterQueryExpression) {
	 		listener.enterQueryExpression(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitQueryExpression) {
	 		listener.exitQueryExpression(this);
		}
	}
}


export class QueryExpressionBodyContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public querySpecification(): QuerySpecificationContext {
		return this.getTypedRuleContext(QuerySpecificationContext, 0) as QuerySpecificationContext;
	}
	public queryExpressionParens_list(): QueryExpressionParensContext[] {
		return this.getTypedRuleContexts(QueryExpressionParensContext) as QueryExpressionParensContext[];
	}
	public queryExpressionParens(i: number): QueryExpressionParensContext {
		return this.getTypedRuleContext(QueryExpressionParensContext, i) as QueryExpressionParensContext;
	}
	public UNION_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.UNION_SYMBOL, 0);
	}
	public unionOption(): UnionOptionContext {
		return this.getTypedRuleContext(UnionOptionContext, 0) as UnionOptionContext;
	}
	public queryExpressionBody(): QueryExpressionBodyContext {
		return this.getTypedRuleContext(QueryExpressionBodyContext, 0) as QueryExpressionBodyContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_queryExpressionBody;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterQueryExpressionBody) {
	 		listener.enterQueryExpressionBody(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitQueryExpressionBody) {
	 		listener.exitQueryExpressionBody(this);
		}
	}
}


export class QueryExpressionParensContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public OPEN_PAR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
	}
	public CLOSE_PAR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
	}
	public queryExpressionParens(): QueryExpressionParensContext {
		return this.getTypedRuleContext(QueryExpressionParensContext, 0) as QueryExpressionParensContext;
	}
	public queryExpression(): QueryExpressionContext {
		return this.getTypedRuleContext(QueryExpressionContext, 0) as QueryExpressionContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_queryExpressionParens;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterQueryExpressionParens) {
	 		listener.enterQueryExpressionParens(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitQueryExpressionParens) {
	 		listener.exitQueryExpressionParens(this);
		}
	}
}


export class QuerySpecificationContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public SELECT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SELECT_SYMBOL, 0);
	}
	public selectItemList(): SelectItemListContext {
		return this.getTypedRuleContext(SelectItemListContext, 0) as SelectItemListContext;
	}
	public selectOption_list(): SelectOptionContext[] {
		return this.getTypedRuleContexts(SelectOptionContext) as SelectOptionContext[];
	}
	public selectOption(i: number): SelectOptionContext {
		return this.getTypedRuleContext(SelectOptionContext, i) as SelectOptionContext;
	}
	public intoClause(): IntoClauseContext {
		return this.getTypedRuleContext(IntoClauseContext, 0) as IntoClauseContext;
	}
	public fromClause(): FromClauseContext {
		return this.getTypedRuleContext(FromClauseContext, 0) as FromClauseContext;
	}
	public whereClause(): WhereClauseContext {
		return this.getTypedRuleContext(WhereClauseContext, 0) as WhereClauseContext;
	}
	public groupByClause(): GroupByClauseContext {
		return this.getTypedRuleContext(GroupByClauseContext, 0) as GroupByClauseContext;
	}
	public havingClause(): HavingClauseContext {
		return this.getTypedRuleContext(HavingClauseContext, 0) as HavingClauseContext;
	}
	public windowClause(): WindowClauseContext {
		return this.getTypedRuleContext(WindowClauseContext, 0) as WindowClauseContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_querySpecification;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterQuerySpecification) {
	 		listener.enterQuerySpecification(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitQuerySpecification) {
	 		listener.exitQuerySpecification(this);
		}
	}
}


export class SubqueryContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public queryExpressionParens(): QueryExpressionParensContext {
		return this.getTypedRuleContext(QueryExpressionParensContext, 0) as QueryExpressionParensContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_subquery;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterSubquery) {
	 		listener.enterSubquery(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitSubquery) {
	 		listener.exitSubquery(this);
		}
	}
}


export class QuerySpecOptionContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public ALL_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ALL_SYMBOL, 0);
	}
	public DISTINCT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.DISTINCT_SYMBOL, 0);
	}
	public STRAIGHT_JOIN_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.STRAIGHT_JOIN_SYMBOL, 0);
	}
	public HIGH_PRIORITY_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.HIGH_PRIORITY_SYMBOL, 0);
	}
	public SQL_SMALL_RESULT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SQL_SMALL_RESULT_SYMBOL, 0);
	}
	public SQL_BIG_RESULT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SQL_BIG_RESULT_SYMBOL, 0);
	}
	public SQL_BUFFER_RESULT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SQL_BUFFER_RESULT_SYMBOL, 0);
	}
	public SQL_CALC_FOUND_ROWS_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SQL_CALC_FOUND_ROWS_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_querySpecOption;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterQuerySpecOption) {
	 		listener.enterQuerySpecOption(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitQuerySpecOption) {
	 		listener.exitQuerySpecOption(this);
		}
	}
}


export class LimitClauseContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LIMIT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.LIMIT_SYMBOL, 0);
	}
	public limitOptions(): LimitOptionsContext {
		return this.getTypedRuleContext(LimitOptionsContext, 0) as LimitOptionsContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_limitClause;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterLimitClause) {
	 		listener.enterLimitClause(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitLimitClause) {
	 		listener.exitLimitClause(this);
		}
	}
}


export class SimpleLimitClauseContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LIMIT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.LIMIT_SYMBOL, 0);
	}
	public limitOption(): LimitOptionContext {
		return this.getTypedRuleContext(LimitOptionContext, 0) as LimitOptionContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_simpleLimitClause;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterSimpleLimitClause) {
	 		listener.enterSimpleLimitClause(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitSimpleLimitClause) {
	 		listener.exitSimpleLimitClause(this);
		}
	}
}


export class LimitOptionsContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public limitOption_list(): LimitOptionContext[] {
		return this.getTypedRuleContexts(LimitOptionContext) as LimitOptionContext[];
	}
	public limitOption(i: number): LimitOptionContext {
		return this.getTypedRuleContext(LimitOptionContext, i) as LimitOptionContext;
	}
	public COMMA_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.COMMA_SYMBOL, 0);
	}
	public OFFSET_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.OFFSET_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_limitOptions;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterLimitOptions) {
	 		listener.enterLimitOptions(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitLimitOptions) {
	 		listener.exitLimitOptions(this);
		}
	}
}


export class LimitOptionContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public identifier(): IdentifierContext {
		return this.getTypedRuleContext(IdentifierContext, 0) as IdentifierContext;
	}
	public PARAM_MARKER(): TerminalNode {
		return this.getToken(MySQLParser.PARAM_MARKER, 0);
	}
	public ULONGLONG_NUMBER(): TerminalNode {
		return this.getToken(MySQLParser.ULONGLONG_NUMBER, 0);
	}
	public LONG_NUMBER(): TerminalNode {
		return this.getToken(MySQLParser.LONG_NUMBER, 0);
	}
	public INT_NUMBER(): TerminalNode {
		return this.getToken(MySQLParser.INT_NUMBER, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_limitOption;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterLimitOption) {
	 		listener.enterLimitOption(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitLimitOption) {
	 		listener.exitLimitOption(this);
		}
	}
}


export class IntoClauseContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public INTO_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.INTO_SYMBOL, 0);
	}
	public OUTFILE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.OUTFILE_SYMBOL, 0);
	}
	public textStringLiteral(): TextStringLiteralContext {
		return this.getTypedRuleContext(TextStringLiteralContext, 0) as TextStringLiteralContext;
	}
	public DUMPFILE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.DUMPFILE_SYMBOL, 0);
	}
	public textOrIdentifier_list(): TextOrIdentifierContext[] {
		return this.getTypedRuleContexts(TextOrIdentifierContext) as TextOrIdentifierContext[];
	}
	public textOrIdentifier(i: number): TextOrIdentifierContext {
		return this.getTypedRuleContext(TextOrIdentifierContext, i) as TextOrIdentifierContext;
	}
	public userVariable_list(): UserVariableContext[] {
		return this.getTypedRuleContexts(UserVariableContext) as UserVariableContext[];
	}
	public userVariable(i: number): UserVariableContext {
		return this.getTypedRuleContext(UserVariableContext, i) as UserVariableContext;
	}
	public charsetClause(): CharsetClauseContext {
		return this.getTypedRuleContext(CharsetClauseContext, 0) as CharsetClauseContext;
	}
	public fieldsClause(): FieldsClauseContext {
		return this.getTypedRuleContext(FieldsClauseContext, 0) as FieldsClauseContext;
	}
	public linesClause(): LinesClauseContext {
		return this.getTypedRuleContext(LinesClauseContext, 0) as LinesClauseContext;
	}
	public COMMA_SYMBOL_list(): TerminalNode[] {
	    	return this.getTokens(MySQLParser.COMMA_SYMBOL);
	}
	public COMMA_SYMBOL(i: number): TerminalNode {
		return this.getToken(MySQLParser.COMMA_SYMBOL, i);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_intoClause;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterIntoClause) {
	 		listener.enterIntoClause(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitIntoClause) {
	 		listener.exitIntoClause(this);
		}
	}
}


export class ProcedureAnalyseClauseContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public PROCEDURE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.PROCEDURE_SYMBOL, 0);
	}
	public ANALYSE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ANALYSE_SYMBOL, 0);
	}
	public OPEN_PAR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
	}
	public CLOSE_PAR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
	}
	public INT_NUMBER_list(): TerminalNode[] {
	    	return this.getTokens(MySQLParser.INT_NUMBER);
	}
	public INT_NUMBER(i: number): TerminalNode {
		return this.getToken(MySQLParser.INT_NUMBER, i);
	}
	public COMMA_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.COMMA_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_procedureAnalyseClause;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterProcedureAnalyseClause) {
	 		listener.enterProcedureAnalyseClause(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitProcedureAnalyseClause) {
	 		listener.exitProcedureAnalyseClause(this);
		}
	}
}


export class HavingClauseContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public HAVING_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.HAVING_SYMBOL, 0);
	}
	public expr(): ExprContext {
		return this.getTypedRuleContext(ExprContext, 0) as ExprContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_havingClause;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterHavingClause) {
	 		listener.enterHavingClause(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitHavingClause) {
	 		listener.exitHavingClause(this);
		}
	}
}


export class WindowClauseContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public WINDOW_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.WINDOW_SYMBOL, 0);
	}
	public windowDefinition_list(): WindowDefinitionContext[] {
		return this.getTypedRuleContexts(WindowDefinitionContext) as WindowDefinitionContext[];
	}
	public windowDefinition(i: number): WindowDefinitionContext {
		return this.getTypedRuleContext(WindowDefinitionContext, i) as WindowDefinitionContext;
	}
	public COMMA_SYMBOL_list(): TerminalNode[] {
	    	return this.getTokens(MySQLParser.COMMA_SYMBOL);
	}
	public COMMA_SYMBOL(i: number): TerminalNode {
		return this.getToken(MySQLParser.COMMA_SYMBOL, i);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_windowClause;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterWindowClause) {
	 		listener.enterWindowClause(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitWindowClause) {
	 		listener.exitWindowClause(this);
		}
	}
}


export class WindowDefinitionContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public windowName(): WindowNameContext {
		return this.getTypedRuleContext(WindowNameContext, 0) as WindowNameContext;
	}
	public AS_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.AS_SYMBOL, 0);
	}
	public windowSpec(): WindowSpecContext {
		return this.getTypedRuleContext(WindowSpecContext, 0) as WindowSpecContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_windowDefinition;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterWindowDefinition) {
	 		listener.enterWindowDefinition(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitWindowDefinition) {
	 		listener.exitWindowDefinition(this);
		}
	}
}


export class WindowSpecContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public OPEN_PAR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
	}
	public windowSpecDetails(): WindowSpecDetailsContext {
		return this.getTypedRuleContext(WindowSpecDetailsContext, 0) as WindowSpecDetailsContext;
	}
	public CLOSE_PAR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_windowSpec;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterWindowSpec) {
	 		listener.enterWindowSpec(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitWindowSpec) {
	 		listener.exitWindowSpec(this);
		}
	}
}


export class WindowSpecDetailsContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public windowName(): WindowNameContext {
		return this.getTypedRuleContext(WindowNameContext, 0) as WindowNameContext;
	}
	public PARTITION_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.PARTITION_SYMBOL, 0);
	}
	public BY_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.BY_SYMBOL, 0);
	}
	public orderList(): OrderListContext {
		return this.getTypedRuleContext(OrderListContext, 0) as OrderListContext;
	}
	public orderClause(): OrderClauseContext {
		return this.getTypedRuleContext(OrderClauseContext, 0) as OrderClauseContext;
	}
	public windowFrameClause(): WindowFrameClauseContext {
		return this.getTypedRuleContext(WindowFrameClauseContext, 0) as WindowFrameClauseContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_windowSpecDetails;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterWindowSpecDetails) {
	 		listener.enterWindowSpecDetails(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitWindowSpecDetails) {
	 		listener.exitWindowSpecDetails(this);
		}
	}
}


export class WindowFrameClauseContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public windowFrameUnits(): WindowFrameUnitsContext {
		return this.getTypedRuleContext(WindowFrameUnitsContext, 0) as WindowFrameUnitsContext;
	}
	public windowFrameExtent(): WindowFrameExtentContext {
		return this.getTypedRuleContext(WindowFrameExtentContext, 0) as WindowFrameExtentContext;
	}
	public windowFrameExclusion(): WindowFrameExclusionContext {
		return this.getTypedRuleContext(WindowFrameExclusionContext, 0) as WindowFrameExclusionContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_windowFrameClause;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterWindowFrameClause) {
	 		listener.enterWindowFrameClause(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitWindowFrameClause) {
	 		listener.exitWindowFrameClause(this);
		}
	}
}


export class WindowFrameUnitsContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public ROWS_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ROWS_SYMBOL, 0);
	}
	public RANGE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.RANGE_SYMBOL, 0);
	}
	public GROUPS_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.GROUPS_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_windowFrameUnits;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterWindowFrameUnits) {
	 		listener.enterWindowFrameUnits(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitWindowFrameUnits) {
	 		listener.exitWindowFrameUnits(this);
		}
	}
}


export class WindowFrameExtentContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public windowFrameStart(): WindowFrameStartContext {
		return this.getTypedRuleContext(WindowFrameStartContext, 0) as WindowFrameStartContext;
	}
	public windowFrameBetween(): WindowFrameBetweenContext {
		return this.getTypedRuleContext(WindowFrameBetweenContext, 0) as WindowFrameBetweenContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_windowFrameExtent;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterWindowFrameExtent) {
	 		listener.enterWindowFrameExtent(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitWindowFrameExtent) {
	 		listener.exitWindowFrameExtent(this);
		}
	}
}


export class WindowFrameStartContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public UNBOUNDED_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.UNBOUNDED_SYMBOL, 0);
	}
	public PRECEDING_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.PRECEDING_SYMBOL, 0);
	}
	public ulonglong_number(): Ulonglong_numberContext {
		return this.getTypedRuleContext(Ulonglong_numberContext, 0) as Ulonglong_numberContext;
	}
	public PARAM_MARKER(): TerminalNode {
		return this.getToken(MySQLParser.PARAM_MARKER, 0);
	}
	public INTERVAL_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.INTERVAL_SYMBOL, 0);
	}
	public expr(): ExprContext {
		return this.getTypedRuleContext(ExprContext, 0) as ExprContext;
	}
	public interval(): IntervalContext {
		return this.getTypedRuleContext(IntervalContext, 0) as IntervalContext;
	}
	public CURRENT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CURRENT_SYMBOL, 0);
	}
	public ROW_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ROW_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_windowFrameStart;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterWindowFrameStart) {
	 		listener.enterWindowFrameStart(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitWindowFrameStart) {
	 		listener.exitWindowFrameStart(this);
		}
	}
}


export class WindowFrameBetweenContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public BETWEEN_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.BETWEEN_SYMBOL, 0);
	}
	public windowFrameBound_list(): WindowFrameBoundContext[] {
		return this.getTypedRuleContexts(WindowFrameBoundContext) as WindowFrameBoundContext[];
	}
	public windowFrameBound(i: number): WindowFrameBoundContext {
		return this.getTypedRuleContext(WindowFrameBoundContext, i) as WindowFrameBoundContext;
	}
	public AND_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.AND_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_windowFrameBetween;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterWindowFrameBetween) {
	 		listener.enterWindowFrameBetween(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitWindowFrameBetween) {
	 		listener.exitWindowFrameBetween(this);
		}
	}
}


export class WindowFrameBoundContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public windowFrameStart(): WindowFrameStartContext {
		return this.getTypedRuleContext(WindowFrameStartContext, 0) as WindowFrameStartContext;
	}
	public UNBOUNDED_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.UNBOUNDED_SYMBOL, 0);
	}
	public FOLLOWING_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.FOLLOWING_SYMBOL, 0);
	}
	public ulonglong_number(): Ulonglong_numberContext {
		return this.getTypedRuleContext(Ulonglong_numberContext, 0) as Ulonglong_numberContext;
	}
	public PARAM_MARKER(): TerminalNode {
		return this.getToken(MySQLParser.PARAM_MARKER, 0);
	}
	public INTERVAL_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.INTERVAL_SYMBOL, 0);
	}
	public expr(): ExprContext {
		return this.getTypedRuleContext(ExprContext, 0) as ExprContext;
	}
	public interval(): IntervalContext {
		return this.getTypedRuleContext(IntervalContext, 0) as IntervalContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_windowFrameBound;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterWindowFrameBound) {
	 		listener.enterWindowFrameBound(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitWindowFrameBound) {
	 		listener.exitWindowFrameBound(this);
		}
	}
}


export class WindowFrameExclusionContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public EXCLUDE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.EXCLUDE_SYMBOL, 0);
	}
	public CURRENT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CURRENT_SYMBOL, 0);
	}
	public ROW_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ROW_SYMBOL, 0);
	}
	public GROUP_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.GROUP_SYMBOL, 0);
	}
	public TIES_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.TIES_SYMBOL, 0);
	}
	public NO_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.NO_SYMBOL, 0);
	}
	public OTHERS_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.OTHERS_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_windowFrameExclusion;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterWindowFrameExclusion) {
	 		listener.enterWindowFrameExclusion(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitWindowFrameExclusion) {
	 		listener.exitWindowFrameExclusion(this);
		}
	}
}


export class WithClauseContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public WITH_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.WITH_SYMBOL, 0);
	}
	public commonTableExpression_list(): CommonTableExpressionContext[] {
		return this.getTypedRuleContexts(CommonTableExpressionContext) as CommonTableExpressionContext[];
	}
	public commonTableExpression(i: number): CommonTableExpressionContext {
		return this.getTypedRuleContext(CommonTableExpressionContext, i) as CommonTableExpressionContext;
	}
	public RECURSIVE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.RECURSIVE_SYMBOL, 0);
	}
	public COMMA_SYMBOL_list(): TerminalNode[] {
	    	return this.getTokens(MySQLParser.COMMA_SYMBOL);
	}
	public COMMA_SYMBOL(i: number): TerminalNode {
		return this.getToken(MySQLParser.COMMA_SYMBOL, i);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_withClause;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterWithClause) {
	 		listener.enterWithClause(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitWithClause) {
	 		listener.exitWithClause(this);
		}
	}
}


export class CommonTableExpressionContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public identifier(): IdentifierContext {
		return this.getTypedRuleContext(IdentifierContext, 0) as IdentifierContext;
	}
	public AS_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.AS_SYMBOL, 0);
	}
	public subquery(): SubqueryContext {
		return this.getTypedRuleContext(SubqueryContext, 0) as SubqueryContext;
	}
	public columnInternalRefList(): ColumnInternalRefListContext {
		return this.getTypedRuleContext(ColumnInternalRefListContext, 0) as ColumnInternalRefListContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_commonTableExpression;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterCommonTableExpression) {
	 		listener.enterCommonTableExpression(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitCommonTableExpression) {
	 		listener.exitCommonTableExpression(this);
		}
	}
}


export class GroupByClauseContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public GROUP_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.GROUP_SYMBOL, 0);
	}
	public BY_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.BY_SYMBOL, 0);
	}
	public orderList(): OrderListContext {
		return this.getTypedRuleContext(OrderListContext, 0) as OrderListContext;
	}
	public olapOption(): OlapOptionContext {
		return this.getTypedRuleContext(OlapOptionContext, 0) as OlapOptionContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_groupByClause;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterGroupByClause) {
	 		listener.enterGroupByClause(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitGroupByClause) {
	 		listener.exitGroupByClause(this);
		}
	}
}


export class OlapOptionContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public WITH_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.WITH_SYMBOL, 0);
	}
	public ROLLUP_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ROLLUP_SYMBOL, 0);
	}
	public CUBE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CUBE_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_olapOption;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterOlapOption) {
	 		listener.enterOlapOption(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitOlapOption) {
	 		listener.exitOlapOption(this);
		}
	}
}


export class OrderClauseContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public ORDER_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ORDER_SYMBOL, 0);
	}
	public BY_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.BY_SYMBOL, 0);
	}
	public orderList(): OrderListContext {
		return this.getTypedRuleContext(OrderListContext, 0) as OrderListContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_orderClause;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterOrderClause) {
	 		listener.enterOrderClause(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitOrderClause) {
	 		listener.exitOrderClause(this);
		}
	}
}


export class DirectionContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public ASC_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ASC_SYMBOL, 0);
	}
	public DESC_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.DESC_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_direction;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterDirection) {
	 		listener.enterDirection(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitDirection) {
	 		listener.exitDirection(this);
		}
	}
}


export class FromClauseContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public FROM_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.FROM_SYMBOL, 0);
	}
	public DUAL_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.DUAL_SYMBOL, 0);
	}
	public tableReferenceList(): TableReferenceListContext {
		return this.getTypedRuleContext(TableReferenceListContext, 0) as TableReferenceListContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_fromClause;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterFromClause) {
	 		listener.enterFromClause(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitFromClause) {
	 		listener.exitFromClause(this);
		}
	}
}


export class TableReferenceListContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public tableReference_list(): TableReferenceContext[] {
		return this.getTypedRuleContexts(TableReferenceContext) as TableReferenceContext[];
	}
	public tableReference(i: number): TableReferenceContext {
		return this.getTypedRuleContext(TableReferenceContext, i) as TableReferenceContext;
	}
	public COMMA_SYMBOL_list(): TerminalNode[] {
	    	return this.getTokens(MySQLParser.COMMA_SYMBOL);
	}
	public COMMA_SYMBOL(i: number): TerminalNode {
		return this.getToken(MySQLParser.COMMA_SYMBOL, i);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_tableReferenceList;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterTableReferenceList) {
	 		listener.enterTableReferenceList(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitTableReferenceList) {
	 		listener.exitTableReferenceList(this);
		}
	}
}


export class SelectOptionContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public querySpecOption(): QuerySpecOptionContext {
		return this.getTypedRuleContext(QuerySpecOptionContext, 0) as QuerySpecOptionContext;
	}
	public SQL_NO_CACHE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SQL_NO_CACHE_SYMBOL, 0);
	}
	public SQL_CACHE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SQL_CACHE_SYMBOL, 0);
	}
	public MAX_STATEMENT_TIME_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.MAX_STATEMENT_TIME_SYMBOL, 0);
	}
	public EQUAL_OPERATOR(): TerminalNode {
		return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
	}
	public real_ulong_number(): Real_ulong_numberContext {
		return this.getTypedRuleContext(Real_ulong_numberContext, 0) as Real_ulong_numberContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_selectOption;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterSelectOption) {
	 		listener.enterSelectOption(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitSelectOption) {
	 		listener.exitSelectOption(this);
		}
	}
}


export class LockingClauseContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public FOR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.FOR_SYMBOL, 0);
	}
	public lockStrengh(): LockStrenghContext {
		return this.getTypedRuleContext(LockStrenghContext, 0) as LockStrenghContext;
	}
	public OF_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.OF_SYMBOL, 0);
	}
	public tableAliasRefList(): TableAliasRefListContext {
		return this.getTypedRuleContext(TableAliasRefListContext, 0) as TableAliasRefListContext;
	}
	public lockedRowAction(): LockedRowActionContext {
		return this.getTypedRuleContext(LockedRowActionContext, 0) as LockedRowActionContext;
	}
	public LOCK_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.LOCK_SYMBOL, 0);
	}
	public IN_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.IN_SYMBOL, 0);
	}
	public SHARE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SHARE_SYMBOL, 0);
	}
	public MODE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.MODE_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_lockingClause;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterLockingClause) {
	 		listener.enterLockingClause(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitLockingClause) {
	 		listener.exitLockingClause(this);
		}
	}
}


export class LockStrenghContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public UPDATE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.UPDATE_SYMBOL, 0);
	}
	public SHARE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SHARE_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_lockStrengh;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterLockStrengh) {
	 		listener.enterLockStrengh(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitLockStrengh) {
	 		listener.exitLockStrengh(this);
		}
	}
}


export class LockedRowActionContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public SKIP_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SKIP_SYMBOL, 0);
	}
	public LOCKED_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.LOCKED_SYMBOL, 0);
	}
	public NOWAIT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.NOWAIT_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_lockedRowAction;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterLockedRowAction) {
	 		listener.enterLockedRowAction(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitLockedRowAction) {
	 		listener.exitLockedRowAction(this);
		}
	}
}


export class SelectItemListContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public selectItem_list(): SelectItemContext[] {
		return this.getTypedRuleContexts(SelectItemContext) as SelectItemContext[];
	}
	public selectItem(i: number): SelectItemContext {
		return this.getTypedRuleContext(SelectItemContext, i) as SelectItemContext;
	}
	public MULT_OPERATOR(): TerminalNode {
		return this.getToken(MySQLParser.MULT_OPERATOR, 0);
	}
	public COMMA_SYMBOL_list(): TerminalNode[] {
	    	return this.getTokens(MySQLParser.COMMA_SYMBOL);
	}
	public COMMA_SYMBOL(i: number): TerminalNode {
		return this.getToken(MySQLParser.COMMA_SYMBOL, i);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_selectItemList;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterSelectItemList) {
	 		listener.enterSelectItemList(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitSelectItemList) {
	 		listener.exitSelectItemList(this);
		}
	}
}


export class SelectItemContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public tableWild(): TableWildContext {
		return this.getTypedRuleContext(TableWildContext, 0) as TableWildContext;
	}
	public expr(): ExprContext {
		return this.getTypedRuleContext(ExprContext, 0) as ExprContext;
	}
	public selectAlias(): SelectAliasContext {
		return this.getTypedRuleContext(SelectAliasContext, 0) as SelectAliasContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_selectItem;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterSelectItem) {
	 		listener.enterSelectItem(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitSelectItem) {
	 		listener.exitSelectItem(this);
		}
	}
}


export class SelectAliasContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public identifier(): IdentifierContext {
		return this.getTypedRuleContext(IdentifierContext, 0) as IdentifierContext;
	}
	public textStringLiteral(): TextStringLiteralContext {
		return this.getTypedRuleContext(TextStringLiteralContext, 0) as TextStringLiteralContext;
	}
	public AS_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.AS_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_selectAlias;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterSelectAlias) {
	 		listener.enterSelectAlias(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitSelectAlias) {
	 		listener.exitSelectAlias(this);
		}
	}
}


export class WhereClauseContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public WHERE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.WHERE_SYMBOL, 0);
	}
	public expr(): ExprContext {
		return this.getTypedRuleContext(ExprContext, 0) as ExprContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_whereClause;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterWhereClause) {
	 		listener.enterWhereClause(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitWhereClause) {
	 		listener.exitWhereClause(this);
		}
	}
}


export class TableReferenceContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public tableFactor(): TableFactorContext {
		return this.getTypedRuleContext(TableFactorContext, 0) as TableFactorContext;
	}
	public OPEN_CURLY_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.OPEN_CURLY_SYMBOL, 0);
	}
	public escapedTableReference(): EscapedTableReferenceContext {
		return this.getTypedRuleContext(EscapedTableReferenceContext, 0) as EscapedTableReferenceContext;
	}
	public CLOSE_CURLY_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CLOSE_CURLY_SYMBOL, 0);
	}
	public joinedTable_list(): JoinedTableContext[] {
		return this.getTypedRuleContexts(JoinedTableContext) as JoinedTableContext[];
	}
	public joinedTable(i: number): JoinedTableContext {
		return this.getTypedRuleContext(JoinedTableContext, i) as JoinedTableContext;
	}
	public identifier(): IdentifierContext {
		return this.getTypedRuleContext(IdentifierContext, 0) as IdentifierContext;
	}
	public OJ_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.OJ_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_tableReference;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterTableReference) {
	 		listener.enterTableReference(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitTableReference) {
	 		listener.exitTableReference(this);
		}
	}
}


export class EscapedTableReferenceContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public tableFactor(): TableFactorContext {
		return this.getTypedRuleContext(TableFactorContext, 0) as TableFactorContext;
	}
	public joinedTable_list(): JoinedTableContext[] {
		return this.getTypedRuleContexts(JoinedTableContext) as JoinedTableContext[];
	}
	public joinedTable(i: number): JoinedTableContext {
		return this.getTypedRuleContext(JoinedTableContext, i) as JoinedTableContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_escapedTableReference;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterEscapedTableReference) {
	 		listener.enterEscapedTableReference(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitEscapedTableReference) {
	 		listener.exitEscapedTableReference(this);
		}
	}
}


export class JoinedTableContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public innerJoinType(): InnerJoinTypeContext {
		return this.getTypedRuleContext(InnerJoinTypeContext, 0) as InnerJoinTypeContext;
	}
	public tableReference(): TableReferenceContext {
		return this.getTypedRuleContext(TableReferenceContext, 0) as TableReferenceContext;
	}
	public ON_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ON_SYMBOL, 0);
	}
	public expr(): ExprContext {
		return this.getTypedRuleContext(ExprContext, 0) as ExprContext;
	}
	public USING_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.USING_SYMBOL, 0);
	}
	public identifierListWithParentheses(): IdentifierListWithParenthesesContext {
		return this.getTypedRuleContext(IdentifierListWithParenthesesContext, 0) as IdentifierListWithParenthesesContext;
	}
	public outerJoinType(): OuterJoinTypeContext {
		return this.getTypedRuleContext(OuterJoinTypeContext, 0) as OuterJoinTypeContext;
	}
	public naturalJoinType(): NaturalJoinTypeContext {
		return this.getTypedRuleContext(NaturalJoinTypeContext, 0) as NaturalJoinTypeContext;
	}
	public tableFactor(): TableFactorContext {
		return this.getTypedRuleContext(TableFactorContext, 0) as TableFactorContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_joinedTable;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterJoinedTable) {
	 		listener.enterJoinedTable(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitJoinedTable) {
	 		listener.exitJoinedTable(this);
		}
	}
}


export class NaturalJoinTypeContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public NATURAL_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.NATURAL_SYMBOL, 0);
	}
	public JOIN_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.JOIN_SYMBOL, 0);
	}
	public INNER_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.INNER_SYMBOL, 0);
	}
	public LEFT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.LEFT_SYMBOL, 0);
	}
	public RIGHT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.RIGHT_SYMBOL, 0);
	}
	public OUTER_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.OUTER_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_naturalJoinType;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterNaturalJoinType) {
	 		listener.enterNaturalJoinType(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitNaturalJoinType) {
	 		listener.exitNaturalJoinType(this);
		}
	}
}


export class InnerJoinTypeContext extends ParserRuleContext {
	public _type_!: Token;
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public JOIN_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.JOIN_SYMBOL, 0);
	}
	public INNER_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.INNER_SYMBOL, 0);
	}
	public CROSS_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CROSS_SYMBOL, 0);
	}
	public STRAIGHT_JOIN_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.STRAIGHT_JOIN_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_innerJoinType;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterInnerJoinType) {
	 		listener.enterInnerJoinType(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitInnerJoinType) {
	 		listener.exitInnerJoinType(this);
		}
	}
}


export class OuterJoinTypeContext extends ParserRuleContext {
	public _type_!: Token;
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public JOIN_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.JOIN_SYMBOL, 0);
	}
	public LEFT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.LEFT_SYMBOL, 0);
	}
	public RIGHT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.RIGHT_SYMBOL, 0);
	}
	public OUTER_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.OUTER_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_outerJoinType;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterOuterJoinType) {
	 		listener.enterOuterJoinType(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitOuterJoinType) {
	 		listener.exitOuterJoinType(this);
		}
	}
}


export class TableFactorContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public singleTable(): SingleTableContext {
		return this.getTypedRuleContext(SingleTableContext, 0) as SingleTableContext;
	}
	public singleTableParens(): SingleTableParensContext {
		return this.getTypedRuleContext(SingleTableParensContext, 0) as SingleTableParensContext;
	}
	public derivedTable(): DerivedTableContext {
		return this.getTypedRuleContext(DerivedTableContext, 0) as DerivedTableContext;
	}
	public tableReferenceListParens(): TableReferenceListParensContext {
		return this.getTypedRuleContext(TableReferenceListParensContext, 0) as TableReferenceListParensContext;
	}
	public tableFunction(): TableFunctionContext {
		return this.getTypedRuleContext(TableFunctionContext, 0) as TableFunctionContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_tableFactor;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterTableFactor) {
	 		listener.enterTableFactor(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitTableFactor) {
	 		listener.exitTableFactor(this);
		}
	}
}


export class SingleTableContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public tableRef(): TableRefContext {
		return this.getTypedRuleContext(TableRefContext, 0) as TableRefContext;
	}
	public usePartition(): UsePartitionContext {
		return this.getTypedRuleContext(UsePartitionContext, 0) as UsePartitionContext;
	}
	public tableAlias(): TableAliasContext {
		return this.getTypedRuleContext(TableAliasContext, 0) as TableAliasContext;
	}
	public indexHintList(): IndexHintListContext {
		return this.getTypedRuleContext(IndexHintListContext, 0) as IndexHintListContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_singleTable;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterSingleTable) {
	 		listener.enterSingleTable(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitSingleTable) {
	 		listener.exitSingleTable(this);
		}
	}
}


export class SingleTableParensContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public OPEN_PAR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
	}
	public CLOSE_PAR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
	}
	public singleTable(): SingleTableContext {
		return this.getTypedRuleContext(SingleTableContext, 0) as SingleTableContext;
	}
	public singleTableParens(): SingleTableParensContext {
		return this.getTypedRuleContext(SingleTableParensContext, 0) as SingleTableParensContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_singleTableParens;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterSingleTableParens) {
	 		listener.enterSingleTableParens(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitSingleTableParens) {
	 		listener.exitSingleTableParens(this);
		}
	}
}


export class DerivedTableContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public subquery(): SubqueryContext {
		return this.getTypedRuleContext(SubqueryContext, 0) as SubqueryContext;
	}
	public tableAlias(): TableAliasContext {
		return this.getTypedRuleContext(TableAliasContext, 0) as TableAliasContext;
	}
	public columnInternalRefList(): ColumnInternalRefListContext {
		return this.getTypedRuleContext(ColumnInternalRefListContext, 0) as ColumnInternalRefListContext;
	}
	public LATERAL_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.LATERAL_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_derivedTable;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterDerivedTable) {
	 		listener.enterDerivedTable(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitDerivedTable) {
	 		listener.exitDerivedTable(this);
		}
	}
}


export class TableReferenceListParensContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public OPEN_PAR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
	}
	public CLOSE_PAR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
	}
	public tableReferenceList(): TableReferenceListContext {
		return this.getTypedRuleContext(TableReferenceListContext, 0) as TableReferenceListContext;
	}
	public tableReferenceListParens(): TableReferenceListParensContext {
		return this.getTypedRuleContext(TableReferenceListParensContext, 0) as TableReferenceListParensContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_tableReferenceListParens;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterTableReferenceListParens) {
	 		listener.enterTableReferenceListParens(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitTableReferenceListParens) {
	 		listener.exitTableReferenceListParens(this);
		}
	}
}


export class TableFunctionContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public JSON_TABLE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.JSON_TABLE_SYMBOL, 0);
	}
	public OPEN_PAR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
	}
	public expr(): ExprContext {
		return this.getTypedRuleContext(ExprContext, 0) as ExprContext;
	}
	public COMMA_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.COMMA_SYMBOL, 0);
	}
	public textStringLiteral(): TextStringLiteralContext {
		return this.getTypedRuleContext(TextStringLiteralContext, 0) as TextStringLiteralContext;
	}
	public columnsClause(): ColumnsClauseContext {
		return this.getTypedRuleContext(ColumnsClauseContext, 0) as ColumnsClauseContext;
	}
	public CLOSE_PAR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
	}
	public tableAlias(): TableAliasContext {
		return this.getTypedRuleContext(TableAliasContext, 0) as TableAliasContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_tableFunction;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterTableFunction) {
	 		listener.enterTableFunction(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitTableFunction) {
	 		listener.exitTableFunction(this);
		}
	}
}


export class ColumnsClauseContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public COLUMNS_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.COLUMNS_SYMBOL, 0);
	}
	public OPEN_PAR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
	}
	public jtColumn_list(): JtColumnContext[] {
		return this.getTypedRuleContexts(JtColumnContext) as JtColumnContext[];
	}
	public jtColumn(i: number): JtColumnContext {
		return this.getTypedRuleContext(JtColumnContext, i) as JtColumnContext;
	}
	public CLOSE_PAR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
	}
	public COMMA_SYMBOL_list(): TerminalNode[] {
	    	return this.getTokens(MySQLParser.COMMA_SYMBOL);
	}
	public COMMA_SYMBOL(i: number): TerminalNode {
		return this.getToken(MySQLParser.COMMA_SYMBOL, i);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_columnsClause;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterColumnsClause) {
	 		listener.enterColumnsClause(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitColumnsClause) {
	 		listener.exitColumnsClause(this);
		}
	}
}


export class JtColumnContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public identifier(): IdentifierContext {
		return this.getTypedRuleContext(IdentifierContext, 0) as IdentifierContext;
	}
	public FOR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.FOR_SYMBOL, 0);
	}
	public ORDINALITY_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ORDINALITY_SYMBOL, 0);
	}
	public dataType(): DataTypeContext {
		return this.getTypedRuleContext(DataTypeContext, 0) as DataTypeContext;
	}
	public PATH_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.PATH_SYMBOL, 0);
	}
	public textStringLiteral(): TextStringLiteralContext {
		return this.getTypedRuleContext(TextStringLiteralContext, 0) as TextStringLiteralContext;
	}
	public collate(): CollateContext {
		return this.getTypedRuleContext(CollateContext, 0) as CollateContext;
	}
	public EXISTS_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.EXISTS_SYMBOL, 0);
	}
	public onEmptyOrError(): OnEmptyOrErrorContext {
		return this.getTypedRuleContext(OnEmptyOrErrorContext, 0) as OnEmptyOrErrorContext;
	}
	public NESTED_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.NESTED_SYMBOL, 0);
	}
	public columnsClause(): ColumnsClauseContext {
		return this.getTypedRuleContext(ColumnsClauseContext, 0) as ColumnsClauseContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_jtColumn;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterJtColumn) {
	 		listener.enterJtColumn(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitJtColumn) {
	 		listener.exitJtColumn(this);
		}
	}
}


export class OnEmptyOrErrorContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public onEmpty(): OnEmptyContext {
		return this.getTypedRuleContext(OnEmptyContext, 0) as OnEmptyContext;
	}
	public onError(): OnErrorContext {
		return this.getTypedRuleContext(OnErrorContext, 0) as OnErrorContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_onEmptyOrError;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterOnEmptyOrError) {
	 		listener.enterOnEmptyOrError(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitOnEmptyOrError) {
	 		listener.exitOnEmptyOrError(this);
		}
	}
}


export class OnEmptyContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public jtOnResponse(): JtOnResponseContext {
		return this.getTypedRuleContext(JtOnResponseContext, 0) as JtOnResponseContext;
	}
	public ON_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ON_SYMBOL, 0);
	}
	public EMPTY_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.EMPTY_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_onEmpty;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterOnEmpty) {
	 		listener.enterOnEmpty(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitOnEmpty) {
	 		listener.exitOnEmpty(this);
		}
	}
}


export class OnErrorContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public jtOnResponse(): JtOnResponseContext {
		return this.getTypedRuleContext(JtOnResponseContext, 0) as JtOnResponseContext;
	}
	public ON_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ON_SYMBOL, 0);
	}
	public ERROR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ERROR_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_onError;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterOnError) {
	 		listener.enterOnError(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitOnError) {
	 		listener.exitOnError(this);
		}
	}
}


export class JtOnResponseContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public ERROR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ERROR_SYMBOL, 0);
	}
	public NULL_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.NULL_SYMBOL, 0);
	}
	public DEFAULT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
	}
	public textStringLiteral(): TextStringLiteralContext {
		return this.getTypedRuleContext(TextStringLiteralContext, 0) as TextStringLiteralContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_jtOnResponse;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterJtOnResponse) {
	 		listener.enterJtOnResponse(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitJtOnResponse) {
	 		listener.exitJtOnResponse(this);
		}
	}
}


export class UnionOptionContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public DISTINCT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.DISTINCT_SYMBOL, 0);
	}
	public ALL_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ALL_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_unionOption;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterUnionOption) {
	 		listener.enterUnionOption(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitUnionOption) {
	 		listener.exitUnionOption(this);
		}
	}
}


export class TableAliasContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public identifier(): IdentifierContext {
		return this.getTypedRuleContext(IdentifierContext, 0) as IdentifierContext;
	}
	public AS_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.AS_SYMBOL, 0);
	}
	public EQUAL_OPERATOR(): TerminalNode {
		return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_tableAlias;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterTableAlias) {
	 		listener.enterTableAlias(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitTableAlias) {
	 		listener.exitTableAlias(this);
		}
	}
}


export class IndexHintListContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public indexHint_list(): IndexHintContext[] {
		return this.getTypedRuleContexts(IndexHintContext) as IndexHintContext[];
	}
	public indexHint(i: number): IndexHintContext {
		return this.getTypedRuleContext(IndexHintContext, i) as IndexHintContext;
	}
	public COMMA_SYMBOL_list(): TerminalNode[] {
	    	return this.getTokens(MySQLParser.COMMA_SYMBOL);
	}
	public COMMA_SYMBOL(i: number): TerminalNode {
		return this.getToken(MySQLParser.COMMA_SYMBOL, i);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_indexHintList;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterIndexHintList) {
	 		listener.enterIndexHintList(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitIndexHintList) {
	 		listener.exitIndexHintList(this);
		}
	}
}


export class IndexHintContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public indexHintType(): IndexHintTypeContext {
		return this.getTypedRuleContext(IndexHintTypeContext, 0) as IndexHintTypeContext;
	}
	public keyOrIndex(): KeyOrIndexContext {
		return this.getTypedRuleContext(KeyOrIndexContext, 0) as KeyOrIndexContext;
	}
	public OPEN_PAR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
	}
	public indexList(): IndexListContext {
		return this.getTypedRuleContext(IndexListContext, 0) as IndexListContext;
	}
	public CLOSE_PAR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
	}
	public indexHintClause(): IndexHintClauseContext {
		return this.getTypedRuleContext(IndexHintClauseContext, 0) as IndexHintClauseContext;
	}
	public USE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.USE_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_indexHint;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterIndexHint) {
	 		listener.enterIndexHint(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitIndexHint) {
	 		listener.exitIndexHint(this);
		}
	}
}


export class IndexHintTypeContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public FORCE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.FORCE_SYMBOL, 0);
	}
	public IGNORE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.IGNORE_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_indexHintType;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterIndexHintType) {
	 		listener.enterIndexHintType(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitIndexHintType) {
	 		listener.exitIndexHintType(this);
		}
	}
}


export class KeyOrIndexContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KEY_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.KEY_SYMBOL, 0);
	}
	public INDEX_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.INDEX_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_keyOrIndex;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterKeyOrIndex) {
	 		listener.enterKeyOrIndex(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitKeyOrIndex) {
	 		listener.exitKeyOrIndex(this);
		}
	}
}


export class ConstraintKeyTypeContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public PRIMARY_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.PRIMARY_SYMBOL, 0);
	}
	public KEY_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.KEY_SYMBOL, 0);
	}
	public UNIQUE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.UNIQUE_SYMBOL, 0);
	}
	public keyOrIndex(): KeyOrIndexContext {
		return this.getTypedRuleContext(KeyOrIndexContext, 0) as KeyOrIndexContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_constraintKeyType;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterConstraintKeyType) {
	 		listener.enterConstraintKeyType(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitConstraintKeyType) {
	 		listener.exitConstraintKeyType(this);
		}
	}
}


export class IndexHintClauseContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public FOR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.FOR_SYMBOL, 0);
	}
	public JOIN_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.JOIN_SYMBOL, 0);
	}
	public ORDER_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ORDER_SYMBOL, 0);
	}
	public BY_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.BY_SYMBOL, 0);
	}
	public GROUP_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.GROUP_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_indexHintClause;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterIndexHintClause) {
	 		listener.enterIndexHintClause(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitIndexHintClause) {
	 		listener.exitIndexHintClause(this);
		}
	}
}


export class IndexListContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public indexListElement_list(): IndexListElementContext[] {
		return this.getTypedRuleContexts(IndexListElementContext) as IndexListElementContext[];
	}
	public indexListElement(i: number): IndexListElementContext {
		return this.getTypedRuleContext(IndexListElementContext, i) as IndexListElementContext;
	}
	public COMMA_SYMBOL_list(): TerminalNode[] {
	    	return this.getTokens(MySQLParser.COMMA_SYMBOL);
	}
	public COMMA_SYMBOL(i: number): TerminalNode {
		return this.getToken(MySQLParser.COMMA_SYMBOL, i);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_indexList;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterIndexList) {
	 		listener.enterIndexList(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitIndexList) {
	 		listener.exitIndexList(this);
		}
	}
}


export class IndexListElementContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public identifier(): IdentifierContext {
		return this.getTypedRuleContext(IdentifierContext, 0) as IdentifierContext;
	}
	public PRIMARY_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.PRIMARY_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_indexListElement;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterIndexListElement) {
	 		listener.enterIndexListElement(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitIndexListElement) {
	 		listener.exitIndexListElement(this);
		}
	}
}


export class UpdateStatementContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public UPDATE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.UPDATE_SYMBOL, 0);
	}
	public tableReferenceList(): TableReferenceListContext {
		return this.getTypedRuleContext(TableReferenceListContext, 0) as TableReferenceListContext;
	}
	public SET_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SET_SYMBOL, 0);
	}
	public updateList(): UpdateListContext {
		return this.getTypedRuleContext(UpdateListContext, 0) as UpdateListContext;
	}
	public withClause(): WithClauseContext {
		return this.getTypedRuleContext(WithClauseContext, 0) as WithClauseContext;
	}
	public LOW_PRIORITY_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.LOW_PRIORITY_SYMBOL, 0);
	}
	public IGNORE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.IGNORE_SYMBOL, 0);
	}
	public whereClause(): WhereClauseContext {
		return this.getTypedRuleContext(WhereClauseContext, 0) as WhereClauseContext;
	}
	public orderClause(): OrderClauseContext {
		return this.getTypedRuleContext(OrderClauseContext, 0) as OrderClauseContext;
	}
	public simpleLimitClause(): SimpleLimitClauseContext {
		return this.getTypedRuleContext(SimpleLimitClauseContext, 0) as SimpleLimitClauseContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_updateStatement;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterUpdateStatement) {
	 		listener.enterUpdateStatement(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitUpdateStatement) {
	 		listener.exitUpdateStatement(this);
		}
	}
}


export class TransactionOrLockingStatementContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public transactionStatement(): TransactionStatementContext {
		return this.getTypedRuleContext(TransactionStatementContext, 0) as TransactionStatementContext;
	}
	public savepointStatement(): SavepointStatementContext {
		return this.getTypedRuleContext(SavepointStatementContext, 0) as SavepointStatementContext;
	}
	public lockStatement(): LockStatementContext {
		return this.getTypedRuleContext(LockStatementContext, 0) as LockStatementContext;
	}
	public xaStatement(): XaStatementContext {
		return this.getTypedRuleContext(XaStatementContext, 0) as XaStatementContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_transactionOrLockingStatement;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterTransactionOrLockingStatement) {
	 		listener.enterTransactionOrLockingStatement(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitTransactionOrLockingStatement) {
	 		listener.exitTransactionOrLockingStatement(this);
		}
	}
}


export class TransactionStatementContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public START_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.START_SYMBOL, 0);
	}
	public TRANSACTION_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.TRANSACTION_SYMBOL, 0);
	}
	public transactionCharacteristic_list(): TransactionCharacteristicContext[] {
		return this.getTypedRuleContexts(TransactionCharacteristicContext) as TransactionCharacteristicContext[];
	}
	public transactionCharacteristic(i: number): TransactionCharacteristicContext {
		return this.getTypedRuleContext(TransactionCharacteristicContext, i) as TransactionCharacteristicContext;
	}
	public COMMIT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.COMMIT_SYMBOL, 0);
	}
	public WORK_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.WORK_SYMBOL, 0);
	}
	public AND_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.AND_SYMBOL, 0);
	}
	public CHAIN_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CHAIN_SYMBOL, 0);
	}
	public RELEASE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.RELEASE_SYMBOL, 0);
	}
	public NO_SYMBOL_list(): TerminalNode[] {
	    	return this.getTokens(MySQLParser.NO_SYMBOL);
	}
	public NO_SYMBOL(i: number): TerminalNode {
		return this.getToken(MySQLParser.NO_SYMBOL, i);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_transactionStatement;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterTransactionStatement) {
	 		listener.enterTransactionStatement(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitTransactionStatement) {
	 		listener.exitTransactionStatement(this);
		}
	}
}


export class BeginWorkContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public BEGIN_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.BEGIN_SYMBOL, 0);
	}
	public WORK_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.WORK_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_beginWork;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterBeginWork) {
	 		listener.enterBeginWork(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitBeginWork) {
	 		listener.exitBeginWork(this);
		}
	}
}


export class TransactionCharacteristicContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public WITH_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.WITH_SYMBOL, 0);
	}
	public CONSISTENT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CONSISTENT_SYMBOL, 0);
	}
	public SNAPSHOT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SNAPSHOT_SYMBOL, 0);
	}
	public READ_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.READ_SYMBOL, 0);
	}
	public WRITE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.WRITE_SYMBOL, 0);
	}
	public ONLY_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ONLY_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_transactionCharacteristic;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterTransactionCharacteristic) {
	 		listener.enterTransactionCharacteristic(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitTransactionCharacteristic) {
	 		listener.exitTransactionCharacteristic(this);
		}
	}
}


export class SavepointStatementContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public SAVEPOINT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SAVEPOINT_SYMBOL, 0);
	}
	public identifier(): IdentifierContext {
		return this.getTypedRuleContext(IdentifierContext, 0) as IdentifierContext;
	}
	public ROLLBACK_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ROLLBACK_SYMBOL, 0);
	}
	public TO_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.TO_SYMBOL, 0);
	}
	public WORK_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.WORK_SYMBOL, 0);
	}
	public AND_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.AND_SYMBOL, 0);
	}
	public CHAIN_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CHAIN_SYMBOL, 0);
	}
	public RELEASE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.RELEASE_SYMBOL, 0);
	}
	public NO_SYMBOL_list(): TerminalNode[] {
	    	return this.getTokens(MySQLParser.NO_SYMBOL);
	}
	public NO_SYMBOL(i: number): TerminalNode {
		return this.getToken(MySQLParser.NO_SYMBOL, i);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_savepointStatement;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterSavepointStatement) {
	 		listener.enterSavepointStatement(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitSavepointStatement) {
	 		listener.exitSavepointStatement(this);
		}
	}
}


export class LockStatementContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LOCK_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.LOCK_SYMBOL, 0);
	}
	public lockItem_list(): LockItemContext[] {
		return this.getTypedRuleContexts(LockItemContext) as LockItemContext[];
	}
	public lockItem(i: number): LockItemContext {
		return this.getTypedRuleContext(LockItemContext, i) as LockItemContext;
	}
	public TABLES_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.TABLES_SYMBOL, 0);
	}
	public TABLE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.TABLE_SYMBOL, 0);
	}
	public COMMA_SYMBOL_list(): TerminalNode[] {
	    	return this.getTokens(MySQLParser.COMMA_SYMBOL);
	}
	public COMMA_SYMBOL(i: number): TerminalNode {
		return this.getToken(MySQLParser.COMMA_SYMBOL, i);
	}
	public INSTANCE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.INSTANCE_SYMBOL, 0);
	}
	public FOR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.FOR_SYMBOL, 0);
	}
	public BACKUP_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.BACKUP_SYMBOL, 0);
	}
	public UNLOCK_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.UNLOCK_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_lockStatement;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterLockStatement) {
	 		listener.enterLockStatement(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitLockStatement) {
	 		listener.exitLockStatement(this);
		}
	}
}


export class LockItemContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public tableRef(): TableRefContext {
		return this.getTypedRuleContext(TableRefContext, 0) as TableRefContext;
	}
	public lockOption(): LockOptionContext {
		return this.getTypedRuleContext(LockOptionContext, 0) as LockOptionContext;
	}
	public tableAlias(): TableAliasContext {
		return this.getTypedRuleContext(TableAliasContext, 0) as TableAliasContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_lockItem;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterLockItem) {
	 		listener.enterLockItem(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitLockItem) {
	 		listener.exitLockItem(this);
		}
	}
}


export class LockOptionContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public READ_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.READ_SYMBOL, 0);
	}
	public LOCAL_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.LOCAL_SYMBOL, 0);
	}
	public WRITE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.WRITE_SYMBOL, 0);
	}
	public LOW_PRIORITY_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.LOW_PRIORITY_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_lockOption;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterLockOption) {
	 		listener.enterLockOption(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitLockOption) {
	 		listener.exitLockOption(this);
		}
	}
}


export class XaStatementContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public XA_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.XA_SYMBOL, 0);
	}
	public xid(): XidContext {
		return this.getTypedRuleContext(XidContext, 0) as XidContext;
	}
	public END_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.END_SYMBOL, 0);
	}
	public PREPARE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.PREPARE_SYMBOL, 0);
	}
	public COMMIT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.COMMIT_SYMBOL, 0);
	}
	public ROLLBACK_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ROLLBACK_SYMBOL, 0);
	}
	public RECOVER_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.RECOVER_SYMBOL, 0);
	}
	public xaConvert(): XaConvertContext {
		return this.getTypedRuleContext(XaConvertContext, 0) as XaConvertContext;
	}
	public START_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.START_SYMBOL, 0);
	}
	public BEGIN_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.BEGIN_SYMBOL, 0);
	}
	public SUSPEND_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SUSPEND_SYMBOL, 0);
	}
	public ONE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ONE_SYMBOL, 0);
	}
	public PHASE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.PHASE_SYMBOL, 0);
	}
	public JOIN_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.JOIN_SYMBOL, 0);
	}
	public RESUME_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.RESUME_SYMBOL, 0);
	}
	public FOR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.FOR_SYMBOL, 0);
	}
	public MIGRATE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.MIGRATE_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_xaStatement;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterXaStatement) {
	 		listener.enterXaStatement(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitXaStatement) {
	 		listener.exitXaStatement(this);
		}
	}
}


export class XaConvertContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public CONVERT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CONVERT_SYMBOL, 0);
	}
	public XID_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.XID_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_xaConvert;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterXaConvert) {
	 		listener.enterXaConvert(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitXaConvert) {
	 		listener.exitXaConvert(this);
		}
	}
}


export class XidContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public textString_list(): TextStringContext[] {
		return this.getTypedRuleContexts(TextStringContext) as TextStringContext[];
	}
	public textString(i: number): TextStringContext {
		return this.getTypedRuleContext(TextStringContext, i) as TextStringContext;
	}
	public COMMA_SYMBOL_list(): TerminalNode[] {
	    	return this.getTokens(MySQLParser.COMMA_SYMBOL);
	}
	public COMMA_SYMBOL(i: number): TerminalNode {
		return this.getToken(MySQLParser.COMMA_SYMBOL, i);
	}
	public ulong_number(): Ulong_numberContext {
		return this.getTypedRuleContext(Ulong_numberContext, 0) as Ulong_numberContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_xid;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterXid) {
	 		listener.enterXid(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitXid) {
	 		listener.exitXid(this);
		}
	}
}


export class ReplicationStatementContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public PURGE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.PURGE_SYMBOL, 0);
	}
	public LOGS_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.LOGS_SYMBOL, 0);
	}
	public BINARY_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.BINARY_SYMBOL, 0);
	}
	public MASTER_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.MASTER_SYMBOL, 0);
	}
	public TO_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.TO_SYMBOL, 0);
	}
	public textLiteral(): TextLiteralContext {
		return this.getTypedRuleContext(TextLiteralContext, 0) as TextLiteralContext;
	}
	public BEFORE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.BEFORE_SYMBOL, 0);
	}
	public expr(): ExprContext {
		return this.getTypedRuleContext(ExprContext, 0) as ExprContext;
	}
	public changeMaster(): ChangeMasterContext {
		return this.getTypedRuleContext(ChangeMasterContext, 0) as ChangeMasterContext;
	}
	public RESET_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.RESET_SYMBOL, 0);
	}
	public resetOption_list(): ResetOptionContext[] {
		return this.getTypedRuleContexts(ResetOptionContext) as ResetOptionContext[];
	}
	public resetOption(i: number): ResetOptionContext {
		return this.getTypedRuleContext(ResetOptionContext, i) as ResetOptionContext;
	}
	public COMMA_SYMBOL_list(): TerminalNode[] {
	    	return this.getTokens(MySQLParser.COMMA_SYMBOL);
	}
	public COMMA_SYMBOL(i: number): TerminalNode {
		return this.getToken(MySQLParser.COMMA_SYMBOL, i);
	}
	public PERSIST_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.PERSIST_SYMBOL, 0);
	}
	public ifExists(): IfExistsContext {
		return this.getTypedRuleContext(IfExistsContext, 0) as IfExistsContext;
	}
	public identifier(): IdentifierContext {
		return this.getTypedRuleContext(IdentifierContext, 0) as IdentifierContext;
	}
	public slave(): SlaveContext {
		return this.getTypedRuleContext(SlaveContext, 0) as SlaveContext;
	}
	public changeReplication(): ChangeReplicationContext {
		return this.getTypedRuleContext(ChangeReplicationContext, 0) as ChangeReplicationContext;
	}
	public replicationLoad(): ReplicationLoadContext {
		return this.getTypedRuleContext(ReplicationLoadContext, 0) as ReplicationLoadContext;
	}
	public groupReplication(): GroupReplicationContext {
		return this.getTypedRuleContext(GroupReplicationContext, 0) as GroupReplicationContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_replicationStatement;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterReplicationStatement) {
	 		listener.enterReplicationStatement(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitReplicationStatement) {
	 		listener.exitReplicationStatement(this);
		}
	}
}


export class ResetOptionContext extends ParserRuleContext {
	public _option!: Token;
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public MASTER_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.MASTER_SYMBOL, 0);
	}
	public masterResetOptions(): MasterResetOptionsContext {
		return this.getTypedRuleContext(MasterResetOptionsContext, 0) as MasterResetOptionsContext;
	}
	public CACHE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CACHE_SYMBOL, 0);
	}
	public QUERY_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.QUERY_SYMBOL, 0);
	}
	public SLAVE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SLAVE_SYMBOL, 0);
	}
	public ALL_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ALL_SYMBOL, 0);
	}
	public channel(): ChannelContext {
		return this.getTypedRuleContext(ChannelContext, 0) as ChannelContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_resetOption;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterResetOption) {
	 		listener.enterResetOption(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitResetOption) {
	 		listener.exitResetOption(this);
		}
	}
}


export class MasterResetOptionsContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public TO_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.TO_SYMBOL, 0);
	}
	public real_ulong_number(): Real_ulong_numberContext {
		return this.getTypedRuleContext(Real_ulong_numberContext, 0) as Real_ulong_numberContext;
	}
	public real_ulonglong_number(): Real_ulonglong_numberContext {
		return this.getTypedRuleContext(Real_ulonglong_numberContext, 0) as Real_ulonglong_numberContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_masterResetOptions;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterMasterResetOptions) {
	 		listener.enterMasterResetOptions(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitMasterResetOptions) {
	 		listener.exitMasterResetOptions(this);
		}
	}
}


export class ReplicationLoadContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LOAD_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.LOAD_SYMBOL, 0);
	}
	public FROM_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.FROM_SYMBOL, 0);
	}
	public MASTER_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.MASTER_SYMBOL, 0);
	}
	public DATA_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.DATA_SYMBOL, 0);
	}
	public TABLE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.TABLE_SYMBOL, 0);
	}
	public tableRef(): TableRefContext {
		return this.getTypedRuleContext(TableRefContext, 0) as TableRefContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_replicationLoad;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterReplicationLoad) {
	 		listener.enterReplicationLoad(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitReplicationLoad) {
	 		listener.exitReplicationLoad(this);
		}
	}
}


export class ChangeMasterContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public CHANGE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CHANGE_SYMBOL, 0);
	}
	public MASTER_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.MASTER_SYMBOL, 0);
	}
	public TO_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.TO_SYMBOL, 0);
	}
	public changeMasterOptions(): ChangeMasterOptionsContext {
		return this.getTypedRuleContext(ChangeMasterOptionsContext, 0) as ChangeMasterOptionsContext;
	}
	public channel(): ChannelContext {
		return this.getTypedRuleContext(ChannelContext, 0) as ChannelContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_changeMaster;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterChangeMaster) {
	 		listener.enterChangeMaster(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitChangeMaster) {
	 		listener.exitChangeMaster(this);
		}
	}
}


export class ChangeMasterOptionsContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public masterOption_list(): MasterOptionContext[] {
		return this.getTypedRuleContexts(MasterOptionContext) as MasterOptionContext[];
	}
	public masterOption(i: number): MasterOptionContext {
		return this.getTypedRuleContext(MasterOptionContext, i) as MasterOptionContext;
	}
	public COMMA_SYMBOL_list(): TerminalNode[] {
	    	return this.getTokens(MySQLParser.COMMA_SYMBOL);
	}
	public COMMA_SYMBOL(i: number): TerminalNode {
		return this.getToken(MySQLParser.COMMA_SYMBOL, i);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_changeMasterOptions;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterChangeMasterOptions) {
	 		listener.enterChangeMasterOptions(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitChangeMasterOptions) {
	 		listener.exitChangeMasterOptions(this);
		}
	}
}


export class MasterOptionContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public MASTER_HOST_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.MASTER_HOST_SYMBOL, 0);
	}
	public EQUAL_OPERATOR(): TerminalNode {
		return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
	}
	public textStringNoLinebreak(): TextStringNoLinebreakContext {
		return this.getTypedRuleContext(TextStringNoLinebreakContext, 0) as TextStringNoLinebreakContext;
	}
	public NETWORK_NAMESPACE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.NETWORK_NAMESPACE_SYMBOL, 0);
	}
	public MASTER_BIND_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.MASTER_BIND_SYMBOL, 0);
	}
	public MASTER_USER_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.MASTER_USER_SYMBOL, 0);
	}
	public MASTER_PASSWORD_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.MASTER_PASSWORD_SYMBOL, 0);
	}
	public MASTER_PORT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.MASTER_PORT_SYMBOL, 0);
	}
	public ulong_number(): Ulong_numberContext {
		return this.getTypedRuleContext(Ulong_numberContext, 0) as Ulong_numberContext;
	}
	public MASTER_CONNECT_RETRY_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.MASTER_CONNECT_RETRY_SYMBOL, 0);
	}
	public MASTER_RETRY_COUNT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.MASTER_RETRY_COUNT_SYMBOL, 0);
	}
	public MASTER_DELAY_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.MASTER_DELAY_SYMBOL, 0);
	}
	public MASTER_SSL_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.MASTER_SSL_SYMBOL, 0);
	}
	public MASTER_SSL_CA_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.MASTER_SSL_CA_SYMBOL, 0);
	}
	public MASTER_SSL_CAPATH_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.MASTER_SSL_CAPATH_SYMBOL, 0);
	}
	public MASTER_TLS_VERSION_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.MASTER_TLS_VERSION_SYMBOL, 0);
	}
	public MASTER_SSL_CERT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.MASTER_SSL_CERT_SYMBOL, 0);
	}
	public MASTER_TLS_CIPHERSUITES_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.MASTER_TLS_CIPHERSUITES_SYMBOL, 0);
	}
	public masterTlsCiphersuitesDef(): MasterTlsCiphersuitesDefContext {
		return this.getTypedRuleContext(MasterTlsCiphersuitesDefContext, 0) as MasterTlsCiphersuitesDefContext;
	}
	public MASTER_SSL_CIPHER_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.MASTER_SSL_CIPHER_SYMBOL, 0);
	}
	public MASTER_SSL_KEY_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.MASTER_SSL_KEY_SYMBOL, 0);
	}
	public MASTER_SSL_VERIFY_SERVER_CERT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.MASTER_SSL_VERIFY_SERVER_CERT_SYMBOL, 0);
	}
	public MASTER_SSL_CRL_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.MASTER_SSL_CRL_SYMBOL, 0);
	}
	public textLiteral(): TextLiteralContext {
		return this.getTypedRuleContext(TextLiteralContext, 0) as TextLiteralContext;
	}
	public MASTER_SSL_CRLPATH_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.MASTER_SSL_CRLPATH_SYMBOL, 0);
	}
	public MASTER_PUBLIC_KEY_PATH_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.MASTER_PUBLIC_KEY_PATH_SYMBOL, 0);
	}
	public GET_MASTER_PUBLIC_KEY_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.GET_MASTER_PUBLIC_KEY_SYMBOL, 0);
	}
	public MASTER_HEARTBEAT_PERIOD_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.MASTER_HEARTBEAT_PERIOD_SYMBOL, 0);
	}
	public IGNORE_SERVER_IDS_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.IGNORE_SERVER_IDS_SYMBOL, 0);
	}
	public serverIdList(): ServerIdListContext {
		return this.getTypedRuleContext(ServerIdListContext, 0) as ServerIdListContext;
	}
	public MASTER_COMPRESSION_ALGORITHM_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.MASTER_COMPRESSION_ALGORITHM_SYMBOL, 0);
	}
	public textStringLiteral(): TextStringLiteralContext {
		return this.getTypedRuleContext(TextStringLiteralContext, 0) as TextStringLiteralContext;
	}
	public MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL, 0);
	}
	public MASTER_AUTO_POSITION_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.MASTER_AUTO_POSITION_SYMBOL, 0);
	}
	public PRIVILEGE_CHECKS_USER_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.PRIVILEGE_CHECKS_USER_SYMBOL, 0);
	}
	public privilegeCheckDef(): PrivilegeCheckDefContext {
		return this.getTypedRuleContext(PrivilegeCheckDefContext, 0) as PrivilegeCheckDefContext;
	}
	public masterFileDef(): MasterFileDefContext {
		return this.getTypedRuleContext(MasterFileDefContext, 0) as MasterFileDefContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_masterOption;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterMasterOption) {
	 		listener.enterMasterOption(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitMasterOption) {
	 		listener.exitMasterOption(this);
		}
	}
}


export class PrivilegeCheckDefContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public userIdentifierOrText(): UserIdentifierOrTextContext {
		return this.getTypedRuleContext(UserIdentifierOrTextContext, 0) as UserIdentifierOrTextContext;
	}
	public NULL_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.NULL_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_privilegeCheckDef;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterPrivilegeCheckDef) {
	 		listener.enterPrivilegeCheckDef(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitPrivilegeCheckDef) {
	 		listener.exitPrivilegeCheckDef(this);
		}
	}
}


export class MasterTlsCiphersuitesDefContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public textStringNoLinebreak(): TextStringNoLinebreakContext {
		return this.getTypedRuleContext(TextStringNoLinebreakContext, 0) as TextStringNoLinebreakContext;
	}
	public NULL_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.NULL_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_masterTlsCiphersuitesDef;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterMasterTlsCiphersuitesDef) {
	 		listener.enterMasterTlsCiphersuitesDef(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitMasterTlsCiphersuitesDef) {
	 		listener.exitMasterTlsCiphersuitesDef(this);
		}
	}
}


export class MasterFileDefContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public MASTER_LOG_FILE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.MASTER_LOG_FILE_SYMBOL, 0);
	}
	public EQUAL_OPERATOR(): TerminalNode {
		return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
	}
	public textStringNoLinebreak(): TextStringNoLinebreakContext {
		return this.getTypedRuleContext(TextStringNoLinebreakContext, 0) as TextStringNoLinebreakContext;
	}
	public MASTER_LOG_POS_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.MASTER_LOG_POS_SYMBOL, 0);
	}
	public ulonglong_number(): Ulonglong_numberContext {
		return this.getTypedRuleContext(Ulonglong_numberContext, 0) as Ulonglong_numberContext;
	}
	public RELAY_LOG_FILE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.RELAY_LOG_FILE_SYMBOL, 0);
	}
	public RELAY_LOG_POS_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.RELAY_LOG_POS_SYMBOL, 0);
	}
	public ulong_number(): Ulong_numberContext {
		return this.getTypedRuleContext(Ulong_numberContext, 0) as Ulong_numberContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_masterFileDef;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterMasterFileDef) {
	 		listener.enterMasterFileDef(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitMasterFileDef) {
	 		listener.exitMasterFileDef(this);
		}
	}
}


export class ServerIdListContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public OPEN_PAR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
	}
	public CLOSE_PAR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
	}
	public ulong_number_list(): Ulong_numberContext[] {
		return this.getTypedRuleContexts(Ulong_numberContext) as Ulong_numberContext[];
	}
	public ulong_number(i: number): Ulong_numberContext {
		return this.getTypedRuleContext(Ulong_numberContext, i) as Ulong_numberContext;
	}
	public COMMA_SYMBOL_list(): TerminalNode[] {
	    	return this.getTokens(MySQLParser.COMMA_SYMBOL);
	}
	public COMMA_SYMBOL(i: number): TerminalNode {
		return this.getToken(MySQLParser.COMMA_SYMBOL, i);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_serverIdList;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterServerIdList) {
	 		listener.enterServerIdList(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitServerIdList) {
	 		listener.exitServerIdList(this);
		}
	}
}


export class ChangeReplicationContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public CHANGE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CHANGE_SYMBOL, 0);
	}
	public REPLICATION_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.REPLICATION_SYMBOL, 0);
	}
	public FILTER_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.FILTER_SYMBOL, 0);
	}
	public filterDefinition_list(): FilterDefinitionContext[] {
		return this.getTypedRuleContexts(FilterDefinitionContext) as FilterDefinitionContext[];
	}
	public filterDefinition(i: number): FilterDefinitionContext {
		return this.getTypedRuleContext(FilterDefinitionContext, i) as FilterDefinitionContext;
	}
	public COMMA_SYMBOL_list(): TerminalNode[] {
	    	return this.getTokens(MySQLParser.COMMA_SYMBOL);
	}
	public COMMA_SYMBOL(i: number): TerminalNode {
		return this.getToken(MySQLParser.COMMA_SYMBOL, i);
	}
	public channel(): ChannelContext {
		return this.getTypedRuleContext(ChannelContext, 0) as ChannelContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_changeReplication;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterChangeReplication) {
	 		listener.enterChangeReplication(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitChangeReplication) {
	 		listener.exitChangeReplication(this);
		}
	}
}


export class FilterDefinitionContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public REPLICATE_DO_DB_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.REPLICATE_DO_DB_SYMBOL, 0);
	}
	public EQUAL_OPERATOR(): TerminalNode {
		return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
	}
	public OPEN_PAR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
	}
	public CLOSE_PAR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
	}
	public filterDbList(): FilterDbListContext {
		return this.getTypedRuleContext(FilterDbListContext, 0) as FilterDbListContext;
	}
	public REPLICATE_IGNORE_DB_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.REPLICATE_IGNORE_DB_SYMBOL, 0);
	}
	public REPLICATE_DO_TABLE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.REPLICATE_DO_TABLE_SYMBOL, 0);
	}
	public filterTableList(): FilterTableListContext {
		return this.getTypedRuleContext(FilterTableListContext, 0) as FilterTableListContext;
	}
	public REPLICATE_IGNORE_TABLE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.REPLICATE_IGNORE_TABLE_SYMBOL, 0);
	}
	public REPLICATE_WILD_DO_TABLE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.REPLICATE_WILD_DO_TABLE_SYMBOL, 0);
	}
	public filterStringList(): FilterStringListContext {
		return this.getTypedRuleContext(FilterStringListContext, 0) as FilterStringListContext;
	}
	public REPLICATE_WILD_IGNORE_TABLE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.REPLICATE_WILD_IGNORE_TABLE_SYMBOL, 0);
	}
	public REPLICATE_REWRITE_DB_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.REPLICATE_REWRITE_DB_SYMBOL, 0);
	}
	public filterDbPairList(): FilterDbPairListContext {
		return this.getTypedRuleContext(FilterDbPairListContext, 0) as FilterDbPairListContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_filterDefinition;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterFilterDefinition) {
	 		listener.enterFilterDefinition(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitFilterDefinition) {
	 		listener.exitFilterDefinition(this);
		}
	}
}


export class FilterDbListContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public schemaRef_list(): SchemaRefContext[] {
		return this.getTypedRuleContexts(SchemaRefContext) as SchemaRefContext[];
	}
	public schemaRef(i: number): SchemaRefContext {
		return this.getTypedRuleContext(SchemaRefContext, i) as SchemaRefContext;
	}
	public COMMA_SYMBOL_list(): TerminalNode[] {
	    	return this.getTokens(MySQLParser.COMMA_SYMBOL);
	}
	public COMMA_SYMBOL(i: number): TerminalNode {
		return this.getToken(MySQLParser.COMMA_SYMBOL, i);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_filterDbList;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterFilterDbList) {
	 		listener.enterFilterDbList(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitFilterDbList) {
	 		listener.exitFilterDbList(this);
		}
	}
}


export class FilterTableListContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public filterTableRef_list(): FilterTableRefContext[] {
		return this.getTypedRuleContexts(FilterTableRefContext) as FilterTableRefContext[];
	}
	public filterTableRef(i: number): FilterTableRefContext {
		return this.getTypedRuleContext(FilterTableRefContext, i) as FilterTableRefContext;
	}
	public COMMA_SYMBOL_list(): TerminalNode[] {
	    	return this.getTokens(MySQLParser.COMMA_SYMBOL);
	}
	public COMMA_SYMBOL(i: number): TerminalNode {
		return this.getToken(MySQLParser.COMMA_SYMBOL, i);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_filterTableList;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterFilterTableList) {
	 		listener.enterFilterTableList(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitFilterTableList) {
	 		listener.exitFilterTableList(this);
		}
	}
}


export class FilterStringListContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public filterWildDbTableString_list(): FilterWildDbTableStringContext[] {
		return this.getTypedRuleContexts(FilterWildDbTableStringContext) as FilterWildDbTableStringContext[];
	}
	public filterWildDbTableString(i: number): FilterWildDbTableStringContext {
		return this.getTypedRuleContext(FilterWildDbTableStringContext, i) as FilterWildDbTableStringContext;
	}
	public COMMA_SYMBOL_list(): TerminalNode[] {
	    	return this.getTokens(MySQLParser.COMMA_SYMBOL);
	}
	public COMMA_SYMBOL(i: number): TerminalNode {
		return this.getToken(MySQLParser.COMMA_SYMBOL, i);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_filterStringList;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterFilterStringList) {
	 		listener.enterFilterStringList(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitFilterStringList) {
	 		listener.exitFilterStringList(this);
		}
	}
}


export class FilterWildDbTableStringContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public textStringNoLinebreak(): TextStringNoLinebreakContext {
		return this.getTypedRuleContext(TextStringNoLinebreakContext, 0) as TextStringNoLinebreakContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_filterWildDbTableString;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterFilterWildDbTableString) {
	 		listener.enterFilterWildDbTableString(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitFilterWildDbTableString) {
	 		listener.exitFilterWildDbTableString(this);
		}
	}
}


export class FilterDbPairListContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public schemaIdentifierPair_list(): SchemaIdentifierPairContext[] {
		return this.getTypedRuleContexts(SchemaIdentifierPairContext) as SchemaIdentifierPairContext[];
	}
	public schemaIdentifierPair(i: number): SchemaIdentifierPairContext {
		return this.getTypedRuleContext(SchemaIdentifierPairContext, i) as SchemaIdentifierPairContext;
	}
	public COMMA_SYMBOL_list(): TerminalNode[] {
	    	return this.getTokens(MySQLParser.COMMA_SYMBOL);
	}
	public COMMA_SYMBOL(i: number): TerminalNode {
		return this.getToken(MySQLParser.COMMA_SYMBOL, i);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_filterDbPairList;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterFilterDbPairList) {
	 		listener.enterFilterDbPairList(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitFilterDbPairList) {
	 		listener.exitFilterDbPairList(this);
		}
	}
}


export class SlaveContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public START_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.START_SYMBOL, 0);
	}
	public SLAVE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SLAVE_SYMBOL, 0);
	}
	public slaveConnectionOptions(): SlaveConnectionOptionsContext {
		return this.getTypedRuleContext(SlaveConnectionOptionsContext, 0) as SlaveConnectionOptionsContext;
	}
	public slaveThreadOptions(): SlaveThreadOptionsContext {
		return this.getTypedRuleContext(SlaveThreadOptionsContext, 0) as SlaveThreadOptionsContext;
	}
	public UNTIL_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.UNTIL_SYMBOL, 0);
	}
	public slaveUntilOptions(): SlaveUntilOptionsContext {
		return this.getTypedRuleContext(SlaveUntilOptionsContext, 0) as SlaveUntilOptionsContext;
	}
	public channel(): ChannelContext {
		return this.getTypedRuleContext(ChannelContext, 0) as ChannelContext;
	}
	public STOP_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.STOP_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_slave;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterSlave) {
	 		listener.enterSlave(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitSlave) {
	 		listener.exitSlave(this);
		}
	}
}


export class SlaveUntilOptionsContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public masterFileDef_list(): MasterFileDefContext[] {
		return this.getTypedRuleContexts(MasterFileDefContext) as MasterFileDefContext[];
	}
	public masterFileDef(i: number): MasterFileDefContext {
		return this.getTypedRuleContext(MasterFileDefContext, i) as MasterFileDefContext;
	}
	public EQUAL_OPERATOR(): TerminalNode {
		return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
	}
	public textString(): TextStringContext {
		return this.getTypedRuleContext(TextStringContext, 0) as TextStringContext;
	}
	public SQL_AFTER_MTS_GAPS_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SQL_AFTER_MTS_GAPS_SYMBOL, 0);
	}
	public SQL_BEFORE_GTIDS_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SQL_BEFORE_GTIDS_SYMBOL, 0);
	}
	public SQL_AFTER_GTIDS_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SQL_AFTER_GTIDS_SYMBOL, 0);
	}
	public COMMA_SYMBOL_list(): TerminalNode[] {
	    	return this.getTokens(MySQLParser.COMMA_SYMBOL);
	}
	public COMMA_SYMBOL(i: number): TerminalNode {
		return this.getToken(MySQLParser.COMMA_SYMBOL, i);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_slaveUntilOptions;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterSlaveUntilOptions) {
	 		listener.enterSlaveUntilOptions(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitSlaveUntilOptions) {
	 		listener.exitSlaveUntilOptions(this);
		}
	}
}


export class SlaveConnectionOptionsContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public USER_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.USER_SYMBOL, 0);
	}
	public EQUAL_OPERATOR_list(): TerminalNode[] {
	    	return this.getTokens(MySQLParser.EQUAL_OPERATOR);
	}
	public EQUAL_OPERATOR(i: number): TerminalNode {
		return this.getToken(MySQLParser.EQUAL_OPERATOR, i);
	}
	public textString_list(): TextStringContext[] {
		return this.getTypedRuleContexts(TextStringContext) as TextStringContext[];
	}
	public textString(i: number): TextStringContext {
		return this.getTypedRuleContext(TextStringContext, i) as TextStringContext;
	}
	public PASSWORD_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.PASSWORD_SYMBOL, 0);
	}
	public DEFAULT_AUTH_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.DEFAULT_AUTH_SYMBOL, 0);
	}
	public PLUGIN_DIR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.PLUGIN_DIR_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_slaveConnectionOptions;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterSlaveConnectionOptions) {
	 		listener.enterSlaveConnectionOptions(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitSlaveConnectionOptions) {
	 		listener.exitSlaveConnectionOptions(this);
		}
	}
}


export class SlaveThreadOptionsContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public slaveThreadOption_list(): SlaveThreadOptionContext[] {
		return this.getTypedRuleContexts(SlaveThreadOptionContext) as SlaveThreadOptionContext[];
	}
	public slaveThreadOption(i: number): SlaveThreadOptionContext {
		return this.getTypedRuleContext(SlaveThreadOptionContext, i) as SlaveThreadOptionContext;
	}
	public COMMA_SYMBOL_list(): TerminalNode[] {
	    	return this.getTokens(MySQLParser.COMMA_SYMBOL);
	}
	public COMMA_SYMBOL(i: number): TerminalNode {
		return this.getToken(MySQLParser.COMMA_SYMBOL, i);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_slaveThreadOptions;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterSlaveThreadOptions) {
	 		listener.enterSlaveThreadOptions(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitSlaveThreadOptions) {
	 		listener.exitSlaveThreadOptions(this);
		}
	}
}


export class SlaveThreadOptionContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public RELAY_THREAD_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.RELAY_THREAD_SYMBOL, 0);
	}
	public SQL_THREAD_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SQL_THREAD_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_slaveThreadOption;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterSlaveThreadOption) {
	 		listener.enterSlaveThreadOption(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitSlaveThreadOption) {
	 		listener.exitSlaveThreadOption(this);
		}
	}
}


export class GroupReplicationContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public GROUP_REPLICATION_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.GROUP_REPLICATION_SYMBOL, 0);
	}
	public START_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.START_SYMBOL, 0);
	}
	public STOP_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.STOP_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_groupReplication;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterGroupReplication) {
	 		listener.enterGroupReplication(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitGroupReplication) {
	 		listener.exitGroupReplication(this);
		}
	}
}


export class PreparedStatementContext extends ParserRuleContext {
	public _type_!: Token;
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public identifier(): IdentifierContext {
		return this.getTypedRuleContext(IdentifierContext, 0) as IdentifierContext;
	}
	public FROM_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.FROM_SYMBOL, 0);
	}
	public PREPARE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.PREPARE_SYMBOL, 0);
	}
	public textLiteral(): TextLiteralContext {
		return this.getTypedRuleContext(TextLiteralContext, 0) as TextLiteralContext;
	}
	public userVariable(): UserVariableContext {
		return this.getTypedRuleContext(UserVariableContext, 0) as UserVariableContext;
	}
	public executeStatement(): ExecuteStatementContext {
		return this.getTypedRuleContext(ExecuteStatementContext, 0) as ExecuteStatementContext;
	}
	public DEALLOCATE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.DEALLOCATE_SYMBOL, 0);
	}
	public DROP_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.DROP_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_preparedStatement;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterPreparedStatement) {
	 		listener.enterPreparedStatement(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitPreparedStatement) {
	 		listener.exitPreparedStatement(this);
		}
	}
}


export class ExecuteStatementContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public EXECUTE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.EXECUTE_SYMBOL, 0);
	}
	public identifier(): IdentifierContext {
		return this.getTypedRuleContext(IdentifierContext, 0) as IdentifierContext;
	}
	public USING_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.USING_SYMBOL, 0);
	}
	public executeVarList(): ExecuteVarListContext {
		return this.getTypedRuleContext(ExecuteVarListContext, 0) as ExecuteVarListContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_executeStatement;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterExecuteStatement) {
	 		listener.enterExecuteStatement(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitExecuteStatement) {
	 		listener.exitExecuteStatement(this);
		}
	}
}


export class ExecuteVarListContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public userVariable_list(): UserVariableContext[] {
		return this.getTypedRuleContexts(UserVariableContext) as UserVariableContext[];
	}
	public userVariable(i: number): UserVariableContext {
		return this.getTypedRuleContext(UserVariableContext, i) as UserVariableContext;
	}
	public COMMA_SYMBOL_list(): TerminalNode[] {
	    	return this.getTokens(MySQLParser.COMMA_SYMBOL);
	}
	public COMMA_SYMBOL(i: number): TerminalNode {
		return this.getToken(MySQLParser.COMMA_SYMBOL, i);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_executeVarList;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterExecuteVarList) {
	 		listener.enterExecuteVarList(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitExecuteVarList) {
	 		listener.exitExecuteVarList(this);
		}
	}
}


export class CloneStatementContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public CLONE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CLONE_SYMBOL, 0);
	}
	public LOCAL_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.LOCAL_SYMBOL, 0);
	}
	public DATA_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.DATA_SYMBOL, 0);
	}
	public DIRECTORY_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.DIRECTORY_SYMBOL, 0);
	}
	public textStringLiteral(): TextStringLiteralContext {
		return this.getTypedRuleContext(TextStringLiteralContext, 0) as TextStringLiteralContext;
	}
	public REMOTE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.REMOTE_SYMBOL, 0);
	}
	public INSTANCE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.INSTANCE_SYMBOL, 0);
	}
	public FROM_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.FROM_SYMBOL, 0);
	}
	public user(): UserContext {
		return this.getTypedRuleContext(UserContext, 0) as UserContext;
	}
	public COLON_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.COLON_SYMBOL, 0);
	}
	public ulong_number(): Ulong_numberContext {
		return this.getTypedRuleContext(Ulong_numberContext, 0) as Ulong_numberContext;
	}
	public IDENTIFIED_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.IDENTIFIED_SYMBOL, 0);
	}
	public BY_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.BY_SYMBOL, 0);
	}
	public equal(): EqualContext {
		return this.getTypedRuleContext(EqualContext, 0) as EqualContext;
	}
	public FOR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.FOR_SYMBOL, 0);
	}
	public REPLICATION_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.REPLICATION_SYMBOL, 0);
	}
	public dataDirSSL(): DataDirSSLContext {
		return this.getTypedRuleContext(DataDirSSLContext, 0) as DataDirSSLContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_cloneStatement;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterCloneStatement) {
	 		listener.enterCloneStatement(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitCloneStatement) {
	 		listener.exitCloneStatement(this);
		}
	}
}


export class DataDirSSLContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public ssl(): SslContext {
		return this.getTypedRuleContext(SslContext, 0) as SslContext;
	}
	public DATA_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.DATA_SYMBOL, 0);
	}
	public DIRECTORY_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.DIRECTORY_SYMBOL, 0);
	}
	public textStringLiteral(): TextStringLiteralContext {
		return this.getTypedRuleContext(TextStringLiteralContext, 0) as TextStringLiteralContext;
	}
	public equal(): EqualContext {
		return this.getTypedRuleContext(EqualContext, 0) as EqualContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_dataDirSSL;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterDataDirSSL) {
	 		listener.enterDataDirSSL(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitDataDirSSL) {
	 		listener.exitDataDirSSL(this);
		}
	}
}


export class SslContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public REQUIRE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.REQUIRE_SYMBOL, 0);
	}
	public SSL_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SSL_SYMBOL, 0);
	}
	public NO_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.NO_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_ssl;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterSsl) {
	 		listener.enterSsl(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitSsl) {
	 		listener.exitSsl(this);
		}
	}
}


export class AccountManagementStatementContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public alterUser(): AlterUserContext {
		return this.getTypedRuleContext(AlterUserContext, 0) as AlterUserContext;
	}
	public createUser(): CreateUserContext {
		return this.getTypedRuleContext(CreateUserContext, 0) as CreateUserContext;
	}
	public dropUser(): DropUserContext {
		return this.getTypedRuleContext(DropUserContext, 0) as DropUserContext;
	}
	public grant(): GrantContext {
		return this.getTypedRuleContext(GrantContext, 0) as GrantContext;
	}
	public renameUser(): RenameUserContext {
		return this.getTypedRuleContext(RenameUserContext, 0) as RenameUserContext;
	}
	public revoke(): RevokeContext {
		return this.getTypedRuleContext(RevokeContext, 0) as RevokeContext;
	}
	public setRole(): SetRoleContext {
		return this.getTypedRuleContext(SetRoleContext, 0) as SetRoleContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_accountManagementStatement;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterAccountManagementStatement) {
	 		listener.enterAccountManagementStatement(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitAccountManagementStatement) {
	 		listener.exitAccountManagementStatement(this);
		}
	}
}


export class AlterUserContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public ALTER_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ALTER_SYMBOL, 0);
	}
	public USER_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.USER_SYMBOL, 0);
	}
	public alterUserTail(): AlterUserTailContext {
		return this.getTypedRuleContext(AlterUserTailContext, 0) as AlterUserTailContext;
	}
	public ifExists(): IfExistsContext {
		return this.getTypedRuleContext(IfExistsContext, 0) as IfExistsContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_alterUser;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterAlterUser) {
	 		listener.enterAlterUser(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitAlterUser) {
	 		listener.exitAlterUser(this);
		}
	}
}


export class AlterUserTailContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public createUserTail(): CreateUserTailContext {
		return this.getTypedRuleContext(CreateUserTailContext, 0) as CreateUserTailContext;
	}
	public createUserList(): CreateUserListContext {
		return this.getTypedRuleContext(CreateUserListContext, 0) as CreateUserListContext;
	}
	public alterUserList(): AlterUserListContext {
		return this.getTypedRuleContext(AlterUserListContext, 0) as AlterUserListContext;
	}
	public user(): UserContext {
		return this.getTypedRuleContext(UserContext, 0) as UserContext;
	}
	public IDENTIFIED_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.IDENTIFIED_SYMBOL, 0);
	}
	public BY_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.BY_SYMBOL, 0);
	}
	public textString(): TextStringContext {
		return this.getTypedRuleContext(TextStringContext, 0) as TextStringContext;
	}
	public replacePassword(): ReplacePasswordContext {
		return this.getTypedRuleContext(ReplacePasswordContext, 0) as ReplacePasswordContext;
	}
	public retainCurrentPassword(): RetainCurrentPasswordContext {
		return this.getTypedRuleContext(RetainCurrentPasswordContext, 0) as RetainCurrentPasswordContext;
	}
	public discardOldPassword(): DiscardOldPasswordContext {
		return this.getTypedRuleContext(DiscardOldPasswordContext, 0) as DiscardOldPasswordContext;
	}
	public DEFAULT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
	}
	public ROLE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ROLE_SYMBOL, 0);
	}
	public ALL_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ALL_SYMBOL, 0);
	}
	public NONE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.NONE_SYMBOL, 0);
	}
	public roleList(): RoleListContext {
		return this.getTypedRuleContext(RoleListContext, 0) as RoleListContext;
	}
	public RANDOM_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.RANDOM_SYMBOL, 0);
	}
	public PASSWORD_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.PASSWORD_SYMBOL, 0);
	}
	public WITH_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.WITH_SYMBOL, 0);
	}
	public textOrIdentifier(): TextOrIdentifierContext {
		return this.getTypedRuleContext(TextOrIdentifierContext, 0) as TextOrIdentifierContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_alterUserTail;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterAlterUserTail) {
	 		listener.enterAlterUserTail(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitAlterUserTail) {
	 		listener.exitAlterUserTail(this);
		}
	}
}


export class UserFunctionContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public USER_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.USER_SYMBOL, 0);
	}
	public parentheses(): ParenthesesContext {
		return this.getTypedRuleContext(ParenthesesContext, 0) as ParenthesesContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_userFunction;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterUserFunction) {
	 		listener.enterUserFunction(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitUserFunction) {
	 		listener.exitUserFunction(this);
		}
	}
}


export class CreateUserContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public CREATE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CREATE_SYMBOL, 0);
	}
	public USER_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.USER_SYMBOL, 0);
	}
	public createUserList(): CreateUserListContext {
		return this.getTypedRuleContext(CreateUserListContext, 0) as CreateUserListContext;
	}
	public defaultRoleClause(): DefaultRoleClauseContext {
		return this.getTypedRuleContext(DefaultRoleClauseContext, 0) as DefaultRoleClauseContext;
	}
	public createUserTail(): CreateUserTailContext {
		return this.getTypedRuleContext(CreateUserTailContext, 0) as CreateUserTailContext;
	}
	public ifNotExists(): IfNotExistsContext {
		return this.getTypedRuleContext(IfNotExistsContext, 0) as IfNotExistsContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_createUser;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterCreateUser) {
	 		listener.enterCreateUser(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitCreateUser) {
	 		listener.exitCreateUser(this);
		}
	}
}


export class CreateUserTailContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public requireClause(): RequireClauseContext {
		return this.getTypedRuleContext(RequireClauseContext, 0) as RequireClauseContext;
	}
	public connectOptions(): ConnectOptionsContext {
		return this.getTypedRuleContext(ConnectOptionsContext, 0) as ConnectOptionsContext;
	}
	public accountLockPasswordExpireOptions_list(): AccountLockPasswordExpireOptionsContext[] {
		return this.getTypedRuleContexts(AccountLockPasswordExpireOptionsContext) as AccountLockPasswordExpireOptionsContext[];
	}
	public accountLockPasswordExpireOptions(i: number): AccountLockPasswordExpireOptionsContext {
		return this.getTypedRuleContext(AccountLockPasswordExpireOptionsContext, i) as AccountLockPasswordExpireOptionsContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_createUserTail;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterCreateUserTail) {
	 		listener.enterCreateUserTail(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitCreateUserTail) {
	 		listener.exitCreateUserTail(this);
		}
	}
}


export class DefaultRoleClauseContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public DEFAULT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
	}
	public ROLE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ROLE_SYMBOL, 0);
	}
	public roleList(): RoleListContext {
		return this.getTypedRuleContext(RoleListContext, 0) as RoleListContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_defaultRoleClause;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterDefaultRoleClause) {
	 		listener.enterDefaultRoleClause(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitDefaultRoleClause) {
	 		listener.exitDefaultRoleClause(this);
		}
	}
}


export class RequireClauseContext extends ParserRuleContext {
	public _option!: Token;
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public REQUIRE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.REQUIRE_SYMBOL, 0);
	}
	public requireList(): RequireListContext {
		return this.getTypedRuleContext(RequireListContext, 0) as RequireListContext;
	}
	public SSL_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SSL_SYMBOL, 0);
	}
	public X509_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.X509_SYMBOL, 0);
	}
	public NONE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.NONE_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_requireClause;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterRequireClause) {
	 		listener.enterRequireClause(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitRequireClause) {
	 		listener.exitRequireClause(this);
		}
	}
}


export class ConnectOptionsContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public WITH_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.WITH_SYMBOL, 0);
	}
	public MAX_QUERIES_PER_HOUR_SYMBOL_list(): TerminalNode[] {
	    	return this.getTokens(MySQLParser.MAX_QUERIES_PER_HOUR_SYMBOL);
	}
	public MAX_QUERIES_PER_HOUR_SYMBOL(i: number): TerminalNode {
		return this.getToken(MySQLParser.MAX_QUERIES_PER_HOUR_SYMBOL, i);
	}
	public ulong_number_list(): Ulong_numberContext[] {
		return this.getTypedRuleContexts(Ulong_numberContext) as Ulong_numberContext[];
	}
	public ulong_number(i: number): Ulong_numberContext {
		return this.getTypedRuleContext(Ulong_numberContext, i) as Ulong_numberContext;
	}
	public MAX_UPDATES_PER_HOUR_SYMBOL_list(): TerminalNode[] {
	    	return this.getTokens(MySQLParser.MAX_UPDATES_PER_HOUR_SYMBOL);
	}
	public MAX_UPDATES_PER_HOUR_SYMBOL(i: number): TerminalNode {
		return this.getToken(MySQLParser.MAX_UPDATES_PER_HOUR_SYMBOL, i);
	}
	public MAX_CONNECTIONS_PER_HOUR_SYMBOL_list(): TerminalNode[] {
	    	return this.getTokens(MySQLParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL);
	}
	public MAX_CONNECTIONS_PER_HOUR_SYMBOL(i: number): TerminalNode {
		return this.getToken(MySQLParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL, i);
	}
	public MAX_USER_CONNECTIONS_SYMBOL_list(): TerminalNode[] {
	    	return this.getTokens(MySQLParser.MAX_USER_CONNECTIONS_SYMBOL);
	}
	public MAX_USER_CONNECTIONS_SYMBOL(i: number): TerminalNode {
		return this.getToken(MySQLParser.MAX_USER_CONNECTIONS_SYMBOL, i);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_connectOptions;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterConnectOptions) {
	 		listener.enterConnectOptions(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitConnectOptions) {
	 		listener.exitConnectOptions(this);
		}
	}
}


export class AccountLockPasswordExpireOptionsContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public ACCOUNT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ACCOUNT_SYMBOL, 0);
	}
	public LOCK_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.LOCK_SYMBOL, 0);
	}
	public UNLOCK_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.UNLOCK_SYMBOL, 0);
	}
	public PASSWORD_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.PASSWORD_SYMBOL, 0);
	}
	public EXPIRE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.EXPIRE_SYMBOL, 0);
	}
	public HISTORY_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.HISTORY_SYMBOL, 0);
	}
	public REUSE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.REUSE_SYMBOL, 0);
	}
	public INTERVAL_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.INTERVAL_SYMBOL, 0);
	}
	public REQUIRE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.REQUIRE_SYMBOL, 0);
	}
	public CURRENT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CURRENT_SYMBOL, 0);
	}
	public real_ulong_number(): Real_ulong_numberContext {
		return this.getTypedRuleContext(Real_ulong_numberContext, 0) as Real_ulong_numberContext;
	}
	public DEFAULT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
	}
	public DAY_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.DAY_SYMBOL, 0);
	}
	public NEVER_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.NEVER_SYMBOL, 0);
	}
	public OPTIONAL_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.OPTIONAL_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_accountLockPasswordExpireOptions;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterAccountLockPasswordExpireOptions) {
	 		listener.enterAccountLockPasswordExpireOptions(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitAccountLockPasswordExpireOptions) {
	 		listener.exitAccountLockPasswordExpireOptions(this);
		}
	}
}


export class DropUserContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public DROP_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.DROP_SYMBOL, 0);
	}
	public USER_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.USER_SYMBOL, 0);
	}
	public userList(): UserListContext {
		return this.getTypedRuleContext(UserListContext, 0) as UserListContext;
	}
	public ifExists(): IfExistsContext {
		return this.getTypedRuleContext(IfExistsContext, 0) as IfExistsContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_dropUser;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterDropUser) {
	 		listener.enterDropUser(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitDropUser) {
	 		listener.exitDropUser(this);
		}
	}
}


export class GrantContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public GRANT_SYMBOL_list(): TerminalNode[] {
	    	return this.getTokens(MySQLParser.GRANT_SYMBOL);
	}
	public GRANT_SYMBOL(i: number): TerminalNode {
		return this.getToken(MySQLParser.GRANT_SYMBOL, i);
	}
	public roleOrPrivilegesList(): RoleOrPrivilegesListContext {
		return this.getTypedRuleContext(RoleOrPrivilegesListContext, 0) as RoleOrPrivilegesListContext;
	}
	public TO_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.TO_SYMBOL, 0);
	}
	public userList(): UserListContext {
		return this.getTypedRuleContext(UserListContext, 0) as UserListContext;
	}
	public ON_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ON_SYMBOL, 0);
	}
	public grantIdentifier(): GrantIdentifierContext {
		return this.getTypedRuleContext(GrantIdentifierContext, 0) as GrantIdentifierContext;
	}
	public grantTargetList(): GrantTargetListContext {
		return this.getTypedRuleContext(GrantTargetListContext, 0) as GrantTargetListContext;
	}
	public PROXY_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.PROXY_SYMBOL, 0);
	}
	public user(): UserContext {
		return this.getTypedRuleContext(UserContext, 0) as UserContext;
	}
	public ALL_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ALL_SYMBOL, 0);
	}
	public WITH_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.WITH_SYMBOL, 0);
	}
	public ADMIN_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ADMIN_SYMBOL, 0);
	}
	public OPTION_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.OPTION_SYMBOL, 0);
	}
	public aclType(): AclTypeContext {
		return this.getTypedRuleContext(AclTypeContext, 0) as AclTypeContext;
	}
	public versionedRequireClause(): VersionedRequireClauseContext {
		return this.getTypedRuleContext(VersionedRequireClauseContext, 0) as VersionedRequireClauseContext;
	}
	public grantOptions(): GrantOptionsContext {
		return this.getTypedRuleContext(GrantOptionsContext, 0) as GrantOptionsContext;
	}
	public grantAs(): GrantAsContext {
		return this.getTypedRuleContext(GrantAsContext, 0) as GrantAsContext;
	}
	public PRIVILEGES_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.PRIVILEGES_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_grant;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterGrant) {
	 		listener.enterGrant(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitGrant) {
	 		listener.exitGrant(this);
		}
	}
}


export class GrantTargetListContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public createUserList(): CreateUserListContext {
		return this.getTypedRuleContext(CreateUserListContext, 0) as CreateUserListContext;
	}
	public userList(): UserListContext {
		return this.getTypedRuleContext(UserListContext, 0) as UserListContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_grantTargetList;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterGrantTargetList) {
	 		listener.enterGrantTargetList(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitGrantTargetList) {
	 		listener.exitGrantTargetList(this);
		}
	}
}


export class GrantOptionsContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public WITH_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.WITH_SYMBOL, 0);
	}
	public grantOption_list(): GrantOptionContext[] {
		return this.getTypedRuleContexts(GrantOptionContext) as GrantOptionContext[];
	}
	public grantOption(i: number): GrantOptionContext {
		return this.getTypedRuleContext(GrantOptionContext, i) as GrantOptionContext;
	}
	public GRANT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.GRANT_SYMBOL, 0);
	}
	public OPTION_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.OPTION_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_grantOptions;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterGrantOptions) {
	 		listener.enterGrantOptions(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitGrantOptions) {
	 		listener.exitGrantOptions(this);
		}
	}
}


export class ExceptRoleListContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public EXCEPT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.EXCEPT_SYMBOL, 0);
	}
	public roleList(): RoleListContext {
		return this.getTypedRuleContext(RoleListContext, 0) as RoleListContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_exceptRoleList;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterExceptRoleList) {
	 		listener.enterExceptRoleList(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitExceptRoleList) {
	 		listener.exitExceptRoleList(this);
		}
	}
}


export class WithRolesContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public WITH_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.WITH_SYMBOL, 0);
	}
	public ROLE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ROLE_SYMBOL, 0);
	}
	public roleList(): RoleListContext {
		return this.getTypedRuleContext(RoleListContext, 0) as RoleListContext;
	}
	public ALL_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ALL_SYMBOL, 0);
	}
	public NONE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.NONE_SYMBOL, 0);
	}
	public DEFAULT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
	}
	public exceptRoleList(): ExceptRoleListContext {
		return this.getTypedRuleContext(ExceptRoleListContext, 0) as ExceptRoleListContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_withRoles;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterWithRoles) {
	 		listener.enterWithRoles(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitWithRoles) {
	 		listener.exitWithRoles(this);
		}
	}
}


export class GrantAsContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public AS_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.AS_SYMBOL, 0);
	}
	public USER_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.USER_SYMBOL, 0);
	}
	public withRoles(): WithRolesContext {
		return this.getTypedRuleContext(WithRolesContext, 0) as WithRolesContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_grantAs;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterGrantAs) {
	 		listener.enterGrantAs(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitGrantAs) {
	 		listener.exitGrantAs(this);
		}
	}
}


export class VersionedRequireClauseContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public requireClause(): RequireClauseContext {
		return this.getTypedRuleContext(RequireClauseContext, 0) as RequireClauseContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_versionedRequireClause;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterVersionedRequireClause) {
	 		listener.enterVersionedRequireClause(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitVersionedRequireClause) {
	 		listener.exitVersionedRequireClause(this);
		}
	}
}


export class RenameUserContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public RENAME_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.RENAME_SYMBOL, 0);
	}
	public USER_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.USER_SYMBOL, 0);
	}
	public user_list(): UserContext[] {
		return this.getTypedRuleContexts(UserContext) as UserContext[];
	}
	public user(i: number): UserContext {
		return this.getTypedRuleContext(UserContext, i) as UserContext;
	}
	public TO_SYMBOL_list(): TerminalNode[] {
	    	return this.getTokens(MySQLParser.TO_SYMBOL);
	}
	public TO_SYMBOL(i: number): TerminalNode {
		return this.getToken(MySQLParser.TO_SYMBOL, i);
	}
	public COMMA_SYMBOL_list(): TerminalNode[] {
	    	return this.getTokens(MySQLParser.COMMA_SYMBOL);
	}
	public COMMA_SYMBOL(i: number): TerminalNode {
		return this.getToken(MySQLParser.COMMA_SYMBOL, i);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_renameUser;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterRenameUser) {
	 		listener.enterRenameUser(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitRenameUser) {
	 		listener.exitRenameUser(this);
		}
	}
}


export class RevokeContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public REVOKE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.REVOKE_SYMBOL, 0);
	}
	public roleOrPrivilegesList(): RoleOrPrivilegesListContext {
		return this.getTypedRuleContext(RoleOrPrivilegesListContext, 0) as RoleOrPrivilegesListContext;
	}
	public FROM_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.FROM_SYMBOL, 0);
	}
	public userList(): UserListContext {
		return this.getTypedRuleContext(UserListContext, 0) as UserListContext;
	}
	public onTypeTo(): OnTypeToContext {
		return this.getTypedRuleContext(OnTypeToContext, 0) as OnTypeToContext;
	}
	public ALL_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ALL_SYMBOL, 0);
	}
	public PROXY_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.PROXY_SYMBOL, 0);
	}
	public ON_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ON_SYMBOL, 0);
	}
	public user(): UserContext {
		return this.getTypedRuleContext(UserContext, 0) as UserContext;
	}
	public grantIdentifier(): GrantIdentifierContext {
		return this.getTypedRuleContext(GrantIdentifierContext, 0) as GrantIdentifierContext;
	}
	public COMMA_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.COMMA_SYMBOL, 0);
	}
	public GRANT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.GRANT_SYMBOL, 0);
	}
	public OPTION_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.OPTION_SYMBOL, 0);
	}
	public PRIVILEGES_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.PRIVILEGES_SYMBOL, 0);
	}
	public aclType(): AclTypeContext {
		return this.getTypedRuleContext(AclTypeContext, 0) as AclTypeContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_revoke;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterRevoke) {
	 		listener.enterRevoke(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitRevoke) {
	 		listener.exitRevoke(this);
		}
	}
}


export class OnTypeToContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public ON_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ON_SYMBOL, 0);
	}
	public grantIdentifier(): GrantIdentifierContext {
		return this.getTypedRuleContext(GrantIdentifierContext, 0) as GrantIdentifierContext;
	}
	public aclType(): AclTypeContext {
		return this.getTypedRuleContext(AclTypeContext, 0) as AclTypeContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_onTypeTo;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterOnTypeTo) {
	 		listener.enterOnTypeTo(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitOnTypeTo) {
	 		listener.exitOnTypeTo(this);
		}
	}
}


export class AclTypeContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public TABLE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.TABLE_SYMBOL, 0);
	}
	public FUNCTION_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.FUNCTION_SYMBOL, 0);
	}
	public PROCEDURE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.PROCEDURE_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_aclType;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterAclType) {
	 		listener.enterAclType(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitAclType) {
	 		listener.exitAclType(this);
		}
	}
}


export class RoleOrPrivilegesListContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public roleOrPrivilege_list(): RoleOrPrivilegeContext[] {
		return this.getTypedRuleContexts(RoleOrPrivilegeContext) as RoleOrPrivilegeContext[];
	}
	public roleOrPrivilege(i: number): RoleOrPrivilegeContext {
		return this.getTypedRuleContext(RoleOrPrivilegeContext, i) as RoleOrPrivilegeContext;
	}
	public COMMA_SYMBOL_list(): TerminalNode[] {
	    	return this.getTokens(MySQLParser.COMMA_SYMBOL);
	}
	public COMMA_SYMBOL(i: number): TerminalNode {
		return this.getToken(MySQLParser.COMMA_SYMBOL, i);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_roleOrPrivilegesList;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterRoleOrPrivilegesList) {
	 		listener.enterRoleOrPrivilegesList(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitRoleOrPrivilegesList) {
	 		listener.exitRoleOrPrivilegesList(this);
		}
	}
}


export class RoleOrPrivilegeContext extends ParserRuleContext {
	public _object!: Token;
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public roleIdentifierOrText(): RoleIdentifierOrTextContext {
		return this.getTypedRuleContext(RoleIdentifierOrTextContext, 0) as RoleIdentifierOrTextContext;
	}
	public AT_TEXT_SUFFIX(): TerminalNode {
		return this.getToken(MySQLParser.AT_TEXT_SUFFIX, 0);
	}
	public AT_SIGN_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.AT_SIGN_SYMBOL, 0);
	}
	public textOrIdentifier(): TextOrIdentifierContext {
		return this.getTypedRuleContext(TextOrIdentifierContext, 0) as TextOrIdentifierContext;
	}
	public columnInternalRefList(): ColumnInternalRefListContext {
		return this.getTypedRuleContext(ColumnInternalRefListContext, 0) as ColumnInternalRefListContext;
	}
	public SELECT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SELECT_SYMBOL, 0);
	}
	public INSERT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.INSERT_SYMBOL, 0);
	}
	public UPDATE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.UPDATE_SYMBOL, 0);
	}
	public REFERENCES_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.REFERENCES_SYMBOL, 0);
	}
	public DELETE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.DELETE_SYMBOL, 0);
	}
	public USAGE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.USAGE_SYMBOL, 0);
	}
	public INDEX_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.INDEX_SYMBOL, 0);
	}
	public DROP_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.DROP_SYMBOL, 0);
	}
	public EXECUTE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.EXECUTE_SYMBOL, 0);
	}
	public RELOAD_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.RELOAD_SYMBOL, 0);
	}
	public SHUTDOWN_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SHUTDOWN_SYMBOL, 0);
	}
	public PROCESS_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.PROCESS_SYMBOL, 0);
	}
	public FILE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.FILE_SYMBOL, 0);
	}
	public PROXY_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.PROXY_SYMBOL, 0);
	}
	public SUPER_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SUPER_SYMBOL, 0);
	}
	public EVENT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.EVENT_SYMBOL, 0);
	}
	public TRIGGER_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.TRIGGER_SYMBOL, 0);
	}
	public GRANT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.GRANT_SYMBOL, 0);
	}
	public OPTION_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.OPTION_SYMBOL, 0);
	}
	public SHOW_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SHOW_SYMBOL, 0);
	}
	public DATABASES_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.DATABASES_SYMBOL, 0);
	}
	public CREATE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CREATE_SYMBOL, 0);
	}
	public TEMPORARY_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.TEMPORARY_SYMBOL, 0);
	}
	public TABLES_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.TABLES_SYMBOL, 0);
	}
	public ROUTINE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ROUTINE_SYMBOL, 0);
	}
	public TABLESPACE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.TABLESPACE_SYMBOL, 0);
	}
	public USER_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.USER_SYMBOL, 0);
	}
	public VIEW_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.VIEW_SYMBOL, 0);
	}
	public LOCK_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.LOCK_SYMBOL, 0);
	}
	public REPLICATION_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.REPLICATION_SYMBOL, 0);
	}
	public CLIENT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CLIENT_SYMBOL, 0);
	}
	public SLAVE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SLAVE_SYMBOL, 0);
	}
	public ALTER_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ALTER_SYMBOL, 0);
	}
	public ROLE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ROLE_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_roleOrPrivilege;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterRoleOrPrivilege) {
	 		listener.enterRoleOrPrivilege(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitRoleOrPrivilege) {
	 		listener.exitRoleOrPrivilege(this);
		}
	}
}


export class GrantIdentifierContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public MULT_OPERATOR_list(): TerminalNode[] {
	    	return this.getTokens(MySQLParser.MULT_OPERATOR);
	}
	public MULT_OPERATOR(i: number): TerminalNode {
		return this.getToken(MySQLParser.MULT_OPERATOR, i);
	}
	public DOT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.DOT_SYMBOL, 0);
	}
	public schemaRef(): SchemaRefContext {
		return this.getTypedRuleContext(SchemaRefContext, 0) as SchemaRefContext;
	}
	public tableRef(): TableRefContext {
		return this.getTypedRuleContext(TableRefContext, 0) as TableRefContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_grantIdentifier;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterGrantIdentifier) {
	 		listener.enterGrantIdentifier(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitGrantIdentifier) {
	 		listener.exitGrantIdentifier(this);
		}
	}
}


export class RequireListContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public requireListElement_list(): RequireListElementContext[] {
		return this.getTypedRuleContexts(RequireListElementContext) as RequireListElementContext[];
	}
	public requireListElement(i: number): RequireListElementContext {
		return this.getTypedRuleContext(RequireListElementContext, i) as RequireListElementContext;
	}
	public AND_SYMBOL_list(): TerminalNode[] {
	    	return this.getTokens(MySQLParser.AND_SYMBOL);
	}
	public AND_SYMBOL(i: number): TerminalNode {
		return this.getToken(MySQLParser.AND_SYMBOL, i);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_requireList;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterRequireList) {
	 		listener.enterRequireList(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitRequireList) {
	 		listener.exitRequireList(this);
		}
	}
}


export class RequireListElementContext extends ParserRuleContext {
	public _element!: Token;
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public textString(): TextStringContext {
		return this.getTypedRuleContext(TextStringContext, 0) as TextStringContext;
	}
	public CIPHER_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CIPHER_SYMBOL, 0);
	}
	public ISSUER_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ISSUER_SYMBOL, 0);
	}
	public SUBJECT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SUBJECT_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_requireListElement;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterRequireListElement) {
	 		listener.enterRequireListElement(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitRequireListElement) {
	 		listener.exitRequireListElement(this);
		}
	}
}


export class GrantOptionContext extends ParserRuleContext {
	public _option!: Token;
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public OPTION_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.OPTION_SYMBOL, 0);
	}
	public GRANT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.GRANT_SYMBOL, 0);
	}
	public ulong_number(): Ulong_numberContext {
		return this.getTypedRuleContext(Ulong_numberContext, 0) as Ulong_numberContext;
	}
	public MAX_QUERIES_PER_HOUR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.MAX_QUERIES_PER_HOUR_SYMBOL, 0);
	}
	public MAX_UPDATES_PER_HOUR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.MAX_UPDATES_PER_HOUR_SYMBOL, 0);
	}
	public MAX_CONNECTIONS_PER_HOUR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL, 0);
	}
	public MAX_USER_CONNECTIONS_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.MAX_USER_CONNECTIONS_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_grantOption;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterGrantOption) {
	 		listener.enterGrantOption(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitGrantOption) {
	 		listener.exitGrantOption(this);
		}
	}
}


export class SetRoleContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public SET_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SET_SYMBOL, 0);
	}
	public ROLE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ROLE_SYMBOL, 0);
	}
	public roleList_list(): RoleListContext[] {
		return this.getTypedRuleContexts(RoleListContext) as RoleListContext[];
	}
	public roleList(i: number): RoleListContext {
		return this.getTypedRuleContext(RoleListContext, i) as RoleListContext;
	}
	public NONE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.NONE_SYMBOL, 0);
	}
	public DEFAULT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
	}
	public TO_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.TO_SYMBOL, 0);
	}
	public ALL_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ALL_SYMBOL, 0);
	}
	public EXCEPT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.EXCEPT_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_setRole;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterSetRole) {
	 		listener.enterSetRole(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitSetRole) {
	 		listener.exitSetRole(this);
		}
	}
}


export class RoleListContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public role_list(): RoleContext[] {
		return this.getTypedRuleContexts(RoleContext) as RoleContext[];
	}
	public role(i: number): RoleContext {
		return this.getTypedRuleContext(RoleContext, i) as RoleContext;
	}
	public COMMA_SYMBOL_list(): TerminalNode[] {
	    	return this.getTokens(MySQLParser.COMMA_SYMBOL);
	}
	public COMMA_SYMBOL(i: number): TerminalNode {
		return this.getToken(MySQLParser.COMMA_SYMBOL, i);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_roleList;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterRoleList) {
	 		listener.enterRoleList(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitRoleList) {
	 		listener.exitRoleList(this);
		}
	}
}


export class RoleContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public roleIdentifierOrText(): RoleIdentifierOrTextContext {
		return this.getTypedRuleContext(RoleIdentifierOrTextContext, 0) as RoleIdentifierOrTextContext;
	}
	public AT_SIGN_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.AT_SIGN_SYMBOL, 0);
	}
	public textOrIdentifier(): TextOrIdentifierContext {
		return this.getTypedRuleContext(TextOrIdentifierContext, 0) as TextOrIdentifierContext;
	}
	public AT_TEXT_SUFFIX(): TerminalNode {
		return this.getToken(MySQLParser.AT_TEXT_SUFFIX, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_role;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterRole) {
	 		listener.enterRole(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitRole) {
	 		listener.exitRole(this);
		}
	}
}


export class TableAdministrationStatementContext extends ParserRuleContext {
	public _type_!: Token;
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public TABLE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.TABLE_SYMBOL, 0);
	}
	public tableRefList(): TableRefListContext {
		return this.getTypedRuleContext(TableRefListContext, 0) as TableRefListContext;
	}
	public ANALYZE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ANALYZE_SYMBOL, 0);
	}
	public noWriteToBinLog(): NoWriteToBinLogContext {
		return this.getTypedRuleContext(NoWriteToBinLogContext, 0) as NoWriteToBinLogContext;
	}
	public histogram(): HistogramContext {
		return this.getTypedRuleContext(HistogramContext, 0) as HistogramContext;
	}
	public CHECK_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CHECK_SYMBOL, 0);
	}
	public checkOption_list(): CheckOptionContext[] {
		return this.getTypedRuleContexts(CheckOptionContext) as CheckOptionContext[];
	}
	public checkOption(i: number): CheckOptionContext {
		return this.getTypedRuleContext(CheckOptionContext, i) as CheckOptionContext;
	}
	public CHECKSUM_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CHECKSUM_SYMBOL, 0);
	}
	public QUICK_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.QUICK_SYMBOL, 0);
	}
	public EXTENDED_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.EXTENDED_SYMBOL, 0);
	}
	public OPTIMIZE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.OPTIMIZE_SYMBOL, 0);
	}
	public REPAIR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.REPAIR_SYMBOL, 0);
	}
	public repairType_list(): RepairTypeContext[] {
		return this.getTypedRuleContexts(RepairTypeContext) as RepairTypeContext[];
	}
	public repairType(i: number): RepairTypeContext {
		return this.getTypedRuleContext(RepairTypeContext, i) as RepairTypeContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_tableAdministrationStatement;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterTableAdministrationStatement) {
	 		listener.enterTableAdministrationStatement(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitTableAdministrationStatement) {
	 		listener.exitTableAdministrationStatement(this);
		}
	}
}


export class HistogramContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public UPDATE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.UPDATE_SYMBOL, 0);
	}
	public HISTOGRAM_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.HISTOGRAM_SYMBOL, 0);
	}
	public ON_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ON_SYMBOL, 0);
	}
	public identifierList(): IdentifierListContext {
		return this.getTypedRuleContext(IdentifierListContext, 0) as IdentifierListContext;
	}
	public WITH_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.WITH_SYMBOL, 0);
	}
	public INT_NUMBER(): TerminalNode {
		return this.getToken(MySQLParser.INT_NUMBER, 0);
	}
	public BUCKETS_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.BUCKETS_SYMBOL, 0);
	}
	public DROP_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.DROP_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_histogram;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterHistogram) {
	 		listener.enterHistogram(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitHistogram) {
	 		listener.exitHistogram(this);
		}
	}
}


export class CheckOptionContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public FOR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.FOR_SYMBOL, 0);
	}
	public UPGRADE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.UPGRADE_SYMBOL, 0);
	}
	public QUICK_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.QUICK_SYMBOL, 0);
	}
	public FAST_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.FAST_SYMBOL, 0);
	}
	public MEDIUM_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.MEDIUM_SYMBOL, 0);
	}
	public EXTENDED_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.EXTENDED_SYMBOL, 0);
	}
	public CHANGED_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CHANGED_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_checkOption;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterCheckOption) {
	 		listener.enterCheckOption(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitCheckOption) {
	 		listener.exitCheckOption(this);
		}
	}
}


export class RepairTypeContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public QUICK_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.QUICK_SYMBOL, 0);
	}
	public EXTENDED_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.EXTENDED_SYMBOL, 0);
	}
	public USE_FRM_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.USE_FRM_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_repairType;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterRepairType) {
	 		listener.enterRepairType(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitRepairType) {
	 		listener.exitRepairType(this);
		}
	}
}


export class InstallUninstallStatmentContext extends ParserRuleContext {
	public _action!: Token;
	public _type_!: Token;
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public identifier(): IdentifierContext {
		return this.getTypedRuleContext(IdentifierContext, 0) as IdentifierContext;
	}
	public SONAME_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SONAME_SYMBOL, 0);
	}
	public textStringLiteral(): TextStringLiteralContext {
		return this.getTypedRuleContext(TextStringLiteralContext, 0) as TextStringLiteralContext;
	}
	public INSTALL_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.INSTALL_SYMBOL, 0);
	}
	public PLUGIN_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.PLUGIN_SYMBOL, 0);
	}
	public textStringLiteralList(): TextStringLiteralListContext {
		return this.getTypedRuleContext(TextStringLiteralListContext, 0) as TextStringLiteralListContext;
	}
	public COMPONENT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.COMPONENT_SYMBOL, 0);
	}
	public pluginRef(): PluginRefContext {
		return this.getTypedRuleContext(PluginRefContext, 0) as PluginRefContext;
	}
	public UNINSTALL_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.UNINSTALL_SYMBOL, 0);
	}
	public componentRef_list(): ComponentRefContext[] {
		return this.getTypedRuleContexts(ComponentRefContext) as ComponentRefContext[];
	}
	public componentRef(i: number): ComponentRefContext {
		return this.getTypedRuleContext(ComponentRefContext, i) as ComponentRefContext;
	}
	public COMMA_SYMBOL_list(): TerminalNode[] {
	    	return this.getTokens(MySQLParser.COMMA_SYMBOL);
	}
	public COMMA_SYMBOL(i: number): TerminalNode {
		return this.getToken(MySQLParser.COMMA_SYMBOL, i);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_installUninstallStatment;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterInstallUninstallStatment) {
	 		listener.enterInstallUninstallStatment(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitInstallUninstallStatment) {
	 		listener.exitInstallUninstallStatment(this);
		}
	}
}


export class SetStatementContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public SET_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SET_SYMBOL, 0);
	}
	public startOptionValueList(): StartOptionValueListContext {
		return this.getTypedRuleContext(StartOptionValueListContext, 0) as StartOptionValueListContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_setStatement;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterSetStatement) {
	 		listener.enterSetStatement(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitSetStatement) {
	 		listener.exitSetStatement(this);
		}
	}
}


export class StartOptionValueListContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public optionValueNoOptionType(): OptionValueNoOptionTypeContext {
		return this.getTypedRuleContext(OptionValueNoOptionTypeContext, 0) as OptionValueNoOptionTypeContext;
	}
	public optionValueListContinued(): OptionValueListContinuedContext {
		return this.getTypedRuleContext(OptionValueListContinuedContext, 0) as OptionValueListContinuedContext;
	}
	public TRANSACTION_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.TRANSACTION_SYMBOL, 0);
	}
	public transactionCharacteristics(): TransactionCharacteristicsContext {
		return this.getTypedRuleContext(TransactionCharacteristicsContext, 0) as TransactionCharacteristicsContext;
	}
	public optionType(): OptionTypeContext {
		return this.getTypedRuleContext(OptionTypeContext, 0) as OptionTypeContext;
	}
	public startOptionValueListFollowingOptionType(): StartOptionValueListFollowingOptionTypeContext {
		return this.getTypedRuleContext(StartOptionValueListFollowingOptionTypeContext, 0) as StartOptionValueListFollowingOptionTypeContext;
	}
	public PASSWORD_SYMBOL_list(): TerminalNode[] {
	    	return this.getTokens(MySQLParser.PASSWORD_SYMBOL);
	}
	public PASSWORD_SYMBOL(i: number): TerminalNode {
		return this.getToken(MySQLParser.PASSWORD_SYMBOL, i);
	}
	public equal(): EqualContext {
		return this.getTypedRuleContext(EqualContext, 0) as EqualContext;
	}
	public textString(): TextStringContext {
		return this.getTypedRuleContext(TextStringContext, 0) as TextStringContext;
	}
	public OLD_PASSWORD_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.OLD_PASSWORD_SYMBOL, 0);
	}
	public OPEN_PAR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
	}
	public CLOSE_PAR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
	}
	public FOR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.FOR_SYMBOL, 0);
	}
	public user(): UserContext {
		return this.getTypedRuleContext(UserContext, 0) as UserContext;
	}
	public replacePassword(): ReplacePasswordContext {
		return this.getTypedRuleContext(ReplacePasswordContext, 0) as ReplacePasswordContext;
	}
	public retainCurrentPassword(): RetainCurrentPasswordContext {
		return this.getTypedRuleContext(RetainCurrentPasswordContext, 0) as RetainCurrentPasswordContext;
	}
	public TO_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.TO_SYMBOL, 0);
	}
	public RANDOM_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.RANDOM_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_startOptionValueList;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterStartOptionValueList) {
	 		listener.enterStartOptionValueList(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitStartOptionValueList) {
	 		listener.exitStartOptionValueList(this);
		}
	}
}


export class TransactionCharacteristicsContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public transactionAccessMode(): TransactionAccessModeContext {
		return this.getTypedRuleContext(TransactionAccessModeContext, 0) as TransactionAccessModeContext;
	}
	public isolationLevel(): IsolationLevelContext {
		return this.getTypedRuleContext(IsolationLevelContext, 0) as IsolationLevelContext;
	}
	public COMMA_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.COMMA_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_transactionCharacteristics;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterTransactionCharacteristics) {
	 		listener.enterTransactionCharacteristics(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitTransactionCharacteristics) {
	 		listener.exitTransactionCharacteristics(this);
		}
	}
}


export class TransactionAccessModeContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public READ_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.READ_SYMBOL, 0);
	}
	public WRITE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.WRITE_SYMBOL, 0);
	}
	public ONLY_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ONLY_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_transactionAccessMode;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterTransactionAccessMode) {
	 		listener.enterTransactionAccessMode(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitTransactionAccessMode) {
	 		listener.exitTransactionAccessMode(this);
		}
	}
}


export class IsolationLevelContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public ISOLATION_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ISOLATION_SYMBOL, 0);
	}
	public LEVEL_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.LEVEL_SYMBOL, 0);
	}
	public REPEATABLE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.REPEATABLE_SYMBOL, 0);
	}
	public READ_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.READ_SYMBOL, 0);
	}
	public SERIALIZABLE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SERIALIZABLE_SYMBOL, 0);
	}
	public COMMITTED_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.COMMITTED_SYMBOL, 0);
	}
	public UNCOMMITTED_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.UNCOMMITTED_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_isolationLevel;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterIsolationLevel) {
	 		listener.enterIsolationLevel(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitIsolationLevel) {
	 		listener.exitIsolationLevel(this);
		}
	}
}


export class OptionValueListContinuedContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public COMMA_SYMBOL_list(): TerminalNode[] {
	    	return this.getTokens(MySQLParser.COMMA_SYMBOL);
	}
	public COMMA_SYMBOL(i: number): TerminalNode {
		return this.getToken(MySQLParser.COMMA_SYMBOL, i);
	}
	public optionValue_list(): OptionValueContext[] {
		return this.getTypedRuleContexts(OptionValueContext) as OptionValueContext[];
	}
	public optionValue(i: number): OptionValueContext {
		return this.getTypedRuleContext(OptionValueContext, i) as OptionValueContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_optionValueListContinued;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterOptionValueListContinued) {
	 		listener.enterOptionValueListContinued(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitOptionValueListContinued) {
	 		listener.exitOptionValueListContinued(this);
		}
	}
}


export class OptionValueNoOptionTypeContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public internalVariableName(): InternalVariableNameContext {
		return this.getTypedRuleContext(InternalVariableNameContext, 0) as InternalVariableNameContext;
	}
	public equal(): EqualContext {
		return this.getTypedRuleContext(EqualContext, 0) as EqualContext;
	}
	public setExprOrDefault(): SetExprOrDefaultContext {
		return this.getTypedRuleContext(SetExprOrDefaultContext, 0) as SetExprOrDefaultContext;
	}
	public charsetClause(): CharsetClauseContext {
		return this.getTypedRuleContext(CharsetClauseContext, 0) as CharsetClauseContext;
	}
	public userVariable(): UserVariableContext {
		return this.getTypedRuleContext(UserVariableContext, 0) as UserVariableContext;
	}
	public expr(): ExprContext {
		return this.getTypedRuleContext(ExprContext, 0) as ExprContext;
	}
	public setSystemVariable(): SetSystemVariableContext {
		return this.getTypedRuleContext(SetSystemVariableContext, 0) as SetSystemVariableContext;
	}
	public NAMES_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.NAMES_SYMBOL, 0);
	}
	public charsetName(): CharsetNameContext {
		return this.getTypedRuleContext(CharsetNameContext, 0) as CharsetNameContext;
	}
	public DEFAULT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
	}
	public collate(): CollateContext {
		return this.getTypedRuleContext(CollateContext, 0) as CollateContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_optionValueNoOptionType;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterOptionValueNoOptionType) {
	 		listener.enterOptionValueNoOptionType(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitOptionValueNoOptionType) {
	 		listener.exitOptionValueNoOptionType(this);
		}
	}
}


export class OptionValueContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public optionType(): OptionTypeContext {
		return this.getTypedRuleContext(OptionTypeContext, 0) as OptionTypeContext;
	}
	public internalVariableName(): InternalVariableNameContext {
		return this.getTypedRuleContext(InternalVariableNameContext, 0) as InternalVariableNameContext;
	}
	public equal(): EqualContext {
		return this.getTypedRuleContext(EqualContext, 0) as EqualContext;
	}
	public setExprOrDefault(): SetExprOrDefaultContext {
		return this.getTypedRuleContext(SetExprOrDefaultContext, 0) as SetExprOrDefaultContext;
	}
	public optionValueNoOptionType(): OptionValueNoOptionTypeContext {
		return this.getTypedRuleContext(OptionValueNoOptionTypeContext, 0) as OptionValueNoOptionTypeContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_optionValue;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterOptionValue) {
	 		listener.enterOptionValue(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitOptionValue) {
	 		listener.exitOptionValue(this);
		}
	}
}


export class SetSystemVariableContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public AT_AT_SIGN_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.AT_AT_SIGN_SYMBOL, 0);
	}
	public internalVariableName(): InternalVariableNameContext {
		return this.getTypedRuleContext(InternalVariableNameContext, 0) as InternalVariableNameContext;
	}
	public setVarIdentType(): SetVarIdentTypeContext {
		return this.getTypedRuleContext(SetVarIdentTypeContext, 0) as SetVarIdentTypeContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_setSystemVariable;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterSetSystemVariable) {
	 		listener.enterSetSystemVariable(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitSetSystemVariable) {
	 		listener.exitSetSystemVariable(this);
		}
	}
}


export class StartOptionValueListFollowingOptionTypeContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public optionValueFollowingOptionType(): OptionValueFollowingOptionTypeContext {
		return this.getTypedRuleContext(OptionValueFollowingOptionTypeContext, 0) as OptionValueFollowingOptionTypeContext;
	}
	public optionValueListContinued(): OptionValueListContinuedContext {
		return this.getTypedRuleContext(OptionValueListContinuedContext, 0) as OptionValueListContinuedContext;
	}
	public TRANSACTION_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.TRANSACTION_SYMBOL, 0);
	}
	public transactionCharacteristics(): TransactionCharacteristicsContext {
		return this.getTypedRuleContext(TransactionCharacteristicsContext, 0) as TransactionCharacteristicsContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_startOptionValueListFollowingOptionType;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterStartOptionValueListFollowingOptionType) {
	 		listener.enterStartOptionValueListFollowingOptionType(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitStartOptionValueListFollowingOptionType) {
	 		listener.exitStartOptionValueListFollowingOptionType(this);
		}
	}
}


export class OptionValueFollowingOptionTypeContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public internalVariableName(): InternalVariableNameContext {
		return this.getTypedRuleContext(InternalVariableNameContext, 0) as InternalVariableNameContext;
	}
	public equal(): EqualContext {
		return this.getTypedRuleContext(EqualContext, 0) as EqualContext;
	}
	public setExprOrDefault(): SetExprOrDefaultContext {
		return this.getTypedRuleContext(SetExprOrDefaultContext, 0) as SetExprOrDefaultContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_optionValueFollowingOptionType;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterOptionValueFollowingOptionType) {
	 		listener.enterOptionValueFollowingOptionType(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitOptionValueFollowingOptionType) {
	 		listener.exitOptionValueFollowingOptionType(this);
		}
	}
}


export class SetExprOrDefaultContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public expr(): ExprContext {
		return this.getTypedRuleContext(ExprContext, 0) as ExprContext;
	}
	public DEFAULT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
	}
	public ON_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ON_SYMBOL, 0);
	}
	public ALL_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ALL_SYMBOL, 0);
	}
	public BINARY_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.BINARY_SYMBOL, 0);
	}
	public ROW_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ROW_SYMBOL, 0);
	}
	public SYSTEM_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SYSTEM_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_setExprOrDefault;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterSetExprOrDefault) {
	 		listener.enterSetExprOrDefault(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitSetExprOrDefault) {
	 		listener.exitSetExprOrDefault(this);
		}
	}
}


export class ShowStatementContext extends ParserRuleContext {
	public _value!: Token;
	public _object!: Token;
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public SHOW_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SHOW_SYMBOL, 0);
	}
	public STATUS_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.STATUS_SYMBOL, 0);
	}
	public TABLES_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.TABLES_SYMBOL, 0);
	}
	public tableRef(): TableRefContext {
		return this.getTypedRuleContext(TableRefContext, 0) as TableRefContext;
	}
	public EVENTS_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.EVENTS_SYMBOL, 0);
	}
	public fromOrIn(): FromOrInContext {
		return this.getTypedRuleContext(FromOrInContext, 0) as FromOrInContext;
	}
	public COUNT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.COUNT_SYMBOL, 0);
	}
	public OPEN_PAR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
	}
	public MULT_OPERATOR(): TerminalNode {
		return this.getToken(MySQLParser.MULT_OPERATOR, 0);
	}
	public CLOSE_PAR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
	}
	public charset(): CharsetContext {
		return this.getTypedRuleContext(CharsetContext, 0) as CharsetContext;
	}
	public FOR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.FOR_SYMBOL, 0);
	}
	public user(): UserContext {
		return this.getTypedRuleContext(UserContext, 0) as UserContext;
	}
	public USING_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.USING_SYMBOL, 0);
	}
	public userList(): UserListContext {
		return this.getTypedRuleContext(UserListContext, 0) as UserListContext;
	}
	public CODE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CODE_SYMBOL, 0);
	}
	public procedureRef(): ProcedureRefContext {
		return this.getTypedRuleContext(ProcedureRefContext, 0) as ProcedureRefContext;
	}
	public functionRef(): FunctionRefContext {
		return this.getTypedRuleContext(FunctionRefContext, 0) as FunctionRefContext;
	}
	public AUTHORS_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.AUTHORS_SYMBOL, 0);
	}
	public DATABASES_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.DATABASES_SYMBOL, 0);
	}
	public TRIGGERS_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.TRIGGERS_SYMBOL, 0);
	}
	public TABLE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.TABLE_SYMBOL, 0);
	}
	public OPEN_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.OPEN_SYMBOL, 0);
	}
	public PLUGINS_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.PLUGINS_SYMBOL, 0);
	}
	public ENGINE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ENGINE_SYMBOL, 0);
	}
	public MUTEX_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.MUTEX_SYMBOL, 0);
	}
	public LOGS_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.LOGS_SYMBOL, 0);
	}
	public COLUMNS_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.COLUMNS_SYMBOL, 0);
	}
	public FROM_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.FROM_SYMBOL, 0);
	}
	public IN_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.IN_SYMBOL, 0);
	}
	public BINARY_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.BINARY_SYMBOL, 0);
	}
	public MASTER_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.MASTER_SYMBOL, 0);
	}
	public SLAVE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SLAVE_SYMBOL, 0);
	}
	public ENGINES_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ENGINES_SYMBOL, 0);
	}
	public WARNINGS_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.WARNINGS_SYMBOL, 0);
	}
	public ERRORS_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ERRORS_SYMBOL, 0);
	}
	public PROFILES_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.PROFILES_SYMBOL, 0);
	}
	public PROFILE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.PROFILE_SYMBOL, 0);
	}
	public PROCESSLIST_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.PROCESSLIST_SYMBOL, 0);
	}
	public COLLATION_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.COLLATION_SYMBOL, 0);
	}
	public CONTRIBUTORS_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CONTRIBUTORS_SYMBOL, 0);
	}
	public PRIVILEGES_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.PRIVILEGES_SYMBOL, 0);
	}
	public GRANTS_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.GRANTS_SYMBOL, 0);
	}
	public CREATE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CREATE_SYMBOL, 0);
	}
	public PROCEDURE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.PROCEDURE_SYMBOL, 0);
	}
	public FUNCTION_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.FUNCTION_SYMBOL, 0);
	}
	public engineRef(): EngineRefContext {
		return this.getTypedRuleContext(EngineRefContext, 0) as EngineRefContext;
	}
	public ALL_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ALL_SYMBOL, 0);
	}
	public HOSTS_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.HOSTS_SYMBOL, 0);
	}
	public nonBlocking(): NonBlockingContext {
		return this.getTypedRuleContext(NonBlockingContext, 0) as NonBlockingContext;
	}
	public BINLOG_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.BINLOG_SYMBOL, 0);
	}
	public RELAYLOG_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.RELAYLOG_SYMBOL, 0);
	}
	public INDEX_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.INDEX_SYMBOL, 0);
	}
	public INDEXES_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.INDEXES_SYMBOL, 0);
	}
	public KEYS_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.KEYS_SYMBOL, 0);
	}
	public VARIABLES_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.VARIABLES_SYMBOL, 0);
	}
	public schemaRef(): SchemaRefContext {
		return this.getTypedRuleContext(SchemaRefContext, 0) as SchemaRefContext;
	}
	public eventRef(): EventRefContext {
		return this.getTypedRuleContext(EventRefContext, 0) as EventRefContext;
	}
	public triggerRef(): TriggerRefContext {
		return this.getTypedRuleContext(TriggerRefContext, 0) as TriggerRefContext;
	}
	public viewRef(): ViewRefContext {
		return this.getTypedRuleContext(ViewRefContext, 0) as ViewRefContext;
	}
	public likeOrWhere(): LikeOrWhereContext {
		return this.getTypedRuleContext(LikeOrWhereContext, 0) as LikeOrWhereContext;
	}
	public showCommandType(): ShowCommandTypeContext {
		return this.getTypedRuleContext(ShowCommandTypeContext, 0) as ShowCommandTypeContext;
	}
	public inDb(): InDbContext {
		return this.getTypedRuleContext(InDbContext, 0) as InDbContext;
	}
	public FULL_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.FULL_SYMBOL, 0);
	}
	public textString(): TextStringContext {
		return this.getTypedRuleContext(TextStringContext, 0) as TextStringContext;
	}
	public ulonglong_number(): Ulonglong_numberContext {
		return this.getTypedRuleContext(Ulonglong_numberContext, 0) as Ulonglong_numberContext;
	}
	public limitClause(): LimitClauseContext {
		return this.getTypedRuleContext(LimitClauseContext, 0) as LimitClauseContext;
	}
	public channel(): ChannelContext {
		return this.getTypedRuleContext(ChannelContext, 0) as ChannelContext;
	}
	public EXTENDED_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.EXTENDED_SYMBOL, 0);
	}
	public whereClause(): WhereClauseContext {
		return this.getTypedRuleContext(WhereClauseContext, 0) as WhereClauseContext;
	}
	public STORAGE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.STORAGE_SYMBOL, 0);
	}
	public profileType_list(): ProfileTypeContext[] {
		return this.getTypedRuleContexts(ProfileTypeContext) as ProfileTypeContext[];
	}
	public profileType(i: number): ProfileTypeContext {
		return this.getTypedRuleContext(ProfileTypeContext, i) as ProfileTypeContext;
	}
	public QUERY_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.QUERY_SYMBOL, 0);
	}
	public INT_NUMBER(): TerminalNode {
		return this.getToken(MySQLParser.INT_NUMBER, 0);
	}
	public optionType(): OptionTypeContext {
		return this.getTypedRuleContext(OptionTypeContext, 0) as OptionTypeContext;
	}
	public DATABASE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.DATABASE_SYMBOL, 0);
	}
	public EVENT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.EVENT_SYMBOL, 0);
	}
	public TRIGGER_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.TRIGGER_SYMBOL, 0);
	}
	public VIEW_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.VIEW_SYMBOL, 0);
	}
	public USER_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.USER_SYMBOL, 0);
	}
	public ifNotExists(): IfNotExistsContext {
		return this.getTypedRuleContext(IfNotExistsContext, 0) as IfNotExistsContext;
	}
	public COMMA_SYMBOL_list(): TerminalNode[] {
	    	return this.getTokens(MySQLParser.COMMA_SYMBOL);
	}
	public COMMA_SYMBOL(i: number): TerminalNode {
		return this.getToken(MySQLParser.COMMA_SYMBOL, i);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_showStatement;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterShowStatement) {
	 		listener.enterShowStatement(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitShowStatement) {
	 		listener.exitShowStatement(this);
		}
	}
}


export class ShowCommandTypeContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public FULL_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.FULL_SYMBOL, 0);
	}
	public EXTENDED_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.EXTENDED_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_showCommandType;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterShowCommandType) {
	 		listener.enterShowCommandType(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitShowCommandType) {
	 		listener.exitShowCommandType(this);
		}
	}
}


export class NonBlockingContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public NONBLOCKING_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.NONBLOCKING_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_nonBlocking;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterNonBlocking) {
	 		listener.enterNonBlocking(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitNonBlocking) {
	 		listener.exitNonBlocking(this);
		}
	}
}


export class FromOrInContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public FROM_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.FROM_SYMBOL, 0);
	}
	public IN_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.IN_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_fromOrIn;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterFromOrIn) {
	 		listener.enterFromOrIn(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitFromOrIn) {
	 		listener.exitFromOrIn(this);
		}
	}
}


export class InDbContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public fromOrIn(): FromOrInContext {
		return this.getTypedRuleContext(FromOrInContext, 0) as FromOrInContext;
	}
	public identifier(): IdentifierContext {
		return this.getTypedRuleContext(IdentifierContext, 0) as IdentifierContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_inDb;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterInDb) {
	 		listener.enterInDb(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitInDb) {
	 		listener.exitInDb(this);
		}
	}
}


export class ProfileTypeContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public BLOCK_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.BLOCK_SYMBOL, 0);
	}
	public IO_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.IO_SYMBOL, 0);
	}
	public CONTEXT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CONTEXT_SYMBOL, 0);
	}
	public SWITCHES_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SWITCHES_SYMBOL, 0);
	}
	public PAGE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.PAGE_SYMBOL, 0);
	}
	public FAULTS_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.FAULTS_SYMBOL, 0);
	}
	public ALL_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ALL_SYMBOL, 0);
	}
	public CPU_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CPU_SYMBOL, 0);
	}
	public IPC_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.IPC_SYMBOL, 0);
	}
	public MEMORY_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.MEMORY_SYMBOL, 0);
	}
	public SOURCE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SOURCE_SYMBOL, 0);
	}
	public SWAPS_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SWAPS_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_profileType;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterProfileType) {
	 		listener.enterProfileType(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitProfileType) {
	 		listener.exitProfileType(this);
		}
	}
}


export class OtherAdministrativeStatementContext extends ParserRuleContext {
	public _type_!: Token;
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public textLiteral(): TextLiteralContext {
		return this.getTypedRuleContext(TextLiteralContext, 0) as TextLiteralContext;
	}
	public BINLOG_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.BINLOG_SYMBOL, 0);
	}
	public INDEX_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.INDEX_SYMBOL, 0);
	}
	public keyCacheListOrParts(): KeyCacheListOrPartsContext {
		return this.getTypedRuleContext(KeyCacheListOrPartsContext, 0) as KeyCacheListOrPartsContext;
	}
	public IN_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.IN_SYMBOL, 0);
	}
	public CACHE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CACHE_SYMBOL, 0);
	}
	public identifier(): IdentifierContext {
		return this.getTypedRuleContext(IdentifierContext, 0) as IdentifierContext;
	}
	public DEFAULT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
	}
	public FLUSH_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.FLUSH_SYMBOL, 0);
	}
	public flushTables(): FlushTablesContext {
		return this.getTypedRuleContext(FlushTablesContext, 0) as FlushTablesContext;
	}
	public flushOption_list(): FlushOptionContext[] {
		return this.getTypedRuleContexts(FlushOptionContext) as FlushOptionContext[];
	}
	public flushOption(i: number): FlushOptionContext {
		return this.getTypedRuleContext(FlushOptionContext, i) as FlushOptionContext;
	}
	public noWriteToBinLog(): NoWriteToBinLogContext {
		return this.getTypedRuleContext(NoWriteToBinLogContext, 0) as NoWriteToBinLogContext;
	}
	public COMMA_SYMBOL_list(): TerminalNode[] {
	    	return this.getTokens(MySQLParser.COMMA_SYMBOL);
	}
	public COMMA_SYMBOL(i: number): TerminalNode {
		return this.getToken(MySQLParser.COMMA_SYMBOL, i);
	}
	public expr(): ExprContext {
		return this.getTypedRuleContext(ExprContext, 0) as ExprContext;
	}
	public KILL_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.KILL_SYMBOL, 0);
	}
	public CONNECTION_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CONNECTION_SYMBOL, 0);
	}
	public QUERY_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.QUERY_SYMBOL, 0);
	}
	public INTO_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.INTO_SYMBOL, 0);
	}
	public preloadTail(): PreloadTailContext {
		return this.getTypedRuleContext(PreloadTailContext, 0) as PreloadTailContext;
	}
	public LOAD_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.LOAD_SYMBOL, 0);
	}
	public SHUTDOWN_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SHUTDOWN_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_otherAdministrativeStatement;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterOtherAdministrativeStatement) {
	 		listener.enterOtherAdministrativeStatement(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitOtherAdministrativeStatement) {
	 		listener.exitOtherAdministrativeStatement(this);
		}
	}
}


export class KeyCacheListOrPartsContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public keyCacheList(): KeyCacheListContext {
		return this.getTypedRuleContext(KeyCacheListContext, 0) as KeyCacheListContext;
	}
	public assignToKeycachePartition(): AssignToKeycachePartitionContext {
		return this.getTypedRuleContext(AssignToKeycachePartitionContext, 0) as AssignToKeycachePartitionContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_keyCacheListOrParts;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterKeyCacheListOrParts) {
	 		listener.enterKeyCacheListOrParts(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitKeyCacheListOrParts) {
	 		listener.exitKeyCacheListOrParts(this);
		}
	}
}


export class KeyCacheListContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public assignToKeycache_list(): AssignToKeycacheContext[] {
		return this.getTypedRuleContexts(AssignToKeycacheContext) as AssignToKeycacheContext[];
	}
	public assignToKeycache(i: number): AssignToKeycacheContext {
		return this.getTypedRuleContext(AssignToKeycacheContext, i) as AssignToKeycacheContext;
	}
	public COMMA_SYMBOL_list(): TerminalNode[] {
	    	return this.getTokens(MySQLParser.COMMA_SYMBOL);
	}
	public COMMA_SYMBOL(i: number): TerminalNode {
		return this.getToken(MySQLParser.COMMA_SYMBOL, i);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_keyCacheList;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterKeyCacheList) {
	 		listener.enterKeyCacheList(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitKeyCacheList) {
	 		listener.exitKeyCacheList(this);
		}
	}
}


export class AssignToKeycacheContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public tableRef(): TableRefContext {
		return this.getTypedRuleContext(TableRefContext, 0) as TableRefContext;
	}
	public cacheKeyList(): CacheKeyListContext {
		return this.getTypedRuleContext(CacheKeyListContext, 0) as CacheKeyListContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_assignToKeycache;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterAssignToKeycache) {
	 		listener.enterAssignToKeycache(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitAssignToKeycache) {
	 		listener.exitAssignToKeycache(this);
		}
	}
}


export class AssignToKeycachePartitionContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public tableRef(): TableRefContext {
		return this.getTypedRuleContext(TableRefContext, 0) as TableRefContext;
	}
	public PARTITION_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.PARTITION_SYMBOL, 0);
	}
	public OPEN_PAR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
	}
	public allOrPartitionNameList(): AllOrPartitionNameListContext {
		return this.getTypedRuleContext(AllOrPartitionNameListContext, 0) as AllOrPartitionNameListContext;
	}
	public CLOSE_PAR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
	}
	public cacheKeyList(): CacheKeyListContext {
		return this.getTypedRuleContext(CacheKeyListContext, 0) as CacheKeyListContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_assignToKeycachePartition;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterAssignToKeycachePartition) {
	 		listener.enterAssignToKeycachePartition(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitAssignToKeycachePartition) {
	 		listener.exitAssignToKeycachePartition(this);
		}
	}
}


export class CacheKeyListContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public keyOrIndex(): KeyOrIndexContext {
		return this.getTypedRuleContext(KeyOrIndexContext, 0) as KeyOrIndexContext;
	}
	public OPEN_PAR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
	}
	public CLOSE_PAR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
	}
	public keyUsageList(): KeyUsageListContext {
		return this.getTypedRuleContext(KeyUsageListContext, 0) as KeyUsageListContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_cacheKeyList;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterCacheKeyList) {
	 		listener.enterCacheKeyList(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitCacheKeyList) {
	 		listener.exitCacheKeyList(this);
		}
	}
}


export class KeyUsageElementContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public identifier(): IdentifierContext {
		return this.getTypedRuleContext(IdentifierContext, 0) as IdentifierContext;
	}
	public PRIMARY_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.PRIMARY_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_keyUsageElement;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterKeyUsageElement) {
	 		listener.enterKeyUsageElement(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitKeyUsageElement) {
	 		listener.exitKeyUsageElement(this);
		}
	}
}


export class KeyUsageListContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public keyUsageElement_list(): KeyUsageElementContext[] {
		return this.getTypedRuleContexts(KeyUsageElementContext) as KeyUsageElementContext[];
	}
	public keyUsageElement(i: number): KeyUsageElementContext {
		return this.getTypedRuleContext(KeyUsageElementContext, i) as KeyUsageElementContext;
	}
	public COMMA_SYMBOL_list(): TerminalNode[] {
	    	return this.getTokens(MySQLParser.COMMA_SYMBOL);
	}
	public COMMA_SYMBOL(i: number): TerminalNode {
		return this.getToken(MySQLParser.COMMA_SYMBOL, i);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_keyUsageList;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterKeyUsageList) {
	 		listener.enterKeyUsageList(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitKeyUsageList) {
	 		listener.exitKeyUsageList(this);
		}
	}
}


export class FlushOptionContext extends ParserRuleContext {
	public _option!: Token;
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public DES_KEY_FILE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.DES_KEY_FILE_SYMBOL, 0);
	}
	public HOSTS_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.HOSTS_SYMBOL, 0);
	}
	public PRIVILEGES_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.PRIVILEGES_SYMBOL, 0);
	}
	public STATUS_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.STATUS_SYMBOL, 0);
	}
	public USER_RESOURCES_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.USER_RESOURCES_SYMBOL, 0);
	}
	public LOGS_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.LOGS_SYMBOL, 0);
	}
	public logType(): LogTypeContext {
		return this.getTypedRuleContext(LogTypeContext, 0) as LogTypeContext;
	}
	public RELAY_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.RELAY_SYMBOL, 0);
	}
	public channel(): ChannelContext {
		return this.getTypedRuleContext(ChannelContext, 0) as ChannelContext;
	}
	public CACHE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CACHE_SYMBOL, 0);
	}
	public QUERY_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.QUERY_SYMBOL, 0);
	}
	public OPTIMIZER_COSTS_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.OPTIMIZER_COSTS_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_flushOption;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterFlushOption) {
	 		listener.enterFlushOption(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitFlushOption) {
	 		listener.exitFlushOption(this);
		}
	}
}


export class LogTypeContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public BINARY_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.BINARY_SYMBOL, 0);
	}
	public ENGINE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ENGINE_SYMBOL, 0);
	}
	public ERROR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ERROR_SYMBOL, 0);
	}
	public GENERAL_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.GENERAL_SYMBOL, 0);
	}
	public SLOW_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SLOW_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_logType;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterLogType) {
	 		listener.enterLogType(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitLogType) {
	 		listener.exitLogType(this);
		}
	}
}


export class FlushTablesContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public TABLES_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.TABLES_SYMBOL, 0);
	}
	public TABLE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.TABLE_SYMBOL, 0);
	}
	public WITH_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.WITH_SYMBOL, 0);
	}
	public READ_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.READ_SYMBOL, 0);
	}
	public LOCK_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.LOCK_SYMBOL, 0);
	}
	public identifierList(): IdentifierListContext {
		return this.getTypedRuleContext(IdentifierListContext, 0) as IdentifierListContext;
	}
	public flushTablesOptions(): FlushTablesOptionsContext {
		return this.getTypedRuleContext(FlushTablesOptionsContext, 0) as FlushTablesOptionsContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_flushTables;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterFlushTables) {
	 		listener.enterFlushTables(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitFlushTables) {
	 		listener.exitFlushTables(this);
		}
	}
}


export class FlushTablesOptionsContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public FOR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.FOR_SYMBOL, 0);
	}
	public EXPORT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.EXPORT_SYMBOL, 0);
	}
	public WITH_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.WITH_SYMBOL, 0);
	}
	public READ_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.READ_SYMBOL, 0);
	}
	public LOCK_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.LOCK_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_flushTablesOptions;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterFlushTablesOptions) {
	 		listener.enterFlushTablesOptions(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitFlushTablesOptions) {
	 		listener.exitFlushTablesOptions(this);
		}
	}
}


export class PreloadTailContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public tableRef(): TableRefContext {
		return this.getTypedRuleContext(TableRefContext, 0) as TableRefContext;
	}
	public adminPartition(): AdminPartitionContext {
		return this.getTypedRuleContext(AdminPartitionContext, 0) as AdminPartitionContext;
	}
	public cacheKeyList(): CacheKeyListContext {
		return this.getTypedRuleContext(CacheKeyListContext, 0) as CacheKeyListContext;
	}
	public IGNORE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.IGNORE_SYMBOL, 0);
	}
	public LEAVES_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.LEAVES_SYMBOL, 0);
	}
	public preloadList(): PreloadListContext {
		return this.getTypedRuleContext(PreloadListContext, 0) as PreloadListContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_preloadTail;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterPreloadTail) {
	 		listener.enterPreloadTail(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitPreloadTail) {
	 		listener.exitPreloadTail(this);
		}
	}
}


export class PreloadListContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public preloadKeys_list(): PreloadKeysContext[] {
		return this.getTypedRuleContexts(PreloadKeysContext) as PreloadKeysContext[];
	}
	public preloadKeys(i: number): PreloadKeysContext {
		return this.getTypedRuleContext(PreloadKeysContext, i) as PreloadKeysContext;
	}
	public COMMA_SYMBOL_list(): TerminalNode[] {
	    	return this.getTokens(MySQLParser.COMMA_SYMBOL);
	}
	public COMMA_SYMBOL(i: number): TerminalNode {
		return this.getToken(MySQLParser.COMMA_SYMBOL, i);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_preloadList;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterPreloadList) {
	 		listener.enterPreloadList(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitPreloadList) {
	 		listener.exitPreloadList(this);
		}
	}
}


export class PreloadKeysContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public tableRef(): TableRefContext {
		return this.getTypedRuleContext(TableRefContext, 0) as TableRefContext;
	}
	public cacheKeyList(): CacheKeyListContext {
		return this.getTypedRuleContext(CacheKeyListContext, 0) as CacheKeyListContext;
	}
	public IGNORE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.IGNORE_SYMBOL, 0);
	}
	public LEAVES_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.LEAVES_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_preloadKeys;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterPreloadKeys) {
	 		listener.enterPreloadKeys(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitPreloadKeys) {
	 		listener.exitPreloadKeys(this);
		}
	}
}


export class AdminPartitionContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public PARTITION_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.PARTITION_SYMBOL, 0);
	}
	public OPEN_PAR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
	}
	public allOrPartitionNameList(): AllOrPartitionNameListContext {
		return this.getTypedRuleContext(AllOrPartitionNameListContext, 0) as AllOrPartitionNameListContext;
	}
	public CLOSE_PAR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_adminPartition;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterAdminPartition) {
	 		listener.enterAdminPartition(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitAdminPartition) {
	 		listener.exitAdminPartition(this);
		}
	}
}


export class ResourceGroupManagementContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public createResourceGroup(): CreateResourceGroupContext {
		return this.getTypedRuleContext(CreateResourceGroupContext, 0) as CreateResourceGroupContext;
	}
	public alterResourceGroup(): AlterResourceGroupContext {
		return this.getTypedRuleContext(AlterResourceGroupContext, 0) as AlterResourceGroupContext;
	}
	public setResourceGroup(): SetResourceGroupContext {
		return this.getTypedRuleContext(SetResourceGroupContext, 0) as SetResourceGroupContext;
	}
	public dropResourceGroup(): DropResourceGroupContext {
		return this.getTypedRuleContext(DropResourceGroupContext, 0) as DropResourceGroupContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_resourceGroupManagement;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterResourceGroupManagement) {
	 		listener.enterResourceGroupManagement(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitResourceGroupManagement) {
	 		listener.exitResourceGroupManagement(this);
		}
	}
}


export class CreateResourceGroupContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public CREATE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CREATE_SYMBOL, 0);
	}
	public RESOURCE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.RESOURCE_SYMBOL, 0);
	}
	public GROUP_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.GROUP_SYMBOL, 0);
	}
	public identifier(): IdentifierContext {
		return this.getTypedRuleContext(IdentifierContext, 0) as IdentifierContext;
	}
	public TYPE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.TYPE_SYMBOL, 0);
	}
	public USER_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.USER_SYMBOL, 0);
	}
	public SYSTEM_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SYSTEM_SYMBOL, 0);
	}
	public equal(): EqualContext {
		return this.getTypedRuleContext(EqualContext, 0) as EqualContext;
	}
	public resourceGroupVcpuList(): ResourceGroupVcpuListContext {
		return this.getTypedRuleContext(ResourceGroupVcpuListContext, 0) as ResourceGroupVcpuListContext;
	}
	public resourceGroupPriority(): ResourceGroupPriorityContext {
		return this.getTypedRuleContext(ResourceGroupPriorityContext, 0) as ResourceGroupPriorityContext;
	}
	public resourceGroupEnableDisable(): ResourceGroupEnableDisableContext {
		return this.getTypedRuleContext(ResourceGroupEnableDisableContext, 0) as ResourceGroupEnableDisableContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_createResourceGroup;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterCreateResourceGroup) {
	 		listener.enterCreateResourceGroup(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitCreateResourceGroup) {
	 		listener.exitCreateResourceGroup(this);
		}
	}
}


export class ResourceGroupVcpuListContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public VCPU_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.VCPU_SYMBOL, 0);
	}
	public vcpuNumOrRange_list(): VcpuNumOrRangeContext[] {
		return this.getTypedRuleContexts(VcpuNumOrRangeContext) as VcpuNumOrRangeContext[];
	}
	public vcpuNumOrRange(i: number): VcpuNumOrRangeContext {
		return this.getTypedRuleContext(VcpuNumOrRangeContext, i) as VcpuNumOrRangeContext;
	}
	public equal(): EqualContext {
		return this.getTypedRuleContext(EqualContext, 0) as EqualContext;
	}
	public COMMA_SYMBOL_list(): TerminalNode[] {
	    	return this.getTokens(MySQLParser.COMMA_SYMBOL);
	}
	public COMMA_SYMBOL(i: number): TerminalNode {
		return this.getToken(MySQLParser.COMMA_SYMBOL, i);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_resourceGroupVcpuList;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterResourceGroupVcpuList) {
	 		listener.enterResourceGroupVcpuList(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitResourceGroupVcpuList) {
	 		listener.exitResourceGroupVcpuList(this);
		}
	}
}


export class VcpuNumOrRangeContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public INT_NUMBER_list(): TerminalNode[] {
	    	return this.getTokens(MySQLParser.INT_NUMBER);
	}
	public INT_NUMBER(i: number): TerminalNode {
		return this.getToken(MySQLParser.INT_NUMBER, i);
	}
	public MINUS_OPERATOR(): TerminalNode {
		return this.getToken(MySQLParser.MINUS_OPERATOR, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_vcpuNumOrRange;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterVcpuNumOrRange) {
	 		listener.enterVcpuNumOrRange(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitVcpuNumOrRange) {
	 		listener.exitVcpuNumOrRange(this);
		}
	}
}


export class ResourceGroupPriorityContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public THREAD_PRIORITY_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.THREAD_PRIORITY_SYMBOL, 0);
	}
	public INT_NUMBER(): TerminalNode {
		return this.getToken(MySQLParser.INT_NUMBER, 0);
	}
	public equal(): EqualContext {
		return this.getTypedRuleContext(EqualContext, 0) as EqualContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_resourceGroupPriority;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterResourceGroupPriority) {
	 		listener.enterResourceGroupPriority(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitResourceGroupPriority) {
	 		listener.exitResourceGroupPriority(this);
		}
	}
}


export class ResourceGroupEnableDisableContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public ENABLE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ENABLE_SYMBOL, 0);
	}
	public DISABLE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.DISABLE_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_resourceGroupEnableDisable;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterResourceGroupEnableDisable) {
	 		listener.enterResourceGroupEnableDisable(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitResourceGroupEnableDisable) {
	 		listener.exitResourceGroupEnableDisable(this);
		}
	}
}


export class AlterResourceGroupContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public ALTER_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ALTER_SYMBOL, 0);
	}
	public RESOURCE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.RESOURCE_SYMBOL, 0);
	}
	public GROUP_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.GROUP_SYMBOL, 0);
	}
	public resourceGroupRef(): ResourceGroupRefContext {
		return this.getTypedRuleContext(ResourceGroupRefContext, 0) as ResourceGroupRefContext;
	}
	public resourceGroupVcpuList(): ResourceGroupVcpuListContext {
		return this.getTypedRuleContext(ResourceGroupVcpuListContext, 0) as ResourceGroupVcpuListContext;
	}
	public resourceGroupPriority(): ResourceGroupPriorityContext {
		return this.getTypedRuleContext(ResourceGroupPriorityContext, 0) as ResourceGroupPriorityContext;
	}
	public resourceGroupEnableDisable(): ResourceGroupEnableDisableContext {
		return this.getTypedRuleContext(ResourceGroupEnableDisableContext, 0) as ResourceGroupEnableDisableContext;
	}
	public FORCE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.FORCE_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_alterResourceGroup;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterAlterResourceGroup) {
	 		listener.enterAlterResourceGroup(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitAlterResourceGroup) {
	 		listener.exitAlterResourceGroup(this);
		}
	}
}


export class SetResourceGroupContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public SET_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SET_SYMBOL, 0);
	}
	public RESOURCE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.RESOURCE_SYMBOL, 0);
	}
	public GROUP_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.GROUP_SYMBOL, 0);
	}
	public identifier(): IdentifierContext {
		return this.getTypedRuleContext(IdentifierContext, 0) as IdentifierContext;
	}
	public FOR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.FOR_SYMBOL, 0);
	}
	public threadIdList(): ThreadIdListContext {
		return this.getTypedRuleContext(ThreadIdListContext, 0) as ThreadIdListContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_setResourceGroup;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterSetResourceGroup) {
	 		listener.enterSetResourceGroup(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitSetResourceGroup) {
	 		listener.exitSetResourceGroup(this);
		}
	}
}


export class ThreadIdListContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public real_ulong_number_list(): Real_ulong_numberContext[] {
		return this.getTypedRuleContexts(Real_ulong_numberContext) as Real_ulong_numberContext[];
	}
	public real_ulong_number(i: number): Real_ulong_numberContext {
		return this.getTypedRuleContext(Real_ulong_numberContext, i) as Real_ulong_numberContext;
	}
	public COMMA_SYMBOL_list(): TerminalNode[] {
	    	return this.getTokens(MySQLParser.COMMA_SYMBOL);
	}
	public COMMA_SYMBOL(i: number): TerminalNode {
		return this.getToken(MySQLParser.COMMA_SYMBOL, i);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_threadIdList;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterThreadIdList) {
	 		listener.enterThreadIdList(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitThreadIdList) {
	 		listener.exitThreadIdList(this);
		}
	}
}


export class DropResourceGroupContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public DROP_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.DROP_SYMBOL, 0);
	}
	public RESOURCE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.RESOURCE_SYMBOL, 0);
	}
	public GROUP_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.GROUP_SYMBOL, 0);
	}
	public resourceGroupRef(): ResourceGroupRefContext {
		return this.getTypedRuleContext(ResourceGroupRefContext, 0) as ResourceGroupRefContext;
	}
	public FORCE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.FORCE_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_dropResourceGroup;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterDropResourceGroup) {
	 		listener.enterDropResourceGroup(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitDropResourceGroup) {
	 		listener.exitDropResourceGroup(this);
		}
	}
}


export class UtilityStatementContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public describeCommand(): DescribeCommandContext {
		return this.getTypedRuleContext(DescribeCommandContext, 0) as DescribeCommandContext;
	}
	public explainCommand(): ExplainCommandContext {
		return this.getTypedRuleContext(ExplainCommandContext, 0) as ExplainCommandContext;
	}
	public helpCommand(): HelpCommandContext {
		return this.getTypedRuleContext(HelpCommandContext, 0) as HelpCommandContext;
	}
	public useCommand(): UseCommandContext {
		return this.getTypedRuleContext(UseCommandContext, 0) as UseCommandContext;
	}
	public restartServer(): RestartServerContext {
		return this.getTypedRuleContext(RestartServerContext, 0) as RestartServerContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_utilityStatement;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterUtilityStatement) {
	 		listener.enterUtilityStatement(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitUtilityStatement) {
	 		listener.exitUtilityStatement(this);
		}
	}
}


export class DescribeCommandContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public tableRef(): TableRefContext {
		return this.getTypedRuleContext(TableRefContext, 0) as TableRefContext;
	}
	public EXPLAIN_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.EXPLAIN_SYMBOL, 0);
	}
	public DESCRIBE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.DESCRIBE_SYMBOL, 0);
	}
	public DESC_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.DESC_SYMBOL, 0);
	}
	public textString(): TextStringContext {
		return this.getTypedRuleContext(TextStringContext, 0) as TextStringContext;
	}
	public columnRef(): ColumnRefContext {
		return this.getTypedRuleContext(ColumnRefContext, 0) as ColumnRefContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_describeCommand;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterDescribeCommand) {
	 		listener.enterDescribeCommand(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitDescribeCommand) {
	 		listener.exitDescribeCommand(this);
		}
	}
}


export class ExplainCommandContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public explainableStatement(): ExplainableStatementContext {
		return this.getTypedRuleContext(ExplainableStatementContext, 0) as ExplainableStatementContext;
	}
	public EXPLAIN_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.EXPLAIN_SYMBOL, 0);
	}
	public DESCRIBE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.DESCRIBE_SYMBOL, 0);
	}
	public DESC_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.DESC_SYMBOL, 0);
	}
	public EXTENDED_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.EXTENDED_SYMBOL, 0);
	}
	public PARTITIONS_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.PARTITIONS_SYMBOL, 0);
	}
	public FORMAT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.FORMAT_SYMBOL, 0);
	}
	public EQUAL_OPERATOR(): TerminalNode {
		return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
	}
	public textOrIdentifier(): TextOrIdentifierContext {
		return this.getTypedRuleContext(TextOrIdentifierContext, 0) as TextOrIdentifierContext;
	}
	public ANALYZE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ANALYZE_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_explainCommand;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterExplainCommand) {
	 		listener.enterExplainCommand(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitExplainCommand) {
	 		listener.exitExplainCommand(this);
		}
	}
}


export class ExplainableStatementContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public selectStatement(): SelectStatementContext {
		return this.getTypedRuleContext(SelectStatementContext, 0) as SelectStatementContext;
	}
	public deleteStatement(): DeleteStatementContext {
		return this.getTypedRuleContext(DeleteStatementContext, 0) as DeleteStatementContext;
	}
	public insertStatement(): InsertStatementContext {
		return this.getTypedRuleContext(InsertStatementContext, 0) as InsertStatementContext;
	}
	public replaceStatement(): ReplaceStatementContext {
		return this.getTypedRuleContext(ReplaceStatementContext, 0) as ReplaceStatementContext;
	}
	public updateStatement(): UpdateStatementContext {
		return this.getTypedRuleContext(UpdateStatementContext, 0) as UpdateStatementContext;
	}
	public FOR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.FOR_SYMBOL, 0);
	}
	public CONNECTION_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CONNECTION_SYMBOL, 0);
	}
	public real_ulong_number(): Real_ulong_numberContext {
		return this.getTypedRuleContext(Real_ulong_numberContext, 0) as Real_ulong_numberContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_explainableStatement;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterExplainableStatement) {
	 		listener.enterExplainableStatement(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitExplainableStatement) {
	 		listener.exitExplainableStatement(this);
		}
	}
}


export class HelpCommandContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public HELP_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.HELP_SYMBOL, 0);
	}
	public textOrIdentifier(): TextOrIdentifierContext {
		return this.getTypedRuleContext(TextOrIdentifierContext, 0) as TextOrIdentifierContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_helpCommand;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterHelpCommand) {
	 		listener.enterHelpCommand(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitHelpCommand) {
	 		listener.exitHelpCommand(this);
		}
	}
}


export class UseCommandContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public USE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.USE_SYMBOL, 0);
	}
	public identifier(): IdentifierContext {
		return this.getTypedRuleContext(IdentifierContext, 0) as IdentifierContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_useCommand;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterUseCommand) {
	 		listener.enterUseCommand(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitUseCommand) {
	 		listener.exitUseCommand(this);
		}
	}
}


export class RestartServerContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public RESTART_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.RESTART_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_restartServer;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterRestartServer) {
	 		listener.enterRestartServer(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitRestartServer) {
	 		listener.exitRestartServer(this);
		}
	}
}


export class ExprContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_expr;
	}
	public copyFrom(ctx: ExprContext): void {
		super.copyFrom(ctx);
	}
}
export class ExprOrContext extends ExprContext {
	public _op!: Token;
	constructor(parser: MySQLParser, ctx: ExprContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public expr_list(): ExprContext[] {
		return this.getTypedRuleContexts(ExprContext) as ExprContext[];
	}
	public expr(i: number): ExprContext {
		return this.getTypedRuleContext(ExprContext, i) as ExprContext;
	}
	public OR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.OR_SYMBOL, 0);
	}
	public LOGICAL_OR_OPERATOR(): TerminalNode {
		return this.getToken(MySQLParser.LOGICAL_OR_OPERATOR, 0);
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterExprOr) {
	 		listener.enterExprOr(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitExprOr) {
	 		listener.exitExprOr(this);
		}
	}
}
export class ExprNotContext extends ExprContext {
	constructor(parser: MySQLParser, ctx: ExprContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public NOT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.NOT_SYMBOL, 0);
	}
	public expr(): ExprContext {
		return this.getTypedRuleContext(ExprContext, 0) as ExprContext;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterExprNot) {
	 		listener.enterExprNot(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitExprNot) {
	 		listener.exitExprNot(this);
		}
	}
}
export class ExprIsContext extends ExprContext {
	public _type_!: Token;
	constructor(parser: MySQLParser, ctx: ExprContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public boolPri(): BoolPriContext {
		return this.getTypedRuleContext(BoolPriContext, 0) as BoolPriContext;
	}
	public IS_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.IS_SYMBOL, 0);
	}
	public TRUE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.TRUE_SYMBOL, 0);
	}
	public FALSE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.FALSE_SYMBOL, 0);
	}
	public UNKNOWN_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.UNKNOWN_SYMBOL, 0);
	}
	public notRule(): NotRuleContext {
		return this.getTypedRuleContext(NotRuleContext, 0) as NotRuleContext;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterExprIs) {
	 		listener.enterExprIs(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitExprIs) {
	 		listener.exitExprIs(this);
		}
	}
}
export class ExprAndContext extends ExprContext {
	public _op!: Token;
	constructor(parser: MySQLParser, ctx: ExprContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public expr_list(): ExprContext[] {
		return this.getTypedRuleContexts(ExprContext) as ExprContext[];
	}
	public expr(i: number): ExprContext {
		return this.getTypedRuleContext(ExprContext, i) as ExprContext;
	}
	public AND_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.AND_SYMBOL, 0);
	}
	public LOGICAL_AND_OPERATOR(): TerminalNode {
		return this.getToken(MySQLParser.LOGICAL_AND_OPERATOR, 0);
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterExprAnd) {
	 		listener.enterExprAnd(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitExprAnd) {
	 		listener.exitExprAnd(this);
		}
	}
}
export class ExprXorContext extends ExprContext {
	constructor(parser: MySQLParser, ctx: ExprContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public expr_list(): ExprContext[] {
		return this.getTypedRuleContexts(ExprContext) as ExprContext[];
	}
	public expr(i: number): ExprContext {
		return this.getTypedRuleContext(ExprContext, i) as ExprContext;
	}
	public XOR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.XOR_SYMBOL, 0);
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterExprXor) {
	 		listener.enterExprXor(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitExprXor) {
	 		listener.exitExprXor(this);
		}
	}
}


export class BoolPriContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_boolPri;
	}
	public copyFrom(ctx: BoolPriContext): void {
		super.copyFrom(ctx);
	}
}
export class PrimaryExprPredicateContext extends BoolPriContext {
	constructor(parser: MySQLParser, ctx: BoolPriContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public predicate(): PredicateContext {
		return this.getTypedRuleContext(PredicateContext, 0) as PredicateContext;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterPrimaryExprPredicate) {
	 		listener.enterPrimaryExprPredicate(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitPrimaryExprPredicate) {
	 		listener.exitPrimaryExprPredicate(this);
		}
	}
}
export class PrimaryExprCompareContext extends BoolPriContext {
	constructor(parser: MySQLParser, ctx: BoolPriContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public boolPri(): BoolPriContext {
		return this.getTypedRuleContext(BoolPriContext, 0) as BoolPriContext;
	}
	public compOp(): CompOpContext {
		return this.getTypedRuleContext(CompOpContext, 0) as CompOpContext;
	}
	public predicate(): PredicateContext {
		return this.getTypedRuleContext(PredicateContext, 0) as PredicateContext;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterPrimaryExprCompare) {
	 		listener.enterPrimaryExprCompare(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitPrimaryExprCompare) {
	 		listener.exitPrimaryExprCompare(this);
		}
	}
}
export class PrimaryExprAllAnyContext extends BoolPriContext {
	constructor(parser: MySQLParser, ctx: BoolPriContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public boolPri(): BoolPriContext {
		return this.getTypedRuleContext(BoolPriContext, 0) as BoolPriContext;
	}
	public compOp(): CompOpContext {
		return this.getTypedRuleContext(CompOpContext, 0) as CompOpContext;
	}
	public subquery(): SubqueryContext {
		return this.getTypedRuleContext(SubqueryContext, 0) as SubqueryContext;
	}
	public ALL_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ALL_SYMBOL, 0);
	}
	public ANY_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ANY_SYMBOL, 0);
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterPrimaryExprAllAny) {
	 		listener.enterPrimaryExprAllAny(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitPrimaryExprAllAny) {
	 		listener.exitPrimaryExprAllAny(this);
		}
	}
}
export class PrimaryExprIsNullContext extends BoolPriContext {
	constructor(parser: MySQLParser, ctx: BoolPriContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public boolPri(): BoolPriContext {
		return this.getTypedRuleContext(BoolPriContext, 0) as BoolPriContext;
	}
	public IS_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.IS_SYMBOL, 0);
	}
	public NULL_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.NULL_SYMBOL, 0);
	}
	public notRule(): NotRuleContext {
		return this.getTypedRuleContext(NotRuleContext, 0) as NotRuleContext;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterPrimaryExprIsNull) {
	 		listener.enterPrimaryExprIsNull(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitPrimaryExprIsNull) {
	 		listener.exitPrimaryExprIsNull(this);
		}
	}
}


export class CompOpContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public EQUAL_OPERATOR(): TerminalNode {
		return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
	}
	public NULL_SAFE_EQUAL_OPERATOR(): TerminalNode {
		return this.getToken(MySQLParser.NULL_SAFE_EQUAL_OPERATOR, 0);
	}
	public GREATER_OR_EQUAL_OPERATOR(): TerminalNode {
		return this.getToken(MySQLParser.GREATER_OR_EQUAL_OPERATOR, 0);
	}
	public GREATER_THAN_OPERATOR(): TerminalNode {
		return this.getToken(MySQLParser.GREATER_THAN_OPERATOR, 0);
	}
	public LESS_OR_EQUAL_OPERATOR(): TerminalNode {
		return this.getToken(MySQLParser.LESS_OR_EQUAL_OPERATOR, 0);
	}
	public LESS_THAN_OPERATOR(): TerminalNode {
		return this.getToken(MySQLParser.LESS_THAN_OPERATOR, 0);
	}
	public NOT_EQUAL_OPERATOR(): TerminalNode {
		return this.getToken(MySQLParser.NOT_EQUAL_OPERATOR, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_compOp;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterCompOp) {
	 		listener.enterCompOp(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitCompOp) {
	 		listener.exitCompOp(this);
		}
	}
}


export class PredicateContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public bitExpr_list(): BitExprContext[] {
		return this.getTypedRuleContexts(BitExprContext) as BitExprContext[];
	}
	public bitExpr(i: number): BitExprContext {
		return this.getTypedRuleContext(BitExprContext, i) as BitExprContext;
	}
	public predicateOperations(): PredicateOperationsContext {
		return this.getTypedRuleContext(PredicateOperationsContext, 0) as PredicateOperationsContext;
	}
	public MEMBER_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.MEMBER_SYMBOL, 0);
	}
	public simpleExprWithParentheses(): SimpleExprWithParenthesesContext {
		return this.getTypedRuleContext(SimpleExprWithParenthesesContext, 0) as SimpleExprWithParenthesesContext;
	}
	public SOUNDS_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SOUNDS_SYMBOL, 0);
	}
	public LIKE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.LIKE_SYMBOL, 0);
	}
	public notRule(): NotRuleContext {
		return this.getTypedRuleContext(NotRuleContext, 0) as NotRuleContext;
	}
	public OF_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.OF_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_predicate;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterPredicate) {
	 		listener.enterPredicate(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitPredicate) {
	 		listener.exitPredicate(this);
		}
	}
}


export class PredicateOperationsContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_predicateOperations;
	}
	public copyFrom(ctx: PredicateOperationsContext): void {
		super.copyFrom(ctx);
	}
}
export class PredicateExprRegexContext extends PredicateOperationsContext {
	constructor(parser: MySQLParser, ctx: PredicateOperationsContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public REGEXP_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.REGEXP_SYMBOL, 0);
	}
	public bitExpr(): BitExprContext {
		return this.getTypedRuleContext(BitExprContext, 0) as BitExprContext;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterPredicateExprRegex) {
	 		listener.enterPredicateExprRegex(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitPredicateExprRegex) {
	 		listener.exitPredicateExprRegex(this);
		}
	}
}
export class PredicateExprBetweenContext extends PredicateOperationsContext {
	constructor(parser: MySQLParser, ctx: PredicateOperationsContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public BETWEEN_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.BETWEEN_SYMBOL, 0);
	}
	public bitExpr(): BitExprContext {
		return this.getTypedRuleContext(BitExprContext, 0) as BitExprContext;
	}
	public AND_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.AND_SYMBOL, 0);
	}
	public predicate(): PredicateContext {
		return this.getTypedRuleContext(PredicateContext, 0) as PredicateContext;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterPredicateExprBetween) {
	 		listener.enterPredicateExprBetween(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitPredicateExprBetween) {
	 		listener.exitPredicateExprBetween(this);
		}
	}
}
export class PredicateExprInContext extends PredicateOperationsContext {
	constructor(parser: MySQLParser, ctx: PredicateOperationsContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public IN_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.IN_SYMBOL, 0);
	}
	public subquery(): SubqueryContext {
		return this.getTypedRuleContext(SubqueryContext, 0) as SubqueryContext;
	}
	public OPEN_PAR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
	}
	public exprList(): ExprListContext {
		return this.getTypedRuleContext(ExprListContext, 0) as ExprListContext;
	}
	public CLOSE_PAR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterPredicateExprIn) {
	 		listener.enterPredicateExprIn(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitPredicateExprIn) {
	 		listener.exitPredicateExprIn(this);
		}
	}
}
export class PredicateExprLikeContext extends PredicateOperationsContext {
	constructor(parser: MySQLParser, ctx: PredicateOperationsContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public LIKE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.LIKE_SYMBOL, 0);
	}
	public simpleExpr_list(): SimpleExprContext[] {
		return this.getTypedRuleContexts(SimpleExprContext) as SimpleExprContext[];
	}
	public simpleExpr(i: number): SimpleExprContext {
		return this.getTypedRuleContext(SimpleExprContext, i) as SimpleExprContext;
	}
	public ESCAPE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ESCAPE_SYMBOL, 0);
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterPredicateExprLike) {
	 		listener.enterPredicateExprLike(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitPredicateExprLike) {
	 		listener.exitPredicateExprLike(this);
		}
	}
}


export class BitExprContext extends ParserRuleContext {
	public _op!: Token;
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public simpleExpr(): SimpleExprContext {
		return this.getTypedRuleContext(SimpleExprContext, 0) as SimpleExprContext;
	}
	public bitExpr_list(): BitExprContext[] {
		return this.getTypedRuleContexts(BitExprContext) as BitExprContext[];
	}
	public bitExpr(i: number): BitExprContext {
		return this.getTypedRuleContext(BitExprContext, i) as BitExprContext;
	}
	public BITWISE_XOR_OPERATOR(): TerminalNode {
		return this.getToken(MySQLParser.BITWISE_XOR_OPERATOR, 0);
	}
	public MULT_OPERATOR(): TerminalNode {
		return this.getToken(MySQLParser.MULT_OPERATOR, 0);
	}
	public DIV_OPERATOR(): TerminalNode {
		return this.getToken(MySQLParser.DIV_OPERATOR, 0);
	}
	public MOD_OPERATOR(): TerminalNode {
		return this.getToken(MySQLParser.MOD_OPERATOR, 0);
	}
	public DIV_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.DIV_SYMBOL, 0);
	}
	public MOD_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.MOD_SYMBOL, 0);
	}
	public PLUS_OPERATOR(): TerminalNode {
		return this.getToken(MySQLParser.PLUS_OPERATOR, 0);
	}
	public MINUS_OPERATOR(): TerminalNode {
		return this.getToken(MySQLParser.MINUS_OPERATOR, 0);
	}
	public SHIFT_LEFT_OPERATOR(): TerminalNode {
		return this.getToken(MySQLParser.SHIFT_LEFT_OPERATOR, 0);
	}
	public SHIFT_RIGHT_OPERATOR(): TerminalNode {
		return this.getToken(MySQLParser.SHIFT_RIGHT_OPERATOR, 0);
	}
	public BITWISE_AND_OPERATOR(): TerminalNode {
		return this.getToken(MySQLParser.BITWISE_AND_OPERATOR, 0);
	}
	public BITWISE_OR_OPERATOR(): TerminalNode {
		return this.getToken(MySQLParser.BITWISE_OR_OPERATOR, 0);
	}
	public INTERVAL_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.INTERVAL_SYMBOL, 0);
	}
	public expr(): ExprContext {
		return this.getTypedRuleContext(ExprContext, 0) as ExprContext;
	}
	public interval(): IntervalContext {
		return this.getTypedRuleContext(IntervalContext, 0) as IntervalContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_bitExpr;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterBitExpr) {
	 		listener.enterBitExpr(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitBitExpr) {
	 		listener.exitBitExpr(this);
		}
	}
}


export class SimpleExprContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_simpleExpr;
	}
	public copyFrom(ctx: SimpleExprContext): void {
		super.copyFrom(ctx);
	}
}
export class SimpleExprConvertContext extends SimpleExprContext {
	constructor(parser: MySQLParser, ctx: SimpleExprContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public CONVERT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CONVERT_SYMBOL, 0);
	}
	public OPEN_PAR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
	}
	public expr(): ExprContext {
		return this.getTypedRuleContext(ExprContext, 0) as ExprContext;
	}
	public COMMA_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.COMMA_SYMBOL, 0);
	}
	public castType(): CastTypeContext {
		return this.getTypedRuleContext(CastTypeContext, 0) as CastTypeContext;
	}
	public CLOSE_PAR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterSimpleExprConvert) {
	 		listener.enterSimpleExprConvert(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitSimpleExprConvert) {
	 		listener.exitSimpleExprConvert(this);
		}
	}
}
export class SimpleExprVariableContext extends SimpleExprContext {
	constructor(parser: MySQLParser, ctx: SimpleExprContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public variable(): VariableContext {
		return this.getTypedRuleContext(VariableContext, 0) as VariableContext;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterSimpleExprVariable) {
	 		listener.enterSimpleExprVariable(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitSimpleExprVariable) {
	 		listener.exitSimpleExprVariable(this);
		}
	}
}
export class SimpleExprCastContext extends SimpleExprContext {
	constructor(parser: MySQLParser, ctx: SimpleExprContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public CAST_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CAST_SYMBOL, 0);
	}
	public OPEN_PAR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
	}
	public expr(): ExprContext {
		return this.getTypedRuleContext(ExprContext, 0) as ExprContext;
	}
	public AS_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.AS_SYMBOL, 0);
	}
	public castType(): CastTypeContext {
		return this.getTypedRuleContext(CastTypeContext, 0) as CastTypeContext;
	}
	public CLOSE_PAR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
	}
	public arrayCast(): ArrayCastContext {
		return this.getTypedRuleContext(ArrayCastContext, 0) as ArrayCastContext;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterSimpleExprCast) {
	 		listener.enterSimpleExprCast(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitSimpleExprCast) {
	 		listener.exitSimpleExprCast(this);
		}
	}
}
export class SimpleExprUnaryContext extends SimpleExprContext {
	public _op!: Token;
	constructor(parser: MySQLParser, ctx: SimpleExprContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public simpleExpr(): SimpleExprContext {
		return this.getTypedRuleContext(SimpleExprContext, 0) as SimpleExprContext;
	}
	public PLUS_OPERATOR(): TerminalNode {
		return this.getToken(MySQLParser.PLUS_OPERATOR, 0);
	}
	public MINUS_OPERATOR(): TerminalNode {
		return this.getToken(MySQLParser.MINUS_OPERATOR, 0);
	}
	public BITWISE_NOT_OPERATOR(): TerminalNode {
		return this.getToken(MySQLParser.BITWISE_NOT_OPERATOR, 0);
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterSimpleExprUnary) {
	 		listener.enterSimpleExprUnary(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitSimpleExprUnary) {
	 		listener.exitSimpleExprUnary(this);
		}
	}
}
export class SimpleExprOdbcContext extends SimpleExprContext {
	constructor(parser: MySQLParser, ctx: SimpleExprContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public OPEN_CURLY_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.OPEN_CURLY_SYMBOL, 0);
	}
	public identifier(): IdentifierContext {
		return this.getTypedRuleContext(IdentifierContext, 0) as IdentifierContext;
	}
	public expr(): ExprContext {
		return this.getTypedRuleContext(ExprContext, 0) as ExprContext;
	}
	public CLOSE_CURLY_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CLOSE_CURLY_SYMBOL, 0);
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterSimpleExprOdbc) {
	 		listener.enterSimpleExprOdbc(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitSimpleExprOdbc) {
	 		listener.exitSimpleExprOdbc(this);
		}
	}
}
export class SimpleExprRuntimeFunctionContext extends SimpleExprContext {
	constructor(parser: MySQLParser, ctx: SimpleExprContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public runtimeFunctionCall(): RuntimeFunctionCallContext {
		return this.getTypedRuleContext(RuntimeFunctionCallContext, 0) as RuntimeFunctionCallContext;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterSimpleExprRuntimeFunction) {
	 		listener.enterSimpleExprRuntimeFunction(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitSimpleExprRuntimeFunction) {
	 		listener.exitSimpleExprRuntimeFunction(this);
		}
	}
}
export class SimpleExprFunctionContext extends SimpleExprContext {
	constructor(parser: MySQLParser, ctx: SimpleExprContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public functionCall(): FunctionCallContext {
		return this.getTypedRuleContext(FunctionCallContext, 0) as FunctionCallContext;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterSimpleExprFunction) {
	 		listener.enterSimpleExprFunction(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitSimpleExprFunction) {
	 		listener.exitSimpleExprFunction(this);
		}
	}
}
export class SimpleExprCollateContext extends SimpleExprContext {
	constructor(parser: MySQLParser, ctx: SimpleExprContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public simpleExpr(): SimpleExprContext {
		return this.getTypedRuleContext(SimpleExprContext, 0) as SimpleExprContext;
	}
	public COLLATE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.COLLATE_SYMBOL, 0);
	}
	public textOrIdentifier(): TextOrIdentifierContext {
		return this.getTypedRuleContext(TextOrIdentifierContext, 0) as TextOrIdentifierContext;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterSimpleExprCollate) {
	 		listener.enterSimpleExprCollate(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitSimpleExprCollate) {
	 		listener.exitSimpleExprCollate(this);
		}
	}
}
export class SimpleExprMatchContext extends SimpleExprContext {
	constructor(parser: MySQLParser, ctx: SimpleExprContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public MATCH_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.MATCH_SYMBOL, 0);
	}
	public identListArg(): IdentListArgContext {
		return this.getTypedRuleContext(IdentListArgContext, 0) as IdentListArgContext;
	}
	public AGAINST_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.AGAINST_SYMBOL, 0);
	}
	public OPEN_PAR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
	}
	public bitExpr(): BitExprContext {
		return this.getTypedRuleContext(BitExprContext, 0) as BitExprContext;
	}
	public CLOSE_PAR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
	}
	public fulltextOptions(): FulltextOptionsContext {
		return this.getTypedRuleContext(FulltextOptionsContext, 0) as FulltextOptionsContext;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterSimpleExprMatch) {
	 		listener.enterSimpleExprMatch(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitSimpleExprMatch) {
	 		listener.exitSimpleExprMatch(this);
		}
	}
}
export class SimpleExprWindowingFunctionContext extends SimpleExprContext {
	constructor(parser: MySQLParser, ctx: SimpleExprContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public windowFunctionCall(): WindowFunctionCallContext {
		return this.getTypedRuleContext(WindowFunctionCallContext, 0) as WindowFunctionCallContext;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterSimpleExprWindowingFunction) {
	 		listener.enterSimpleExprWindowingFunction(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitSimpleExprWindowingFunction) {
	 		listener.exitSimpleExprWindowingFunction(this);
		}
	}
}
export class SimpleExprBinaryContext extends SimpleExprContext {
	constructor(parser: MySQLParser, ctx: SimpleExprContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public BINARY_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.BINARY_SYMBOL, 0);
	}
	public simpleExpr(): SimpleExprContext {
		return this.getTypedRuleContext(SimpleExprContext, 0) as SimpleExprContext;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterSimpleExprBinary) {
	 		listener.enterSimpleExprBinary(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitSimpleExprBinary) {
	 		listener.exitSimpleExprBinary(this);
		}
	}
}
export class SimpleExprColumnRefContext extends SimpleExprContext {
	constructor(parser: MySQLParser, ctx: SimpleExprContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public columnRef(): ColumnRefContext {
		return this.getTypedRuleContext(ColumnRefContext, 0) as ColumnRefContext;
	}
	public jsonOperator(): JsonOperatorContext {
		return this.getTypedRuleContext(JsonOperatorContext, 0) as JsonOperatorContext;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterSimpleExprColumnRef) {
	 		listener.enterSimpleExprColumnRef(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitSimpleExprColumnRef) {
	 		listener.exitSimpleExprColumnRef(this);
		}
	}
}
export class SimpleExprParamMarkerContext extends SimpleExprContext {
	constructor(parser: MySQLParser, ctx: SimpleExprContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public PARAM_MARKER(): TerminalNode {
		return this.getToken(MySQLParser.PARAM_MARKER, 0);
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterSimpleExprParamMarker) {
	 		listener.enterSimpleExprParamMarker(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitSimpleExprParamMarker) {
	 		listener.exitSimpleExprParamMarker(this);
		}
	}
}
export class SimpleExprSumContext extends SimpleExprContext {
	constructor(parser: MySQLParser, ctx: SimpleExprContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public sumExpr(): SumExprContext {
		return this.getTypedRuleContext(SumExprContext, 0) as SumExprContext;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterSimpleExprSum) {
	 		listener.enterSimpleExprSum(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitSimpleExprSum) {
	 		listener.exitSimpleExprSum(this);
		}
	}
}
export class SimpleExprConvertUsingContext extends SimpleExprContext {
	constructor(parser: MySQLParser, ctx: SimpleExprContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public CONVERT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CONVERT_SYMBOL, 0);
	}
	public OPEN_PAR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
	}
	public expr(): ExprContext {
		return this.getTypedRuleContext(ExprContext, 0) as ExprContext;
	}
	public USING_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.USING_SYMBOL, 0);
	}
	public charsetName(): CharsetNameContext {
		return this.getTypedRuleContext(CharsetNameContext, 0) as CharsetNameContext;
	}
	public CLOSE_PAR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterSimpleExprConvertUsing) {
	 		listener.enterSimpleExprConvertUsing(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitSimpleExprConvertUsing) {
	 		listener.exitSimpleExprConvertUsing(this);
		}
	}
}
export class SimpleExprSubQueryContext extends SimpleExprContext {
	constructor(parser: MySQLParser, ctx: SimpleExprContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public subquery(): SubqueryContext {
		return this.getTypedRuleContext(SubqueryContext, 0) as SubqueryContext;
	}
	public EXISTS_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.EXISTS_SYMBOL, 0);
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterSimpleExprSubQuery) {
	 		listener.enterSimpleExprSubQuery(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitSimpleExprSubQuery) {
	 		listener.exitSimpleExprSubQuery(this);
		}
	}
}
export class SimpleExprGroupingOperationContext extends SimpleExprContext {
	constructor(parser: MySQLParser, ctx: SimpleExprContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public groupingOperation(): GroupingOperationContext {
		return this.getTypedRuleContext(GroupingOperationContext, 0) as GroupingOperationContext;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterSimpleExprGroupingOperation) {
	 		listener.enterSimpleExprGroupingOperation(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitSimpleExprGroupingOperation) {
	 		listener.exitSimpleExprGroupingOperation(this);
		}
	}
}
export class SimpleExprNotContext extends SimpleExprContext {
	constructor(parser: MySQLParser, ctx: SimpleExprContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public not2Rule(): Not2RuleContext {
		return this.getTypedRuleContext(Not2RuleContext, 0) as Not2RuleContext;
	}
	public simpleExpr(): SimpleExprContext {
		return this.getTypedRuleContext(SimpleExprContext, 0) as SimpleExprContext;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterSimpleExprNot) {
	 		listener.enterSimpleExprNot(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitSimpleExprNot) {
	 		listener.exitSimpleExprNot(this);
		}
	}
}
export class SimpleExprValuesContext extends SimpleExprContext {
	constructor(parser: MySQLParser, ctx: SimpleExprContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public VALUES_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.VALUES_SYMBOL, 0);
	}
	public OPEN_PAR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
	}
	public simpleIdentifier(): SimpleIdentifierContext {
		return this.getTypedRuleContext(SimpleIdentifierContext, 0) as SimpleIdentifierContext;
	}
	public CLOSE_PAR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterSimpleExprValues) {
	 		listener.enterSimpleExprValues(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitSimpleExprValues) {
	 		listener.exitSimpleExprValues(this);
		}
	}
}
export class SimpleExprDefaultContext extends SimpleExprContext {
	constructor(parser: MySQLParser, ctx: SimpleExprContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public DEFAULT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
	}
	public OPEN_PAR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
	}
	public simpleIdentifier(): SimpleIdentifierContext {
		return this.getTypedRuleContext(SimpleIdentifierContext, 0) as SimpleIdentifierContext;
	}
	public CLOSE_PAR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterSimpleExprDefault) {
	 		listener.enterSimpleExprDefault(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitSimpleExprDefault) {
	 		listener.exitSimpleExprDefault(this);
		}
	}
}
export class SimpleExprListContext extends SimpleExprContext {
	constructor(parser: MySQLParser, ctx: SimpleExprContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public OPEN_PAR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
	}
	public exprList(): ExprListContext {
		return this.getTypedRuleContext(ExprListContext, 0) as ExprListContext;
	}
	public CLOSE_PAR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
	}
	public ROW_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ROW_SYMBOL, 0);
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterSimpleExprList) {
	 		listener.enterSimpleExprList(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitSimpleExprList) {
	 		listener.exitSimpleExprList(this);
		}
	}
}
export class SimpleExprIntervalContext extends SimpleExprContext {
	constructor(parser: MySQLParser, ctx: SimpleExprContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public INTERVAL_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.INTERVAL_SYMBOL, 0);
	}
	public expr_list(): ExprContext[] {
		return this.getTypedRuleContexts(ExprContext) as ExprContext[];
	}
	public expr(i: number): ExprContext {
		return this.getTypedRuleContext(ExprContext, i) as ExprContext;
	}
	public interval(): IntervalContext {
		return this.getTypedRuleContext(IntervalContext, 0) as IntervalContext;
	}
	public PLUS_OPERATOR(): TerminalNode {
		return this.getToken(MySQLParser.PLUS_OPERATOR, 0);
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterSimpleExprInterval) {
	 		listener.enterSimpleExprInterval(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitSimpleExprInterval) {
	 		listener.exitSimpleExprInterval(this);
		}
	}
}
export class SimpleExprCaseContext extends SimpleExprContext {
	constructor(parser: MySQLParser, ctx: SimpleExprContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public CASE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CASE_SYMBOL, 0);
	}
	public END_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.END_SYMBOL, 0);
	}
	public expr(): ExprContext {
		return this.getTypedRuleContext(ExprContext, 0) as ExprContext;
	}
	public whenExpression_list(): WhenExpressionContext[] {
		return this.getTypedRuleContexts(WhenExpressionContext) as WhenExpressionContext[];
	}
	public whenExpression(i: number): WhenExpressionContext {
		return this.getTypedRuleContext(WhenExpressionContext, i) as WhenExpressionContext;
	}
	public thenExpression_list(): ThenExpressionContext[] {
		return this.getTypedRuleContexts(ThenExpressionContext) as ThenExpressionContext[];
	}
	public thenExpression(i: number): ThenExpressionContext {
		return this.getTypedRuleContext(ThenExpressionContext, i) as ThenExpressionContext;
	}
	public elseExpression(): ElseExpressionContext {
		return this.getTypedRuleContext(ElseExpressionContext, 0) as ElseExpressionContext;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterSimpleExprCase) {
	 		listener.enterSimpleExprCase(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitSimpleExprCase) {
	 		listener.exitSimpleExprCase(this);
		}
	}
}
export class SimpleExprConcatContext extends SimpleExprContext {
	constructor(parser: MySQLParser, ctx: SimpleExprContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public simpleExpr_list(): SimpleExprContext[] {
		return this.getTypedRuleContexts(SimpleExprContext) as SimpleExprContext[];
	}
	public simpleExpr(i: number): SimpleExprContext {
		return this.getTypedRuleContext(SimpleExprContext, i) as SimpleExprContext;
	}
	public CONCAT_PIPES_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CONCAT_PIPES_SYMBOL, 0);
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterSimpleExprConcat) {
	 		listener.enterSimpleExprConcat(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitSimpleExprConcat) {
	 		listener.exitSimpleExprConcat(this);
		}
	}
}
export class SimpleExprLiteralContext extends SimpleExprContext {
	constructor(parser: MySQLParser, ctx: SimpleExprContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public literal(): LiteralContext {
		return this.getTypedRuleContext(LiteralContext, 0) as LiteralContext;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterSimpleExprLiteral) {
	 		listener.enterSimpleExprLiteral(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitSimpleExprLiteral) {
	 		listener.exitSimpleExprLiteral(this);
		}
	}
}


export class ArrayCastContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public ARRAY_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ARRAY_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_arrayCast;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterArrayCast) {
	 		listener.enterArrayCast(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitArrayCast) {
	 		listener.exitArrayCast(this);
		}
	}
}


export class JsonOperatorContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public JSON_SEPARATOR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.JSON_SEPARATOR_SYMBOL, 0);
	}
	public textStringLiteral(): TextStringLiteralContext {
		return this.getTypedRuleContext(TextStringLiteralContext, 0) as TextStringLiteralContext;
	}
	public JSON_UNQUOTED_SEPARATOR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.JSON_UNQUOTED_SEPARATOR_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_jsonOperator;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterJsonOperator) {
	 		listener.enterJsonOperator(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitJsonOperator) {
	 		listener.exitJsonOperator(this);
		}
	}
}


export class SumExprContext extends ParserRuleContext {
	public _name!: Token;
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public OPEN_PAR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
	}
	public inSumExpr(): InSumExprContext {
		return this.getTypedRuleContext(InSumExprContext, 0) as InSumExprContext;
	}
	public CLOSE_PAR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
	}
	public AVG_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.AVG_SYMBOL, 0);
	}
	public DISTINCT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.DISTINCT_SYMBOL, 0);
	}
	public windowingClause(): WindowingClauseContext {
		return this.getTypedRuleContext(WindowingClauseContext, 0) as WindowingClauseContext;
	}
	public BIT_AND_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.BIT_AND_SYMBOL, 0);
	}
	public BIT_OR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.BIT_OR_SYMBOL, 0);
	}
	public BIT_XOR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.BIT_XOR_SYMBOL, 0);
	}
	public jsonFunction(): JsonFunctionContext {
		return this.getTypedRuleContext(JsonFunctionContext, 0) as JsonFunctionContext;
	}
	public MULT_OPERATOR(): TerminalNode {
		return this.getToken(MySQLParser.MULT_OPERATOR, 0);
	}
	public COUNT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.COUNT_SYMBOL, 0);
	}
	public ALL_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ALL_SYMBOL, 0);
	}
	public exprList(): ExprListContext {
		return this.getTypedRuleContext(ExprListContext, 0) as ExprListContext;
	}
	public MIN_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.MIN_SYMBOL, 0);
	}
	public MAX_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.MAX_SYMBOL, 0);
	}
	public STD_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.STD_SYMBOL, 0);
	}
	public VARIANCE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.VARIANCE_SYMBOL, 0);
	}
	public STDDEV_SAMP_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.STDDEV_SAMP_SYMBOL, 0);
	}
	public VAR_SAMP_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.VAR_SAMP_SYMBOL, 0);
	}
	public SUM_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SUM_SYMBOL, 0);
	}
	public GROUP_CONCAT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.GROUP_CONCAT_SYMBOL, 0);
	}
	public orderClause(): OrderClauseContext {
		return this.getTypedRuleContext(OrderClauseContext, 0) as OrderClauseContext;
	}
	public SEPARATOR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SEPARATOR_SYMBOL, 0);
	}
	public textString(): TextStringContext {
		return this.getTypedRuleContext(TextStringContext, 0) as TextStringContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_sumExpr;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterSumExpr) {
	 		listener.enterSumExpr(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitSumExpr) {
	 		listener.exitSumExpr(this);
		}
	}
}


export class GroupingOperationContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public GROUPING_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.GROUPING_SYMBOL, 0);
	}
	public OPEN_PAR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
	}
	public exprList(): ExprListContext {
		return this.getTypedRuleContext(ExprListContext, 0) as ExprListContext;
	}
	public CLOSE_PAR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_groupingOperation;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterGroupingOperation) {
	 		listener.enterGroupingOperation(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitGroupingOperation) {
	 		listener.exitGroupingOperation(this);
		}
	}
}


export class WindowFunctionCallContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public parentheses(): ParenthesesContext {
		return this.getTypedRuleContext(ParenthesesContext, 0) as ParenthesesContext;
	}
	public windowingClause(): WindowingClauseContext {
		return this.getTypedRuleContext(WindowingClauseContext, 0) as WindowingClauseContext;
	}
	public ROW_NUMBER_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ROW_NUMBER_SYMBOL, 0);
	}
	public RANK_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.RANK_SYMBOL, 0);
	}
	public DENSE_RANK_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.DENSE_RANK_SYMBOL, 0);
	}
	public CUME_DIST_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CUME_DIST_SYMBOL, 0);
	}
	public PERCENT_RANK_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.PERCENT_RANK_SYMBOL, 0);
	}
	public NTILE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.NTILE_SYMBOL, 0);
	}
	public simpleExprWithParentheses(): SimpleExprWithParenthesesContext {
		return this.getTypedRuleContext(SimpleExprWithParenthesesContext, 0) as SimpleExprWithParenthesesContext;
	}
	public OPEN_PAR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
	}
	public expr(): ExprContext {
		return this.getTypedRuleContext(ExprContext, 0) as ExprContext;
	}
	public CLOSE_PAR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
	}
	public LEAD_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.LEAD_SYMBOL, 0);
	}
	public LAG_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.LAG_SYMBOL, 0);
	}
	public leadLagInfo(): LeadLagInfoContext {
		return this.getTypedRuleContext(LeadLagInfoContext, 0) as LeadLagInfoContext;
	}
	public nullTreatment(): NullTreatmentContext {
		return this.getTypedRuleContext(NullTreatmentContext, 0) as NullTreatmentContext;
	}
	public exprWithParentheses(): ExprWithParenthesesContext {
		return this.getTypedRuleContext(ExprWithParenthesesContext, 0) as ExprWithParenthesesContext;
	}
	public FIRST_VALUE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.FIRST_VALUE_SYMBOL, 0);
	}
	public LAST_VALUE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.LAST_VALUE_SYMBOL, 0);
	}
	public NTH_VALUE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.NTH_VALUE_SYMBOL, 0);
	}
	public COMMA_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.COMMA_SYMBOL, 0);
	}
	public simpleExpr(): SimpleExprContext {
		return this.getTypedRuleContext(SimpleExprContext, 0) as SimpleExprContext;
	}
	public FROM_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.FROM_SYMBOL, 0);
	}
	public FIRST_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.FIRST_SYMBOL, 0);
	}
	public LAST_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.LAST_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_windowFunctionCall;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterWindowFunctionCall) {
	 		listener.enterWindowFunctionCall(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitWindowFunctionCall) {
	 		listener.exitWindowFunctionCall(this);
		}
	}
}


export class WindowingClauseContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public OVER_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.OVER_SYMBOL, 0);
	}
	public windowName(): WindowNameContext {
		return this.getTypedRuleContext(WindowNameContext, 0) as WindowNameContext;
	}
	public windowSpec(): WindowSpecContext {
		return this.getTypedRuleContext(WindowSpecContext, 0) as WindowSpecContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_windowingClause;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterWindowingClause) {
	 		listener.enterWindowingClause(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitWindowingClause) {
	 		listener.exitWindowingClause(this);
		}
	}
}


export class LeadLagInfoContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public COMMA_SYMBOL_list(): TerminalNode[] {
	    	return this.getTokens(MySQLParser.COMMA_SYMBOL);
	}
	public COMMA_SYMBOL(i: number): TerminalNode {
		return this.getToken(MySQLParser.COMMA_SYMBOL, i);
	}
	public ulonglong_number(): Ulonglong_numberContext {
		return this.getTypedRuleContext(Ulonglong_numberContext, 0) as Ulonglong_numberContext;
	}
	public PARAM_MARKER(): TerminalNode {
		return this.getToken(MySQLParser.PARAM_MARKER, 0);
	}
	public expr(): ExprContext {
		return this.getTypedRuleContext(ExprContext, 0) as ExprContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_leadLagInfo;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterLeadLagInfo) {
	 		listener.enterLeadLagInfo(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitLeadLagInfo) {
	 		listener.exitLeadLagInfo(this);
		}
	}
}


export class NullTreatmentContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public NULLS_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.NULLS_SYMBOL, 0);
	}
	public RESPECT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.RESPECT_SYMBOL, 0);
	}
	public IGNORE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.IGNORE_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_nullTreatment;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterNullTreatment) {
	 		listener.enterNullTreatment(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitNullTreatment) {
	 		listener.exitNullTreatment(this);
		}
	}
}


export class JsonFunctionContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public JSON_ARRAYAGG_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.JSON_ARRAYAGG_SYMBOL, 0);
	}
	public OPEN_PAR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
	}
	public inSumExpr_list(): InSumExprContext[] {
		return this.getTypedRuleContexts(InSumExprContext) as InSumExprContext[];
	}
	public inSumExpr(i: number): InSumExprContext {
		return this.getTypedRuleContext(InSumExprContext, i) as InSumExprContext;
	}
	public CLOSE_PAR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
	}
	public windowingClause(): WindowingClauseContext {
		return this.getTypedRuleContext(WindowingClauseContext, 0) as WindowingClauseContext;
	}
	public JSON_OBJECTAGG_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.JSON_OBJECTAGG_SYMBOL, 0);
	}
	public COMMA_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.COMMA_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_jsonFunction;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterJsonFunction) {
	 		listener.enterJsonFunction(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitJsonFunction) {
	 		listener.exitJsonFunction(this);
		}
	}
}


export class InSumExprContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public expr(): ExprContext {
		return this.getTypedRuleContext(ExprContext, 0) as ExprContext;
	}
	public ALL_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ALL_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_inSumExpr;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterInSumExpr) {
	 		listener.enterInSumExpr(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitInSumExpr) {
	 		listener.exitInSumExpr(this);
		}
	}
}


export class IdentListArgContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public identList(): IdentListContext {
		return this.getTypedRuleContext(IdentListContext, 0) as IdentListContext;
	}
	public OPEN_PAR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
	}
	public CLOSE_PAR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_identListArg;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterIdentListArg) {
	 		listener.enterIdentListArg(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitIdentListArg) {
	 		listener.exitIdentListArg(this);
		}
	}
}


export class IdentListContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public simpleIdentifier_list(): SimpleIdentifierContext[] {
		return this.getTypedRuleContexts(SimpleIdentifierContext) as SimpleIdentifierContext[];
	}
	public simpleIdentifier(i: number): SimpleIdentifierContext {
		return this.getTypedRuleContext(SimpleIdentifierContext, i) as SimpleIdentifierContext;
	}
	public COMMA_SYMBOL_list(): TerminalNode[] {
	    	return this.getTokens(MySQLParser.COMMA_SYMBOL);
	}
	public COMMA_SYMBOL(i: number): TerminalNode {
		return this.getToken(MySQLParser.COMMA_SYMBOL, i);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_identList;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterIdentList) {
	 		listener.enterIdentList(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitIdentList) {
	 		listener.exitIdentList(this);
		}
	}
}


export class FulltextOptionsContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public IN_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.IN_SYMBOL, 0);
	}
	public BOOLEAN_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.BOOLEAN_SYMBOL, 0);
	}
	public MODE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.MODE_SYMBOL, 0);
	}
	public NATURAL_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.NATURAL_SYMBOL, 0);
	}
	public LANGUAGE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.LANGUAGE_SYMBOL, 0);
	}
	public WITH_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.WITH_SYMBOL, 0);
	}
	public QUERY_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.QUERY_SYMBOL, 0);
	}
	public EXPANSION_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.EXPANSION_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_fulltextOptions;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterFulltextOptions) {
	 		listener.enterFulltextOptions(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitFulltextOptions) {
	 		listener.exitFulltextOptions(this);
		}
	}
}


export class RuntimeFunctionCallContext extends ParserRuleContext {
	public _name!: Token;
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public OPEN_PAR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
	}
	public exprList(): ExprListContext {
		return this.getTypedRuleContext(ExprListContext, 0) as ExprListContext;
	}
	public CLOSE_PAR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
	}
	public CHAR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CHAR_SYMBOL, 0);
	}
	public USING_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.USING_SYMBOL, 0);
	}
	public charsetName(): CharsetNameContext {
		return this.getTypedRuleContext(CharsetNameContext, 0) as CharsetNameContext;
	}
	public CURRENT_USER_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CURRENT_USER_SYMBOL, 0);
	}
	public parentheses(): ParenthesesContext {
		return this.getTypedRuleContext(ParenthesesContext, 0) as ParenthesesContext;
	}
	public exprWithParentheses(): ExprWithParenthesesContext {
		return this.getTypedRuleContext(ExprWithParenthesesContext, 0) as ExprWithParenthesesContext;
	}
	public DATE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.DATE_SYMBOL, 0);
	}
	public DAY_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.DAY_SYMBOL, 0);
	}
	public HOUR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.HOUR_SYMBOL, 0);
	}
	public expr_list(): ExprContext[] {
		return this.getTypedRuleContexts(ExprContext) as ExprContext[];
	}
	public expr(i: number): ExprContext {
		return this.getTypedRuleContext(ExprContext, i) as ExprContext;
	}
	public COMMA_SYMBOL_list(): TerminalNode[] {
	    	return this.getTokens(MySQLParser.COMMA_SYMBOL);
	}
	public COMMA_SYMBOL(i: number): TerminalNode {
		return this.getToken(MySQLParser.COMMA_SYMBOL, i);
	}
	public INSERT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.INSERT_SYMBOL, 0);
	}
	public INTERVAL_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.INTERVAL_SYMBOL, 0);
	}
	public LEFT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.LEFT_SYMBOL, 0);
	}
	public MINUTE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.MINUTE_SYMBOL, 0);
	}
	public MONTH_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.MONTH_SYMBOL, 0);
	}
	public RIGHT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.RIGHT_SYMBOL, 0);
	}
	public SECOND_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SECOND_SYMBOL, 0);
	}
	public TIME_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.TIME_SYMBOL, 0);
	}
	public TIMESTAMP_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.TIMESTAMP_SYMBOL, 0);
	}
	public trimFunction(): TrimFunctionContext {
		return this.getTypedRuleContext(TrimFunctionContext, 0) as TrimFunctionContext;
	}
	public USER_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.USER_SYMBOL, 0);
	}
	public VALUES_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.VALUES_SYMBOL, 0);
	}
	public YEAR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.YEAR_SYMBOL, 0);
	}
	public ADDDATE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ADDDATE_SYMBOL, 0);
	}
	public SUBDATE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SUBDATE_SYMBOL, 0);
	}
	public interval(): IntervalContext {
		return this.getTypedRuleContext(IntervalContext, 0) as IntervalContext;
	}
	public CURDATE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CURDATE_SYMBOL, 0);
	}
	public CURTIME_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CURTIME_SYMBOL, 0);
	}
	public timeFunctionParameters(): TimeFunctionParametersContext {
		return this.getTypedRuleContext(TimeFunctionParametersContext, 0) as TimeFunctionParametersContext;
	}
	public DATE_ADD_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.DATE_ADD_SYMBOL, 0);
	}
	public DATE_SUB_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.DATE_SUB_SYMBOL, 0);
	}
	public FROM_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.FROM_SYMBOL, 0);
	}
	public EXTRACT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.EXTRACT_SYMBOL, 0);
	}
	public dateTimeTtype(): DateTimeTtypeContext {
		return this.getTypedRuleContext(DateTimeTtypeContext, 0) as DateTimeTtypeContext;
	}
	public GET_FORMAT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.GET_FORMAT_SYMBOL, 0);
	}
	public NOW_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.NOW_SYMBOL, 0);
	}
	public bitExpr(): BitExprContext {
		return this.getTypedRuleContext(BitExprContext, 0) as BitExprContext;
	}
	public IN_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.IN_SYMBOL, 0);
	}
	public POSITION_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.POSITION_SYMBOL, 0);
	}
	public substringFunction(): SubstringFunctionContext {
		return this.getTypedRuleContext(SubstringFunctionContext, 0) as SubstringFunctionContext;
	}
	public SYSDATE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SYSDATE_SYMBOL, 0);
	}
	public intervalTimeStamp(): IntervalTimeStampContext {
		return this.getTypedRuleContext(IntervalTimeStampContext, 0) as IntervalTimeStampContext;
	}
	public TIMESTAMP_ADD_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.TIMESTAMP_ADD_SYMBOL, 0);
	}
	public TIMESTAMP_DIFF_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.TIMESTAMP_DIFF_SYMBOL, 0);
	}
	public UTC_DATE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.UTC_DATE_SYMBOL, 0);
	}
	public UTC_TIME_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.UTC_TIME_SYMBOL, 0);
	}
	public UTC_TIMESTAMP_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.UTC_TIMESTAMP_SYMBOL, 0);
	}
	public ASCII_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ASCII_SYMBOL, 0);
	}
	public CHARSET_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CHARSET_SYMBOL, 0);
	}
	public exprListWithParentheses(): ExprListWithParenthesesContext {
		return this.getTypedRuleContext(ExprListWithParenthesesContext, 0) as ExprListWithParenthesesContext;
	}
	public COALESCE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.COALESCE_SYMBOL, 0);
	}
	public COLLATION_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.COLLATION_SYMBOL, 0);
	}
	public DATABASE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.DATABASE_SYMBOL, 0);
	}
	public IF_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.IF_SYMBOL, 0);
	}
	public FORMAT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.FORMAT_SYMBOL, 0);
	}
	public MICROSECOND_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.MICROSECOND_SYMBOL, 0);
	}
	public MOD_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.MOD_SYMBOL, 0);
	}
	public textLiteral(): TextLiteralContext {
		return this.getTypedRuleContext(TextLiteralContext, 0) as TextLiteralContext;
	}
	public OLD_PASSWORD_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.OLD_PASSWORD_SYMBOL, 0);
	}
	public PASSWORD_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.PASSWORD_SYMBOL, 0);
	}
	public QUARTER_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.QUARTER_SYMBOL, 0);
	}
	public REPEAT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.REPEAT_SYMBOL, 0);
	}
	public REPLACE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.REPLACE_SYMBOL, 0);
	}
	public REVERSE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.REVERSE_SYMBOL, 0);
	}
	public ROW_COUNT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ROW_COUNT_SYMBOL, 0);
	}
	public TRUNCATE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.TRUNCATE_SYMBOL, 0);
	}
	public WEEK_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.WEEK_SYMBOL, 0);
	}
	public WEIGHT_STRING_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.WEIGHT_STRING_SYMBOL, 0);
	}
	public AS_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.AS_SYMBOL, 0);
	}
	public BINARY_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.BINARY_SYMBOL, 0);
	}
	public wsNumCodepoints(): WsNumCodepointsContext {
		return this.getTypedRuleContext(WsNumCodepointsContext, 0) as WsNumCodepointsContext;
	}
	public ulong_number_list(): Ulong_numberContext[] {
		return this.getTypedRuleContexts(Ulong_numberContext) as Ulong_numberContext[];
	}
	public ulong_number(i: number): Ulong_numberContext {
		return this.getTypedRuleContext(Ulong_numberContext, i) as Ulong_numberContext;
	}
	public weightStringLevels(): WeightStringLevelsContext {
		return this.getTypedRuleContext(WeightStringLevelsContext, 0) as WeightStringLevelsContext;
	}
	public geometryFunction(): GeometryFunctionContext {
		return this.getTypedRuleContext(GeometryFunctionContext, 0) as GeometryFunctionContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_runtimeFunctionCall;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterRuntimeFunctionCall) {
	 		listener.enterRuntimeFunctionCall(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitRuntimeFunctionCall) {
	 		listener.exitRuntimeFunctionCall(this);
		}
	}
}


export class GeometryFunctionContext extends ParserRuleContext {
	public _name!: Token;
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public OPEN_PAR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
	}
	public expr_list(): ExprContext[] {
		return this.getTypedRuleContexts(ExprContext) as ExprContext[];
	}
	public expr(i: number): ExprContext {
		return this.getTypedRuleContext(ExprContext, i) as ExprContext;
	}
	public COMMA_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.COMMA_SYMBOL, 0);
	}
	public CLOSE_PAR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
	}
	public CONTAINS_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CONTAINS_SYMBOL, 0);
	}
	public GEOMETRYCOLLECTION_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.GEOMETRYCOLLECTION_SYMBOL, 0);
	}
	public exprList(): ExprListContext {
		return this.getTypedRuleContext(ExprListContext, 0) as ExprListContext;
	}
	public exprListWithParentheses(): ExprListWithParenthesesContext {
		return this.getTypedRuleContext(ExprListWithParenthesesContext, 0) as ExprListWithParenthesesContext;
	}
	public LINESTRING_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.LINESTRING_SYMBOL, 0);
	}
	public MULTILINESTRING_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.MULTILINESTRING_SYMBOL, 0);
	}
	public MULTIPOINT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.MULTIPOINT_SYMBOL, 0);
	}
	public MULTIPOLYGON_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.MULTIPOLYGON_SYMBOL, 0);
	}
	public POINT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.POINT_SYMBOL, 0);
	}
	public POLYGON_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.POLYGON_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_geometryFunction;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterGeometryFunction) {
	 		listener.enterGeometryFunction(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitGeometryFunction) {
	 		listener.exitGeometryFunction(this);
		}
	}
}


export class TimeFunctionParametersContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public OPEN_PAR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
	}
	public CLOSE_PAR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
	}
	public fractionalPrecision(): FractionalPrecisionContext {
		return this.getTypedRuleContext(FractionalPrecisionContext, 0) as FractionalPrecisionContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_timeFunctionParameters;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterTimeFunctionParameters) {
	 		listener.enterTimeFunctionParameters(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitTimeFunctionParameters) {
	 		listener.exitTimeFunctionParameters(this);
		}
	}
}


export class FractionalPrecisionContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public INT_NUMBER(): TerminalNode {
		return this.getToken(MySQLParser.INT_NUMBER, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_fractionalPrecision;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterFractionalPrecision) {
	 		listener.enterFractionalPrecision(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitFractionalPrecision) {
	 		listener.exitFractionalPrecision(this);
		}
	}
}


export class WeightStringLevelsContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LEVEL_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.LEVEL_SYMBOL, 0);
	}
	public real_ulong_number_list(): Real_ulong_numberContext[] {
		return this.getTypedRuleContexts(Real_ulong_numberContext) as Real_ulong_numberContext[];
	}
	public real_ulong_number(i: number): Real_ulong_numberContext {
		return this.getTypedRuleContext(Real_ulong_numberContext, i) as Real_ulong_numberContext;
	}
	public MINUS_OPERATOR(): TerminalNode {
		return this.getToken(MySQLParser.MINUS_OPERATOR, 0);
	}
	public weightStringLevelListItem_list(): WeightStringLevelListItemContext[] {
		return this.getTypedRuleContexts(WeightStringLevelListItemContext) as WeightStringLevelListItemContext[];
	}
	public weightStringLevelListItem(i: number): WeightStringLevelListItemContext {
		return this.getTypedRuleContext(WeightStringLevelListItemContext, i) as WeightStringLevelListItemContext;
	}
	public COMMA_SYMBOL_list(): TerminalNode[] {
	    	return this.getTokens(MySQLParser.COMMA_SYMBOL);
	}
	public COMMA_SYMBOL(i: number): TerminalNode {
		return this.getToken(MySQLParser.COMMA_SYMBOL, i);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_weightStringLevels;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterWeightStringLevels) {
	 		listener.enterWeightStringLevels(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitWeightStringLevels) {
	 		listener.exitWeightStringLevels(this);
		}
	}
}


export class WeightStringLevelListItemContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public real_ulong_number(): Real_ulong_numberContext {
		return this.getTypedRuleContext(Real_ulong_numberContext, 0) as Real_ulong_numberContext;
	}
	public REVERSE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.REVERSE_SYMBOL, 0);
	}
	public ASC_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ASC_SYMBOL, 0);
	}
	public DESC_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.DESC_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_weightStringLevelListItem;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterWeightStringLevelListItem) {
	 		listener.enterWeightStringLevelListItem(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitWeightStringLevelListItem) {
	 		listener.exitWeightStringLevelListItem(this);
		}
	}
}


export class DateTimeTtypeContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public DATE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.DATE_SYMBOL, 0);
	}
	public TIME_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.TIME_SYMBOL, 0);
	}
	public DATETIME_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.DATETIME_SYMBOL, 0);
	}
	public TIMESTAMP_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.TIMESTAMP_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_dateTimeTtype;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterDateTimeTtype) {
	 		listener.enterDateTimeTtype(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitDateTimeTtype) {
	 		listener.exitDateTimeTtype(this);
		}
	}
}


export class TrimFunctionContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public TRIM_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.TRIM_SYMBOL, 0);
	}
	public OPEN_PAR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
	}
	public CLOSE_PAR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
	}
	public expr_list(): ExprContext[] {
		return this.getTypedRuleContexts(ExprContext) as ExprContext[];
	}
	public expr(i: number): ExprContext {
		return this.getTypedRuleContext(ExprContext, i) as ExprContext;
	}
	public LEADING_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.LEADING_SYMBOL, 0);
	}
	public FROM_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.FROM_SYMBOL, 0);
	}
	public TRAILING_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.TRAILING_SYMBOL, 0);
	}
	public BOTH_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.BOTH_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_trimFunction;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterTrimFunction) {
	 		listener.enterTrimFunction(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitTrimFunction) {
	 		listener.exitTrimFunction(this);
		}
	}
}


export class SubstringFunctionContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public SUBSTRING_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SUBSTRING_SYMBOL, 0);
	}
	public OPEN_PAR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
	}
	public expr_list(): ExprContext[] {
		return this.getTypedRuleContexts(ExprContext) as ExprContext[];
	}
	public expr(i: number): ExprContext {
		return this.getTypedRuleContext(ExprContext, i) as ExprContext;
	}
	public CLOSE_PAR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
	}
	public COMMA_SYMBOL_list(): TerminalNode[] {
	    	return this.getTokens(MySQLParser.COMMA_SYMBOL);
	}
	public COMMA_SYMBOL(i: number): TerminalNode {
		return this.getToken(MySQLParser.COMMA_SYMBOL, i);
	}
	public FROM_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.FROM_SYMBOL, 0);
	}
	public FOR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.FOR_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_substringFunction;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterSubstringFunction) {
	 		listener.enterSubstringFunction(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitSubstringFunction) {
	 		listener.exitSubstringFunction(this);
		}
	}
}


export class FunctionCallContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public pureIdentifier(): PureIdentifierContext {
		return this.getTypedRuleContext(PureIdentifierContext, 0) as PureIdentifierContext;
	}
	public OPEN_PAR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
	}
	public CLOSE_PAR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
	}
	public udfExprList(): UdfExprListContext {
		return this.getTypedRuleContext(UdfExprListContext, 0) as UdfExprListContext;
	}
	public qualifiedIdentifier(): QualifiedIdentifierContext {
		return this.getTypedRuleContext(QualifiedIdentifierContext, 0) as QualifiedIdentifierContext;
	}
	public exprList(): ExprListContext {
		return this.getTypedRuleContext(ExprListContext, 0) as ExprListContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_functionCall;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterFunctionCall) {
	 		listener.enterFunctionCall(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitFunctionCall) {
	 		listener.exitFunctionCall(this);
		}
	}
}


export class UdfExprListContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public udfExpr_list(): UdfExprContext[] {
		return this.getTypedRuleContexts(UdfExprContext) as UdfExprContext[];
	}
	public udfExpr(i: number): UdfExprContext {
		return this.getTypedRuleContext(UdfExprContext, i) as UdfExprContext;
	}
	public COMMA_SYMBOL_list(): TerminalNode[] {
	    	return this.getTokens(MySQLParser.COMMA_SYMBOL);
	}
	public COMMA_SYMBOL(i: number): TerminalNode {
		return this.getToken(MySQLParser.COMMA_SYMBOL, i);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_udfExprList;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterUdfExprList) {
	 		listener.enterUdfExprList(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitUdfExprList) {
	 		listener.exitUdfExprList(this);
		}
	}
}


export class UdfExprContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public expr(): ExprContext {
		return this.getTypedRuleContext(ExprContext, 0) as ExprContext;
	}
	public selectAlias(): SelectAliasContext {
		return this.getTypedRuleContext(SelectAliasContext, 0) as SelectAliasContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_udfExpr;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterUdfExpr) {
	 		listener.enterUdfExpr(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitUdfExpr) {
	 		listener.exitUdfExpr(this);
		}
	}
}


export class VariableContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public userVariable(): UserVariableContext {
		return this.getTypedRuleContext(UserVariableContext, 0) as UserVariableContext;
	}
	public ASSIGN_OPERATOR(): TerminalNode {
		return this.getToken(MySQLParser.ASSIGN_OPERATOR, 0);
	}
	public expr(): ExprContext {
		return this.getTypedRuleContext(ExprContext, 0) as ExprContext;
	}
	public systemVariable(): SystemVariableContext {
		return this.getTypedRuleContext(SystemVariableContext, 0) as SystemVariableContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_variable;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterVariable) {
	 		listener.enterVariable(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitVariable) {
	 		listener.exitVariable(this);
		}
	}
}


export class UserVariableContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public AT_SIGN_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.AT_SIGN_SYMBOL, 0);
	}
	public textOrIdentifier(): TextOrIdentifierContext {
		return this.getTypedRuleContext(TextOrIdentifierContext, 0) as TextOrIdentifierContext;
	}
	public AT_TEXT_SUFFIX(): TerminalNode {
		return this.getToken(MySQLParser.AT_TEXT_SUFFIX, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_userVariable;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterUserVariable) {
	 		listener.enterUserVariable(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitUserVariable) {
	 		listener.exitUserVariable(this);
		}
	}
}


export class SystemVariableContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public AT_AT_SIGN_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.AT_AT_SIGN_SYMBOL, 0);
	}
	public textOrIdentifier(): TextOrIdentifierContext {
		return this.getTypedRuleContext(TextOrIdentifierContext, 0) as TextOrIdentifierContext;
	}
	public varIdentType(): VarIdentTypeContext {
		return this.getTypedRuleContext(VarIdentTypeContext, 0) as VarIdentTypeContext;
	}
	public dotIdentifier(): DotIdentifierContext {
		return this.getTypedRuleContext(DotIdentifierContext, 0) as DotIdentifierContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_systemVariable;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterSystemVariable) {
	 		listener.enterSystemVariable(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitSystemVariable) {
	 		listener.exitSystemVariable(this);
		}
	}
}


export class InternalVariableNameContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public identifier(): IdentifierContext {
		return this.getTypedRuleContext(IdentifierContext, 0) as IdentifierContext;
	}
	public lValueIdentifier(): LValueIdentifierContext {
		return this.getTypedRuleContext(LValueIdentifierContext, 0) as LValueIdentifierContext;
	}
	public dotIdentifier(): DotIdentifierContext {
		return this.getTypedRuleContext(DotIdentifierContext, 0) as DotIdentifierContext;
	}
	public DEFAULT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_internalVariableName;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterInternalVariableName) {
	 		listener.enterInternalVariableName(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitInternalVariableName) {
	 		listener.exitInternalVariableName(this);
		}
	}
}


export class WhenExpressionContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public WHEN_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.WHEN_SYMBOL, 0);
	}
	public expr(): ExprContext {
		return this.getTypedRuleContext(ExprContext, 0) as ExprContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_whenExpression;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterWhenExpression) {
	 		listener.enterWhenExpression(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitWhenExpression) {
	 		listener.exitWhenExpression(this);
		}
	}
}


export class ThenExpressionContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public THEN_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.THEN_SYMBOL, 0);
	}
	public expr(): ExprContext {
		return this.getTypedRuleContext(ExprContext, 0) as ExprContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_thenExpression;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterThenExpression) {
	 		listener.enterThenExpression(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitThenExpression) {
	 		listener.exitThenExpression(this);
		}
	}
}


export class ElseExpressionContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public ELSE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ELSE_SYMBOL, 0);
	}
	public expr(): ExprContext {
		return this.getTypedRuleContext(ExprContext, 0) as ExprContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_elseExpression;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterElseExpression) {
	 		listener.enterElseExpression(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitElseExpression) {
	 		listener.exitElseExpression(this);
		}
	}
}


export class CastTypeContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public BINARY_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.BINARY_SYMBOL, 0);
	}
	public fieldLength(): FieldLengthContext {
		return this.getTypedRuleContext(FieldLengthContext, 0) as FieldLengthContext;
	}
	public CHAR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CHAR_SYMBOL, 0);
	}
	public charsetWithOptBinary(): CharsetWithOptBinaryContext {
		return this.getTypedRuleContext(CharsetWithOptBinaryContext, 0) as CharsetWithOptBinaryContext;
	}
	public nchar(): NcharContext {
		return this.getTypedRuleContext(NcharContext, 0) as NcharContext;
	}
	public SIGNED_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SIGNED_SYMBOL, 0);
	}
	public INT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.INT_SYMBOL, 0);
	}
	public UNSIGNED_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.UNSIGNED_SYMBOL, 0);
	}
	public DATE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.DATE_SYMBOL, 0);
	}
	public TIME_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.TIME_SYMBOL, 0);
	}
	public typeDatetimePrecision(): TypeDatetimePrecisionContext {
		return this.getTypedRuleContext(TypeDatetimePrecisionContext, 0) as TypeDatetimePrecisionContext;
	}
	public DATETIME_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.DATETIME_SYMBOL, 0);
	}
	public DECIMAL_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.DECIMAL_SYMBOL, 0);
	}
	public floatOptions(): FloatOptionsContext {
		return this.getTypedRuleContext(FloatOptionsContext, 0) as FloatOptionsContext;
	}
	public JSON_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.JSON_SYMBOL, 0);
	}
	public realType(): RealTypeContext {
		return this.getTypedRuleContext(RealTypeContext, 0) as RealTypeContext;
	}
	public FLOAT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.FLOAT_SYMBOL, 0);
	}
	public standardFloatOptions(): StandardFloatOptionsContext {
		return this.getTypedRuleContext(StandardFloatOptionsContext, 0) as StandardFloatOptionsContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_castType;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterCastType) {
	 		listener.enterCastType(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitCastType) {
	 		listener.exitCastType(this);
		}
	}
}


export class ExprListContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public expr_list(): ExprContext[] {
		return this.getTypedRuleContexts(ExprContext) as ExprContext[];
	}
	public expr(i: number): ExprContext {
		return this.getTypedRuleContext(ExprContext, i) as ExprContext;
	}
	public COMMA_SYMBOL_list(): TerminalNode[] {
	    	return this.getTokens(MySQLParser.COMMA_SYMBOL);
	}
	public COMMA_SYMBOL(i: number): TerminalNode {
		return this.getToken(MySQLParser.COMMA_SYMBOL, i);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_exprList;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterExprList) {
	 		listener.enterExprList(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitExprList) {
	 		listener.exitExprList(this);
		}
	}
}


export class CharsetContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public CHAR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CHAR_SYMBOL, 0);
	}
	public SET_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SET_SYMBOL, 0);
	}
	public CHARSET_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CHARSET_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_charset;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterCharset) {
	 		listener.enterCharset(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitCharset) {
	 		listener.exitCharset(this);
		}
	}
}


export class NotRuleContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public NOT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.NOT_SYMBOL, 0);
	}
	public NOT2_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.NOT2_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_notRule;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterNotRule) {
	 		listener.enterNotRule(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitNotRule) {
	 		listener.exitNotRule(this);
		}
	}
}


export class Not2RuleContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LOGICAL_NOT_OPERATOR(): TerminalNode {
		return this.getToken(MySQLParser.LOGICAL_NOT_OPERATOR, 0);
	}
	public NOT2_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.NOT2_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_not2Rule;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterNot2Rule) {
	 		listener.enterNot2Rule(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitNot2Rule) {
	 		listener.exitNot2Rule(this);
		}
	}
}


export class IntervalContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public intervalTimeStamp(): IntervalTimeStampContext {
		return this.getTypedRuleContext(IntervalTimeStampContext, 0) as IntervalTimeStampContext;
	}
	public SECOND_MICROSECOND_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SECOND_MICROSECOND_SYMBOL, 0);
	}
	public MINUTE_MICROSECOND_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.MINUTE_MICROSECOND_SYMBOL, 0);
	}
	public MINUTE_SECOND_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.MINUTE_SECOND_SYMBOL, 0);
	}
	public HOUR_MICROSECOND_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.HOUR_MICROSECOND_SYMBOL, 0);
	}
	public HOUR_SECOND_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.HOUR_SECOND_SYMBOL, 0);
	}
	public HOUR_MINUTE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.HOUR_MINUTE_SYMBOL, 0);
	}
	public DAY_MICROSECOND_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.DAY_MICROSECOND_SYMBOL, 0);
	}
	public DAY_SECOND_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.DAY_SECOND_SYMBOL, 0);
	}
	public DAY_MINUTE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.DAY_MINUTE_SYMBOL, 0);
	}
	public DAY_HOUR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.DAY_HOUR_SYMBOL, 0);
	}
	public YEAR_MONTH_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.YEAR_MONTH_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_interval;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterInterval) {
	 		listener.enterInterval(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitInterval) {
	 		listener.exitInterval(this);
		}
	}
}


export class IntervalTimeStampContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public MICROSECOND_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.MICROSECOND_SYMBOL, 0);
	}
	public SECOND_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SECOND_SYMBOL, 0);
	}
	public MINUTE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.MINUTE_SYMBOL, 0);
	}
	public HOUR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.HOUR_SYMBOL, 0);
	}
	public DAY_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.DAY_SYMBOL, 0);
	}
	public WEEK_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.WEEK_SYMBOL, 0);
	}
	public MONTH_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.MONTH_SYMBOL, 0);
	}
	public QUARTER_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.QUARTER_SYMBOL, 0);
	}
	public YEAR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.YEAR_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_intervalTimeStamp;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterIntervalTimeStamp) {
	 		listener.enterIntervalTimeStamp(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitIntervalTimeStamp) {
	 		listener.exitIntervalTimeStamp(this);
		}
	}
}


export class ExprListWithParenthesesContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public OPEN_PAR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
	}
	public exprList(): ExprListContext {
		return this.getTypedRuleContext(ExprListContext, 0) as ExprListContext;
	}
	public CLOSE_PAR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_exprListWithParentheses;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterExprListWithParentheses) {
	 		listener.enterExprListWithParentheses(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitExprListWithParentheses) {
	 		listener.exitExprListWithParentheses(this);
		}
	}
}


export class ExprWithParenthesesContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public OPEN_PAR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
	}
	public expr(): ExprContext {
		return this.getTypedRuleContext(ExprContext, 0) as ExprContext;
	}
	public CLOSE_PAR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_exprWithParentheses;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterExprWithParentheses) {
	 		listener.enterExprWithParentheses(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitExprWithParentheses) {
	 		listener.exitExprWithParentheses(this);
		}
	}
}


export class SimpleExprWithParenthesesContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public OPEN_PAR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
	}
	public simpleExpr(): SimpleExprContext {
		return this.getTypedRuleContext(SimpleExprContext, 0) as SimpleExprContext;
	}
	public CLOSE_PAR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_simpleExprWithParentheses;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterSimpleExprWithParentheses) {
	 		listener.enterSimpleExprWithParentheses(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitSimpleExprWithParentheses) {
	 		listener.exitSimpleExprWithParentheses(this);
		}
	}
}


export class OrderListContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public orderExpression_list(): OrderExpressionContext[] {
		return this.getTypedRuleContexts(OrderExpressionContext) as OrderExpressionContext[];
	}
	public orderExpression(i: number): OrderExpressionContext {
		return this.getTypedRuleContext(OrderExpressionContext, i) as OrderExpressionContext;
	}
	public COMMA_SYMBOL_list(): TerminalNode[] {
	    	return this.getTokens(MySQLParser.COMMA_SYMBOL);
	}
	public COMMA_SYMBOL(i: number): TerminalNode {
		return this.getToken(MySQLParser.COMMA_SYMBOL, i);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_orderList;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterOrderList) {
	 		listener.enterOrderList(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitOrderList) {
	 		listener.exitOrderList(this);
		}
	}
}


export class OrderExpressionContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public expr(): ExprContext {
		return this.getTypedRuleContext(ExprContext, 0) as ExprContext;
	}
	public direction(): DirectionContext {
		return this.getTypedRuleContext(DirectionContext, 0) as DirectionContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_orderExpression;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterOrderExpression) {
	 		listener.enterOrderExpression(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitOrderExpression) {
	 		listener.exitOrderExpression(this);
		}
	}
}


export class GroupListContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public groupingExpression_list(): GroupingExpressionContext[] {
		return this.getTypedRuleContexts(GroupingExpressionContext) as GroupingExpressionContext[];
	}
	public groupingExpression(i: number): GroupingExpressionContext {
		return this.getTypedRuleContext(GroupingExpressionContext, i) as GroupingExpressionContext;
	}
	public COMMA_SYMBOL_list(): TerminalNode[] {
	    	return this.getTokens(MySQLParser.COMMA_SYMBOL);
	}
	public COMMA_SYMBOL(i: number): TerminalNode {
		return this.getToken(MySQLParser.COMMA_SYMBOL, i);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_groupList;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterGroupList) {
	 		listener.enterGroupList(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitGroupList) {
	 		listener.exitGroupList(this);
		}
	}
}


export class GroupingExpressionContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public expr(): ExprContext {
		return this.getTypedRuleContext(ExprContext, 0) as ExprContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_groupingExpression;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterGroupingExpression) {
	 		listener.enterGroupingExpression(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitGroupingExpression) {
	 		listener.exitGroupingExpression(this);
		}
	}
}


export class ChannelContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public FOR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.FOR_SYMBOL, 0);
	}
	public CHANNEL_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CHANNEL_SYMBOL, 0);
	}
	public textStringNoLinebreak(): TextStringNoLinebreakContext {
		return this.getTypedRuleContext(TextStringNoLinebreakContext, 0) as TextStringNoLinebreakContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_channel;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterChannel) {
	 		listener.enterChannel(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitChannel) {
	 		listener.exitChannel(this);
		}
	}
}


export class CompoundStatementContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public simpleStatement(): SimpleStatementContext {
		return this.getTypedRuleContext(SimpleStatementContext, 0) as SimpleStatementContext;
	}
	public returnStatement(): ReturnStatementContext {
		return this.getTypedRuleContext(ReturnStatementContext, 0) as ReturnStatementContext;
	}
	public ifStatement(): IfStatementContext {
		return this.getTypedRuleContext(IfStatementContext, 0) as IfStatementContext;
	}
	public caseStatement(): CaseStatementContext {
		return this.getTypedRuleContext(CaseStatementContext, 0) as CaseStatementContext;
	}
	public labeledBlock(): LabeledBlockContext {
		return this.getTypedRuleContext(LabeledBlockContext, 0) as LabeledBlockContext;
	}
	public unlabeledBlock(): UnlabeledBlockContext {
		return this.getTypedRuleContext(UnlabeledBlockContext, 0) as UnlabeledBlockContext;
	}
	public labeledControl(): LabeledControlContext {
		return this.getTypedRuleContext(LabeledControlContext, 0) as LabeledControlContext;
	}
	public unlabeledControl(): UnlabeledControlContext {
		return this.getTypedRuleContext(UnlabeledControlContext, 0) as UnlabeledControlContext;
	}
	public leaveStatement(): LeaveStatementContext {
		return this.getTypedRuleContext(LeaveStatementContext, 0) as LeaveStatementContext;
	}
	public iterateStatement(): IterateStatementContext {
		return this.getTypedRuleContext(IterateStatementContext, 0) as IterateStatementContext;
	}
	public cursorOpen(): CursorOpenContext {
		return this.getTypedRuleContext(CursorOpenContext, 0) as CursorOpenContext;
	}
	public cursorFetch(): CursorFetchContext {
		return this.getTypedRuleContext(CursorFetchContext, 0) as CursorFetchContext;
	}
	public cursorClose(): CursorCloseContext {
		return this.getTypedRuleContext(CursorCloseContext, 0) as CursorCloseContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_compoundStatement;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterCompoundStatement) {
	 		listener.enterCompoundStatement(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitCompoundStatement) {
	 		listener.exitCompoundStatement(this);
		}
	}
}


export class ReturnStatementContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public RETURN_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.RETURN_SYMBOL, 0);
	}
	public expr(): ExprContext {
		return this.getTypedRuleContext(ExprContext, 0) as ExprContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_returnStatement;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterReturnStatement) {
	 		listener.enterReturnStatement(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitReturnStatement) {
	 		listener.exitReturnStatement(this);
		}
	}
}


export class IfStatementContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public IF_SYMBOL_list(): TerminalNode[] {
	    	return this.getTokens(MySQLParser.IF_SYMBOL);
	}
	public IF_SYMBOL(i: number): TerminalNode {
		return this.getToken(MySQLParser.IF_SYMBOL, i);
	}
	public ifBody(): IfBodyContext {
		return this.getTypedRuleContext(IfBodyContext, 0) as IfBodyContext;
	}
	public END_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.END_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_ifStatement;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterIfStatement) {
	 		listener.enterIfStatement(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitIfStatement) {
	 		listener.exitIfStatement(this);
		}
	}
}


export class IfBodyContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public expr(): ExprContext {
		return this.getTypedRuleContext(ExprContext, 0) as ExprContext;
	}
	public thenStatement(): ThenStatementContext {
		return this.getTypedRuleContext(ThenStatementContext, 0) as ThenStatementContext;
	}
	public ELSEIF_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ELSEIF_SYMBOL, 0);
	}
	public ifBody(): IfBodyContext {
		return this.getTypedRuleContext(IfBodyContext, 0) as IfBodyContext;
	}
	public ELSE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ELSE_SYMBOL, 0);
	}
	public compoundStatementList(): CompoundStatementListContext {
		return this.getTypedRuleContext(CompoundStatementListContext, 0) as CompoundStatementListContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_ifBody;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterIfBody) {
	 		listener.enterIfBody(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitIfBody) {
	 		listener.exitIfBody(this);
		}
	}
}


export class ThenStatementContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public THEN_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.THEN_SYMBOL, 0);
	}
	public compoundStatementList(): CompoundStatementListContext {
		return this.getTypedRuleContext(CompoundStatementListContext, 0) as CompoundStatementListContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_thenStatement;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterThenStatement) {
	 		listener.enterThenStatement(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitThenStatement) {
	 		listener.exitThenStatement(this);
		}
	}
}


export class CompoundStatementListContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public compoundStatement_list(): CompoundStatementContext[] {
		return this.getTypedRuleContexts(CompoundStatementContext) as CompoundStatementContext[];
	}
	public compoundStatement(i: number): CompoundStatementContext {
		return this.getTypedRuleContext(CompoundStatementContext, i) as CompoundStatementContext;
	}
	public SEMICOLON_SYMBOL_list(): TerminalNode[] {
	    	return this.getTokens(MySQLParser.SEMICOLON_SYMBOL);
	}
	public SEMICOLON_SYMBOL(i: number): TerminalNode {
		return this.getToken(MySQLParser.SEMICOLON_SYMBOL, i);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_compoundStatementList;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterCompoundStatementList) {
	 		listener.enterCompoundStatementList(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitCompoundStatementList) {
	 		listener.exitCompoundStatementList(this);
		}
	}
}


export class CaseStatementContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public CASE_SYMBOL_list(): TerminalNode[] {
	    	return this.getTokens(MySQLParser.CASE_SYMBOL);
	}
	public CASE_SYMBOL(i: number): TerminalNode {
		return this.getToken(MySQLParser.CASE_SYMBOL, i);
	}
	public END_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.END_SYMBOL, 0);
	}
	public expr(): ExprContext {
		return this.getTypedRuleContext(ExprContext, 0) as ExprContext;
	}
	public whenExpression_list(): WhenExpressionContext[] {
		return this.getTypedRuleContexts(WhenExpressionContext) as WhenExpressionContext[];
	}
	public whenExpression(i: number): WhenExpressionContext {
		return this.getTypedRuleContext(WhenExpressionContext, i) as WhenExpressionContext;
	}
	public thenStatement_list(): ThenStatementContext[] {
		return this.getTypedRuleContexts(ThenStatementContext) as ThenStatementContext[];
	}
	public thenStatement(i: number): ThenStatementContext {
		return this.getTypedRuleContext(ThenStatementContext, i) as ThenStatementContext;
	}
	public elseStatement(): ElseStatementContext {
		return this.getTypedRuleContext(ElseStatementContext, 0) as ElseStatementContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_caseStatement;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterCaseStatement) {
	 		listener.enterCaseStatement(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitCaseStatement) {
	 		listener.exitCaseStatement(this);
		}
	}
}


export class ElseStatementContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public ELSE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ELSE_SYMBOL, 0);
	}
	public compoundStatementList(): CompoundStatementListContext {
		return this.getTypedRuleContext(CompoundStatementListContext, 0) as CompoundStatementListContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_elseStatement;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterElseStatement) {
	 		listener.enterElseStatement(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitElseStatement) {
	 		listener.exitElseStatement(this);
		}
	}
}


export class LabeledBlockContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public label(): LabelContext {
		return this.getTypedRuleContext(LabelContext, 0) as LabelContext;
	}
	public beginEndBlock(): BeginEndBlockContext {
		return this.getTypedRuleContext(BeginEndBlockContext, 0) as BeginEndBlockContext;
	}
	public labelRef(): LabelRefContext {
		return this.getTypedRuleContext(LabelRefContext, 0) as LabelRefContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_labeledBlock;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterLabeledBlock) {
	 		listener.enterLabeledBlock(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitLabeledBlock) {
	 		listener.exitLabeledBlock(this);
		}
	}
}


export class UnlabeledBlockContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public beginEndBlock(): BeginEndBlockContext {
		return this.getTypedRuleContext(BeginEndBlockContext, 0) as BeginEndBlockContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_unlabeledBlock;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterUnlabeledBlock) {
	 		listener.enterUnlabeledBlock(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitUnlabeledBlock) {
	 		listener.exitUnlabeledBlock(this);
		}
	}
}


export class LabelContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public labelIdentifier(): LabelIdentifierContext {
		return this.getTypedRuleContext(LabelIdentifierContext, 0) as LabelIdentifierContext;
	}
	public COLON_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.COLON_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_label;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterLabel) {
	 		listener.enterLabel(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitLabel) {
	 		listener.exitLabel(this);
		}
	}
}


export class BeginEndBlockContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public BEGIN_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.BEGIN_SYMBOL, 0);
	}
	public END_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.END_SYMBOL, 0);
	}
	public spDeclarations(): SpDeclarationsContext {
		return this.getTypedRuleContext(SpDeclarationsContext, 0) as SpDeclarationsContext;
	}
	public compoundStatementList(): CompoundStatementListContext {
		return this.getTypedRuleContext(CompoundStatementListContext, 0) as CompoundStatementListContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_beginEndBlock;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterBeginEndBlock) {
	 		listener.enterBeginEndBlock(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitBeginEndBlock) {
	 		listener.exitBeginEndBlock(this);
		}
	}
}


export class LabeledControlContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public label(): LabelContext {
		return this.getTypedRuleContext(LabelContext, 0) as LabelContext;
	}
	public unlabeledControl(): UnlabeledControlContext {
		return this.getTypedRuleContext(UnlabeledControlContext, 0) as UnlabeledControlContext;
	}
	public labelRef(): LabelRefContext {
		return this.getTypedRuleContext(LabelRefContext, 0) as LabelRefContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_labeledControl;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterLabeledControl) {
	 		listener.enterLabeledControl(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitLabeledControl) {
	 		listener.exitLabeledControl(this);
		}
	}
}


export class UnlabeledControlContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public loopBlock(): LoopBlockContext {
		return this.getTypedRuleContext(LoopBlockContext, 0) as LoopBlockContext;
	}
	public whileDoBlock(): WhileDoBlockContext {
		return this.getTypedRuleContext(WhileDoBlockContext, 0) as WhileDoBlockContext;
	}
	public repeatUntilBlock(): RepeatUntilBlockContext {
		return this.getTypedRuleContext(RepeatUntilBlockContext, 0) as RepeatUntilBlockContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_unlabeledControl;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterUnlabeledControl) {
	 		listener.enterUnlabeledControl(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitUnlabeledControl) {
	 		listener.exitUnlabeledControl(this);
		}
	}
}


export class LoopBlockContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LOOP_SYMBOL_list(): TerminalNode[] {
	    	return this.getTokens(MySQLParser.LOOP_SYMBOL);
	}
	public LOOP_SYMBOL(i: number): TerminalNode {
		return this.getToken(MySQLParser.LOOP_SYMBOL, i);
	}
	public compoundStatementList(): CompoundStatementListContext {
		return this.getTypedRuleContext(CompoundStatementListContext, 0) as CompoundStatementListContext;
	}
	public END_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.END_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_loopBlock;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterLoopBlock) {
	 		listener.enterLoopBlock(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitLoopBlock) {
	 		listener.exitLoopBlock(this);
		}
	}
}


export class WhileDoBlockContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public WHILE_SYMBOL_list(): TerminalNode[] {
	    	return this.getTokens(MySQLParser.WHILE_SYMBOL);
	}
	public WHILE_SYMBOL(i: number): TerminalNode {
		return this.getToken(MySQLParser.WHILE_SYMBOL, i);
	}
	public expr(): ExprContext {
		return this.getTypedRuleContext(ExprContext, 0) as ExprContext;
	}
	public DO_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.DO_SYMBOL, 0);
	}
	public compoundStatementList(): CompoundStatementListContext {
		return this.getTypedRuleContext(CompoundStatementListContext, 0) as CompoundStatementListContext;
	}
	public END_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.END_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_whileDoBlock;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterWhileDoBlock) {
	 		listener.enterWhileDoBlock(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitWhileDoBlock) {
	 		listener.exitWhileDoBlock(this);
		}
	}
}


export class RepeatUntilBlockContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public REPEAT_SYMBOL_list(): TerminalNode[] {
	    	return this.getTokens(MySQLParser.REPEAT_SYMBOL);
	}
	public REPEAT_SYMBOL(i: number): TerminalNode {
		return this.getToken(MySQLParser.REPEAT_SYMBOL, i);
	}
	public compoundStatementList(): CompoundStatementListContext {
		return this.getTypedRuleContext(CompoundStatementListContext, 0) as CompoundStatementListContext;
	}
	public UNTIL_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.UNTIL_SYMBOL, 0);
	}
	public expr(): ExprContext {
		return this.getTypedRuleContext(ExprContext, 0) as ExprContext;
	}
	public END_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.END_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_repeatUntilBlock;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterRepeatUntilBlock) {
	 		listener.enterRepeatUntilBlock(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitRepeatUntilBlock) {
	 		listener.exitRepeatUntilBlock(this);
		}
	}
}


export class SpDeclarationsContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public spDeclaration_list(): SpDeclarationContext[] {
		return this.getTypedRuleContexts(SpDeclarationContext) as SpDeclarationContext[];
	}
	public spDeclaration(i: number): SpDeclarationContext {
		return this.getTypedRuleContext(SpDeclarationContext, i) as SpDeclarationContext;
	}
	public SEMICOLON_SYMBOL_list(): TerminalNode[] {
	    	return this.getTokens(MySQLParser.SEMICOLON_SYMBOL);
	}
	public SEMICOLON_SYMBOL(i: number): TerminalNode {
		return this.getToken(MySQLParser.SEMICOLON_SYMBOL, i);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_spDeclarations;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterSpDeclarations) {
	 		listener.enterSpDeclarations(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitSpDeclarations) {
	 		listener.exitSpDeclarations(this);
		}
	}
}


export class SpDeclarationContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public variableDeclaration(): VariableDeclarationContext {
		return this.getTypedRuleContext(VariableDeclarationContext, 0) as VariableDeclarationContext;
	}
	public conditionDeclaration(): ConditionDeclarationContext {
		return this.getTypedRuleContext(ConditionDeclarationContext, 0) as ConditionDeclarationContext;
	}
	public handlerDeclaration(): HandlerDeclarationContext {
		return this.getTypedRuleContext(HandlerDeclarationContext, 0) as HandlerDeclarationContext;
	}
	public cursorDeclaration(): CursorDeclarationContext {
		return this.getTypedRuleContext(CursorDeclarationContext, 0) as CursorDeclarationContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_spDeclaration;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterSpDeclaration) {
	 		listener.enterSpDeclaration(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitSpDeclaration) {
	 		listener.exitSpDeclaration(this);
		}
	}
}


export class VariableDeclarationContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public DECLARE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.DECLARE_SYMBOL, 0);
	}
	public identifierList(): IdentifierListContext {
		return this.getTypedRuleContext(IdentifierListContext, 0) as IdentifierListContext;
	}
	public dataType(): DataTypeContext {
		return this.getTypedRuleContext(DataTypeContext, 0) as DataTypeContext;
	}
	public collate(): CollateContext {
		return this.getTypedRuleContext(CollateContext, 0) as CollateContext;
	}
	public DEFAULT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
	}
	public expr(): ExprContext {
		return this.getTypedRuleContext(ExprContext, 0) as ExprContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_variableDeclaration;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterVariableDeclaration) {
	 		listener.enterVariableDeclaration(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitVariableDeclaration) {
	 		listener.exitVariableDeclaration(this);
		}
	}
}


export class ConditionDeclarationContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public DECLARE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.DECLARE_SYMBOL, 0);
	}
	public identifier(): IdentifierContext {
		return this.getTypedRuleContext(IdentifierContext, 0) as IdentifierContext;
	}
	public CONDITION_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CONDITION_SYMBOL, 0);
	}
	public FOR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.FOR_SYMBOL, 0);
	}
	public spCondition(): SpConditionContext {
		return this.getTypedRuleContext(SpConditionContext, 0) as SpConditionContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_conditionDeclaration;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterConditionDeclaration) {
	 		listener.enterConditionDeclaration(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitConditionDeclaration) {
	 		listener.exitConditionDeclaration(this);
		}
	}
}


export class SpConditionContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public ulong_number(): Ulong_numberContext {
		return this.getTypedRuleContext(Ulong_numberContext, 0) as Ulong_numberContext;
	}
	public sqlstate(): SqlstateContext {
		return this.getTypedRuleContext(SqlstateContext, 0) as SqlstateContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_spCondition;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterSpCondition) {
	 		listener.enterSpCondition(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitSpCondition) {
	 		listener.exitSpCondition(this);
		}
	}
}


export class SqlstateContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public SQLSTATE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SQLSTATE_SYMBOL, 0);
	}
	public textLiteral(): TextLiteralContext {
		return this.getTypedRuleContext(TextLiteralContext, 0) as TextLiteralContext;
	}
	public VALUE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.VALUE_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_sqlstate;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterSqlstate) {
	 		listener.enterSqlstate(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitSqlstate) {
	 		listener.exitSqlstate(this);
		}
	}
}


export class HandlerDeclarationContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public DECLARE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.DECLARE_SYMBOL, 0);
	}
	public HANDLER_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.HANDLER_SYMBOL, 0);
	}
	public FOR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.FOR_SYMBOL, 0);
	}
	public handlerCondition_list(): HandlerConditionContext[] {
		return this.getTypedRuleContexts(HandlerConditionContext) as HandlerConditionContext[];
	}
	public handlerCondition(i: number): HandlerConditionContext {
		return this.getTypedRuleContext(HandlerConditionContext, i) as HandlerConditionContext;
	}
	public compoundStatement(): CompoundStatementContext {
		return this.getTypedRuleContext(CompoundStatementContext, 0) as CompoundStatementContext;
	}
	public CONTINUE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CONTINUE_SYMBOL, 0);
	}
	public EXIT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.EXIT_SYMBOL, 0);
	}
	public UNDO_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.UNDO_SYMBOL, 0);
	}
	public COMMA_SYMBOL_list(): TerminalNode[] {
	    	return this.getTokens(MySQLParser.COMMA_SYMBOL);
	}
	public COMMA_SYMBOL(i: number): TerminalNode {
		return this.getToken(MySQLParser.COMMA_SYMBOL, i);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_handlerDeclaration;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterHandlerDeclaration) {
	 		listener.enterHandlerDeclaration(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitHandlerDeclaration) {
	 		listener.exitHandlerDeclaration(this);
		}
	}
}


export class HandlerConditionContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public spCondition(): SpConditionContext {
		return this.getTypedRuleContext(SpConditionContext, 0) as SpConditionContext;
	}
	public identifier(): IdentifierContext {
		return this.getTypedRuleContext(IdentifierContext, 0) as IdentifierContext;
	}
	public SQLWARNING_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SQLWARNING_SYMBOL, 0);
	}
	public notRule(): NotRuleContext {
		return this.getTypedRuleContext(NotRuleContext, 0) as NotRuleContext;
	}
	public FOUND_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.FOUND_SYMBOL, 0);
	}
	public SQLEXCEPTION_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SQLEXCEPTION_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_handlerCondition;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterHandlerCondition) {
	 		listener.enterHandlerCondition(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitHandlerCondition) {
	 		listener.exitHandlerCondition(this);
		}
	}
}


export class CursorDeclarationContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public DECLARE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.DECLARE_SYMBOL, 0);
	}
	public identifier(): IdentifierContext {
		return this.getTypedRuleContext(IdentifierContext, 0) as IdentifierContext;
	}
	public CURSOR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CURSOR_SYMBOL, 0);
	}
	public FOR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.FOR_SYMBOL, 0);
	}
	public selectStatement(): SelectStatementContext {
		return this.getTypedRuleContext(SelectStatementContext, 0) as SelectStatementContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_cursorDeclaration;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterCursorDeclaration) {
	 		listener.enterCursorDeclaration(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitCursorDeclaration) {
	 		listener.exitCursorDeclaration(this);
		}
	}
}


export class IterateStatementContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public ITERATE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ITERATE_SYMBOL, 0);
	}
	public labelRef(): LabelRefContext {
		return this.getTypedRuleContext(LabelRefContext, 0) as LabelRefContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_iterateStatement;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterIterateStatement) {
	 		listener.enterIterateStatement(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitIterateStatement) {
	 		listener.exitIterateStatement(this);
		}
	}
}


export class LeaveStatementContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LEAVE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.LEAVE_SYMBOL, 0);
	}
	public labelRef(): LabelRefContext {
		return this.getTypedRuleContext(LabelRefContext, 0) as LabelRefContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_leaveStatement;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterLeaveStatement) {
	 		listener.enterLeaveStatement(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitLeaveStatement) {
	 		listener.exitLeaveStatement(this);
		}
	}
}


export class GetDiagnosticsContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public GET_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.GET_SYMBOL, 0);
	}
	public DIAGNOSTICS_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.DIAGNOSTICS_SYMBOL, 0);
	}
	public statementInformationItem_list(): StatementInformationItemContext[] {
		return this.getTypedRuleContexts(StatementInformationItemContext) as StatementInformationItemContext[];
	}
	public statementInformationItem(i: number): StatementInformationItemContext {
		return this.getTypedRuleContext(StatementInformationItemContext, i) as StatementInformationItemContext;
	}
	public CONDITION_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CONDITION_SYMBOL, 0);
	}
	public signalAllowedExpr(): SignalAllowedExprContext {
		return this.getTypedRuleContext(SignalAllowedExprContext, 0) as SignalAllowedExprContext;
	}
	public conditionInformationItem_list(): ConditionInformationItemContext[] {
		return this.getTypedRuleContexts(ConditionInformationItemContext) as ConditionInformationItemContext[];
	}
	public conditionInformationItem(i: number): ConditionInformationItemContext {
		return this.getTypedRuleContext(ConditionInformationItemContext, i) as ConditionInformationItemContext;
	}
	public CURRENT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CURRENT_SYMBOL, 0);
	}
	public STACKED_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.STACKED_SYMBOL, 0);
	}
	public COMMA_SYMBOL_list(): TerminalNode[] {
	    	return this.getTokens(MySQLParser.COMMA_SYMBOL);
	}
	public COMMA_SYMBOL(i: number): TerminalNode {
		return this.getToken(MySQLParser.COMMA_SYMBOL, i);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_getDiagnostics;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterGetDiagnostics) {
	 		listener.enterGetDiagnostics(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitGetDiagnostics) {
	 		listener.exitGetDiagnostics(this);
		}
	}
}


export class SignalAllowedExprContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public literal(): LiteralContext {
		return this.getTypedRuleContext(LiteralContext, 0) as LiteralContext;
	}
	public variable(): VariableContext {
		return this.getTypedRuleContext(VariableContext, 0) as VariableContext;
	}
	public qualifiedIdentifier(): QualifiedIdentifierContext {
		return this.getTypedRuleContext(QualifiedIdentifierContext, 0) as QualifiedIdentifierContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_signalAllowedExpr;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterSignalAllowedExpr) {
	 		listener.enterSignalAllowedExpr(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitSignalAllowedExpr) {
	 		listener.exitSignalAllowedExpr(this);
		}
	}
}


export class StatementInformationItemContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public EQUAL_OPERATOR(): TerminalNode {
		return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
	}
	public NUMBER_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.NUMBER_SYMBOL, 0);
	}
	public ROW_COUNT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ROW_COUNT_SYMBOL, 0);
	}
	public variable(): VariableContext {
		return this.getTypedRuleContext(VariableContext, 0) as VariableContext;
	}
	public identifier(): IdentifierContext {
		return this.getTypedRuleContext(IdentifierContext, 0) as IdentifierContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_statementInformationItem;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterStatementInformationItem) {
	 		listener.enterStatementInformationItem(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitStatementInformationItem) {
	 		listener.exitStatementInformationItem(this);
		}
	}
}


export class ConditionInformationItemContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public EQUAL_OPERATOR(): TerminalNode {
		return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
	}
	public variable(): VariableContext {
		return this.getTypedRuleContext(VariableContext, 0) as VariableContext;
	}
	public identifier(): IdentifierContext {
		return this.getTypedRuleContext(IdentifierContext, 0) as IdentifierContext;
	}
	public signalInformationItemName(): SignalInformationItemNameContext {
		return this.getTypedRuleContext(SignalInformationItemNameContext, 0) as SignalInformationItemNameContext;
	}
	public RETURNED_SQLSTATE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.RETURNED_SQLSTATE_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_conditionInformationItem;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterConditionInformationItem) {
	 		listener.enterConditionInformationItem(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitConditionInformationItem) {
	 		listener.exitConditionInformationItem(this);
		}
	}
}


export class SignalInformationItemNameContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public CLASS_ORIGIN_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CLASS_ORIGIN_SYMBOL, 0);
	}
	public SUBCLASS_ORIGIN_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SUBCLASS_ORIGIN_SYMBOL, 0);
	}
	public CONSTRAINT_CATALOG_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CONSTRAINT_CATALOG_SYMBOL, 0);
	}
	public CONSTRAINT_SCHEMA_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CONSTRAINT_SCHEMA_SYMBOL, 0);
	}
	public CONSTRAINT_NAME_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CONSTRAINT_NAME_SYMBOL, 0);
	}
	public CATALOG_NAME_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CATALOG_NAME_SYMBOL, 0);
	}
	public SCHEMA_NAME_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SCHEMA_NAME_SYMBOL, 0);
	}
	public TABLE_NAME_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.TABLE_NAME_SYMBOL, 0);
	}
	public COLUMN_NAME_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.COLUMN_NAME_SYMBOL, 0);
	}
	public CURSOR_NAME_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CURSOR_NAME_SYMBOL, 0);
	}
	public MESSAGE_TEXT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.MESSAGE_TEXT_SYMBOL, 0);
	}
	public MYSQL_ERRNO_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.MYSQL_ERRNO_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_signalInformationItemName;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterSignalInformationItemName) {
	 		listener.enterSignalInformationItemName(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitSignalInformationItemName) {
	 		listener.exitSignalInformationItemName(this);
		}
	}
}


export class SignalStatementContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public SIGNAL_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SIGNAL_SYMBOL, 0);
	}
	public identifier(): IdentifierContext {
		return this.getTypedRuleContext(IdentifierContext, 0) as IdentifierContext;
	}
	public sqlstate(): SqlstateContext {
		return this.getTypedRuleContext(SqlstateContext, 0) as SqlstateContext;
	}
	public SET_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SET_SYMBOL, 0);
	}
	public signalInformationItem_list(): SignalInformationItemContext[] {
		return this.getTypedRuleContexts(SignalInformationItemContext) as SignalInformationItemContext[];
	}
	public signalInformationItem(i: number): SignalInformationItemContext {
		return this.getTypedRuleContext(SignalInformationItemContext, i) as SignalInformationItemContext;
	}
	public COMMA_SYMBOL_list(): TerminalNode[] {
	    	return this.getTokens(MySQLParser.COMMA_SYMBOL);
	}
	public COMMA_SYMBOL(i: number): TerminalNode {
		return this.getToken(MySQLParser.COMMA_SYMBOL, i);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_signalStatement;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterSignalStatement) {
	 		listener.enterSignalStatement(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitSignalStatement) {
	 		listener.exitSignalStatement(this);
		}
	}
}


export class ResignalStatementContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public RESIGNAL_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.RESIGNAL_SYMBOL, 0);
	}
	public SQLSTATE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SQLSTATE_SYMBOL, 0);
	}
	public textOrIdentifier(): TextOrIdentifierContext {
		return this.getTypedRuleContext(TextOrIdentifierContext, 0) as TextOrIdentifierContext;
	}
	public SET_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SET_SYMBOL, 0);
	}
	public signalInformationItem_list(): SignalInformationItemContext[] {
		return this.getTypedRuleContexts(SignalInformationItemContext) as SignalInformationItemContext[];
	}
	public signalInformationItem(i: number): SignalInformationItemContext {
		return this.getTypedRuleContext(SignalInformationItemContext, i) as SignalInformationItemContext;
	}
	public VALUE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.VALUE_SYMBOL, 0);
	}
	public COMMA_SYMBOL_list(): TerminalNode[] {
	    	return this.getTokens(MySQLParser.COMMA_SYMBOL);
	}
	public COMMA_SYMBOL(i: number): TerminalNode {
		return this.getToken(MySQLParser.COMMA_SYMBOL, i);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_resignalStatement;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterResignalStatement) {
	 		listener.enterResignalStatement(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitResignalStatement) {
	 		listener.exitResignalStatement(this);
		}
	}
}


export class SignalInformationItemContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public signalInformationItemName(): SignalInformationItemNameContext {
		return this.getTypedRuleContext(SignalInformationItemNameContext, 0) as SignalInformationItemNameContext;
	}
	public EQUAL_OPERATOR(): TerminalNode {
		return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
	}
	public signalAllowedExpr(): SignalAllowedExprContext {
		return this.getTypedRuleContext(SignalAllowedExprContext, 0) as SignalAllowedExprContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_signalInformationItem;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterSignalInformationItem) {
	 		listener.enterSignalInformationItem(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitSignalInformationItem) {
	 		listener.exitSignalInformationItem(this);
		}
	}
}


export class CursorOpenContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public OPEN_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.OPEN_SYMBOL, 0);
	}
	public identifier(): IdentifierContext {
		return this.getTypedRuleContext(IdentifierContext, 0) as IdentifierContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_cursorOpen;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterCursorOpen) {
	 		listener.enterCursorOpen(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitCursorOpen) {
	 		listener.exitCursorOpen(this);
		}
	}
}


export class CursorCloseContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public CLOSE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CLOSE_SYMBOL, 0);
	}
	public identifier(): IdentifierContext {
		return this.getTypedRuleContext(IdentifierContext, 0) as IdentifierContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_cursorClose;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterCursorClose) {
	 		listener.enterCursorClose(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitCursorClose) {
	 		listener.exitCursorClose(this);
		}
	}
}


export class CursorFetchContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public FETCH_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.FETCH_SYMBOL, 0);
	}
	public identifier(): IdentifierContext {
		return this.getTypedRuleContext(IdentifierContext, 0) as IdentifierContext;
	}
	public INTO_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.INTO_SYMBOL, 0);
	}
	public identifierList(): IdentifierListContext {
		return this.getTypedRuleContext(IdentifierListContext, 0) as IdentifierListContext;
	}
	public FROM_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.FROM_SYMBOL, 0);
	}
	public NEXT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.NEXT_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_cursorFetch;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterCursorFetch) {
	 		listener.enterCursorFetch(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitCursorFetch) {
	 		listener.exitCursorFetch(this);
		}
	}
}


export class ScheduleContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public AT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.AT_SYMBOL, 0);
	}
	public expr_list(): ExprContext[] {
		return this.getTypedRuleContexts(ExprContext) as ExprContext[];
	}
	public expr(i: number): ExprContext {
		return this.getTypedRuleContext(ExprContext, i) as ExprContext;
	}
	public EVERY_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.EVERY_SYMBOL, 0);
	}
	public interval(): IntervalContext {
		return this.getTypedRuleContext(IntervalContext, 0) as IntervalContext;
	}
	public STARTS_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.STARTS_SYMBOL, 0);
	}
	public ENDS_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ENDS_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_schedule;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterSchedule) {
	 		listener.enterSchedule(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitSchedule) {
	 		listener.exitSchedule(this);
		}
	}
}


export class ColumnDefinitionContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public columnName(): ColumnNameContext {
		return this.getTypedRuleContext(ColumnNameContext, 0) as ColumnNameContext;
	}
	public fieldDefinition(): FieldDefinitionContext {
		return this.getTypedRuleContext(FieldDefinitionContext, 0) as FieldDefinitionContext;
	}
	public checkOrReferences(): CheckOrReferencesContext {
		return this.getTypedRuleContext(CheckOrReferencesContext, 0) as CheckOrReferencesContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_columnDefinition;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterColumnDefinition) {
	 		listener.enterColumnDefinition(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitColumnDefinition) {
	 		listener.exitColumnDefinition(this);
		}
	}
}


export class CheckOrReferencesContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public checkConstraint(): CheckConstraintContext {
		return this.getTypedRuleContext(CheckConstraintContext, 0) as CheckConstraintContext;
	}
	public references(): ReferencesContext {
		return this.getTypedRuleContext(ReferencesContext, 0) as ReferencesContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_checkOrReferences;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterCheckOrReferences) {
	 		listener.enterCheckOrReferences(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitCheckOrReferences) {
	 		listener.exitCheckOrReferences(this);
		}
	}
}


export class CheckConstraintContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public CHECK_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CHECK_SYMBOL, 0);
	}
	public exprWithParentheses(): ExprWithParenthesesContext {
		return this.getTypedRuleContext(ExprWithParenthesesContext, 0) as ExprWithParenthesesContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_checkConstraint;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterCheckConstraint) {
	 		listener.enterCheckConstraint(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitCheckConstraint) {
	 		listener.exitCheckConstraint(this);
		}
	}
}


export class ConstraintEnforcementContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public ENFORCED_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ENFORCED_SYMBOL, 0);
	}
	public NOT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.NOT_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_constraintEnforcement;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterConstraintEnforcement) {
	 		listener.enterConstraintEnforcement(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitConstraintEnforcement) {
	 		listener.exitConstraintEnforcement(this);
		}
	}
}


export class TableConstraintDefContext extends ParserRuleContext {
	public _type_!: Token;
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public keyListVariants(): KeyListVariantsContext {
		return this.getTypedRuleContext(KeyListVariantsContext, 0) as KeyListVariantsContext;
	}
	public KEY_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.KEY_SYMBOL, 0);
	}
	public INDEX_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.INDEX_SYMBOL, 0);
	}
	public indexNameAndType(): IndexNameAndTypeContext {
		return this.getTypedRuleContext(IndexNameAndTypeContext, 0) as IndexNameAndTypeContext;
	}
	public indexOption_list(): IndexOptionContext[] {
		return this.getTypedRuleContexts(IndexOptionContext) as IndexOptionContext[];
	}
	public indexOption(i: number): IndexOptionContext {
		return this.getTypedRuleContext(IndexOptionContext, i) as IndexOptionContext;
	}
	public FULLTEXT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.FULLTEXT_SYMBOL, 0);
	}
	public keyOrIndex(): KeyOrIndexContext {
		return this.getTypedRuleContext(KeyOrIndexContext, 0) as KeyOrIndexContext;
	}
	public indexName(): IndexNameContext {
		return this.getTypedRuleContext(IndexNameContext, 0) as IndexNameContext;
	}
	public fulltextIndexOption_list(): FulltextIndexOptionContext[] {
		return this.getTypedRuleContexts(FulltextIndexOptionContext) as FulltextIndexOptionContext[];
	}
	public fulltextIndexOption(i: number): FulltextIndexOptionContext {
		return this.getTypedRuleContext(FulltextIndexOptionContext, i) as FulltextIndexOptionContext;
	}
	public SPATIAL_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SPATIAL_SYMBOL, 0);
	}
	public spatialIndexOption_list(): SpatialIndexOptionContext[] {
		return this.getTypedRuleContexts(SpatialIndexOptionContext) as SpatialIndexOptionContext[];
	}
	public spatialIndexOption(i: number): SpatialIndexOptionContext {
		return this.getTypedRuleContext(SpatialIndexOptionContext, i) as SpatialIndexOptionContext;
	}
	public keyList(): KeyListContext {
		return this.getTypedRuleContext(KeyListContext, 0) as KeyListContext;
	}
	public references(): ReferencesContext {
		return this.getTypedRuleContext(ReferencesContext, 0) as ReferencesContext;
	}
	public checkConstraint(): CheckConstraintContext {
		return this.getTypedRuleContext(CheckConstraintContext, 0) as CheckConstraintContext;
	}
	public constraintName(): ConstraintNameContext {
		return this.getTypedRuleContext(ConstraintNameContext, 0) as ConstraintNameContext;
	}
	public FOREIGN_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.FOREIGN_SYMBOL, 0);
	}
	public PRIMARY_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.PRIMARY_SYMBOL, 0);
	}
	public UNIQUE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.UNIQUE_SYMBOL, 0);
	}
	public constraintEnforcement(): ConstraintEnforcementContext {
		return this.getTypedRuleContext(ConstraintEnforcementContext, 0) as ConstraintEnforcementContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_tableConstraintDef;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterTableConstraintDef) {
	 		listener.enterTableConstraintDef(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitTableConstraintDef) {
	 		listener.exitTableConstraintDef(this);
		}
	}
}


export class ConstraintNameContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public CONSTRAINT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CONSTRAINT_SYMBOL, 0);
	}
	public identifier(): IdentifierContext {
		return this.getTypedRuleContext(IdentifierContext, 0) as IdentifierContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_constraintName;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterConstraintName) {
	 		listener.enterConstraintName(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitConstraintName) {
	 		listener.exitConstraintName(this);
		}
	}
}


export class FieldDefinitionContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public dataType(): DataTypeContext {
		return this.getTypedRuleContext(DataTypeContext, 0) as DataTypeContext;
	}
	public AS_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.AS_SYMBOL, 0);
	}
	public exprWithParentheses(): ExprWithParenthesesContext {
		return this.getTypedRuleContext(ExprWithParenthesesContext, 0) as ExprWithParenthesesContext;
	}
	public columnAttribute_list(): ColumnAttributeContext[] {
		return this.getTypedRuleContexts(ColumnAttributeContext) as ColumnAttributeContext[];
	}
	public columnAttribute(i: number): ColumnAttributeContext {
		return this.getTypedRuleContext(ColumnAttributeContext, i) as ColumnAttributeContext;
	}
	public collate(): CollateContext {
		return this.getTypedRuleContext(CollateContext, 0) as CollateContext;
	}
	public GENERATED_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.GENERATED_SYMBOL, 0);
	}
	public ALWAYS_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ALWAYS_SYMBOL, 0);
	}
	public VIRTUAL_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.VIRTUAL_SYMBOL, 0);
	}
	public STORED_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.STORED_SYMBOL, 0);
	}
	public gcolAttribute_list(): GcolAttributeContext[] {
		return this.getTypedRuleContexts(GcolAttributeContext) as GcolAttributeContext[];
	}
	public gcolAttribute(i: number): GcolAttributeContext {
		return this.getTypedRuleContext(GcolAttributeContext, i) as GcolAttributeContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_fieldDefinition;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterFieldDefinition) {
	 		listener.enterFieldDefinition(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitFieldDefinition) {
	 		listener.exitFieldDefinition(this);
		}
	}
}


export class ColumnAttributeContext extends ParserRuleContext {
	public _value!: Token;
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public nullLiteral(): NullLiteralContext {
		return this.getTypedRuleContext(NullLiteralContext, 0) as NullLiteralContext;
	}
	public NOT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.NOT_SYMBOL, 0);
	}
	public SECONDARY_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SECONDARY_SYMBOL, 0);
	}
	public DEFAULT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
	}
	public signedLiteral(): SignedLiteralContext {
		return this.getTypedRuleContext(SignedLiteralContext, 0) as SignedLiteralContext;
	}
	public NOW_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.NOW_SYMBOL, 0);
	}
	public exprWithParentheses(): ExprWithParenthesesContext {
		return this.getTypedRuleContext(ExprWithParenthesesContext, 0) as ExprWithParenthesesContext;
	}
	public timeFunctionParameters(): TimeFunctionParametersContext {
		return this.getTypedRuleContext(TimeFunctionParametersContext, 0) as TimeFunctionParametersContext;
	}
	public UPDATE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.UPDATE_SYMBOL, 0);
	}
	public ON_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ON_SYMBOL, 0);
	}
	public AUTO_INCREMENT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.AUTO_INCREMENT_SYMBOL, 0);
	}
	public VALUE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.VALUE_SYMBOL, 0);
	}
	public SERIAL_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SERIAL_SYMBOL, 0);
	}
	public KEY_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.KEY_SYMBOL, 0);
	}
	public PRIMARY_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.PRIMARY_SYMBOL, 0);
	}
	public UNIQUE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.UNIQUE_SYMBOL, 0);
	}
	public textLiteral(): TextLiteralContext {
		return this.getTypedRuleContext(TextLiteralContext, 0) as TextLiteralContext;
	}
	public COMMENT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.COMMENT_SYMBOL, 0);
	}
	public collate(): CollateContext {
		return this.getTypedRuleContext(CollateContext, 0) as CollateContext;
	}
	public columnFormat(): ColumnFormatContext {
		return this.getTypedRuleContext(ColumnFormatContext, 0) as ColumnFormatContext;
	}
	public COLUMN_FORMAT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.COLUMN_FORMAT_SYMBOL, 0);
	}
	public storageMedia(): StorageMediaContext {
		return this.getTypedRuleContext(StorageMediaContext, 0) as StorageMediaContext;
	}
	public STORAGE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.STORAGE_SYMBOL, 0);
	}
	public real_ulonglong_number(): Real_ulonglong_numberContext {
		return this.getTypedRuleContext(Real_ulonglong_numberContext, 0) as Real_ulonglong_numberContext;
	}
	public SRID_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SRID_SYMBOL, 0);
	}
	public checkConstraint(): CheckConstraintContext {
		return this.getTypedRuleContext(CheckConstraintContext, 0) as CheckConstraintContext;
	}
	public constraintName(): ConstraintNameContext {
		return this.getTypedRuleContext(ConstraintNameContext, 0) as ConstraintNameContext;
	}
	public constraintEnforcement(): ConstraintEnforcementContext {
		return this.getTypedRuleContext(ConstraintEnforcementContext, 0) as ConstraintEnforcementContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_columnAttribute;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterColumnAttribute) {
	 		listener.enterColumnAttribute(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitColumnAttribute) {
	 		listener.exitColumnAttribute(this);
		}
	}
}


export class ColumnFormatContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public FIXED_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.FIXED_SYMBOL, 0);
	}
	public DYNAMIC_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.DYNAMIC_SYMBOL, 0);
	}
	public DEFAULT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_columnFormat;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterColumnFormat) {
	 		listener.enterColumnFormat(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitColumnFormat) {
	 		listener.exitColumnFormat(this);
		}
	}
}


export class StorageMediaContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public DISK_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.DISK_SYMBOL, 0);
	}
	public MEMORY_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.MEMORY_SYMBOL, 0);
	}
	public DEFAULT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_storageMedia;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterStorageMedia) {
	 		listener.enterStorageMedia(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitStorageMedia) {
	 		listener.exitStorageMedia(this);
		}
	}
}


export class GcolAttributeContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public UNIQUE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.UNIQUE_SYMBOL, 0);
	}
	public KEY_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.KEY_SYMBOL, 0);
	}
	public COMMENT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.COMMENT_SYMBOL, 0);
	}
	public textString(): TextStringContext {
		return this.getTypedRuleContext(TextStringContext, 0) as TextStringContext;
	}
	public NULL_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.NULL_SYMBOL, 0);
	}
	public notRule(): NotRuleContext {
		return this.getTypedRuleContext(NotRuleContext, 0) as NotRuleContext;
	}
	public PRIMARY_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.PRIMARY_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_gcolAttribute;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterGcolAttribute) {
	 		listener.enterGcolAttribute(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitGcolAttribute) {
	 		listener.exitGcolAttribute(this);
		}
	}
}


export class ReferencesContext extends ParserRuleContext {
	public _match!: Token;
	public _option!: Token;
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public REFERENCES_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.REFERENCES_SYMBOL, 0);
	}
	public tableRef(): TableRefContext {
		return this.getTypedRuleContext(TableRefContext, 0) as TableRefContext;
	}
	public identifierListWithParentheses(): IdentifierListWithParenthesesContext {
		return this.getTypedRuleContext(IdentifierListWithParenthesesContext, 0) as IdentifierListWithParenthesesContext;
	}
	public MATCH_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.MATCH_SYMBOL, 0);
	}
	public ON_SYMBOL_list(): TerminalNode[] {
	    	return this.getTokens(MySQLParser.ON_SYMBOL);
	}
	public ON_SYMBOL(i: number): TerminalNode {
		return this.getToken(MySQLParser.ON_SYMBOL, i);
	}
	public deleteOption_list(): DeleteOptionContext[] {
		return this.getTypedRuleContexts(DeleteOptionContext) as DeleteOptionContext[];
	}
	public deleteOption(i: number): DeleteOptionContext {
		return this.getTypedRuleContext(DeleteOptionContext, i) as DeleteOptionContext;
	}
	public UPDATE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.UPDATE_SYMBOL, 0);
	}
	public DELETE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.DELETE_SYMBOL, 0);
	}
	public FULL_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.FULL_SYMBOL, 0);
	}
	public PARTIAL_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.PARTIAL_SYMBOL, 0);
	}
	public SIMPLE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SIMPLE_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_references;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterReferences) {
	 		listener.enterReferences(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitReferences) {
	 		listener.exitReferences(this);
		}
	}
}


export class DeleteOptionContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public RESTRICT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.RESTRICT_SYMBOL, 0);
	}
	public CASCADE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CASCADE_SYMBOL, 0);
	}
	public SET_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SET_SYMBOL, 0);
	}
	public nullLiteral(): NullLiteralContext {
		return this.getTypedRuleContext(NullLiteralContext, 0) as NullLiteralContext;
	}
	public NO_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.NO_SYMBOL, 0);
	}
	public ACTION_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ACTION_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_deleteOption;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterDeleteOption) {
	 		listener.enterDeleteOption(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitDeleteOption) {
	 		listener.exitDeleteOption(this);
		}
	}
}


export class KeyListContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public OPEN_PAR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
	}
	public keyPart_list(): KeyPartContext[] {
		return this.getTypedRuleContexts(KeyPartContext) as KeyPartContext[];
	}
	public keyPart(i: number): KeyPartContext {
		return this.getTypedRuleContext(KeyPartContext, i) as KeyPartContext;
	}
	public CLOSE_PAR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
	}
	public COMMA_SYMBOL_list(): TerminalNode[] {
	    	return this.getTokens(MySQLParser.COMMA_SYMBOL);
	}
	public COMMA_SYMBOL(i: number): TerminalNode {
		return this.getToken(MySQLParser.COMMA_SYMBOL, i);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_keyList;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterKeyList) {
	 		listener.enterKeyList(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitKeyList) {
	 		listener.exitKeyList(this);
		}
	}
}


export class KeyPartContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public identifier(): IdentifierContext {
		return this.getTypedRuleContext(IdentifierContext, 0) as IdentifierContext;
	}
	public fieldLength(): FieldLengthContext {
		return this.getTypedRuleContext(FieldLengthContext, 0) as FieldLengthContext;
	}
	public direction(): DirectionContext {
		return this.getTypedRuleContext(DirectionContext, 0) as DirectionContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_keyPart;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterKeyPart) {
	 		listener.enterKeyPart(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitKeyPart) {
	 		listener.exitKeyPart(this);
		}
	}
}


export class KeyListWithExpressionContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public OPEN_PAR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
	}
	public keyPartOrExpression_list(): KeyPartOrExpressionContext[] {
		return this.getTypedRuleContexts(KeyPartOrExpressionContext) as KeyPartOrExpressionContext[];
	}
	public keyPartOrExpression(i: number): KeyPartOrExpressionContext {
		return this.getTypedRuleContext(KeyPartOrExpressionContext, i) as KeyPartOrExpressionContext;
	}
	public CLOSE_PAR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
	}
	public COMMA_SYMBOL_list(): TerminalNode[] {
	    	return this.getTokens(MySQLParser.COMMA_SYMBOL);
	}
	public COMMA_SYMBOL(i: number): TerminalNode {
		return this.getToken(MySQLParser.COMMA_SYMBOL, i);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_keyListWithExpression;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterKeyListWithExpression) {
	 		listener.enterKeyListWithExpression(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitKeyListWithExpression) {
	 		listener.exitKeyListWithExpression(this);
		}
	}
}


export class KeyPartOrExpressionContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public keyPart(): KeyPartContext {
		return this.getTypedRuleContext(KeyPartContext, 0) as KeyPartContext;
	}
	public exprWithParentheses(): ExprWithParenthesesContext {
		return this.getTypedRuleContext(ExprWithParenthesesContext, 0) as ExprWithParenthesesContext;
	}
	public direction(): DirectionContext {
		return this.getTypedRuleContext(DirectionContext, 0) as DirectionContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_keyPartOrExpression;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterKeyPartOrExpression) {
	 		listener.enterKeyPartOrExpression(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitKeyPartOrExpression) {
	 		listener.exitKeyPartOrExpression(this);
		}
	}
}


export class KeyListVariantsContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public keyListWithExpression(): KeyListWithExpressionContext {
		return this.getTypedRuleContext(KeyListWithExpressionContext, 0) as KeyListWithExpressionContext;
	}
	public keyList(): KeyListContext {
		return this.getTypedRuleContext(KeyListContext, 0) as KeyListContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_keyListVariants;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterKeyListVariants) {
	 		listener.enterKeyListVariants(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitKeyListVariants) {
	 		listener.exitKeyListVariants(this);
		}
	}
}


export class IndexTypeContext extends ParserRuleContext {
	public _algorithm!: Token;
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public BTREE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.BTREE_SYMBOL, 0);
	}
	public RTREE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.RTREE_SYMBOL, 0);
	}
	public HASH_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.HASH_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_indexType;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterIndexType) {
	 		listener.enterIndexType(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitIndexType) {
	 		listener.exitIndexType(this);
		}
	}
}


export class IndexOptionContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public commonIndexOption(): CommonIndexOptionContext {
		return this.getTypedRuleContext(CommonIndexOptionContext, 0) as CommonIndexOptionContext;
	}
	public indexTypeClause(): IndexTypeClauseContext {
		return this.getTypedRuleContext(IndexTypeClauseContext, 0) as IndexTypeClauseContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_indexOption;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterIndexOption) {
	 		listener.enterIndexOption(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitIndexOption) {
	 		listener.exitIndexOption(this);
		}
	}
}


export class CommonIndexOptionContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KEY_BLOCK_SIZE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.KEY_BLOCK_SIZE_SYMBOL, 0);
	}
	public ulong_number(): Ulong_numberContext {
		return this.getTypedRuleContext(Ulong_numberContext, 0) as Ulong_numberContext;
	}
	public EQUAL_OPERATOR(): TerminalNode {
		return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
	}
	public COMMENT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.COMMENT_SYMBOL, 0);
	}
	public textLiteral(): TextLiteralContext {
		return this.getTypedRuleContext(TextLiteralContext, 0) as TextLiteralContext;
	}
	public visibility(): VisibilityContext {
		return this.getTypedRuleContext(VisibilityContext, 0) as VisibilityContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_commonIndexOption;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterCommonIndexOption) {
	 		listener.enterCommonIndexOption(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitCommonIndexOption) {
	 		listener.exitCommonIndexOption(this);
		}
	}
}


export class VisibilityContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public VISIBLE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.VISIBLE_SYMBOL, 0);
	}
	public INVISIBLE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.INVISIBLE_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_visibility;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterVisibility) {
	 		listener.enterVisibility(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitVisibility) {
	 		listener.exitVisibility(this);
		}
	}
}


export class IndexTypeClauseContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public indexType(): IndexTypeContext {
		return this.getTypedRuleContext(IndexTypeContext, 0) as IndexTypeContext;
	}
	public USING_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.USING_SYMBOL, 0);
	}
	public TYPE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.TYPE_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_indexTypeClause;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterIndexTypeClause) {
	 		listener.enterIndexTypeClause(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitIndexTypeClause) {
	 		listener.exitIndexTypeClause(this);
		}
	}
}


export class FulltextIndexOptionContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public commonIndexOption(): CommonIndexOptionContext {
		return this.getTypedRuleContext(CommonIndexOptionContext, 0) as CommonIndexOptionContext;
	}
	public WITH_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.WITH_SYMBOL, 0);
	}
	public PARSER_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.PARSER_SYMBOL, 0);
	}
	public identifier(): IdentifierContext {
		return this.getTypedRuleContext(IdentifierContext, 0) as IdentifierContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_fulltextIndexOption;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterFulltextIndexOption) {
	 		listener.enterFulltextIndexOption(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitFulltextIndexOption) {
	 		listener.exitFulltextIndexOption(this);
		}
	}
}


export class SpatialIndexOptionContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public commonIndexOption(): CommonIndexOptionContext {
		return this.getTypedRuleContext(CommonIndexOptionContext, 0) as CommonIndexOptionContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_spatialIndexOption;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterSpatialIndexOption) {
	 		listener.enterSpatialIndexOption(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitSpatialIndexOption) {
	 		listener.exitSpatialIndexOption(this);
		}
	}
}


export class DataTypeDefinitionContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public dataType(): DataTypeContext {
		return this.getTypedRuleContext(DataTypeContext, 0) as DataTypeContext;
	}
	public EOF(): TerminalNode {
		return this.getToken(MySQLParser.EOF, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_dataTypeDefinition;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterDataTypeDefinition) {
	 		listener.enterDataTypeDefinition(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitDataTypeDefinition) {
	 		listener.exitDataTypeDefinition(this);
		}
	}
}


export class DataTypeContext extends ParserRuleContext {
	public _type_!: Token;
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public INT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.INT_SYMBOL, 0);
	}
	public TINYINT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.TINYINT_SYMBOL, 0);
	}
	public SMALLINT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SMALLINT_SYMBOL, 0);
	}
	public MEDIUMINT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.MEDIUMINT_SYMBOL, 0);
	}
	public BIGINT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.BIGINT_SYMBOL, 0);
	}
	public fieldLength(): FieldLengthContext {
		return this.getTypedRuleContext(FieldLengthContext, 0) as FieldLengthContext;
	}
	public fieldOptions(): FieldOptionsContext {
		return this.getTypedRuleContext(FieldOptionsContext, 0) as FieldOptionsContext;
	}
	public REAL_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.REAL_SYMBOL, 0);
	}
	public DOUBLE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.DOUBLE_SYMBOL, 0);
	}
	public precision(): PrecisionContext {
		return this.getTypedRuleContext(PrecisionContext, 0) as PrecisionContext;
	}
	public PRECISION_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.PRECISION_SYMBOL, 0);
	}
	public FLOAT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.FLOAT_SYMBOL, 0);
	}
	public DECIMAL_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.DECIMAL_SYMBOL, 0);
	}
	public NUMERIC_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.NUMERIC_SYMBOL, 0);
	}
	public FIXED_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.FIXED_SYMBOL, 0);
	}
	public floatOptions(): FloatOptionsContext {
		return this.getTypedRuleContext(FloatOptionsContext, 0) as FloatOptionsContext;
	}
	public BIT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.BIT_SYMBOL, 0);
	}
	public BOOL_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.BOOL_SYMBOL, 0);
	}
	public BOOLEAN_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.BOOLEAN_SYMBOL, 0);
	}
	public CHAR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CHAR_SYMBOL, 0);
	}
	public charsetWithOptBinary(): CharsetWithOptBinaryContext {
		return this.getTypedRuleContext(CharsetWithOptBinaryContext, 0) as CharsetWithOptBinaryContext;
	}
	public nchar(): NcharContext {
		return this.getTypedRuleContext(NcharContext, 0) as NcharContext;
	}
	public BINARY_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.BINARY_SYMBOL, 0);
	}
	public VARYING_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.VARYING_SYMBOL, 0);
	}
	public VARCHAR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.VARCHAR_SYMBOL, 0);
	}
	public NATIONAL_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.NATIONAL_SYMBOL, 0);
	}
	public NVARCHAR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.NVARCHAR_SYMBOL, 0);
	}
	public NCHAR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.NCHAR_SYMBOL, 0);
	}
	public VARBINARY_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.VARBINARY_SYMBOL, 0);
	}
	public YEAR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.YEAR_SYMBOL, 0);
	}
	public DATE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.DATE_SYMBOL, 0);
	}
	public TIME_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.TIME_SYMBOL, 0);
	}
	public typeDatetimePrecision(): TypeDatetimePrecisionContext {
		return this.getTypedRuleContext(TypeDatetimePrecisionContext, 0) as TypeDatetimePrecisionContext;
	}
	public TIMESTAMP_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.TIMESTAMP_SYMBOL, 0);
	}
	public DATETIME_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.DATETIME_SYMBOL, 0);
	}
	public TINYBLOB_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.TINYBLOB_SYMBOL, 0);
	}
	public BLOB_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.BLOB_SYMBOL, 0);
	}
	public MEDIUMBLOB_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.MEDIUMBLOB_SYMBOL, 0);
	}
	public LONGBLOB_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.LONGBLOB_SYMBOL, 0);
	}
	public LONG_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.LONG_SYMBOL, 0);
	}
	public TINYTEXT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.TINYTEXT_SYMBOL, 0);
	}
	public TEXT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.TEXT_SYMBOL, 0);
	}
	public MEDIUMTEXT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.MEDIUMTEXT_SYMBOL, 0);
	}
	public LONGTEXT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.LONGTEXT_SYMBOL, 0);
	}
	public stringList(): StringListContext {
		return this.getTypedRuleContext(StringListContext, 0) as StringListContext;
	}
	public ENUM_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ENUM_SYMBOL, 0);
	}
	public SET_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SET_SYMBOL, 0);
	}
	public SERIAL_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SERIAL_SYMBOL, 0);
	}
	public JSON_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.JSON_SYMBOL, 0);
	}
	public GEOMETRY_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.GEOMETRY_SYMBOL, 0);
	}
	public GEOMETRYCOLLECTION_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.GEOMETRYCOLLECTION_SYMBOL, 0);
	}
	public POINT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.POINT_SYMBOL, 0);
	}
	public MULTIPOINT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.MULTIPOINT_SYMBOL, 0);
	}
	public LINESTRING_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.LINESTRING_SYMBOL, 0);
	}
	public MULTILINESTRING_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.MULTILINESTRING_SYMBOL, 0);
	}
	public POLYGON_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.POLYGON_SYMBOL, 0);
	}
	public MULTIPOLYGON_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.MULTIPOLYGON_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_dataType;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterDataType) {
	 		listener.enterDataType(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitDataType) {
	 		listener.exitDataType(this);
		}
	}
}


export class NcharContext extends ParserRuleContext {
	public _type_!: Token;
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public NCHAR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.NCHAR_SYMBOL, 0);
	}
	public CHAR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CHAR_SYMBOL, 0);
	}
	public NATIONAL_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.NATIONAL_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_nchar;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterNchar) {
	 		listener.enterNchar(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitNchar) {
	 		listener.exitNchar(this);
		}
	}
}


export class RealTypeContext extends ParserRuleContext {
	public _type_!: Token;
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public REAL_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.REAL_SYMBOL, 0);
	}
	public DOUBLE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.DOUBLE_SYMBOL, 0);
	}
	public PRECISION_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.PRECISION_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_realType;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterRealType) {
	 		listener.enterRealType(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitRealType) {
	 		listener.exitRealType(this);
		}
	}
}


export class FieldLengthContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public OPEN_PAR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
	}
	public CLOSE_PAR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
	}
	public real_ulonglong_number(): Real_ulonglong_numberContext {
		return this.getTypedRuleContext(Real_ulonglong_numberContext, 0) as Real_ulonglong_numberContext;
	}
	public DECIMAL_NUMBER(): TerminalNode {
		return this.getToken(MySQLParser.DECIMAL_NUMBER, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_fieldLength;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterFieldLength) {
	 		listener.enterFieldLength(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitFieldLength) {
	 		listener.exitFieldLength(this);
		}
	}
}


export class FieldOptionsContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public SIGNED_SYMBOL_list(): TerminalNode[] {
	    	return this.getTokens(MySQLParser.SIGNED_SYMBOL);
	}
	public SIGNED_SYMBOL(i: number): TerminalNode {
		return this.getToken(MySQLParser.SIGNED_SYMBOL, i);
	}
	public UNSIGNED_SYMBOL_list(): TerminalNode[] {
	    	return this.getTokens(MySQLParser.UNSIGNED_SYMBOL);
	}
	public UNSIGNED_SYMBOL(i: number): TerminalNode {
		return this.getToken(MySQLParser.UNSIGNED_SYMBOL, i);
	}
	public ZEROFILL_SYMBOL_list(): TerminalNode[] {
	    	return this.getTokens(MySQLParser.ZEROFILL_SYMBOL);
	}
	public ZEROFILL_SYMBOL(i: number): TerminalNode {
		return this.getToken(MySQLParser.ZEROFILL_SYMBOL, i);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_fieldOptions;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterFieldOptions) {
	 		listener.enterFieldOptions(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitFieldOptions) {
	 		listener.exitFieldOptions(this);
		}
	}
}


export class CharsetWithOptBinaryContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public ascii(): AsciiContext {
		return this.getTypedRuleContext(AsciiContext, 0) as AsciiContext;
	}
	public unicode(): UnicodeContext {
		return this.getTypedRuleContext(UnicodeContext, 0) as UnicodeContext;
	}
	public BYTE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.BYTE_SYMBOL, 0);
	}
	public charset(): CharsetContext {
		return this.getTypedRuleContext(CharsetContext, 0) as CharsetContext;
	}
	public charsetName(): CharsetNameContext {
		return this.getTypedRuleContext(CharsetNameContext, 0) as CharsetNameContext;
	}
	public BINARY_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.BINARY_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_charsetWithOptBinary;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterCharsetWithOptBinary) {
	 		listener.enterCharsetWithOptBinary(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitCharsetWithOptBinary) {
	 		listener.exitCharsetWithOptBinary(this);
		}
	}
}


export class AsciiContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public ASCII_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ASCII_SYMBOL, 0);
	}
	public BINARY_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.BINARY_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_ascii;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterAscii) {
	 		listener.enterAscii(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitAscii) {
	 		listener.exitAscii(this);
		}
	}
}


export class UnicodeContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public UNICODE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.UNICODE_SYMBOL, 0);
	}
	public BINARY_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.BINARY_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_unicode;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterUnicode) {
	 		listener.enterUnicode(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitUnicode) {
	 		listener.exitUnicode(this);
		}
	}
}


export class WsNumCodepointsContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public OPEN_PAR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
	}
	public real_ulong_number(): Real_ulong_numberContext {
		return this.getTypedRuleContext(Real_ulong_numberContext, 0) as Real_ulong_numberContext;
	}
	public CLOSE_PAR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_wsNumCodepoints;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterWsNumCodepoints) {
	 		listener.enterWsNumCodepoints(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitWsNumCodepoints) {
	 		listener.exitWsNumCodepoints(this);
		}
	}
}


export class TypeDatetimePrecisionContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public OPEN_PAR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
	}
	public INT_NUMBER(): TerminalNode {
		return this.getToken(MySQLParser.INT_NUMBER, 0);
	}
	public CLOSE_PAR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_typeDatetimePrecision;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterTypeDatetimePrecision) {
	 		listener.enterTypeDatetimePrecision(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitTypeDatetimePrecision) {
	 		listener.exitTypeDatetimePrecision(this);
		}
	}
}


export class CharsetNameContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public textOrIdentifier(): TextOrIdentifierContext {
		return this.getTypedRuleContext(TextOrIdentifierContext, 0) as TextOrIdentifierContext;
	}
	public BINARY_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.BINARY_SYMBOL, 0);
	}
	public DEFAULT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_charsetName;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterCharsetName) {
	 		listener.enterCharsetName(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitCharsetName) {
	 		listener.exitCharsetName(this);
		}
	}
}


export class CollationNameContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public textOrIdentifier(): TextOrIdentifierContext {
		return this.getTypedRuleContext(TextOrIdentifierContext, 0) as TextOrIdentifierContext;
	}
	public DEFAULT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
	}
	public BINARY_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.BINARY_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_collationName;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterCollationName) {
	 		listener.enterCollationName(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitCollationName) {
	 		listener.exitCollationName(this);
		}
	}
}


export class CreateTableOptionsContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public createTableOption_list(): CreateTableOptionContext[] {
		return this.getTypedRuleContexts(CreateTableOptionContext) as CreateTableOptionContext[];
	}
	public createTableOption(i: number): CreateTableOptionContext {
		return this.getTypedRuleContext(CreateTableOptionContext, i) as CreateTableOptionContext;
	}
	public COMMA_SYMBOL_list(): TerminalNode[] {
	    	return this.getTokens(MySQLParser.COMMA_SYMBOL);
	}
	public COMMA_SYMBOL(i: number): TerminalNode {
		return this.getToken(MySQLParser.COMMA_SYMBOL, i);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_createTableOptions;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterCreateTableOptions) {
	 		listener.enterCreateTableOptions(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitCreateTableOptions) {
	 		listener.exitCreateTableOptions(this);
		}
	}
}


export class CreateTableOptionsSpaceSeparatedContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public createTableOption_list(): CreateTableOptionContext[] {
		return this.getTypedRuleContexts(CreateTableOptionContext) as CreateTableOptionContext[];
	}
	public createTableOption(i: number): CreateTableOptionContext {
		return this.getTypedRuleContext(CreateTableOptionContext, i) as CreateTableOptionContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_createTableOptionsSpaceSeparated;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterCreateTableOptionsSpaceSeparated) {
	 		listener.enterCreateTableOptionsSpaceSeparated(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitCreateTableOptionsSpaceSeparated) {
	 		listener.exitCreateTableOptionsSpaceSeparated(this);
		}
	}
}


export class CreateTableOptionContext extends ParserRuleContext {
	public _option!: Token;
	public _format!: Token;
	public _method!: Token;
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public engineRef(): EngineRefContext {
		return this.getTypedRuleContext(EngineRefContext, 0) as EngineRefContext;
	}
	public ENGINE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ENGINE_SYMBOL, 0);
	}
	public EQUAL_OPERATOR(): TerminalNode {
		return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
	}
	public SECONDARY_ENGINE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SECONDARY_ENGINE_SYMBOL, 0);
	}
	public NULL_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.NULL_SYMBOL, 0);
	}
	public textOrIdentifier(): TextOrIdentifierContext {
		return this.getTypedRuleContext(TextOrIdentifierContext, 0) as TextOrIdentifierContext;
	}
	public equal(): EqualContext {
		return this.getTypedRuleContext(EqualContext, 0) as EqualContext;
	}
	public ulonglong_number(): Ulonglong_numberContext {
		return this.getTypedRuleContext(Ulonglong_numberContext, 0) as Ulonglong_numberContext;
	}
	public MAX_ROWS_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.MAX_ROWS_SYMBOL, 0);
	}
	public MIN_ROWS_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.MIN_ROWS_SYMBOL, 0);
	}
	public ulong_number(): Ulong_numberContext {
		return this.getTypedRuleContext(Ulong_numberContext, 0) as Ulong_numberContext;
	}
	public AVG_ROW_LENGTH_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.AVG_ROW_LENGTH_SYMBOL, 0);
	}
	public textStringLiteral(): TextStringLiteralContext {
		return this.getTypedRuleContext(TextStringLiteralContext, 0) as TextStringLiteralContext;
	}
	public PASSWORD_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.PASSWORD_SYMBOL, 0);
	}
	public COMMENT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.COMMENT_SYMBOL, 0);
	}
	public textString(): TextStringContext {
		return this.getTypedRuleContext(TextStringContext, 0) as TextStringContext;
	}
	public COMPRESSION_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.COMPRESSION_SYMBOL, 0);
	}
	public ENCRYPTION_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ENCRYPTION_SYMBOL, 0);
	}
	public AUTO_INCREMENT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.AUTO_INCREMENT_SYMBOL, 0);
	}
	public ternaryOption(): TernaryOptionContext {
		return this.getTypedRuleContext(TernaryOptionContext, 0) as TernaryOptionContext;
	}
	public PACK_KEYS_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.PACK_KEYS_SYMBOL, 0);
	}
	public STATS_AUTO_RECALC_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.STATS_AUTO_RECALC_SYMBOL, 0);
	}
	public STATS_PERSISTENT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.STATS_PERSISTENT_SYMBOL, 0);
	}
	public STATS_SAMPLE_PAGES_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.STATS_SAMPLE_PAGES_SYMBOL, 0);
	}
	public CHECKSUM_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CHECKSUM_SYMBOL, 0);
	}
	public TABLE_CHECKSUM_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.TABLE_CHECKSUM_SYMBOL, 0);
	}
	public DELAY_KEY_WRITE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.DELAY_KEY_WRITE_SYMBOL, 0);
	}
	public ROW_FORMAT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ROW_FORMAT_SYMBOL, 0);
	}
	public DEFAULT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
	}
	public DYNAMIC_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.DYNAMIC_SYMBOL, 0);
	}
	public FIXED_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.FIXED_SYMBOL, 0);
	}
	public COMPRESSED_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.COMPRESSED_SYMBOL, 0);
	}
	public REDUNDANT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.REDUNDANT_SYMBOL, 0);
	}
	public COMPACT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.COMPACT_SYMBOL, 0);
	}
	public OPEN_PAR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
	}
	public tableRefList(): TableRefListContext {
		return this.getTypedRuleContext(TableRefListContext, 0) as TableRefListContext;
	}
	public CLOSE_PAR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
	}
	public UNION_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.UNION_SYMBOL, 0);
	}
	public defaultCharset(): DefaultCharsetContext {
		return this.getTypedRuleContext(DefaultCharsetContext, 0) as DefaultCharsetContext;
	}
	public defaultCollation(): DefaultCollationContext {
		return this.getTypedRuleContext(DefaultCollationContext, 0) as DefaultCollationContext;
	}
	public INSERT_METHOD_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.INSERT_METHOD_SYMBOL, 0);
	}
	public NO_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.NO_SYMBOL, 0);
	}
	public FIRST_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.FIRST_SYMBOL, 0);
	}
	public LAST_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.LAST_SYMBOL, 0);
	}
	public DIRECTORY_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.DIRECTORY_SYMBOL, 0);
	}
	public DATA_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.DATA_SYMBOL, 0);
	}
	public INDEX_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.INDEX_SYMBOL, 0);
	}
	public identifier(): IdentifierContext {
		return this.getTypedRuleContext(IdentifierContext, 0) as IdentifierContext;
	}
	public TABLESPACE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.TABLESPACE_SYMBOL, 0);
	}
	public STORAGE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.STORAGE_SYMBOL, 0);
	}
	public DISK_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.DISK_SYMBOL, 0);
	}
	public MEMORY_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.MEMORY_SYMBOL, 0);
	}
	public CONNECTION_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CONNECTION_SYMBOL, 0);
	}
	public KEY_BLOCK_SIZE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.KEY_BLOCK_SIZE_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_createTableOption;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterCreateTableOption) {
	 		listener.enterCreateTableOption(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitCreateTableOption) {
	 		listener.exitCreateTableOption(this);
		}
	}
}


export class TernaryOptionContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public ulong_number(): Ulong_numberContext {
		return this.getTypedRuleContext(Ulong_numberContext, 0) as Ulong_numberContext;
	}
	public DEFAULT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_ternaryOption;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterTernaryOption) {
	 		listener.enterTernaryOption(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitTernaryOption) {
	 		listener.exitTernaryOption(this);
		}
	}
}


export class DefaultCollationContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public COLLATE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.COLLATE_SYMBOL, 0);
	}
	public collationName(): CollationNameContext {
		return this.getTypedRuleContext(CollationNameContext, 0) as CollationNameContext;
	}
	public DEFAULT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
	}
	public EQUAL_OPERATOR(): TerminalNode {
		return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_defaultCollation;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterDefaultCollation) {
	 		listener.enterDefaultCollation(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitDefaultCollation) {
	 		listener.exitDefaultCollation(this);
		}
	}
}


export class DefaultEncryptionContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public ENCRYPTION_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ENCRYPTION_SYMBOL, 0);
	}
	public textStringLiteral(): TextStringLiteralContext {
		return this.getTypedRuleContext(TextStringLiteralContext, 0) as TextStringLiteralContext;
	}
	public DEFAULT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
	}
	public EQUAL_OPERATOR(): TerminalNode {
		return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_defaultEncryption;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterDefaultEncryption) {
	 		listener.enterDefaultEncryption(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitDefaultEncryption) {
	 		listener.exitDefaultEncryption(this);
		}
	}
}


export class DefaultCharsetContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public charset(): CharsetContext {
		return this.getTypedRuleContext(CharsetContext, 0) as CharsetContext;
	}
	public charsetName(): CharsetNameContext {
		return this.getTypedRuleContext(CharsetNameContext, 0) as CharsetNameContext;
	}
	public DEFAULT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
	}
	public EQUAL_OPERATOR(): TerminalNode {
		return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_defaultCharset;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterDefaultCharset) {
	 		listener.enterDefaultCharset(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitDefaultCharset) {
	 		listener.exitDefaultCharset(this);
		}
	}
}


export class PartitionClauseContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public PARTITION_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.PARTITION_SYMBOL, 0);
	}
	public BY_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.BY_SYMBOL, 0);
	}
	public partitionTypeDef(): PartitionTypeDefContext {
		return this.getTypedRuleContext(PartitionTypeDefContext, 0) as PartitionTypeDefContext;
	}
	public PARTITIONS_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.PARTITIONS_SYMBOL, 0);
	}
	public real_ulong_number(): Real_ulong_numberContext {
		return this.getTypedRuleContext(Real_ulong_numberContext, 0) as Real_ulong_numberContext;
	}
	public subPartitions(): SubPartitionsContext {
		return this.getTypedRuleContext(SubPartitionsContext, 0) as SubPartitionsContext;
	}
	public partitionDefinitions(): PartitionDefinitionsContext {
		return this.getTypedRuleContext(PartitionDefinitionsContext, 0) as PartitionDefinitionsContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_partitionClause;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterPartitionClause) {
	 		listener.enterPartitionClause(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitPartitionClause) {
	 		listener.exitPartitionClause(this);
		}
	}
}


export class PartitionTypeDefContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_partitionTypeDef;
	}
	public copyFrom(ctx: PartitionTypeDefContext): void {
		super.copyFrom(ctx);
	}
}
export class PartitionDefRangeListContext extends PartitionTypeDefContext {
	constructor(parser: MySQLParser, ctx: PartitionTypeDefContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public RANGE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.RANGE_SYMBOL, 0);
	}
	public LIST_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.LIST_SYMBOL, 0);
	}
	public OPEN_PAR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
	}
	public bitExpr(): BitExprContext {
		return this.getTypedRuleContext(BitExprContext, 0) as BitExprContext;
	}
	public CLOSE_PAR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
	}
	public COLUMNS_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.COLUMNS_SYMBOL, 0);
	}
	public identifierList(): IdentifierListContext {
		return this.getTypedRuleContext(IdentifierListContext, 0) as IdentifierListContext;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterPartitionDefRangeList) {
	 		listener.enterPartitionDefRangeList(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitPartitionDefRangeList) {
	 		listener.exitPartitionDefRangeList(this);
		}
	}
}
export class PartitionDefKeyContext extends PartitionTypeDefContext {
	constructor(parser: MySQLParser, ctx: PartitionTypeDefContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public KEY_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.KEY_SYMBOL, 0);
	}
	public OPEN_PAR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
	}
	public CLOSE_PAR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
	}
	public LINEAR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.LINEAR_SYMBOL, 0);
	}
	public partitionKeyAlgorithm(): PartitionKeyAlgorithmContext {
		return this.getTypedRuleContext(PartitionKeyAlgorithmContext, 0) as PartitionKeyAlgorithmContext;
	}
	public identifierList(): IdentifierListContext {
		return this.getTypedRuleContext(IdentifierListContext, 0) as IdentifierListContext;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterPartitionDefKey) {
	 		listener.enterPartitionDefKey(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitPartitionDefKey) {
	 		listener.exitPartitionDefKey(this);
		}
	}
}
export class PartitionDefHashContext extends PartitionTypeDefContext {
	constructor(parser: MySQLParser, ctx: PartitionTypeDefContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public HASH_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.HASH_SYMBOL, 0);
	}
	public OPEN_PAR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
	}
	public bitExpr(): BitExprContext {
		return this.getTypedRuleContext(BitExprContext, 0) as BitExprContext;
	}
	public CLOSE_PAR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
	}
	public LINEAR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.LINEAR_SYMBOL, 0);
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterPartitionDefHash) {
	 		listener.enterPartitionDefHash(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitPartitionDefHash) {
	 		listener.exitPartitionDefHash(this);
		}
	}
}


export class SubPartitionsContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public SUBPARTITION_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SUBPARTITION_SYMBOL, 0);
	}
	public BY_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.BY_SYMBOL, 0);
	}
	public HASH_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.HASH_SYMBOL, 0);
	}
	public OPEN_PAR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
	}
	public bitExpr(): BitExprContext {
		return this.getTypedRuleContext(BitExprContext, 0) as BitExprContext;
	}
	public CLOSE_PAR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
	}
	public KEY_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.KEY_SYMBOL, 0);
	}
	public identifierListWithParentheses(): IdentifierListWithParenthesesContext {
		return this.getTypedRuleContext(IdentifierListWithParenthesesContext, 0) as IdentifierListWithParenthesesContext;
	}
	public LINEAR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.LINEAR_SYMBOL, 0);
	}
	public SUBPARTITIONS_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SUBPARTITIONS_SYMBOL, 0);
	}
	public real_ulong_number(): Real_ulong_numberContext {
		return this.getTypedRuleContext(Real_ulong_numberContext, 0) as Real_ulong_numberContext;
	}
	public partitionKeyAlgorithm(): PartitionKeyAlgorithmContext {
		return this.getTypedRuleContext(PartitionKeyAlgorithmContext, 0) as PartitionKeyAlgorithmContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_subPartitions;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterSubPartitions) {
	 		listener.enterSubPartitions(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitSubPartitions) {
	 		listener.exitSubPartitions(this);
		}
	}
}


export class PartitionKeyAlgorithmContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public ALGORITHM_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ALGORITHM_SYMBOL, 0);
	}
	public EQUAL_OPERATOR(): TerminalNode {
		return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
	}
	public real_ulong_number(): Real_ulong_numberContext {
		return this.getTypedRuleContext(Real_ulong_numberContext, 0) as Real_ulong_numberContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_partitionKeyAlgorithm;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterPartitionKeyAlgorithm) {
	 		listener.enterPartitionKeyAlgorithm(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitPartitionKeyAlgorithm) {
	 		listener.exitPartitionKeyAlgorithm(this);
		}
	}
}


export class PartitionDefinitionsContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public OPEN_PAR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
	}
	public partitionDefinition_list(): PartitionDefinitionContext[] {
		return this.getTypedRuleContexts(PartitionDefinitionContext) as PartitionDefinitionContext[];
	}
	public partitionDefinition(i: number): PartitionDefinitionContext {
		return this.getTypedRuleContext(PartitionDefinitionContext, i) as PartitionDefinitionContext;
	}
	public CLOSE_PAR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
	}
	public COMMA_SYMBOL_list(): TerminalNode[] {
	    	return this.getTokens(MySQLParser.COMMA_SYMBOL);
	}
	public COMMA_SYMBOL(i: number): TerminalNode {
		return this.getToken(MySQLParser.COMMA_SYMBOL, i);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_partitionDefinitions;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterPartitionDefinitions) {
	 		listener.enterPartitionDefinitions(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitPartitionDefinitions) {
	 		listener.exitPartitionDefinitions(this);
		}
	}
}


export class PartitionDefinitionContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public PARTITION_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.PARTITION_SYMBOL, 0);
	}
	public identifier(): IdentifierContext {
		return this.getTypedRuleContext(IdentifierContext, 0) as IdentifierContext;
	}
	public VALUES_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.VALUES_SYMBOL, 0);
	}
	public LESS_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.LESS_SYMBOL, 0);
	}
	public THAN_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.THAN_SYMBOL, 0);
	}
	public IN_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.IN_SYMBOL, 0);
	}
	public partitionValuesIn(): PartitionValuesInContext {
		return this.getTypedRuleContext(PartitionValuesInContext, 0) as PartitionValuesInContext;
	}
	public partitionOption_list(): PartitionOptionContext[] {
		return this.getTypedRuleContexts(PartitionOptionContext) as PartitionOptionContext[];
	}
	public partitionOption(i: number): PartitionOptionContext {
		return this.getTypedRuleContext(PartitionOptionContext, i) as PartitionOptionContext;
	}
	public OPEN_PAR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
	}
	public subpartitionDefinition_list(): SubpartitionDefinitionContext[] {
		return this.getTypedRuleContexts(SubpartitionDefinitionContext) as SubpartitionDefinitionContext[];
	}
	public subpartitionDefinition(i: number): SubpartitionDefinitionContext {
		return this.getTypedRuleContext(SubpartitionDefinitionContext, i) as SubpartitionDefinitionContext;
	}
	public CLOSE_PAR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
	}
	public partitionValueItemListParen(): PartitionValueItemListParenContext {
		return this.getTypedRuleContext(PartitionValueItemListParenContext, 0) as PartitionValueItemListParenContext;
	}
	public MAXVALUE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.MAXVALUE_SYMBOL, 0);
	}
	public COMMA_SYMBOL_list(): TerminalNode[] {
	    	return this.getTokens(MySQLParser.COMMA_SYMBOL);
	}
	public COMMA_SYMBOL(i: number): TerminalNode {
		return this.getToken(MySQLParser.COMMA_SYMBOL, i);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_partitionDefinition;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterPartitionDefinition) {
	 		listener.enterPartitionDefinition(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitPartitionDefinition) {
	 		listener.exitPartitionDefinition(this);
		}
	}
}


export class PartitionValuesInContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public partitionValueItemListParen_list(): PartitionValueItemListParenContext[] {
		return this.getTypedRuleContexts(PartitionValueItemListParenContext) as PartitionValueItemListParenContext[];
	}
	public partitionValueItemListParen(i: number): PartitionValueItemListParenContext {
		return this.getTypedRuleContext(PartitionValueItemListParenContext, i) as PartitionValueItemListParenContext;
	}
	public OPEN_PAR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
	}
	public CLOSE_PAR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
	}
	public COMMA_SYMBOL_list(): TerminalNode[] {
	    	return this.getTokens(MySQLParser.COMMA_SYMBOL);
	}
	public COMMA_SYMBOL(i: number): TerminalNode {
		return this.getToken(MySQLParser.COMMA_SYMBOL, i);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_partitionValuesIn;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterPartitionValuesIn) {
	 		listener.enterPartitionValuesIn(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitPartitionValuesIn) {
	 		listener.exitPartitionValuesIn(this);
		}
	}
}


export class PartitionOptionContext extends ParserRuleContext {
	public _option!: Token;
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public identifier(): IdentifierContext {
		return this.getTypedRuleContext(IdentifierContext, 0) as IdentifierContext;
	}
	public TABLESPACE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.TABLESPACE_SYMBOL, 0);
	}
	public EQUAL_OPERATOR(): TerminalNode {
		return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
	}
	public engineRef(): EngineRefContext {
		return this.getTypedRuleContext(EngineRefContext, 0) as EngineRefContext;
	}
	public ENGINE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ENGINE_SYMBOL, 0);
	}
	public STORAGE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.STORAGE_SYMBOL, 0);
	}
	public real_ulong_number(): Real_ulong_numberContext {
		return this.getTypedRuleContext(Real_ulong_numberContext, 0) as Real_ulong_numberContext;
	}
	public NODEGROUP_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.NODEGROUP_SYMBOL, 0);
	}
	public MAX_ROWS_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.MAX_ROWS_SYMBOL, 0);
	}
	public MIN_ROWS_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.MIN_ROWS_SYMBOL, 0);
	}
	public DIRECTORY_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.DIRECTORY_SYMBOL, 0);
	}
	public textLiteral(): TextLiteralContext {
		return this.getTypedRuleContext(TextLiteralContext, 0) as TextLiteralContext;
	}
	public DATA_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.DATA_SYMBOL, 0);
	}
	public INDEX_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.INDEX_SYMBOL, 0);
	}
	public COMMENT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.COMMENT_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_partitionOption;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterPartitionOption) {
	 		listener.enterPartitionOption(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitPartitionOption) {
	 		listener.exitPartitionOption(this);
		}
	}
}


export class SubpartitionDefinitionContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public SUBPARTITION_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SUBPARTITION_SYMBOL, 0);
	}
	public textOrIdentifier(): TextOrIdentifierContext {
		return this.getTypedRuleContext(TextOrIdentifierContext, 0) as TextOrIdentifierContext;
	}
	public partitionOption_list(): PartitionOptionContext[] {
		return this.getTypedRuleContexts(PartitionOptionContext) as PartitionOptionContext[];
	}
	public partitionOption(i: number): PartitionOptionContext {
		return this.getTypedRuleContext(PartitionOptionContext, i) as PartitionOptionContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_subpartitionDefinition;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterSubpartitionDefinition) {
	 		listener.enterSubpartitionDefinition(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitSubpartitionDefinition) {
	 		listener.exitSubpartitionDefinition(this);
		}
	}
}


export class PartitionValueItemListParenContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public OPEN_PAR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
	}
	public partitionValueItem_list(): PartitionValueItemContext[] {
		return this.getTypedRuleContexts(PartitionValueItemContext) as PartitionValueItemContext[];
	}
	public partitionValueItem(i: number): PartitionValueItemContext {
		return this.getTypedRuleContext(PartitionValueItemContext, i) as PartitionValueItemContext;
	}
	public CLOSE_PAR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
	}
	public COMMA_SYMBOL_list(): TerminalNode[] {
	    	return this.getTokens(MySQLParser.COMMA_SYMBOL);
	}
	public COMMA_SYMBOL(i: number): TerminalNode {
		return this.getToken(MySQLParser.COMMA_SYMBOL, i);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_partitionValueItemListParen;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterPartitionValueItemListParen) {
	 		listener.enterPartitionValueItemListParen(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitPartitionValueItemListParen) {
	 		listener.exitPartitionValueItemListParen(this);
		}
	}
}


export class PartitionValueItemContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public bitExpr(): BitExprContext {
		return this.getTypedRuleContext(BitExprContext, 0) as BitExprContext;
	}
	public MAXVALUE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.MAXVALUE_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_partitionValueItem;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterPartitionValueItem) {
	 		listener.enterPartitionValueItem(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitPartitionValueItem) {
	 		listener.exitPartitionValueItem(this);
		}
	}
}


export class DefinerClauseContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public DEFINER_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.DEFINER_SYMBOL, 0);
	}
	public EQUAL_OPERATOR(): TerminalNode {
		return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
	}
	public user(): UserContext {
		return this.getTypedRuleContext(UserContext, 0) as UserContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_definerClause;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterDefinerClause) {
	 		listener.enterDefinerClause(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitDefinerClause) {
	 		listener.exitDefinerClause(this);
		}
	}
}


export class IfExistsContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public IF_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.IF_SYMBOL, 0);
	}
	public EXISTS_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.EXISTS_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_ifExists;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterIfExists) {
	 		listener.enterIfExists(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitIfExists) {
	 		listener.exitIfExists(this);
		}
	}
}


export class IfNotExistsContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public IF_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.IF_SYMBOL, 0);
	}
	public notRule(): NotRuleContext {
		return this.getTypedRuleContext(NotRuleContext, 0) as NotRuleContext;
	}
	public EXISTS_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.EXISTS_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_ifNotExists;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterIfNotExists) {
	 		listener.enterIfNotExists(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitIfNotExists) {
	 		listener.exitIfNotExists(this);
		}
	}
}


export class ProcedureParameterContext extends ParserRuleContext {
	public _type_!: Token;
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public functionParameter(): FunctionParameterContext {
		return this.getTypedRuleContext(FunctionParameterContext, 0) as FunctionParameterContext;
	}
	public IN_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.IN_SYMBOL, 0);
	}
	public OUT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.OUT_SYMBOL, 0);
	}
	public INOUT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.INOUT_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_procedureParameter;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterProcedureParameter) {
	 		listener.enterProcedureParameter(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitProcedureParameter) {
	 		listener.exitProcedureParameter(this);
		}
	}
}


export class FunctionParameterContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public parameterName(): ParameterNameContext {
		return this.getTypedRuleContext(ParameterNameContext, 0) as ParameterNameContext;
	}
	public typeWithOptCollate(): TypeWithOptCollateContext {
		return this.getTypedRuleContext(TypeWithOptCollateContext, 0) as TypeWithOptCollateContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_functionParameter;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterFunctionParameter) {
	 		listener.enterFunctionParameter(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitFunctionParameter) {
	 		listener.exitFunctionParameter(this);
		}
	}
}


export class CollateContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public COLLATE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.COLLATE_SYMBOL, 0);
	}
	public collationName(): CollationNameContext {
		return this.getTypedRuleContext(CollationNameContext, 0) as CollationNameContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_collate;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterCollate) {
	 		listener.enterCollate(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitCollate) {
	 		listener.exitCollate(this);
		}
	}
}


export class TypeWithOptCollateContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public dataType(): DataTypeContext {
		return this.getTypedRuleContext(DataTypeContext, 0) as DataTypeContext;
	}
	public collate(): CollateContext {
		return this.getTypedRuleContext(CollateContext, 0) as CollateContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_typeWithOptCollate;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterTypeWithOptCollate) {
	 		listener.enterTypeWithOptCollate(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitTypeWithOptCollate) {
	 		listener.exitTypeWithOptCollate(this);
		}
	}
}


export class SchemaIdentifierPairContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public OPEN_PAR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
	}
	public schemaRef_list(): SchemaRefContext[] {
		return this.getTypedRuleContexts(SchemaRefContext) as SchemaRefContext[];
	}
	public schemaRef(i: number): SchemaRefContext {
		return this.getTypedRuleContext(SchemaRefContext, i) as SchemaRefContext;
	}
	public COMMA_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.COMMA_SYMBOL, 0);
	}
	public CLOSE_PAR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_schemaIdentifierPair;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterSchemaIdentifierPair) {
	 		listener.enterSchemaIdentifierPair(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitSchemaIdentifierPair) {
	 		listener.exitSchemaIdentifierPair(this);
		}
	}
}


export class ViewRefListContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public viewRef_list(): ViewRefContext[] {
		return this.getTypedRuleContexts(ViewRefContext) as ViewRefContext[];
	}
	public viewRef(i: number): ViewRefContext {
		return this.getTypedRuleContext(ViewRefContext, i) as ViewRefContext;
	}
	public COMMA_SYMBOL_list(): TerminalNode[] {
	    	return this.getTokens(MySQLParser.COMMA_SYMBOL);
	}
	public COMMA_SYMBOL(i: number): TerminalNode {
		return this.getToken(MySQLParser.COMMA_SYMBOL, i);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_viewRefList;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterViewRefList) {
	 		listener.enterViewRefList(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitViewRefList) {
	 		listener.exitViewRefList(this);
		}
	}
}


export class UpdateListContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public updateElement_list(): UpdateElementContext[] {
		return this.getTypedRuleContexts(UpdateElementContext) as UpdateElementContext[];
	}
	public updateElement(i: number): UpdateElementContext {
		return this.getTypedRuleContext(UpdateElementContext, i) as UpdateElementContext;
	}
	public COMMA_SYMBOL_list(): TerminalNode[] {
	    	return this.getTokens(MySQLParser.COMMA_SYMBOL);
	}
	public COMMA_SYMBOL(i: number): TerminalNode {
		return this.getToken(MySQLParser.COMMA_SYMBOL, i);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_updateList;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterUpdateList) {
	 		listener.enterUpdateList(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitUpdateList) {
	 		listener.exitUpdateList(this);
		}
	}
}


export class UpdateElementContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public columnRef(): ColumnRefContext {
		return this.getTypedRuleContext(ColumnRefContext, 0) as ColumnRefContext;
	}
	public EQUAL_OPERATOR(): TerminalNode {
		return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
	}
	public expr(): ExprContext {
		return this.getTypedRuleContext(ExprContext, 0) as ExprContext;
	}
	public DEFAULT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_updateElement;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterUpdateElement) {
	 		listener.enterUpdateElement(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitUpdateElement) {
	 		listener.exitUpdateElement(this);
		}
	}
}


export class CharsetClauseContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public charset(): CharsetContext {
		return this.getTypedRuleContext(CharsetContext, 0) as CharsetContext;
	}
	public charsetName(): CharsetNameContext {
		return this.getTypedRuleContext(CharsetNameContext, 0) as CharsetNameContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_charsetClause;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterCharsetClause) {
	 		listener.enterCharsetClause(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitCharsetClause) {
	 		listener.exitCharsetClause(this);
		}
	}
}


export class FieldsClauseContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public COLUMNS_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.COLUMNS_SYMBOL, 0);
	}
	public fieldTerm_list(): FieldTermContext[] {
		return this.getTypedRuleContexts(FieldTermContext) as FieldTermContext[];
	}
	public fieldTerm(i: number): FieldTermContext {
		return this.getTypedRuleContext(FieldTermContext, i) as FieldTermContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_fieldsClause;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterFieldsClause) {
	 		listener.enterFieldsClause(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitFieldsClause) {
	 		listener.exitFieldsClause(this);
		}
	}
}


export class FieldTermContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public TERMINATED_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.TERMINATED_SYMBOL, 0);
	}
	public BY_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.BY_SYMBOL, 0);
	}
	public textString(): TextStringContext {
		return this.getTypedRuleContext(TextStringContext, 0) as TextStringContext;
	}
	public ENCLOSED_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ENCLOSED_SYMBOL, 0);
	}
	public OPTIONALLY_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.OPTIONALLY_SYMBOL, 0);
	}
	public ESCAPED_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ESCAPED_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_fieldTerm;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterFieldTerm) {
	 		listener.enterFieldTerm(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitFieldTerm) {
	 		listener.exitFieldTerm(this);
		}
	}
}


export class LinesClauseContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LINES_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.LINES_SYMBOL, 0);
	}
	public lineTerm_list(): LineTermContext[] {
		return this.getTypedRuleContexts(LineTermContext) as LineTermContext[];
	}
	public lineTerm(i: number): LineTermContext {
		return this.getTypedRuleContext(LineTermContext, i) as LineTermContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_linesClause;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterLinesClause) {
	 		listener.enterLinesClause(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitLinesClause) {
	 		listener.exitLinesClause(this);
		}
	}
}


export class LineTermContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public BY_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.BY_SYMBOL, 0);
	}
	public textString(): TextStringContext {
		return this.getTypedRuleContext(TextStringContext, 0) as TextStringContext;
	}
	public TERMINATED_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.TERMINATED_SYMBOL, 0);
	}
	public STARTING_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.STARTING_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_lineTerm;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterLineTerm) {
	 		listener.enterLineTerm(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitLineTerm) {
	 		listener.exitLineTerm(this);
		}
	}
}


export class UserListContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public user_list(): UserContext[] {
		return this.getTypedRuleContexts(UserContext) as UserContext[];
	}
	public user(i: number): UserContext {
		return this.getTypedRuleContext(UserContext, i) as UserContext;
	}
	public COMMA_SYMBOL_list(): TerminalNode[] {
	    	return this.getTokens(MySQLParser.COMMA_SYMBOL);
	}
	public COMMA_SYMBOL(i: number): TerminalNode {
		return this.getToken(MySQLParser.COMMA_SYMBOL, i);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_userList;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterUserList) {
	 		listener.enterUserList(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitUserList) {
	 		listener.exitUserList(this);
		}
	}
}


export class CreateUserListContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public createUserEntry_list(): CreateUserEntryContext[] {
		return this.getTypedRuleContexts(CreateUserEntryContext) as CreateUserEntryContext[];
	}
	public createUserEntry(i: number): CreateUserEntryContext {
		return this.getTypedRuleContext(CreateUserEntryContext, i) as CreateUserEntryContext;
	}
	public COMMA_SYMBOL_list(): TerminalNode[] {
	    	return this.getTokens(MySQLParser.COMMA_SYMBOL);
	}
	public COMMA_SYMBOL(i: number): TerminalNode {
		return this.getToken(MySQLParser.COMMA_SYMBOL, i);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_createUserList;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterCreateUserList) {
	 		listener.enterCreateUserList(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitCreateUserList) {
	 		listener.exitCreateUserList(this);
		}
	}
}


export class AlterUserListContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public alterUserEntry_list(): AlterUserEntryContext[] {
		return this.getTypedRuleContexts(AlterUserEntryContext) as AlterUserEntryContext[];
	}
	public alterUserEntry(i: number): AlterUserEntryContext {
		return this.getTypedRuleContext(AlterUserEntryContext, i) as AlterUserEntryContext;
	}
	public COMMA_SYMBOL_list(): TerminalNode[] {
	    	return this.getTokens(MySQLParser.COMMA_SYMBOL);
	}
	public COMMA_SYMBOL(i: number): TerminalNode {
		return this.getToken(MySQLParser.COMMA_SYMBOL, i);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_alterUserList;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterAlterUserList) {
	 		listener.enterAlterUserList(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitAlterUserList) {
	 		listener.exitAlterUserList(this);
		}
	}
}


export class CreateUserEntryContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public user(): UserContext {
		return this.getTypedRuleContext(UserContext, 0) as UserContext;
	}
	public IDENTIFIED_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.IDENTIFIED_SYMBOL, 0);
	}
	public BY_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.BY_SYMBOL, 0);
	}
	public textString(): TextStringContext {
		return this.getTypedRuleContext(TextStringContext, 0) as TextStringContext;
	}
	public WITH_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.WITH_SYMBOL, 0);
	}
	public textOrIdentifier(): TextOrIdentifierContext {
		return this.getTypedRuleContext(TextOrIdentifierContext, 0) as TextOrIdentifierContext;
	}
	public RANDOM_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.RANDOM_SYMBOL, 0);
	}
	public PASSWORD_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.PASSWORD_SYMBOL, 0);
	}
	public AS_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.AS_SYMBOL, 0);
	}
	public textStringHash(): TextStringHashContext {
		return this.getTypedRuleContext(TextStringHashContext, 0) as TextStringHashContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_createUserEntry;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterCreateUserEntry) {
	 		listener.enterCreateUserEntry(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitCreateUserEntry) {
	 		listener.exitCreateUserEntry(this);
		}
	}
}


export class AlterUserEntryContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public user(): UserContext {
		return this.getTypedRuleContext(UserContext, 0) as UserContext;
	}
	public IDENTIFIED_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.IDENTIFIED_SYMBOL, 0);
	}
	public BY_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.BY_SYMBOL, 0);
	}
	public textString_list(): TextStringContext[] {
		return this.getTypedRuleContexts(TextStringContext) as TextStringContext[];
	}
	public textString(i: number): TextStringContext {
		return this.getTypedRuleContext(TextStringContext, i) as TextStringContext;
	}
	public WITH_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.WITH_SYMBOL, 0);
	}
	public textOrIdentifier(): TextOrIdentifierContext {
		return this.getTypedRuleContext(TextOrIdentifierContext, 0) as TextOrIdentifierContext;
	}
	public discardOldPassword(): DiscardOldPasswordContext {
		return this.getTypedRuleContext(DiscardOldPasswordContext, 0) as DiscardOldPasswordContext;
	}
	public REPLACE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.REPLACE_SYMBOL, 0);
	}
	public retainCurrentPassword(): RetainCurrentPasswordContext {
		return this.getTypedRuleContext(RetainCurrentPasswordContext, 0) as RetainCurrentPasswordContext;
	}
	public AS_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.AS_SYMBOL, 0);
	}
	public textStringHash(): TextStringHashContext {
		return this.getTypedRuleContext(TextStringHashContext, 0) as TextStringHashContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_alterUserEntry;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterAlterUserEntry) {
	 		listener.enterAlterUserEntry(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitAlterUserEntry) {
	 		listener.exitAlterUserEntry(this);
		}
	}
}


export class RetainCurrentPasswordContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public RETAIN_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.RETAIN_SYMBOL, 0);
	}
	public CURRENT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CURRENT_SYMBOL, 0);
	}
	public PASSWORD_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.PASSWORD_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_retainCurrentPassword;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterRetainCurrentPassword) {
	 		listener.enterRetainCurrentPassword(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitRetainCurrentPassword) {
	 		listener.exitRetainCurrentPassword(this);
		}
	}
}


export class DiscardOldPasswordContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public DISCARD_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.DISCARD_SYMBOL, 0);
	}
	public OLD_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.OLD_SYMBOL, 0);
	}
	public PASSWORD_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.PASSWORD_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_discardOldPassword;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterDiscardOldPassword) {
	 		listener.enterDiscardOldPassword(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitDiscardOldPassword) {
	 		listener.exitDiscardOldPassword(this);
		}
	}
}


export class ReplacePasswordContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public REPLACE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.REPLACE_SYMBOL, 0);
	}
	public textString(): TextStringContext {
		return this.getTypedRuleContext(TextStringContext, 0) as TextStringContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_replacePassword;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterReplacePassword) {
	 		listener.enterReplacePassword(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitReplacePassword) {
	 		listener.exitReplacePassword(this);
		}
	}
}


export class UserIdentifierOrTextContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public textOrIdentifier_list(): TextOrIdentifierContext[] {
		return this.getTypedRuleContexts(TextOrIdentifierContext) as TextOrIdentifierContext[];
	}
	public textOrIdentifier(i: number): TextOrIdentifierContext {
		return this.getTypedRuleContext(TextOrIdentifierContext, i) as TextOrIdentifierContext;
	}
	public AT_SIGN_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.AT_SIGN_SYMBOL, 0);
	}
	public AT_TEXT_SUFFIX(): TerminalNode {
		return this.getToken(MySQLParser.AT_TEXT_SUFFIX, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_userIdentifierOrText;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterUserIdentifierOrText) {
	 		listener.enterUserIdentifierOrText(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitUserIdentifierOrText) {
	 		listener.exitUserIdentifierOrText(this);
		}
	}
}


export class UserContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public userIdentifierOrText(): UserIdentifierOrTextContext {
		return this.getTypedRuleContext(UserIdentifierOrTextContext, 0) as UserIdentifierOrTextContext;
	}
	public CURRENT_USER_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CURRENT_USER_SYMBOL, 0);
	}
	public parentheses(): ParenthesesContext {
		return this.getTypedRuleContext(ParenthesesContext, 0) as ParenthesesContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_user;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterUser) {
	 		listener.enterUser(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitUser) {
	 		listener.exitUser(this);
		}
	}
}


export class LikeClauseContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LIKE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.LIKE_SYMBOL, 0);
	}
	public textStringLiteral(): TextStringLiteralContext {
		return this.getTypedRuleContext(TextStringLiteralContext, 0) as TextStringLiteralContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_likeClause;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterLikeClause) {
	 		listener.enterLikeClause(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitLikeClause) {
	 		listener.exitLikeClause(this);
		}
	}
}


export class LikeOrWhereContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public likeClause(): LikeClauseContext {
		return this.getTypedRuleContext(LikeClauseContext, 0) as LikeClauseContext;
	}
	public whereClause(): WhereClauseContext {
		return this.getTypedRuleContext(WhereClauseContext, 0) as WhereClauseContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_likeOrWhere;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterLikeOrWhere) {
	 		listener.enterLikeOrWhere(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitLikeOrWhere) {
	 		listener.exitLikeOrWhere(this);
		}
	}
}


export class OnlineOptionContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public ONLINE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ONLINE_SYMBOL, 0);
	}
	public OFFLINE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.OFFLINE_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_onlineOption;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterOnlineOption) {
	 		listener.enterOnlineOption(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitOnlineOption) {
	 		listener.exitOnlineOption(this);
		}
	}
}


export class NoWriteToBinLogContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LOCAL_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.LOCAL_SYMBOL, 0);
	}
	public NO_WRITE_TO_BINLOG_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.NO_WRITE_TO_BINLOG_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_noWriteToBinLog;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterNoWriteToBinLog) {
	 		listener.enterNoWriteToBinLog(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitNoWriteToBinLog) {
	 		listener.exitNoWriteToBinLog(this);
		}
	}
}


export class UsePartitionContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public PARTITION_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.PARTITION_SYMBOL, 0);
	}
	public identifierListWithParentheses(): IdentifierListWithParenthesesContext {
		return this.getTypedRuleContext(IdentifierListWithParenthesesContext, 0) as IdentifierListWithParenthesesContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_usePartition;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterUsePartition) {
	 		listener.enterUsePartition(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitUsePartition) {
	 		listener.exitUsePartition(this);
		}
	}
}


export class FieldIdentifierContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public dotIdentifier(): DotIdentifierContext {
		return this.getTypedRuleContext(DotIdentifierContext, 0) as DotIdentifierContext;
	}
	public qualifiedIdentifier(): QualifiedIdentifierContext {
		return this.getTypedRuleContext(QualifiedIdentifierContext, 0) as QualifiedIdentifierContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_fieldIdentifier;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterFieldIdentifier) {
	 		listener.enterFieldIdentifier(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitFieldIdentifier) {
	 		listener.exitFieldIdentifier(this);
		}
	}
}


export class ColumnNameContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public identifier(): IdentifierContext {
		return this.getTypedRuleContext(IdentifierContext, 0) as IdentifierContext;
	}
	public fieldIdentifier(): FieldIdentifierContext {
		return this.getTypedRuleContext(FieldIdentifierContext, 0) as FieldIdentifierContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_columnName;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterColumnName) {
	 		listener.enterColumnName(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitColumnName) {
	 		listener.exitColumnName(this);
		}
	}
}


export class ColumnInternalRefContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public identifier(): IdentifierContext {
		return this.getTypedRuleContext(IdentifierContext, 0) as IdentifierContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_columnInternalRef;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterColumnInternalRef) {
	 		listener.enterColumnInternalRef(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitColumnInternalRef) {
	 		listener.exitColumnInternalRef(this);
		}
	}
}


export class ColumnInternalRefListContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public OPEN_PAR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
	}
	public columnInternalRef_list(): ColumnInternalRefContext[] {
		return this.getTypedRuleContexts(ColumnInternalRefContext) as ColumnInternalRefContext[];
	}
	public columnInternalRef(i: number): ColumnInternalRefContext {
		return this.getTypedRuleContext(ColumnInternalRefContext, i) as ColumnInternalRefContext;
	}
	public CLOSE_PAR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
	}
	public COMMA_SYMBOL_list(): TerminalNode[] {
	    	return this.getTokens(MySQLParser.COMMA_SYMBOL);
	}
	public COMMA_SYMBOL(i: number): TerminalNode {
		return this.getToken(MySQLParser.COMMA_SYMBOL, i);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_columnInternalRefList;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterColumnInternalRefList) {
	 		listener.enterColumnInternalRefList(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitColumnInternalRefList) {
	 		listener.exitColumnInternalRefList(this);
		}
	}
}


export class ColumnRefContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public fieldIdentifier(): FieldIdentifierContext {
		return this.getTypedRuleContext(FieldIdentifierContext, 0) as FieldIdentifierContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_columnRef;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterColumnRef) {
	 		listener.enterColumnRef(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitColumnRef) {
	 		listener.exitColumnRef(this);
		}
	}
}


export class InsertIdentifierContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public columnRef(): ColumnRefContext {
		return this.getTypedRuleContext(ColumnRefContext, 0) as ColumnRefContext;
	}
	public tableWild(): TableWildContext {
		return this.getTypedRuleContext(TableWildContext, 0) as TableWildContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_insertIdentifier;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterInsertIdentifier) {
	 		listener.enterInsertIdentifier(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitInsertIdentifier) {
	 		listener.exitInsertIdentifier(this);
		}
	}
}


export class IndexNameContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public identifier(): IdentifierContext {
		return this.getTypedRuleContext(IdentifierContext, 0) as IdentifierContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_indexName;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterIndexName) {
	 		listener.enterIndexName(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitIndexName) {
	 		listener.exitIndexName(this);
		}
	}
}


export class IndexRefContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public fieldIdentifier(): FieldIdentifierContext {
		return this.getTypedRuleContext(FieldIdentifierContext, 0) as FieldIdentifierContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_indexRef;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterIndexRef) {
	 		listener.enterIndexRef(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitIndexRef) {
	 		listener.exitIndexRef(this);
		}
	}
}


export class TableWildContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public identifier_list(): IdentifierContext[] {
		return this.getTypedRuleContexts(IdentifierContext) as IdentifierContext[];
	}
	public identifier(i: number): IdentifierContext {
		return this.getTypedRuleContext(IdentifierContext, i) as IdentifierContext;
	}
	public DOT_SYMBOL_list(): TerminalNode[] {
	    	return this.getTokens(MySQLParser.DOT_SYMBOL);
	}
	public DOT_SYMBOL(i: number): TerminalNode {
		return this.getToken(MySQLParser.DOT_SYMBOL, i);
	}
	public MULT_OPERATOR(): TerminalNode {
		return this.getToken(MySQLParser.MULT_OPERATOR, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_tableWild;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterTableWild) {
	 		listener.enterTableWild(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitTableWild) {
	 		listener.exitTableWild(this);
		}
	}
}


export class SchemaNameContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public identifier(): IdentifierContext {
		return this.getTypedRuleContext(IdentifierContext, 0) as IdentifierContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_schemaName;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterSchemaName) {
	 		listener.enterSchemaName(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitSchemaName) {
	 		listener.exitSchemaName(this);
		}
	}
}


export class SchemaRefContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public identifier(): IdentifierContext {
		return this.getTypedRuleContext(IdentifierContext, 0) as IdentifierContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_schemaRef;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterSchemaRef) {
	 		listener.enterSchemaRef(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitSchemaRef) {
	 		listener.exitSchemaRef(this);
		}
	}
}


export class ProcedureNameContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public qualifiedIdentifier(): QualifiedIdentifierContext {
		return this.getTypedRuleContext(QualifiedIdentifierContext, 0) as QualifiedIdentifierContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_procedureName;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterProcedureName) {
	 		listener.enterProcedureName(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitProcedureName) {
	 		listener.exitProcedureName(this);
		}
	}
}


export class ProcedureRefContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public qualifiedIdentifier(): QualifiedIdentifierContext {
		return this.getTypedRuleContext(QualifiedIdentifierContext, 0) as QualifiedIdentifierContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_procedureRef;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterProcedureRef) {
	 		listener.enterProcedureRef(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitProcedureRef) {
	 		listener.exitProcedureRef(this);
		}
	}
}


export class FunctionNameContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public qualifiedIdentifier(): QualifiedIdentifierContext {
		return this.getTypedRuleContext(QualifiedIdentifierContext, 0) as QualifiedIdentifierContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_functionName;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterFunctionName) {
	 		listener.enterFunctionName(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitFunctionName) {
	 		listener.exitFunctionName(this);
		}
	}
}


export class FunctionRefContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public qualifiedIdentifier(): QualifiedIdentifierContext {
		return this.getTypedRuleContext(QualifiedIdentifierContext, 0) as QualifiedIdentifierContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_functionRef;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterFunctionRef) {
	 		listener.enterFunctionRef(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitFunctionRef) {
	 		listener.exitFunctionRef(this);
		}
	}
}


export class TriggerNameContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public qualifiedIdentifier(): QualifiedIdentifierContext {
		return this.getTypedRuleContext(QualifiedIdentifierContext, 0) as QualifiedIdentifierContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_triggerName;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterTriggerName) {
	 		listener.enterTriggerName(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitTriggerName) {
	 		listener.exitTriggerName(this);
		}
	}
}


export class TriggerRefContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public qualifiedIdentifier(): QualifiedIdentifierContext {
		return this.getTypedRuleContext(QualifiedIdentifierContext, 0) as QualifiedIdentifierContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_triggerRef;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterTriggerRef) {
	 		listener.enterTriggerRef(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitTriggerRef) {
	 		listener.exitTriggerRef(this);
		}
	}
}


export class ViewNameContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public qualifiedIdentifier(): QualifiedIdentifierContext {
		return this.getTypedRuleContext(QualifiedIdentifierContext, 0) as QualifiedIdentifierContext;
	}
	public dotIdentifier(): DotIdentifierContext {
		return this.getTypedRuleContext(DotIdentifierContext, 0) as DotIdentifierContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_viewName;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterViewName) {
	 		listener.enterViewName(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitViewName) {
	 		listener.exitViewName(this);
		}
	}
}


export class ViewRefContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public qualifiedIdentifier(): QualifiedIdentifierContext {
		return this.getTypedRuleContext(QualifiedIdentifierContext, 0) as QualifiedIdentifierContext;
	}
	public dotIdentifier(): DotIdentifierContext {
		return this.getTypedRuleContext(DotIdentifierContext, 0) as DotIdentifierContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_viewRef;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterViewRef) {
	 		listener.enterViewRef(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitViewRef) {
	 		listener.exitViewRef(this);
		}
	}
}


export class TablespaceNameContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public identifier(): IdentifierContext {
		return this.getTypedRuleContext(IdentifierContext, 0) as IdentifierContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_tablespaceName;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterTablespaceName) {
	 		listener.enterTablespaceName(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitTablespaceName) {
	 		listener.exitTablespaceName(this);
		}
	}
}


export class TablespaceRefContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public identifier(): IdentifierContext {
		return this.getTypedRuleContext(IdentifierContext, 0) as IdentifierContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_tablespaceRef;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterTablespaceRef) {
	 		listener.enterTablespaceRef(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitTablespaceRef) {
	 		listener.exitTablespaceRef(this);
		}
	}
}


export class LogfileGroupNameContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public identifier(): IdentifierContext {
		return this.getTypedRuleContext(IdentifierContext, 0) as IdentifierContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_logfileGroupName;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterLogfileGroupName) {
	 		listener.enterLogfileGroupName(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitLogfileGroupName) {
	 		listener.exitLogfileGroupName(this);
		}
	}
}


export class LogfileGroupRefContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public identifier(): IdentifierContext {
		return this.getTypedRuleContext(IdentifierContext, 0) as IdentifierContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_logfileGroupRef;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterLogfileGroupRef) {
	 		listener.enterLogfileGroupRef(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitLogfileGroupRef) {
	 		listener.exitLogfileGroupRef(this);
		}
	}
}


export class EventNameContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public qualifiedIdentifier(): QualifiedIdentifierContext {
		return this.getTypedRuleContext(QualifiedIdentifierContext, 0) as QualifiedIdentifierContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_eventName;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterEventName) {
	 		listener.enterEventName(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitEventName) {
	 		listener.exitEventName(this);
		}
	}
}


export class EventRefContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public qualifiedIdentifier(): QualifiedIdentifierContext {
		return this.getTypedRuleContext(QualifiedIdentifierContext, 0) as QualifiedIdentifierContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_eventRef;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterEventRef) {
	 		listener.enterEventRef(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitEventRef) {
	 		listener.exitEventRef(this);
		}
	}
}


export class UdfNameContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public identifier(): IdentifierContext {
		return this.getTypedRuleContext(IdentifierContext, 0) as IdentifierContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_udfName;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterUdfName) {
	 		listener.enterUdfName(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitUdfName) {
	 		listener.exitUdfName(this);
		}
	}
}


export class ServerNameContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public textOrIdentifier(): TextOrIdentifierContext {
		return this.getTypedRuleContext(TextOrIdentifierContext, 0) as TextOrIdentifierContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_serverName;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterServerName) {
	 		listener.enterServerName(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitServerName) {
	 		listener.exitServerName(this);
		}
	}
}


export class ServerRefContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public textOrIdentifier(): TextOrIdentifierContext {
		return this.getTypedRuleContext(TextOrIdentifierContext, 0) as TextOrIdentifierContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_serverRef;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterServerRef) {
	 		listener.enterServerRef(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitServerRef) {
	 		listener.exitServerRef(this);
		}
	}
}


export class EngineRefContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public textOrIdentifier(): TextOrIdentifierContext {
		return this.getTypedRuleContext(TextOrIdentifierContext, 0) as TextOrIdentifierContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_engineRef;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterEngineRef) {
	 		listener.enterEngineRef(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitEngineRef) {
	 		listener.exitEngineRef(this);
		}
	}
}


export class TableNameContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public qualifiedIdentifier(): QualifiedIdentifierContext {
		return this.getTypedRuleContext(QualifiedIdentifierContext, 0) as QualifiedIdentifierContext;
	}
	public dotIdentifier(): DotIdentifierContext {
		return this.getTypedRuleContext(DotIdentifierContext, 0) as DotIdentifierContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_tableName;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterTableName) {
	 		listener.enterTableName(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitTableName) {
	 		listener.exitTableName(this);
		}
	}
}


export class FilterTableRefContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public schemaRef(): SchemaRefContext {
		return this.getTypedRuleContext(SchemaRefContext, 0) as SchemaRefContext;
	}
	public dotIdentifier(): DotIdentifierContext {
		return this.getTypedRuleContext(DotIdentifierContext, 0) as DotIdentifierContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_filterTableRef;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterFilterTableRef) {
	 		listener.enterFilterTableRef(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitFilterTableRef) {
	 		listener.exitFilterTableRef(this);
		}
	}
}


export class TableRefWithWildcardContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public identifier(): IdentifierContext {
		return this.getTypedRuleContext(IdentifierContext, 0) as IdentifierContext;
	}
	public DOT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.DOT_SYMBOL, 0);
	}
	public MULT_OPERATOR(): TerminalNode {
		return this.getToken(MySQLParser.MULT_OPERATOR, 0);
	}
	public dotIdentifier(): DotIdentifierContext {
		return this.getTypedRuleContext(DotIdentifierContext, 0) as DotIdentifierContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_tableRefWithWildcard;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterTableRefWithWildcard) {
	 		listener.enterTableRefWithWildcard(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitTableRefWithWildcard) {
	 		listener.exitTableRefWithWildcard(this);
		}
	}
}


export class TableRefContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public qualifiedIdentifier(): QualifiedIdentifierContext {
		return this.getTypedRuleContext(QualifiedIdentifierContext, 0) as QualifiedIdentifierContext;
	}
	public dotIdentifier(): DotIdentifierContext {
		return this.getTypedRuleContext(DotIdentifierContext, 0) as DotIdentifierContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_tableRef;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterTableRef) {
	 		listener.enterTableRef(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitTableRef) {
	 		listener.exitTableRef(this);
		}
	}
}


export class TableRefListContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public tableRef_list(): TableRefContext[] {
		return this.getTypedRuleContexts(TableRefContext) as TableRefContext[];
	}
	public tableRef(i: number): TableRefContext {
		return this.getTypedRuleContext(TableRefContext, i) as TableRefContext;
	}
	public COMMA_SYMBOL_list(): TerminalNode[] {
	    	return this.getTokens(MySQLParser.COMMA_SYMBOL);
	}
	public COMMA_SYMBOL(i: number): TerminalNode {
		return this.getToken(MySQLParser.COMMA_SYMBOL, i);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_tableRefList;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterTableRefList) {
	 		listener.enterTableRefList(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitTableRefList) {
	 		listener.exitTableRefList(this);
		}
	}
}


export class TableAliasRefListContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public tableRefWithWildcard_list(): TableRefWithWildcardContext[] {
		return this.getTypedRuleContexts(TableRefWithWildcardContext) as TableRefWithWildcardContext[];
	}
	public tableRefWithWildcard(i: number): TableRefWithWildcardContext {
		return this.getTypedRuleContext(TableRefWithWildcardContext, i) as TableRefWithWildcardContext;
	}
	public COMMA_SYMBOL_list(): TerminalNode[] {
	    	return this.getTokens(MySQLParser.COMMA_SYMBOL);
	}
	public COMMA_SYMBOL(i: number): TerminalNode {
		return this.getToken(MySQLParser.COMMA_SYMBOL, i);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_tableAliasRefList;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterTableAliasRefList) {
	 		listener.enterTableAliasRefList(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitTableAliasRefList) {
	 		listener.exitTableAliasRefList(this);
		}
	}
}


export class ParameterNameContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public identifier(): IdentifierContext {
		return this.getTypedRuleContext(IdentifierContext, 0) as IdentifierContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_parameterName;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterParameterName) {
	 		listener.enterParameterName(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitParameterName) {
	 		listener.exitParameterName(this);
		}
	}
}


export class LabelIdentifierContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public pureIdentifier(): PureIdentifierContext {
		return this.getTypedRuleContext(PureIdentifierContext, 0) as PureIdentifierContext;
	}
	public labelKeyword(): LabelKeywordContext {
		return this.getTypedRuleContext(LabelKeywordContext, 0) as LabelKeywordContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_labelIdentifier;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterLabelIdentifier) {
	 		listener.enterLabelIdentifier(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitLabelIdentifier) {
	 		listener.exitLabelIdentifier(this);
		}
	}
}


export class LabelRefContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public labelIdentifier(): LabelIdentifierContext {
		return this.getTypedRuleContext(LabelIdentifierContext, 0) as LabelIdentifierContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_labelRef;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterLabelRef) {
	 		listener.enterLabelRef(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitLabelRef) {
	 		listener.exitLabelRef(this);
		}
	}
}


export class RoleIdentifierContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public pureIdentifier(): PureIdentifierContext {
		return this.getTypedRuleContext(PureIdentifierContext, 0) as PureIdentifierContext;
	}
	public roleKeyword(): RoleKeywordContext {
		return this.getTypedRuleContext(RoleKeywordContext, 0) as RoleKeywordContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_roleIdentifier;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterRoleIdentifier) {
	 		listener.enterRoleIdentifier(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitRoleIdentifier) {
	 		listener.exitRoleIdentifier(this);
		}
	}
}


export class RoleRefContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public roleIdentifier(): RoleIdentifierContext {
		return this.getTypedRuleContext(RoleIdentifierContext, 0) as RoleIdentifierContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_roleRef;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterRoleRef) {
	 		listener.enterRoleRef(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitRoleRef) {
	 		listener.exitRoleRef(this);
		}
	}
}


export class PluginRefContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public identifier(): IdentifierContext {
		return this.getTypedRuleContext(IdentifierContext, 0) as IdentifierContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_pluginRef;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterPluginRef) {
	 		listener.enterPluginRef(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitPluginRef) {
	 		listener.exitPluginRef(this);
		}
	}
}


export class ComponentRefContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public textStringLiteral(): TextStringLiteralContext {
		return this.getTypedRuleContext(TextStringLiteralContext, 0) as TextStringLiteralContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_componentRef;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterComponentRef) {
	 		listener.enterComponentRef(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitComponentRef) {
	 		listener.exitComponentRef(this);
		}
	}
}


export class ResourceGroupRefContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public identifier(): IdentifierContext {
		return this.getTypedRuleContext(IdentifierContext, 0) as IdentifierContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_resourceGroupRef;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterResourceGroupRef) {
	 		listener.enterResourceGroupRef(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitResourceGroupRef) {
	 		listener.exitResourceGroupRef(this);
		}
	}
}


export class WindowNameContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public identifier(): IdentifierContext {
		return this.getTypedRuleContext(IdentifierContext, 0) as IdentifierContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_windowName;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterWindowName) {
	 		listener.enterWindowName(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitWindowName) {
	 		listener.exitWindowName(this);
		}
	}
}


export class PureIdentifierContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public IDENTIFIER(): TerminalNode {
		return this.getToken(MySQLParser.IDENTIFIER, 0);
	}
	public BACK_TICK_QUOTED_ID(): TerminalNode {
		return this.getToken(MySQLParser.BACK_TICK_QUOTED_ID, 0);
	}
	public DOUBLE_QUOTED_TEXT(): TerminalNode {
		return this.getToken(MySQLParser.DOUBLE_QUOTED_TEXT, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_pureIdentifier;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterPureIdentifier) {
	 		listener.enterPureIdentifier(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitPureIdentifier) {
	 		listener.exitPureIdentifier(this);
		}
	}
}


export class IdentifierContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public pureIdentifier(): PureIdentifierContext {
		return this.getTypedRuleContext(PureIdentifierContext, 0) as PureIdentifierContext;
	}
	public identifierKeyword(): IdentifierKeywordContext {
		return this.getTypedRuleContext(IdentifierKeywordContext, 0) as IdentifierKeywordContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_identifier;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterIdentifier) {
	 		listener.enterIdentifier(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitIdentifier) {
	 		listener.exitIdentifier(this);
		}
	}
}


export class IdentifierListContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public identifier_list(): IdentifierContext[] {
		return this.getTypedRuleContexts(IdentifierContext) as IdentifierContext[];
	}
	public identifier(i: number): IdentifierContext {
		return this.getTypedRuleContext(IdentifierContext, i) as IdentifierContext;
	}
	public COMMA_SYMBOL_list(): TerminalNode[] {
	    	return this.getTokens(MySQLParser.COMMA_SYMBOL);
	}
	public COMMA_SYMBOL(i: number): TerminalNode {
		return this.getToken(MySQLParser.COMMA_SYMBOL, i);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_identifierList;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterIdentifierList) {
	 		listener.enterIdentifierList(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitIdentifierList) {
	 		listener.exitIdentifierList(this);
		}
	}
}


export class IdentifierListWithParenthesesContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public OPEN_PAR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
	}
	public identifierList(): IdentifierListContext {
		return this.getTypedRuleContext(IdentifierListContext, 0) as IdentifierListContext;
	}
	public CLOSE_PAR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_identifierListWithParentheses;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterIdentifierListWithParentheses) {
	 		listener.enterIdentifierListWithParentheses(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitIdentifierListWithParentheses) {
	 		listener.exitIdentifierListWithParentheses(this);
		}
	}
}


export class QualifiedIdentifierContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public identifier(): IdentifierContext {
		return this.getTypedRuleContext(IdentifierContext, 0) as IdentifierContext;
	}
	public dotIdentifier(): DotIdentifierContext {
		return this.getTypedRuleContext(DotIdentifierContext, 0) as DotIdentifierContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_qualifiedIdentifier;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterQualifiedIdentifier) {
	 		listener.enterQualifiedIdentifier(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitQualifiedIdentifier) {
	 		listener.exitQualifiedIdentifier(this);
		}
	}
}


export class SimpleIdentifierContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public identifier(): IdentifierContext {
		return this.getTypedRuleContext(IdentifierContext, 0) as IdentifierContext;
	}
	public dotIdentifier_list(): DotIdentifierContext[] {
		return this.getTypedRuleContexts(DotIdentifierContext) as DotIdentifierContext[];
	}
	public dotIdentifier(i: number): DotIdentifierContext {
		return this.getTypedRuleContext(DotIdentifierContext, i) as DotIdentifierContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_simpleIdentifier;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterSimpleIdentifier) {
	 		listener.enterSimpleIdentifier(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitSimpleIdentifier) {
	 		listener.exitSimpleIdentifier(this);
		}
	}
}


export class DotIdentifierContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public DOT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.DOT_SYMBOL, 0);
	}
	public identifier(): IdentifierContext {
		return this.getTypedRuleContext(IdentifierContext, 0) as IdentifierContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_dotIdentifier;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterDotIdentifier) {
	 		listener.enterDotIdentifier(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitDotIdentifier) {
	 		listener.exitDotIdentifier(this);
		}
	}
}


export class Ulong_numberContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public INT_NUMBER(): TerminalNode {
		return this.getToken(MySQLParser.INT_NUMBER, 0);
	}
	public HEX_NUMBER(): TerminalNode {
		return this.getToken(MySQLParser.HEX_NUMBER, 0);
	}
	public LONG_NUMBER(): TerminalNode {
		return this.getToken(MySQLParser.LONG_NUMBER, 0);
	}
	public ULONGLONG_NUMBER(): TerminalNode {
		return this.getToken(MySQLParser.ULONGLONG_NUMBER, 0);
	}
	public DECIMAL_NUMBER(): TerminalNode {
		return this.getToken(MySQLParser.DECIMAL_NUMBER, 0);
	}
	public FLOAT_NUMBER(): TerminalNode {
		return this.getToken(MySQLParser.FLOAT_NUMBER, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_ulong_number;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterUlong_number) {
	 		listener.enterUlong_number(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitUlong_number) {
	 		listener.exitUlong_number(this);
		}
	}
}


export class Real_ulong_numberContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public INT_NUMBER(): TerminalNode {
		return this.getToken(MySQLParser.INT_NUMBER, 0);
	}
	public HEX_NUMBER(): TerminalNode {
		return this.getToken(MySQLParser.HEX_NUMBER, 0);
	}
	public LONG_NUMBER(): TerminalNode {
		return this.getToken(MySQLParser.LONG_NUMBER, 0);
	}
	public ULONGLONG_NUMBER(): TerminalNode {
		return this.getToken(MySQLParser.ULONGLONG_NUMBER, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_real_ulong_number;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterReal_ulong_number) {
	 		listener.enterReal_ulong_number(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitReal_ulong_number) {
	 		listener.exitReal_ulong_number(this);
		}
	}
}


export class Ulonglong_numberContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public INT_NUMBER(): TerminalNode {
		return this.getToken(MySQLParser.INT_NUMBER, 0);
	}
	public LONG_NUMBER(): TerminalNode {
		return this.getToken(MySQLParser.LONG_NUMBER, 0);
	}
	public ULONGLONG_NUMBER(): TerminalNode {
		return this.getToken(MySQLParser.ULONGLONG_NUMBER, 0);
	}
	public DECIMAL_NUMBER(): TerminalNode {
		return this.getToken(MySQLParser.DECIMAL_NUMBER, 0);
	}
	public FLOAT_NUMBER(): TerminalNode {
		return this.getToken(MySQLParser.FLOAT_NUMBER, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_ulonglong_number;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterUlonglong_number) {
	 		listener.enterUlonglong_number(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitUlonglong_number) {
	 		listener.exitUlonglong_number(this);
		}
	}
}


export class Real_ulonglong_numberContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public INT_NUMBER(): TerminalNode {
		return this.getToken(MySQLParser.INT_NUMBER, 0);
	}
	public HEX_NUMBER(): TerminalNode {
		return this.getToken(MySQLParser.HEX_NUMBER, 0);
	}
	public ULONGLONG_NUMBER(): TerminalNode {
		return this.getToken(MySQLParser.ULONGLONG_NUMBER, 0);
	}
	public LONG_NUMBER(): TerminalNode {
		return this.getToken(MySQLParser.LONG_NUMBER, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_real_ulonglong_number;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterReal_ulonglong_number) {
	 		listener.enterReal_ulonglong_number(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitReal_ulonglong_number) {
	 		listener.exitReal_ulonglong_number(this);
		}
	}
}


export class LiteralContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public textLiteral(): TextLiteralContext {
		return this.getTypedRuleContext(TextLiteralContext, 0) as TextLiteralContext;
	}
	public numLiteral(): NumLiteralContext {
		return this.getTypedRuleContext(NumLiteralContext, 0) as NumLiteralContext;
	}
	public temporalLiteral(): TemporalLiteralContext {
		return this.getTypedRuleContext(TemporalLiteralContext, 0) as TemporalLiteralContext;
	}
	public nullLiteral(): NullLiteralContext {
		return this.getTypedRuleContext(NullLiteralContext, 0) as NullLiteralContext;
	}
	public boolLiteral(): BoolLiteralContext {
		return this.getTypedRuleContext(BoolLiteralContext, 0) as BoolLiteralContext;
	}
	public HEX_NUMBER(): TerminalNode {
		return this.getToken(MySQLParser.HEX_NUMBER, 0);
	}
	public BIN_NUMBER(): TerminalNode {
		return this.getToken(MySQLParser.BIN_NUMBER, 0);
	}
	public UNDERSCORE_CHARSET(): TerminalNode {
		return this.getToken(MySQLParser.UNDERSCORE_CHARSET, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_literal;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterLiteral) {
	 		listener.enterLiteral(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitLiteral) {
	 		listener.exitLiteral(this);
		}
	}
}


export class SignedLiteralContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public literal(): LiteralContext {
		return this.getTypedRuleContext(LiteralContext, 0) as LiteralContext;
	}
	public PLUS_OPERATOR(): TerminalNode {
		return this.getToken(MySQLParser.PLUS_OPERATOR, 0);
	}
	public ulong_number(): Ulong_numberContext {
		return this.getTypedRuleContext(Ulong_numberContext, 0) as Ulong_numberContext;
	}
	public MINUS_OPERATOR(): TerminalNode {
		return this.getToken(MySQLParser.MINUS_OPERATOR, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_signedLiteral;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterSignedLiteral) {
	 		listener.enterSignedLiteral(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitSignedLiteral) {
	 		listener.exitSignedLiteral(this);
		}
	}
}


export class StringListContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public OPEN_PAR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
	}
	public textString_list(): TextStringContext[] {
		return this.getTypedRuleContexts(TextStringContext) as TextStringContext[];
	}
	public textString(i: number): TextStringContext {
		return this.getTypedRuleContext(TextStringContext, i) as TextStringContext;
	}
	public CLOSE_PAR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
	}
	public COMMA_SYMBOL_list(): TerminalNode[] {
	    	return this.getTokens(MySQLParser.COMMA_SYMBOL);
	}
	public COMMA_SYMBOL(i: number): TerminalNode {
		return this.getToken(MySQLParser.COMMA_SYMBOL, i);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_stringList;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterStringList) {
	 		listener.enterStringList(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitStringList) {
	 		listener.exitStringList(this);
		}
	}
}


export class TextStringLiteralContext extends ParserRuleContext {
	public _value!: Token;
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public SINGLE_QUOTED_TEXT(): TerminalNode {
		return this.getToken(MySQLParser.SINGLE_QUOTED_TEXT, 0);
	}
	public DOUBLE_QUOTED_TEXT(): TerminalNode {
		return this.getToken(MySQLParser.DOUBLE_QUOTED_TEXT, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_textStringLiteral;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterTextStringLiteral) {
	 		listener.enterTextStringLiteral(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitTextStringLiteral) {
	 		listener.exitTextStringLiteral(this);
		}
	}
}


export class TextStringContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public textStringLiteral(): TextStringLiteralContext {
		return this.getTypedRuleContext(TextStringLiteralContext, 0) as TextStringLiteralContext;
	}
	public HEX_NUMBER(): TerminalNode {
		return this.getToken(MySQLParser.HEX_NUMBER, 0);
	}
	public BIN_NUMBER(): TerminalNode {
		return this.getToken(MySQLParser.BIN_NUMBER, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_textString;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterTextString) {
	 		listener.enterTextString(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitTextString) {
	 		listener.exitTextString(this);
		}
	}
}


export class TextStringHashContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public textStringLiteral(): TextStringLiteralContext {
		return this.getTypedRuleContext(TextStringLiteralContext, 0) as TextStringLiteralContext;
	}
	public HEX_NUMBER(): TerminalNode {
		return this.getToken(MySQLParser.HEX_NUMBER, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_textStringHash;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterTextStringHash) {
	 		listener.enterTextStringHash(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitTextStringHash) {
	 		listener.exitTextStringHash(this);
		}
	}
}


export class TextLiteralContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public textStringLiteral_list(): TextStringLiteralContext[] {
		return this.getTypedRuleContexts(TextStringLiteralContext) as TextStringLiteralContext[];
	}
	public textStringLiteral(i: number): TextStringLiteralContext {
		return this.getTypedRuleContext(TextStringLiteralContext, i) as TextStringLiteralContext;
	}
	public NCHAR_TEXT(): TerminalNode {
		return this.getToken(MySQLParser.NCHAR_TEXT, 0);
	}
	public UNDERSCORE_CHARSET(): TerminalNode {
		return this.getToken(MySQLParser.UNDERSCORE_CHARSET, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_textLiteral;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterTextLiteral) {
	 		listener.enterTextLiteral(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitTextLiteral) {
	 		listener.exitTextLiteral(this);
		}
	}
}


export class TextStringNoLinebreakContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public textStringLiteral(): TextStringLiteralContext {
		return this.getTypedRuleContext(TextStringLiteralContext, 0) as TextStringLiteralContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_textStringNoLinebreak;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterTextStringNoLinebreak) {
	 		listener.enterTextStringNoLinebreak(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitTextStringNoLinebreak) {
	 		listener.exitTextStringNoLinebreak(this);
		}
	}
}


export class TextStringLiteralListContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public textStringLiteral_list(): TextStringLiteralContext[] {
		return this.getTypedRuleContexts(TextStringLiteralContext) as TextStringLiteralContext[];
	}
	public textStringLiteral(i: number): TextStringLiteralContext {
		return this.getTypedRuleContext(TextStringLiteralContext, i) as TextStringLiteralContext;
	}
	public COMMA_SYMBOL_list(): TerminalNode[] {
	    	return this.getTokens(MySQLParser.COMMA_SYMBOL);
	}
	public COMMA_SYMBOL(i: number): TerminalNode {
		return this.getToken(MySQLParser.COMMA_SYMBOL, i);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_textStringLiteralList;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterTextStringLiteralList) {
	 		listener.enterTextStringLiteralList(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitTextStringLiteralList) {
	 		listener.exitTextStringLiteralList(this);
		}
	}
}


export class NumLiteralContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public INT_NUMBER(): TerminalNode {
		return this.getToken(MySQLParser.INT_NUMBER, 0);
	}
	public LONG_NUMBER(): TerminalNode {
		return this.getToken(MySQLParser.LONG_NUMBER, 0);
	}
	public ULONGLONG_NUMBER(): TerminalNode {
		return this.getToken(MySQLParser.ULONGLONG_NUMBER, 0);
	}
	public DECIMAL_NUMBER(): TerminalNode {
		return this.getToken(MySQLParser.DECIMAL_NUMBER, 0);
	}
	public FLOAT_NUMBER(): TerminalNode {
		return this.getToken(MySQLParser.FLOAT_NUMBER, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_numLiteral;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterNumLiteral) {
	 		listener.enterNumLiteral(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitNumLiteral) {
	 		listener.exitNumLiteral(this);
		}
	}
}


export class BoolLiteralContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public TRUE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.TRUE_SYMBOL, 0);
	}
	public FALSE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.FALSE_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_boolLiteral;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterBoolLiteral) {
	 		listener.enterBoolLiteral(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitBoolLiteral) {
	 		listener.exitBoolLiteral(this);
		}
	}
}


export class NullLiteralContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public NULL_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.NULL_SYMBOL, 0);
	}
	public NULL2_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.NULL2_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_nullLiteral;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterNullLiteral) {
	 		listener.enterNullLiteral(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitNullLiteral) {
	 		listener.exitNullLiteral(this);
		}
	}
}


export class TemporalLiteralContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public DATE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.DATE_SYMBOL, 0);
	}
	public SINGLE_QUOTED_TEXT(): TerminalNode {
		return this.getToken(MySQLParser.SINGLE_QUOTED_TEXT, 0);
	}
	public TIME_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.TIME_SYMBOL, 0);
	}
	public TIMESTAMP_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.TIMESTAMP_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_temporalLiteral;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterTemporalLiteral) {
	 		listener.enterTemporalLiteral(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitTemporalLiteral) {
	 		listener.exitTemporalLiteral(this);
		}
	}
}


export class FloatOptionsContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public fieldLength(): FieldLengthContext {
		return this.getTypedRuleContext(FieldLengthContext, 0) as FieldLengthContext;
	}
	public precision(): PrecisionContext {
		return this.getTypedRuleContext(PrecisionContext, 0) as PrecisionContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_floatOptions;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterFloatOptions) {
	 		listener.enterFloatOptions(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitFloatOptions) {
	 		listener.exitFloatOptions(this);
		}
	}
}


export class StandardFloatOptionsContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public precision(): PrecisionContext {
		return this.getTypedRuleContext(PrecisionContext, 0) as PrecisionContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_standardFloatOptions;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterStandardFloatOptions) {
	 		listener.enterStandardFloatOptions(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitStandardFloatOptions) {
	 		listener.exitStandardFloatOptions(this);
		}
	}
}


export class PrecisionContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public OPEN_PAR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
	}
	public INT_NUMBER_list(): TerminalNode[] {
	    	return this.getTokens(MySQLParser.INT_NUMBER);
	}
	public INT_NUMBER(i: number): TerminalNode {
		return this.getToken(MySQLParser.INT_NUMBER, i);
	}
	public COMMA_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.COMMA_SYMBOL, 0);
	}
	public CLOSE_PAR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_precision;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterPrecision) {
	 		listener.enterPrecision(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitPrecision) {
	 		listener.exitPrecision(this);
		}
	}
}


export class TextOrIdentifierContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public SINGLE_QUOTED_TEXT(): TerminalNode {
		return this.getToken(MySQLParser.SINGLE_QUOTED_TEXT, 0);
	}
	public identifier(): IdentifierContext {
		return this.getTypedRuleContext(IdentifierContext, 0) as IdentifierContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_textOrIdentifier;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterTextOrIdentifier) {
	 		listener.enterTextOrIdentifier(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitTextOrIdentifier) {
	 		listener.exitTextOrIdentifier(this);
		}
	}
}


export class LValueIdentifierContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public pureIdentifier(): PureIdentifierContext {
		return this.getTypedRuleContext(PureIdentifierContext, 0) as PureIdentifierContext;
	}
	public lValueKeyword(): LValueKeywordContext {
		return this.getTypedRuleContext(LValueKeywordContext, 0) as LValueKeywordContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_lValueIdentifier;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterLValueIdentifier) {
	 		listener.enterLValueIdentifier(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitLValueIdentifier) {
	 		listener.exitLValueIdentifier(this);
		}
	}
}


export class RoleIdentifierOrTextContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public roleIdentifier(): RoleIdentifierContext {
		return this.getTypedRuleContext(RoleIdentifierContext, 0) as RoleIdentifierContext;
	}
	public textStringLiteral(): TextStringLiteralContext {
		return this.getTypedRuleContext(TextStringLiteralContext, 0) as TextStringLiteralContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_roleIdentifierOrText;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterRoleIdentifierOrText) {
	 		listener.enterRoleIdentifierOrText(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitRoleIdentifierOrText) {
	 		listener.exitRoleIdentifierOrText(this);
		}
	}
}


export class SizeNumberContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public real_ulonglong_number(): Real_ulonglong_numberContext {
		return this.getTypedRuleContext(Real_ulonglong_numberContext, 0) as Real_ulonglong_numberContext;
	}
	public pureIdentifier(): PureIdentifierContext {
		return this.getTypedRuleContext(PureIdentifierContext, 0) as PureIdentifierContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_sizeNumber;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterSizeNumber) {
	 		listener.enterSizeNumber(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitSizeNumber) {
	 		listener.exitSizeNumber(this);
		}
	}
}


export class ParenthesesContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public OPEN_PAR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
	}
	public CLOSE_PAR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_parentheses;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterParentheses) {
	 		listener.enterParentheses(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitParentheses) {
	 		listener.exitParentheses(this);
		}
	}
}


export class EqualContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public EQUAL_OPERATOR(): TerminalNode {
		return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
	}
	public ASSIGN_OPERATOR(): TerminalNode {
		return this.getToken(MySQLParser.ASSIGN_OPERATOR, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_equal;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterEqual) {
	 		listener.enterEqual(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitEqual) {
	 		listener.exitEqual(this);
		}
	}
}


export class OptionTypeContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public PERSIST_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.PERSIST_SYMBOL, 0);
	}
	public PERSIST_ONLY_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.PERSIST_ONLY_SYMBOL, 0);
	}
	public GLOBAL_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.GLOBAL_SYMBOL, 0);
	}
	public LOCAL_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.LOCAL_SYMBOL, 0);
	}
	public SESSION_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SESSION_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_optionType;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterOptionType) {
	 		listener.enterOptionType(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitOptionType) {
	 		listener.exitOptionType(this);
		}
	}
}


export class VarIdentTypeContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public GLOBAL_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.GLOBAL_SYMBOL, 0);
	}
	public DOT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.DOT_SYMBOL, 0);
	}
	public LOCAL_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.LOCAL_SYMBOL, 0);
	}
	public SESSION_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SESSION_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_varIdentType;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterVarIdentType) {
	 		listener.enterVarIdentType(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitVarIdentType) {
	 		listener.exitVarIdentType(this);
		}
	}
}


export class SetVarIdentTypeContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public PERSIST_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.PERSIST_SYMBOL, 0);
	}
	public DOT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.DOT_SYMBOL, 0);
	}
	public PERSIST_ONLY_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.PERSIST_ONLY_SYMBOL, 0);
	}
	public GLOBAL_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.GLOBAL_SYMBOL, 0);
	}
	public LOCAL_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.LOCAL_SYMBOL, 0);
	}
	public SESSION_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SESSION_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_setVarIdentType;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterSetVarIdentType) {
	 		listener.enterSetVarIdentType(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitSetVarIdentType) {
	 		listener.exitSetVarIdentType(this);
		}
	}
}


export class IdentifierKeywordContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public labelKeyword(): LabelKeywordContext {
		return this.getTypedRuleContext(LabelKeywordContext, 0) as LabelKeywordContext;
	}
	public roleOrIdentifierKeyword(): RoleOrIdentifierKeywordContext {
		return this.getTypedRuleContext(RoleOrIdentifierKeywordContext, 0) as RoleOrIdentifierKeywordContext;
	}
	public EXECUTE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.EXECUTE_SYMBOL, 0);
	}
	public SHUTDOWN_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SHUTDOWN_SYMBOL, 0);
	}
	public RESTART_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.RESTART_SYMBOL, 0);
	}
	public identifierKeywordsUnambiguous(): IdentifierKeywordsUnambiguousContext {
		return this.getTypedRuleContext(IdentifierKeywordsUnambiguousContext, 0) as IdentifierKeywordsUnambiguousContext;
	}
	public identifierKeywordsAmbiguous1RolesAndLabels(): IdentifierKeywordsAmbiguous1RolesAndLabelsContext {
		return this.getTypedRuleContext(IdentifierKeywordsAmbiguous1RolesAndLabelsContext, 0) as IdentifierKeywordsAmbiguous1RolesAndLabelsContext;
	}
	public identifierKeywordsAmbiguous2Labels(): IdentifierKeywordsAmbiguous2LabelsContext {
		return this.getTypedRuleContext(IdentifierKeywordsAmbiguous2LabelsContext, 0) as IdentifierKeywordsAmbiguous2LabelsContext;
	}
	public identifierKeywordsAmbiguous3Roles(): IdentifierKeywordsAmbiguous3RolesContext {
		return this.getTypedRuleContext(IdentifierKeywordsAmbiguous3RolesContext, 0) as IdentifierKeywordsAmbiguous3RolesContext;
	}
	public identifierKeywordsAmbiguous4SystemVariables(): IdentifierKeywordsAmbiguous4SystemVariablesContext {
		return this.getTypedRuleContext(IdentifierKeywordsAmbiguous4SystemVariablesContext, 0) as IdentifierKeywordsAmbiguous4SystemVariablesContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_identifierKeyword;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterIdentifierKeyword) {
	 		listener.enterIdentifierKeyword(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitIdentifierKeyword) {
	 		listener.exitIdentifierKeyword(this);
		}
	}
}


export class IdentifierKeywordsAmbiguous1RolesAndLabelsContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public EXECUTE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.EXECUTE_SYMBOL, 0);
	}
	public RESTART_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.RESTART_SYMBOL, 0);
	}
	public SHUTDOWN_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SHUTDOWN_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_identifierKeywordsAmbiguous1RolesAndLabels;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterIdentifierKeywordsAmbiguous1RolesAndLabels) {
	 		listener.enterIdentifierKeywordsAmbiguous1RolesAndLabels(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitIdentifierKeywordsAmbiguous1RolesAndLabels) {
	 		listener.exitIdentifierKeywordsAmbiguous1RolesAndLabels(this);
		}
	}
}


export class IdentifierKeywordsAmbiguous2LabelsContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public ASCII_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ASCII_SYMBOL, 0);
	}
	public BEGIN_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.BEGIN_SYMBOL, 0);
	}
	public BYTE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.BYTE_SYMBOL, 0);
	}
	public CACHE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CACHE_SYMBOL, 0);
	}
	public CHARSET_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CHARSET_SYMBOL, 0);
	}
	public CHECKSUM_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CHECKSUM_SYMBOL, 0);
	}
	public CLONE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CLONE_SYMBOL, 0);
	}
	public COMMENT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.COMMENT_SYMBOL, 0);
	}
	public COMMIT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.COMMIT_SYMBOL, 0);
	}
	public CONTAINS_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CONTAINS_SYMBOL, 0);
	}
	public DEALLOCATE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.DEALLOCATE_SYMBOL, 0);
	}
	public DO_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.DO_SYMBOL, 0);
	}
	public END_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.END_SYMBOL, 0);
	}
	public FLUSH_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.FLUSH_SYMBOL, 0);
	}
	public FOLLOWS_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.FOLLOWS_SYMBOL, 0);
	}
	public HANDLER_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.HANDLER_SYMBOL, 0);
	}
	public HELP_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.HELP_SYMBOL, 0);
	}
	public IMPORT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.IMPORT_SYMBOL, 0);
	}
	public INSTALL_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.INSTALL_SYMBOL, 0);
	}
	public LANGUAGE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.LANGUAGE_SYMBOL, 0);
	}
	public NO_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.NO_SYMBOL, 0);
	}
	public PRECEDES_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.PRECEDES_SYMBOL, 0);
	}
	public PREPARE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.PREPARE_SYMBOL, 0);
	}
	public REPAIR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.REPAIR_SYMBOL, 0);
	}
	public RESET_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.RESET_SYMBOL, 0);
	}
	public ROLLBACK_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ROLLBACK_SYMBOL, 0);
	}
	public SAVEPOINT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SAVEPOINT_SYMBOL, 0);
	}
	public SIGNED_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SIGNED_SYMBOL, 0);
	}
	public SLAVE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SLAVE_SYMBOL, 0);
	}
	public START_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.START_SYMBOL, 0);
	}
	public STOP_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.STOP_SYMBOL, 0);
	}
	public TRUNCATE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.TRUNCATE_SYMBOL, 0);
	}
	public UNICODE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.UNICODE_SYMBOL, 0);
	}
	public UNINSTALL_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.UNINSTALL_SYMBOL, 0);
	}
	public XA_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.XA_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_identifierKeywordsAmbiguous2Labels;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterIdentifierKeywordsAmbiguous2Labels) {
	 		listener.enterIdentifierKeywordsAmbiguous2Labels(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitIdentifierKeywordsAmbiguous2Labels) {
	 		listener.exitIdentifierKeywordsAmbiguous2Labels(this);
		}
	}
}


export class LabelKeywordContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public roleOrLabelKeyword(): RoleOrLabelKeywordContext {
		return this.getTypedRuleContext(RoleOrLabelKeywordContext, 0) as RoleOrLabelKeywordContext;
	}
	public EVENT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.EVENT_SYMBOL, 0);
	}
	public FILE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.FILE_SYMBOL, 0);
	}
	public NONE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.NONE_SYMBOL, 0);
	}
	public PROCESS_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.PROCESS_SYMBOL, 0);
	}
	public PROXY_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.PROXY_SYMBOL, 0);
	}
	public RELOAD_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.RELOAD_SYMBOL, 0);
	}
	public REPLICATION_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.REPLICATION_SYMBOL, 0);
	}
	public RESOURCE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.RESOURCE_SYMBOL, 0);
	}
	public SUPER_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SUPER_SYMBOL, 0);
	}
	public identifierKeywordsUnambiguous(): IdentifierKeywordsUnambiguousContext {
		return this.getTypedRuleContext(IdentifierKeywordsUnambiguousContext, 0) as IdentifierKeywordsUnambiguousContext;
	}
	public identifierKeywordsAmbiguous3Roles(): IdentifierKeywordsAmbiguous3RolesContext {
		return this.getTypedRuleContext(IdentifierKeywordsAmbiguous3RolesContext, 0) as IdentifierKeywordsAmbiguous3RolesContext;
	}
	public identifierKeywordsAmbiguous4SystemVariables(): IdentifierKeywordsAmbiguous4SystemVariablesContext {
		return this.getTypedRuleContext(IdentifierKeywordsAmbiguous4SystemVariablesContext, 0) as IdentifierKeywordsAmbiguous4SystemVariablesContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_labelKeyword;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterLabelKeyword) {
	 		listener.enterLabelKeyword(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitLabelKeyword) {
	 		listener.exitLabelKeyword(this);
		}
	}
}


export class IdentifierKeywordsAmbiguous3RolesContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public EVENT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.EVENT_SYMBOL, 0);
	}
	public FILE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.FILE_SYMBOL, 0);
	}
	public NONE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.NONE_SYMBOL, 0);
	}
	public PROCESS_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.PROCESS_SYMBOL, 0);
	}
	public PROXY_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.PROXY_SYMBOL, 0);
	}
	public RELOAD_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.RELOAD_SYMBOL, 0);
	}
	public REPLICATION_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.REPLICATION_SYMBOL, 0);
	}
	public RESOURCE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.RESOURCE_SYMBOL, 0);
	}
	public SUPER_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SUPER_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_identifierKeywordsAmbiguous3Roles;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterIdentifierKeywordsAmbiguous3Roles) {
	 		listener.enterIdentifierKeywordsAmbiguous3Roles(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitIdentifierKeywordsAmbiguous3Roles) {
	 		listener.exitIdentifierKeywordsAmbiguous3Roles(this);
		}
	}
}


export class IdentifierKeywordsUnambiguousContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public ACTION_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ACTION_SYMBOL, 0);
	}
	public ACCOUNT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ACCOUNT_SYMBOL, 0);
	}
	public ACTIVE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ACTIVE_SYMBOL, 0);
	}
	public ADDDATE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ADDDATE_SYMBOL, 0);
	}
	public ADMIN_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ADMIN_SYMBOL, 0);
	}
	public AFTER_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.AFTER_SYMBOL, 0);
	}
	public AGAINST_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.AGAINST_SYMBOL, 0);
	}
	public AGGREGATE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.AGGREGATE_SYMBOL, 0);
	}
	public ALGORITHM_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ALGORITHM_SYMBOL, 0);
	}
	public ALWAYS_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ALWAYS_SYMBOL, 0);
	}
	public ANY_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ANY_SYMBOL, 0);
	}
	public AT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.AT_SYMBOL, 0);
	}
	public AUTOEXTEND_SIZE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.AUTOEXTEND_SIZE_SYMBOL, 0);
	}
	public AUTO_INCREMENT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.AUTO_INCREMENT_SYMBOL, 0);
	}
	public AVG_ROW_LENGTH_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.AVG_ROW_LENGTH_SYMBOL, 0);
	}
	public AVG_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.AVG_SYMBOL, 0);
	}
	public BACKUP_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.BACKUP_SYMBOL, 0);
	}
	public BINLOG_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.BINLOG_SYMBOL, 0);
	}
	public BIT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.BIT_SYMBOL, 0);
	}
	public BLOCK_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.BLOCK_SYMBOL, 0);
	}
	public BOOLEAN_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.BOOLEAN_SYMBOL, 0);
	}
	public BOOL_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.BOOL_SYMBOL, 0);
	}
	public BTREE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.BTREE_SYMBOL, 0);
	}
	public BUCKETS_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.BUCKETS_SYMBOL, 0);
	}
	public CASCADED_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CASCADED_SYMBOL, 0);
	}
	public CATALOG_NAME_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CATALOG_NAME_SYMBOL, 0);
	}
	public CHAIN_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CHAIN_SYMBOL, 0);
	}
	public CHANGED_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CHANGED_SYMBOL, 0);
	}
	public CHANNEL_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CHANNEL_SYMBOL, 0);
	}
	public CIPHER_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CIPHER_SYMBOL, 0);
	}
	public CLASS_ORIGIN_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CLASS_ORIGIN_SYMBOL, 0);
	}
	public CLIENT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CLIENT_SYMBOL, 0);
	}
	public CLOSE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CLOSE_SYMBOL, 0);
	}
	public COALESCE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.COALESCE_SYMBOL, 0);
	}
	public CODE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CODE_SYMBOL, 0);
	}
	public COLLATION_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.COLLATION_SYMBOL, 0);
	}
	public COLUMNS_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.COLUMNS_SYMBOL, 0);
	}
	public COLUMN_FORMAT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.COLUMN_FORMAT_SYMBOL, 0);
	}
	public COLUMN_NAME_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.COLUMN_NAME_SYMBOL, 0);
	}
	public COMMITTED_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.COMMITTED_SYMBOL, 0);
	}
	public COMPACT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.COMPACT_SYMBOL, 0);
	}
	public COMPLETION_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.COMPLETION_SYMBOL, 0);
	}
	public COMPONENT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.COMPONENT_SYMBOL, 0);
	}
	public COMPRESSED_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.COMPRESSED_SYMBOL, 0);
	}
	public COMPRESSION_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.COMPRESSION_SYMBOL, 0);
	}
	public CONCURRENT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CONCURRENT_SYMBOL, 0);
	}
	public CONNECTION_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CONNECTION_SYMBOL, 0);
	}
	public CONSISTENT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CONSISTENT_SYMBOL, 0);
	}
	public CONSTRAINT_CATALOG_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CONSTRAINT_CATALOG_SYMBOL, 0);
	}
	public CONSTRAINT_NAME_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CONSTRAINT_NAME_SYMBOL, 0);
	}
	public CONSTRAINT_SCHEMA_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CONSTRAINT_SCHEMA_SYMBOL, 0);
	}
	public CONTEXT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CONTEXT_SYMBOL, 0);
	}
	public CPU_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CPU_SYMBOL, 0);
	}
	public CURRENT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CURRENT_SYMBOL, 0);
	}
	public CURSOR_NAME_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CURSOR_NAME_SYMBOL, 0);
	}
	public DATAFILE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.DATAFILE_SYMBOL, 0);
	}
	public DATA_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.DATA_SYMBOL, 0);
	}
	public DATETIME_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.DATETIME_SYMBOL, 0);
	}
	public DATE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.DATE_SYMBOL, 0);
	}
	public DAY_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.DAY_SYMBOL, 0);
	}
	public DEFAULT_AUTH_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.DEFAULT_AUTH_SYMBOL, 0);
	}
	public DEFINER_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.DEFINER_SYMBOL, 0);
	}
	public DEFINITION_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.DEFINITION_SYMBOL, 0);
	}
	public DELAY_KEY_WRITE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.DELAY_KEY_WRITE_SYMBOL, 0);
	}
	public DESCRIPTION_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.DESCRIPTION_SYMBOL, 0);
	}
	public DIAGNOSTICS_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.DIAGNOSTICS_SYMBOL, 0);
	}
	public DIRECTORY_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.DIRECTORY_SYMBOL, 0);
	}
	public DISABLE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.DISABLE_SYMBOL, 0);
	}
	public DISCARD_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.DISCARD_SYMBOL, 0);
	}
	public DISK_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.DISK_SYMBOL, 0);
	}
	public DUMPFILE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.DUMPFILE_SYMBOL, 0);
	}
	public DUPLICATE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.DUPLICATE_SYMBOL, 0);
	}
	public DYNAMIC_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.DYNAMIC_SYMBOL, 0);
	}
	public ENABLE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ENABLE_SYMBOL, 0);
	}
	public ENCRYPTION_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ENCRYPTION_SYMBOL, 0);
	}
	public ENDS_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ENDS_SYMBOL, 0);
	}
	public ENFORCED_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ENFORCED_SYMBOL, 0);
	}
	public ENGINES_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ENGINES_SYMBOL, 0);
	}
	public ENGINE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ENGINE_SYMBOL, 0);
	}
	public ENUM_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ENUM_SYMBOL, 0);
	}
	public ERRORS_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ERRORS_SYMBOL, 0);
	}
	public ERROR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ERROR_SYMBOL, 0);
	}
	public ESCAPE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ESCAPE_SYMBOL, 0);
	}
	public EVENTS_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.EVENTS_SYMBOL, 0);
	}
	public EVERY_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.EVERY_SYMBOL, 0);
	}
	public EXCHANGE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.EXCHANGE_SYMBOL, 0);
	}
	public EXCLUDE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.EXCLUDE_SYMBOL, 0);
	}
	public EXPANSION_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.EXPANSION_SYMBOL, 0);
	}
	public EXPIRE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.EXPIRE_SYMBOL, 0);
	}
	public EXPORT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.EXPORT_SYMBOL, 0);
	}
	public EXTENDED_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.EXTENDED_SYMBOL, 0);
	}
	public EXTENT_SIZE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.EXTENT_SIZE_SYMBOL, 0);
	}
	public FAST_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.FAST_SYMBOL, 0);
	}
	public FAULTS_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.FAULTS_SYMBOL, 0);
	}
	public FILE_BLOCK_SIZE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.FILE_BLOCK_SIZE_SYMBOL, 0);
	}
	public FILTER_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.FILTER_SYMBOL, 0);
	}
	public FIRST_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.FIRST_SYMBOL, 0);
	}
	public FIXED_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.FIXED_SYMBOL, 0);
	}
	public FOLLOWING_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.FOLLOWING_SYMBOL, 0);
	}
	public FORMAT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.FORMAT_SYMBOL, 0);
	}
	public FOUND_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.FOUND_SYMBOL, 0);
	}
	public FULL_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.FULL_SYMBOL, 0);
	}
	public GENERAL_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.GENERAL_SYMBOL, 0);
	}
	public GEOMETRYCOLLECTION_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.GEOMETRYCOLLECTION_SYMBOL, 0);
	}
	public GEOMETRY_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.GEOMETRY_SYMBOL, 0);
	}
	public GET_FORMAT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.GET_FORMAT_SYMBOL, 0);
	}
	public GET_MASTER_PUBLIC_KEY_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.GET_MASTER_PUBLIC_KEY_SYMBOL, 0);
	}
	public GRANTS_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.GRANTS_SYMBOL, 0);
	}
	public GROUP_REPLICATION_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.GROUP_REPLICATION_SYMBOL, 0);
	}
	public HASH_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.HASH_SYMBOL, 0);
	}
	public HISTOGRAM_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.HISTOGRAM_SYMBOL, 0);
	}
	public HISTORY_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.HISTORY_SYMBOL, 0);
	}
	public HOSTS_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.HOSTS_SYMBOL, 0);
	}
	public HOST_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.HOST_SYMBOL, 0);
	}
	public HOUR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.HOUR_SYMBOL, 0);
	}
	public IDENTIFIED_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.IDENTIFIED_SYMBOL, 0);
	}
	public IGNORE_SERVER_IDS_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.IGNORE_SERVER_IDS_SYMBOL, 0);
	}
	public INACTIVE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.INACTIVE_SYMBOL, 0);
	}
	public INDEXES_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.INDEXES_SYMBOL, 0);
	}
	public INITIAL_SIZE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.INITIAL_SIZE_SYMBOL, 0);
	}
	public INSERT_METHOD_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.INSERT_METHOD_SYMBOL, 0);
	}
	public INSTANCE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.INSTANCE_SYMBOL, 0);
	}
	public INVISIBLE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.INVISIBLE_SYMBOL, 0);
	}
	public INVOKER_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.INVOKER_SYMBOL, 0);
	}
	public IO_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.IO_SYMBOL, 0);
	}
	public IPC_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.IPC_SYMBOL, 0);
	}
	public ISOLATION_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ISOLATION_SYMBOL, 0);
	}
	public ISSUER_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ISSUER_SYMBOL, 0);
	}
	public JSON_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.JSON_SYMBOL, 0);
	}
	public KEY_BLOCK_SIZE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.KEY_BLOCK_SIZE_SYMBOL, 0);
	}
	public LAST_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.LAST_SYMBOL, 0);
	}
	public LEAVES_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.LEAVES_SYMBOL, 0);
	}
	public LESS_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.LESS_SYMBOL, 0);
	}
	public LEVEL_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.LEVEL_SYMBOL, 0);
	}
	public LINESTRING_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.LINESTRING_SYMBOL, 0);
	}
	public LIST_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.LIST_SYMBOL, 0);
	}
	public LOCKED_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.LOCKED_SYMBOL, 0);
	}
	public LOCKS_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.LOCKS_SYMBOL, 0);
	}
	public LOGFILE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.LOGFILE_SYMBOL, 0);
	}
	public LOGS_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.LOGS_SYMBOL, 0);
	}
	public MASTER_AUTO_POSITION_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.MASTER_AUTO_POSITION_SYMBOL, 0);
	}
	public MASTER_COMPRESSION_ALGORITHM_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.MASTER_COMPRESSION_ALGORITHM_SYMBOL, 0);
	}
	public MASTER_CONNECT_RETRY_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.MASTER_CONNECT_RETRY_SYMBOL, 0);
	}
	public MASTER_DELAY_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.MASTER_DELAY_SYMBOL, 0);
	}
	public MASTER_HEARTBEAT_PERIOD_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.MASTER_HEARTBEAT_PERIOD_SYMBOL, 0);
	}
	public MASTER_HOST_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.MASTER_HOST_SYMBOL, 0);
	}
	public NETWORK_NAMESPACE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.NETWORK_NAMESPACE_SYMBOL, 0);
	}
	public MASTER_LOG_FILE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.MASTER_LOG_FILE_SYMBOL, 0);
	}
	public MASTER_LOG_POS_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.MASTER_LOG_POS_SYMBOL, 0);
	}
	public MASTER_PASSWORD_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.MASTER_PASSWORD_SYMBOL, 0);
	}
	public MASTER_PORT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.MASTER_PORT_SYMBOL, 0);
	}
	public MASTER_PUBLIC_KEY_PATH_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.MASTER_PUBLIC_KEY_PATH_SYMBOL, 0);
	}
	public MASTER_RETRY_COUNT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.MASTER_RETRY_COUNT_SYMBOL, 0);
	}
	public MASTER_SERVER_ID_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.MASTER_SERVER_ID_SYMBOL, 0);
	}
	public MASTER_SSL_CAPATH_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.MASTER_SSL_CAPATH_SYMBOL, 0);
	}
	public MASTER_SSL_CA_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.MASTER_SSL_CA_SYMBOL, 0);
	}
	public MASTER_SSL_CERT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.MASTER_SSL_CERT_SYMBOL, 0);
	}
	public MASTER_SSL_CIPHER_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.MASTER_SSL_CIPHER_SYMBOL, 0);
	}
	public MASTER_SSL_CRLPATH_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.MASTER_SSL_CRLPATH_SYMBOL, 0);
	}
	public MASTER_SSL_CRL_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.MASTER_SSL_CRL_SYMBOL, 0);
	}
	public MASTER_SSL_KEY_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.MASTER_SSL_KEY_SYMBOL, 0);
	}
	public MASTER_SSL_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.MASTER_SSL_SYMBOL, 0);
	}
	public MASTER_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.MASTER_SYMBOL, 0);
	}
	public MASTER_TLS_CIPHERSUITES_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.MASTER_TLS_CIPHERSUITES_SYMBOL, 0);
	}
	public MASTER_TLS_VERSION_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.MASTER_TLS_VERSION_SYMBOL, 0);
	}
	public MASTER_USER_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.MASTER_USER_SYMBOL, 0);
	}
	public MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL, 0);
	}
	public MAX_CONNECTIONS_PER_HOUR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL, 0);
	}
	public MAX_QUERIES_PER_HOUR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.MAX_QUERIES_PER_HOUR_SYMBOL, 0);
	}
	public MAX_ROWS_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.MAX_ROWS_SYMBOL, 0);
	}
	public MAX_SIZE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.MAX_SIZE_SYMBOL, 0);
	}
	public MAX_UPDATES_PER_HOUR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.MAX_UPDATES_PER_HOUR_SYMBOL, 0);
	}
	public MAX_USER_CONNECTIONS_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.MAX_USER_CONNECTIONS_SYMBOL, 0);
	}
	public MEDIUM_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.MEDIUM_SYMBOL, 0);
	}
	public MEMORY_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.MEMORY_SYMBOL, 0);
	}
	public MERGE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.MERGE_SYMBOL, 0);
	}
	public MESSAGE_TEXT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.MESSAGE_TEXT_SYMBOL, 0);
	}
	public MICROSECOND_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.MICROSECOND_SYMBOL, 0);
	}
	public MIGRATE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.MIGRATE_SYMBOL, 0);
	}
	public MINUTE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.MINUTE_SYMBOL, 0);
	}
	public MIN_ROWS_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.MIN_ROWS_SYMBOL, 0);
	}
	public MODE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.MODE_SYMBOL, 0);
	}
	public MODIFY_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.MODIFY_SYMBOL, 0);
	}
	public MONTH_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.MONTH_SYMBOL, 0);
	}
	public MULTILINESTRING_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.MULTILINESTRING_SYMBOL, 0);
	}
	public MULTIPOINT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.MULTIPOINT_SYMBOL, 0);
	}
	public MULTIPOLYGON_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.MULTIPOLYGON_SYMBOL, 0);
	}
	public MUTEX_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.MUTEX_SYMBOL, 0);
	}
	public MYSQL_ERRNO_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.MYSQL_ERRNO_SYMBOL, 0);
	}
	public NAMES_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.NAMES_SYMBOL, 0);
	}
	public NAME_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.NAME_SYMBOL, 0);
	}
	public NATIONAL_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.NATIONAL_SYMBOL, 0);
	}
	public NCHAR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.NCHAR_SYMBOL, 0);
	}
	public NDBCLUSTER_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.NDBCLUSTER_SYMBOL, 0);
	}
	public NESTED_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.NESTED_SYMBOL, 0);
	}
	public NEVER_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.NEVER_SYMBOL, 0);
	}
	public NEW_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.NEW_SYMBOL, 0);
	}
	public NEXT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.NEXT_SYMBOL, 0);
	}
	public NODEGROUP_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.NODEGROUP_SYMBOL, 0);
	}
	public NOWAIT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.NOWAIT_SYMBOL, 0);
	}
	public NO_WAIT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.NO_WAIT_SYMBOL, 0);
	}
	public NULLS_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.NULLS_SYMBOL, 0);
	}
	public NUMBER_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.NUMBER_SYMBOL, 0);
	}
	public NVARCHAR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.NVARCHAR_SYMBOL, 0);
	}
	public OFFSET_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.OFFSET_SYMBOL, 0);
	}
	public OJ_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.OJ_SYMBOL, 0);
	}
	public OLD_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.OLD_SYMBOL, 0);
	}
	public ONE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ONE_SYMBOL, 0);
	}
	public ONLY_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ONLY_SYMBOL, 0);
	}
	public OPEN_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.OPEN_SYMBOL, 0);
	}
	public OPTIONAL_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.OPTIONAL_SYMBOL, 0);
	}
	public OPTIONS_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.OPTIONS_SYMBOL, 0);
	}
	public ORDINALITY_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ORDINALITY_SYMBOL, 0);
	}
	public ORGANIZATION_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ORGANIZATION_SYMBOL, 0);
	}
	public OTHERS_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.OTHERS_SYMBOL, 0);
	}
	public OWNER_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.OWNER_SYMBOL, 0);
	}
	public PACK_KEYS_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.PACK_KEYS_SYMBOL, 0);
	}
	public PAGE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.PAGE_SYMBOL, 0);
	}
	public PARSER_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.PARSER_SYMBOL, 0);
	}
	public PARTIAL_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.PARTIAL_SYMBOL, 0);
	}
	public PARTITIONING_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.PARTITIONING_SYMBOL, 0);
	}
	public PARTITIONS_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.PARTITIONS_SYMBOL, 0);
	}
	public PASSWORD_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.PASSWORD_SYMBOL, 0);
	}
	public PATH_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.PATH_SYMBOL, 0);
	}
	public PHASE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.PHASE_SYMBOL, 0);
	}
	public PLUGINS_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.PLUGINS_SYMBOL, 0);
	}
	public PLUGIN_DIR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.PLUGIN_DIR_SYMBOL, 0);
	}
	public PLUGIN_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.PLUGIN_SYMBOL, 0);
	}
	public POINT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.POINT_SYMBOL, 0);
	}
	public POLYGON_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.POLYGON_SYMBOL, 0);
	}
	public PORT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.PORT_SYMBOL, 0);
	}
	public PRECEDING_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.PRECEDING_SYMBOL, 0);
	}
	public PRESERVE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.PRESERVE_SYMBOL, 0);
	}
	public PREV_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.PREV_SYMBOL, 0);
	}
	public PRIVILEGES_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.PRIVILEGES_SYMBOL, 0);
	}
	public PRIVILEGE_CHECKS_USER_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.PRIVILEGE_CHECKS_USER_SYMBOL, 0);
	}
	public PROCESSLIST_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.PROCESSLIST_SYMBOL, 0);
	}
	public PROFILES_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.PROFILES_SYMBOL, 0);
	}
	public PROFILE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.PROFILE_SYMBOL, 0);
	}
	public QUARTER_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.QUARTER_SYMBOL, 0);
	}
	public QUERY_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.QUERY_SYMBOL, 0);
	}
	public QUICK_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.QUICK_SYMBOL, 0);
	}
	public READ_ONLY_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.READ_ONLY_SYMBOL, 0);
	}
	public REBUILD_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.REBUILD_SYMBOL, 0);
	}
	public RECOVER_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.RECOVER_SYMBOL, 0);
	}
	public REDO_BUFFER_SIZE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.REDO_BUFFER_SIZE_SYMBOL, 0);
	}
	public REDUNDANT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.REDUNDANT_SYMBOL, 0);
	}
	public REFERENCE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.REFERENCE_SYMBOL, 0);
	}
	public RELAY_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.RELAY_SYMBOL, 0);
	}
	public RELAYLOG_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.RELAYLOG_SYMBOL, 0);
	}
	public RELAY_LOG_FILE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.RELAY_LOG_FILE_SYMBOL, 0);
	}
	public RELAY_LOG_POS_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.RELAY_LOG_POS_SYMBOL, 0);
	}
	public RELAY_THREAD_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.RELAY_THREAD_SYMBOL, 0);
	}
	public REMOVE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.REMOVE_SYMBOL, 0);
	}
	public REORGANIZE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.REORGANIZE_SYMBOL, 0);
	}
	public REPEATABLE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.REPEATABLE_SYMBOL, 0);
	}
	public REPLICATE_DO_DB_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.REPLICATE_DO_DB_SYMBOL, 0);
	}
	public REPLICATE_DO_TABLE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.REPLICATE_DO_TABLE_SYMBOL, 0);
	}
	public REPLICATE_IGNORE_DB_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.REPLICATE_IGNORE_DB_SYMBOL, 0);
	}
	public REPLICATE_IGNORE_TABLE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.REPLICATE_IGNORE_TABLE_SYMBOL, 0);
	}
	public REPLICATE_REWRITE_DB_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.REPLICATE_REWRITE_DB_SYMBOL, 0);
	}
	public REPLICATE_WILD_DO_TABLE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.REPLICATE_WILD_DO_TABLE_SYMBOL, 0);
	}
	public REPLICATE_WILD_IGNORE_TABLE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.REPLICATE_WILD_IGNORE_TABLE_SYMBOL, 0);
	}
	public USER_RESOURCES_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.USER_RESOURCES_SYMBOL, 0);
	}
	public RESPECT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.RESPECT_SYMBOL, 0);
	}
	public RESTORE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.RESTORE_SYMBOL, 0);
	}
	public RESUME_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.RESUME_SYMBOL, 0);
	}
	public RETAIN_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.RETAIN_SYMBOL, 0);
	}
	public RETURNED_SQLSTATE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.RETURNED_SQLSTATE_SYMBOL, 0);
	}
	public RETURNS_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.RETURNS_SYMBOL, 0);
	}
	public REUSE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.REUSE_SYMBOL, 0);
	}
	public REVERSE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.REVERSE_SYMBOL, 0);
	}
	public ROLE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ROLE_SYMBOL, 0);
	}
	public ROLLUP_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ROLLUP_SYMBOL, 0);
	}
	public ROTATE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ROTATE_SYMBOL, 0);
	}
	public ROUTINE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ROUTINE_SYMBOL, 0);
	}
	public ROW_COUNT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ROW_COUNT_SYMBOL, 0);
	}
	public ROW_FORMAT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ROW_FORMAT_SYMBOL, 0);
	}
	public RTREE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.RTREE_SYMBOL, 0);
	}
	public SCHEDULE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SCHEDULE_SYMBOL, 0);
	}
	public SCHEMA_NAME_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SCHEMA_NAME_SYMBOL, 0);
	}
	public SECONDARY_ENGINE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SECONDARY_ENGINE_SYMBOL, 0);
	}
	public SECONDARY_LOAD_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SECONDARY_LOAD_SYMBOL, 0);
	}
	public SECONDARY_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SECONDARY_SYMBOL, 0);
	}
	public SECONDARY_UNLOAD_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SECONDARY_UNLOAD_SYMBOL, 0);
	}
	public SECOND_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SECOND_SYMBOL, 0);
	}
	public SECURITY_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SECURITY_SYMBOL, 0);
	}
	public SERIALIZABLE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SERIALIZABLE_SYMBOL, 0);
	}
	public SERIAL_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SERIAL_SYMBOL, 0);
	}
	public SERVER_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SERVER_SYMBOL, 0);
	}
	public SHARE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SHARE_SYMBOL, 0);
	}
	public SIMPLE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SIMPLE_SYMBOL, 0);
	}
	public SKIP_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SKIP_SYMBOL, 0);
	}
	public SLOW_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SLOW_SYMBOL, 0);
	}
	public SNAPSHOT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SNAPSHOT_SYMBOL, 0);
	}
	public SOCKET_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SOCKET_SYMBOL, 0);
	}
	public SONAME_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SONAME_SYMBOL, 0);
	}
	public SOUNDS_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SOUNDS_SYMBOL, 0);
	}
	public SOURCE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SOURCE_SYMBOL, 0);
	}
	public SQL_AFTER_GTIDS_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SQL_AFTER_GTIDS_SYMBOL, 0);
	}
	public SQL_AFTER_MTS_GAPS_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SQL_AFTER_MTS_GAPS_SYMBOL, 0);
	}
	public SQL_BEFORE_GTIDS_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SQL_BEFORE_GTIDS_SYMBOL, 0);
	}
	public SQL_BUFFER_RESULT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SQL_BUFFER_RESULT_SYMBOL, 0);
	}
	public SQL_NO_CACHE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SQL_NO_CACHE_SYMBOL, 0);
	}
	public SQL_THREAD_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SQL_THREAD_SYMBOL, 0);
	}
	public SRID_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SRID_SYMBOL, 0);
	}
	public STACKED_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.STACKED_SYMBOL, 0);
	}
	public STARTS_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.STARTS_SYMBOL, 0);
	}
	public STATS_AUTO_RECALC_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.STATS_AUTO_RECALC_SYMBOL, 0);
	}
	public STATS_PERSISTENT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.STATS_PERSISTENT_SYMBOL, 0);
	}
	public STATS_SAMPLE_PAGES_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.STATS_SAMPLE_PAGES_SYMBOL, 0);
	}
	public STATUS_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.STATUS_SYMBOL, 0);
	}
	public STORAGE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.STORAGE_SYMBOL, 0);
	}
	public STRING_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.STRING_SYMBOL, 0);
	}
	public SUBCLASS_ORIGIN_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SUBCLASS_ORIGIN_SYMBOL, 0);
	}
	public SUBDATE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SUBDATE_SYMBOL, 0);
	}
	public SUBJECT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SUBJECT_SYMBOL, 0);
	}
	public SUBPARTITIONS_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SUBPARTITIONS_SYMBOL, 0);
	}
	public SUBPARTITION_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SUBPARTITION_SYMBOL, 0);
	}
	public SUSPEND_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SUSPEND_SYMBOL, 0);
	}
	public SWAPS_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SWAPS_SYMBOL, 0);
	}
	public SWITCHES_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SWITCHES_SYMBOL, 0);
	}
	public TABLES_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.TABLES_SYMBOL, 0);
	}
	public TABLESPACE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.TABLESPACE_SYMBOL, 0);
	}
	public TABLE_CHECKSUM_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.TABLE_CHECKSUM_SYMBOL, 0);
	}
	public TABLE_NAME_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.TABLE_NAME_SYMBOL, 0);
	}
	public TEMPORARY_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.TEMPORARY_SYMBOL, 0);
	}
	public TEMPTABLE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.TEMPTABLE_SYMBOL, 0);
	}
	public TEXT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.TEXT_SYMBOL, 0);
	}
	public THAN_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.THAN_SYMBOL, 0);
	}
	public THREAD_PRIORITY_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.THREAD_PRIORITY_SYMBOL, 0);
	}
	public TIES_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.TIES_SYMBOL, 0);
	}
	public TIMESTAMP_ADD_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.TIMESTAMP_ADD_SYMBOL, 0);
	}
	public TIMESTAMP_DIFF_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.TIMESTAMP_DIFF_SYMBOL, 0);
	}
	public TIMESTAMP_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.TIMESTAMP_SYMBOL, 0);
	}
	public TIME_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.TIME_SYMBOL, 0);
	}
	public TRANSACTION_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.TRANSACTION_SYMBOL, 0);
	}
	public TRIGGERS_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.TRIGGERS_SYMBOL, 0);
	}
	public TYPES_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.TYPES_SYMBOL, 0);
	}
	public TYPE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.TYPE_SYMBOL, 0);
	}
	public UNBOUNDED_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.UNBOUNDED_SYMBOL, 0);
	}
	public UNCOMMITTED_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.UNCOMMITTED_SYMBOL, 0);
	}
	public UNDEFINED_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.UNDEFINED_SYMBOL, 0);
	}
	public UNDOFILE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.UNDOFILE_SYMBOL, 0);
	}
	public UNDO_BUFFER_SIZE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.UNDO_BUFFER_SIZE_SYMBOL, 0);
	}
	public UNKNOWN_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.UNKNOWN_SYMBOL, 0);
	}
	public UNTIL_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.UNTIL_SYMBOL, 0);
	}
	public UPGRADE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.UPGRADE_SYMBOL, 0);
	}
	public USER_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.USER_SYMBOL, 0);
	}
	public USE_FRM_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.USE_FRM_SYMBOL, 0);
	}
	public VALIDATION_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.VALIDATION_SYMBOL, 0);
	}
	public VALUE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.VALUE_SYMBOL, 0);
	}
	public VARIABLES_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.VARIABLES_SYMBOL, 0);
	}
	public VCPU_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.VCPU_SYMBOL, 0);
	}
	public VIEW_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.VIEW_SYMBOL, 0);
	}
	public VISIBLE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.VISIBLE_SYMBOL, 0);
	}
	public WAIT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.WAIT_SYMBOL, 0);
	}
	public WARNINGS_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.WARNINGS_SYMBOL, 0);
	}
	public WEEK_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.WEEK_SYMBOL, 0);
	}
	public WEIGHT_STRING_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.WEIGHT_STRING_SYMBOL, 0);
	}
	public WITHOUT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.WITHOUT_SYMBOL, 0);
	}
	public WORK_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.WORK_SYMBOL, 0);
	}
	public WRAPPER_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.WRAPPER_SYMBOL, 0);
	}
	public X509_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.X509_SYMBOL, 0);
	}
	public XID_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.XID_SYMBOL, 0);
	}
	public XML_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.XML_SYMBOL, 0);
	}
	public YEAR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.YEAR_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_identifierKeywordsUnambiguous;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterIdentifierKeywordsUnambiguous) {
	 		listener.enterIdentifierKeywordsUnambiguous(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitIdentifierKeywordsUnambiguous) {
	 		listener.exitIdentifierKeywordsUnambiguous(this);
		}
	}
}


export class RoleKeywordContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public roleOrLabelKeyword(): RoleOrLabelKeywordContext {
		return this.getTypedRuleContext(RoleOrLabelKeywordContext, 0) as RoleOrLabelKeywordContext;
	}
	public roleOrIdentifierKeyword(): RoleOrIdentifierKeywordContext {
		return this.getTypedRuleContext(RoleOrIdentifierKeywordContext, 0) as RoleOrIdentifierKeywordContext;
	}
	public identifierKeywordsUnambiguous(): IdentifierKeywordsUnambiguousContext {
		return this.getTypedRuleContext(IdentifierKeywordsUnambiguousContext, 0) as IdentifierKeywordsUnambiguousContext;
	}
	public identifierKeywordsAmbiguous2Labels(): IdentifierKeywordsAmbiguous2LabelsContext {
		return this.getTypedRuleContext(IdentifierKeywordsAmbiguous2LabelsContext, 0) as IdentifierKeywordsAmbiguous2LabelsContext;
	}
	public identifierKeywordsAmbiguous4SystemVariables(): IdentifierKeywordsAmbiguous4SystemVariablesContext {
		return this.getTypedRuleContext(IdentifierKeywordsAmbiguous4SystemVariablesContext, 0) as IdentifierKeywordsAmbiguous4SystemVariablesContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_roleKeyword;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterRoleKeyword) {
	 		listener.enterRoleKeyword(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitRoleKeyword) {
	 		listener.exitRoleKeyword(this);
		}
	}
}


export class LValueKeywordContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public identifierKeywordsUnambiguous(): IdentifierKeywordsUnambiguousContext {
		return this.getTypedRuleContext(IdentifierKeywordsUnambiguousContext, 0) as IdentifierKeywordsUnambiguousContext;
	}
	public identifierKeywordsAmbiguous1RolesAndLabels(): IdentifierKeywordsAmbiguous1RolesAndLabelsContext {
		return this.getTypedRuleContext(IdentifierKeywordsAmbiguous1RolesAndLabelsContext, 0) as IdentifierKeywordsAmbiguous1RolesAndLabelsContext;
	}
	public identifierKeywordsAmbiguous2Labels(): IdentifierKeywordsAmbiguous2LabelsContext {
		return this.getTypedRuleContext(IdentifierKeywordsAmbiguous2LabelsContext, 0) as IdentifierKeywordsAmbiguous2LabelsContext;
	}
	public identifierKeywordsAmbiguous3Roles(): IdentifierKeywordsAmbiguous3RolesContext {
		return this.getTypedRuleContext(IdentifierKeywordsAmbiguous3RolesContext, 0) as IdentifierKeywordsAmbiguous3RolesContext;
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_lValueKeyword;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterLValueKeyword) {
	 		listener.enterLValueKeyword(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitLValueKeyword) {
	 		listener.exitLValueKeyword(this);
		}
	}
}


export class IdentifierKeywordsAmbiguous4SystemVariablesContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public GLOBAL_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.GLOBAL_SYMBOL, 0);
	}
	public LOCAL_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.LOCAL_SYMBOL, 0);
	}
	public PERSIST_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.PERSIST_SYMBOL, 0);
	}
	public PERSIST_ONLY_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.PERSIST_ONLY_SYMBOL, 0);
	}
	public SESSION_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SESSION_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_identifierKeywordsAmbiguous4SystemVariables;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterIdentifierKeywordsAmbiguous4SystemVariables) {
	 		listener.enterIdentifierKeywordsAmbiguous4SystemVariables(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitIdentifierKeywordsAmbiguous4SystemVariables) {
	 		listener.exitIdentifierKeywordsAmbiguous4SystemVariables(this);
		}
	}
}


export class RoleOrIdentifierKeywordContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public ACCOUNT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ACCOUNT_SYMBOL, 0);
	}
	public ASCII_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ASCII_SYMBOL, 0);
	}
	public ALWAYS_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ALWAYS_SYMBOL, 0);
	}
	public BACKUP_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.BACKUP_SYMBOL, 0);
	}
	public BEGIN_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.BEGIN_SYMBOL, 0);
	}
	public BYTE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.BYTE_SYMBOL, 0);
	}
	public CACHE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CACHE_SYMBOL, 0);
	}
	public CHARSET_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CHARSET_SYMBOL, 0);
	}
	public CHECKSUM_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CHECKSUM_SYMBOL, 0);
	}
	public CLONE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CLONE_SYMBOL, 0);
	}
	public CLOSE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CLOSE_SYMBOL, 0);
	}
	public COMMENT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.COMMENT_SYMBOL, 0);
	}
	public COMMIT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.COMMIT_SYMBOL, 0);
	}
	public CONTAINS_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CONTAINS_SYMBOL, 0);
	}
	public DEALLOCATE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.DEALLOCATE_SYMBOL, 0);
	}
	public DO_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.DO_SYMBOL, 0);
	}
	public END_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.END_SYMBOL, 0);
	}
	public FLUSH_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.FLUSH_SYMBOL, 0);
	}
	public FOLLOWS_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.FOLLOWS_SYMBOL, 0);
	}
	public FORMAT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.FORMAT_SYMBOL, 0);
	}
	public GROUP_REPLICATION_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.GROUP_REPLICATION_SYMBOL, 0);
	}
	public HANDLER_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.HANDLER_SYMBOL, 0);
	}
	public HELP_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.HELP_SYMBOL, 0);
	}
	public HOST_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.HOST_SYMBOL, 0);
	}
	public INSTALL_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.INSTALL_SYMBOL, 0);
	}
	public INVISIBLE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.INVISIBLE_SYMBOL, 0);
	}
	public LANGUAGE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.LANGUAGE_SYMBOL, 0);
	}
	public NO_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.NO_SYMBOL, 0);
	}
	public OPEN_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.OPEN_SYMBOL, 0);
	}
	public OPTIONS_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.OPTIONS_SYMBOL, 0);
	}
	public OWNER_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.OWNER_SYMBOL, 0);
	}
	public PARSER_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.PARSER_SYMBOL, 0);
	}
	public PARTITION_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.PARTITION_SYMBOL, 0);
	}
	public PORT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.PORT_SYMBOL, 0);
	}
	public PRECEDES_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.PRECEDES_SYMBOL, 0);
	}
	public PREPARE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.PREPARE_SYMBOL, 0);
	}
	public REMOVE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.REMOVE_SYMBOL, 0);
	}
	public REPAIR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.REPAIR_SYMBOL, 0);
	}
	public RESET_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.RESET_SYMBOL, 0);
	}
	public RESTORE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.RESTORE_SYMBOL, 0);
	}
	public ROLE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ROLE_SYMBOL, 0);
	}
	public ROLLBACK_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ROLLBACK_SYMBOL, 0);
	}
	public SAVEPOINT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SAVEPOINT_SYMBOL, 0);
	}
	public SECONDARY_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SECONDARY_SYMBOL, 0);
	}
	public SECONDARY_ENGINE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SECONDARY_ENGINE_SYMBOL, 0);
	}
	public SECONDARY_LOAD_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SECONDARY_LOAD_SYMBOL, 0);
	}
	public SECONDARY_UNLOAD_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SECONDARY_UNLOAD_SYMBOL, 0);
	}
	public SECURITY_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SECURITY_SYMBOL, 0);
	}
	public SERVER_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SERVER_SYMBOL, 0);
	}
	public SIGNED_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SIGNED_SYMBOL, 0);
	}
	public SOCKET_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SOCKET_SYMBOL, 0);
	}
	public SLAVE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SLAVE_SYMBOL, 0);
	}
	public SONAME_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SONAME_SYMBOL, 0);
	}
	public START_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.START_SYMBOL, 0);
	}
	public STOP_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.STOP_SYMBOL, 0);
	}
	public TRUNCATE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.TRUNCATE_SYMBOL, 0);
	}
	public UNICODE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.UNICODE_SYMBOL, 0);
	}
	public UNINSTALL_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.UNINSTALL_SYMBOL, 0);
	}
	public UPGRADE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.UPGRADE_SYMBOL, 0);
	}
	public VISIBLE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.VISIBLE_SYMBOL, 0);
	}
	public WRAPPER_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.WRAPPER_SYMBOL, 0);
	}
	public XA_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.XA_SYMBOL, 0);
	}
	public SHUTDOWN_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SHUTDOWN_SYMBOL, 0);
	}
	public IMPORT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.IMPORT_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_roleOrIdentifierKeyword;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterRoleOrIdentifierKeyword) {
	 		listener.enterRoleOrIdentifierKeyword(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitRoleOrIdentifierKeyword) {
	 		listener.exitRoleOrIdentifierKeyword(this);
		}
	}
}


export class RoleOrLabelKeywordContext extends ParserRuleContext {
	constructor(parser?: MySQLParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public ACTION_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ACTION_SYMBOL, 0);
	}
	public ACTIVE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ACTIVE_SYMBOL, 0);
	}
	public ADDDATE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ADDDATE_SYMBOL, 0);
	}
	public AFTER_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.AFTER_SYMBOL, 0);
	}
	public AGAINST_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.AGAINST_SYMBOL, 0);
	}
	public AGGREGATE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.AGGREGATE_SYMBOL, 0);
	}
	public ALGORITHM_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ALGORITHM_SYMBOL, 0);
	}
	public ANALYSE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ANALYSE_SYMBOL, 0);
	}
	public ANY_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ANY_SYMBOL, 0);
	}
	public AT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.AT_SYMBOL, 0);
	}
	public AUTHORS_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.AUTHORS_SYMBOL, 0);
	}
	public AUTO_INCREMENT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.AUTO_INCREMENT_SYMBOL, 0);
	}
	public AUTOEXTEND_SIZE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.AUTOEXTEND_SIZE_SYMBOL, 0);
	}
	public AVG_ROW_LENGTH_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.AVG_ROW_LENGTH_SYMBOL, 0);
	}
	public AVG_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.AVG_SYMBOL, 0);
	}
	public BINLOG_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.BINLOG_SYMBOL, 0);
	}
	public BIT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.BIT_SYMBOL, 0);
	}
	public BLOCK_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.BLOCK_SYMBOL, 0);
	}
	public BOOL_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.BOOL_SYMBOL, 0);
	}
	public BOOLEAN_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.BOOLEAN_SYMBOL, 0);
	}
	public BTREE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.BTREE_SYMBOL, 0);
	}
	public BUCKETS_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.BUCKETS_SYMBOL, 0);
	}
	public CASCADED_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CASCADED_SYMBOL, 0);
	}
	public CATALOG_NAME_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CATALOG_NAME_SYMBOL, 0);
	}
	public CHAIN_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CHAIN_SYMBOL, 0);
	}
	public CHANGED_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CHANGED_SYMBOL, 0);
	}
	public CHANNEL_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CHANNEL_SYMBOL, 0);
	}
	public CIPHER_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CIPHER_SYMBOL, 0);
	}
	public CLIENT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CLIENT_SYMBOL, 0);
	}
	public CLASS_ORIGIN_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CLASS_ORIGIN_SYMBOL, 0);
	}
	public COALESCE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.COALESCE_SYMBOL, 0);
	}
	public CODE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CODE_SYMBOL, 0);
	}
	public COLLATION_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.COLLATION_SYMBOL, 0);
	}
	public COLUMN_NAME_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.COLUMN_NAME_SYMBOL, 0);
	}
	public COLUMN_FORMAT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.COLUMN_FORMAT_SYMBOL, 0);
	}
	public COLUMNS_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.COLUMNS_SYMBOL, 0);
	}
	public COMMITTED_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.COMMITTED_SYMBOL, 0);
	}
	public COMPACT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.COMPACT_SYMBOL, 0);
	}
	public COMPLETION_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.COMPLETION_SYMBOL, 0);
	}
	public COMPONENT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.COMPONENT_SYMBOL, 0);
	}
	public COMPRESSED_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.COMPRESSED_SYMBOL, 0);
	}
	public COMPRESSION_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.COMPRESSION_SYMBOL, 0);
	}
	public CONCURRENT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CONCURRENT_SYMBOL, 0);
	}
	public CONNECTION_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CONNECTION_SYMBOL, 0);
	}
	public CONSISTENT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CONSISTENT_SYMBOL, 0);
	}
	public CONSTRAINT_CATALOG_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CONSTRAINT_CATALOG_SYMBOL, 0);
	}
	public CONSTRAINT_SCHEMA_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CONSTRAINT_SCHEMA_SYMBOL, 0);
	}
	public CONSTRAINT_NAME_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CONSTRAINT_NAME_SYMBOL, 0);
	}
	public CONTEXT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CONTEXT_SYMBOL, 0);
	}
	public CONTRIBUTORS_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CONTRIBUTORS_SYMBOL, 0);
	}
	public CPU_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CPU_SYMBOL, 0);
	}
	public CURRENT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CURRENT_SYMBOL, 0);
	}
	public CURSOR_NAME_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CURSOR_NAME_SYMBOL, 0);
	}
	public DATA_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.DATA_SYMBOL, 0);
	}
	public DATAFILE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.DATAFILE_SYMBOL, 0);
	}
	public DATETIME_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.DATETIME_SYMBOL, 0);
	}
	public DATE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.DATE_SYMBOL, 0);
	}
	public DAY_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.DAY_SYMBOL, 0);
	}
	public DEFAULT_AUTH_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.DEFAULT_AUTH_SYMBOL, 0);
	}
	public DEFINER_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.DEFINER_SYMBOL, 0);
	}
	public DELAY_KEY_WRITE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.DELAY_KEY_WRITE_SYMBOL, 0);
	}
	public DES_KEY_FILE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.DES_KEY_FILE_SYMBOL, 0);
	}
	public DESCRIPTION_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.DESCRIPTION_SYMBOL, 0);
	}
	public DIAGNOSTICS_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.DIAGNOSTICS_SYMBOL, 0);
	}
	public DIRECTORY_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.DIRECTORY_SYMBOL, 0);
	}
	public DISABLE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.DISABLE_SYMBOL, 0);
	}
	public DISCARD_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.DISCARD_SYMBOL, 0);
	}
	public DISK_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.DISK_SYMBOL, 0);
	}
	public DUMPFILE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.DUMPFILE_SYMBOL, 0);
	}
	public DUPLICATE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.DUPLICATE_SYMBOL, 0);
	}
	public DYNAMIC_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.DYNAMIC_SYMBOL, 0);
	}
	public ENCRYPTION_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ENCRYPTION_SYMBOL, 0);
	}
	public ENDS_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ENDS_SYMBOL, 0);
	}
	public ENUM_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ENUM_SYMBOL, 0);
	}
	public ENGINE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ENGINE_SYMBOL, 0);
	}
	public ENGINES_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ENGINES_SYMBOL, 0);
	}
	public ERROR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ERROR_SYMBOL, 0);
	}
	public ERRORS_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ERRORS_SYMBOL, 0);
	}
	public ESCAPE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ESCAPE_SYMBOL, 0);
	}
	public EVENTS_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.EVENTS_SYMBOL, 0);
	}
	public EVERY_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.EVERY_SYMBOL, 0);
	}
	public EXCLUDE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.EXCLUDE_SYMBOL, 0);
	}
	public EXPANSION_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.EXPANSION_SYMBOL, 0);
	}
	public EXPORT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.EXPORT_SYMBOL, 0);
	}
	public EXTENDED_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.EXTENDED_SYMBOL, 0);
	}
	public EXTENT_SIZE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.EXTENT_SIZE_SYMBOL, 0);
	}
	public FAULTS_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.FAULTS_SYMBOL, 0);
	}
	public FAST_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.FAST_SYMBOL, 0);
	}
	public FOLLOWING_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.FOLLOWING_SYMBOL, 0);
	}
	public FOUND_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.FOUND_SYMBOL, 0);
	}
	public ENABLE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ENABLE_SYMBOL, 0);
	}
	public FULL_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.FULL_SYMBOL, 0);
	}
	public FILE_BLOCK_SIZE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.FILE_BLOCK_SIZE_SYMBOL, 0);
	}
	public FILTER_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.FILTER_SYMBOL, 0);
	}
	public FIRST_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.FIRST_SYMBOL, 0);
	}
	public FIXED_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.FIXED_SYMBOL, 0);
	}
	public GENERAL_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.GENERAL_SYMBOL, 0);
	}
	public GEOMETRY_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.GEOMETRY_SYMBOL, 0);
	}
	public GEOMETRYCOLLECTION_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.GEOMETRYCOLLECTION_SYMBOL, 0);
	}
	public GET_FORMAT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.GET_FORMAT_SYMBOL, 0);
	}
	public GRANTS_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.GRANTS_SYMBOL, 0);
	}
	public GLOBAL_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.GLOBAL_SYMBOL, 0);
	}
	public HASH_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.HASH_SYMBOL, 0);
	}
	public HISTOGRAM_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.HISTOGRAM_SYMBOL, 0);
	}
	public HISTORY_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.HISTORY_SYMBOL, 0);
	}
	public HOSTS_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.HOSTS_SYMBOL, 0);
	}
	public HOUR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.HOUR_SYMBOL, 0);
	}
	public IDENTIFIED_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.IDENTIFIED_SYMBOL, 0);
	}
	public IGNORE_SERVER_IDS_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.IGNORE_SERVER_IDS_SYMBOL, 0);
	}
	public INVOKER_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.INVOKER_SYMBOL, 0);
	}
	public INDEXES_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.INDEXES_SYMBOL, 0);
	}
	public INITIAL_SIZE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.INITIAL_SIZE_SYMBOL, 0);
	}
	public INSTANCE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.INSTANCE_SYMBOL, 0);
	}
	public INACTIVE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.INACTIVE_SYMBOL, 0);
	}
	public IO_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.IO_SYMBOL, 0);
	}
	public IPC_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.IPC_SYMBOL, 0);
	}
	public ISOLATION_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ISOLATION_SYMBOL, 0);
	}
	public ISSUER_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ISSUER_SYMBOL, 0);
	}
	public INSERT_METHOD_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.INSERT_METHOD_SYMBOL, 0);
	}
	public JSON_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.JSON_SYMBOL, 0);
	}
	public KEY_BLOCK_SIZE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.KEY_BLOCK_SIZE_SYMBOL, 0);
	}
	public LAST_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.LAST_SYMBOL, 0);
	}
	public LEAVES_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.LEAVES_SYMBOL, 0);
	}
	public LESS_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.LESS_SYMBOL, 0);
	}
	public LEVEL_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.LEVEL_SYMBOL, 0);
	}
	public LINESTRING_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.LINESTRING_SYMBOL, 0);
	}
	public LIST_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.LIST_SYMBOL, 0);
	}
	public LOCAL_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.LOCAL_SYMBOL, 0);
	}
	public LOCKED_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.LOCKED_SYMBOL, 0);
	}
	public LOCKS_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.LOCKS_SYMBOL, 0);
	}
	public LOGFILE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.LOGFILE_SYMBOL, 0);
	}
	public LOGS_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.LOGS_SYMBOL, 0);
	}
	public MAX_ROWS_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.MAX_ROWS_SYMBOL, 0);
	}
	public MASTER_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.MASTER_SYMBOL, 0);
	}
	public MASTER_HEARTBEAT_PERIOD_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.MASTER_HEARTBEAT_PERIOD_SYMBOL, 0);
	}
	public MASTER_HOST_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.MASTER_HOST_SYMBOL, 0);
	}
	public MASTER_PORT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.MASTER_PORT_SYMBOL, 0);
	}
	public MASTER_LOG_FILE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.MASTER_LOG_FILE_SYMBOL, 0);
	}
	public MASTER_LOG_POS_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.MASTER_LOG_POS_SYMBOL, 0);
	}
	public MASTER_USER_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.MASTER_USER_SYMBOL, 0);
	}
	public MASTER_PASSWORD_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.MASTER_PASSWORD_SYMBOL, 0);
	}
	public MASTER_PUBLIC_KEY_PATH_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.MASTER_PUBLIC_KEY_PATH_SYMBOL, 0);
	}
	public MASTER_SERVER_ID_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.MASTER_SERVER_ID_SYMBOL, 0);
	}
	public MASTER_CONNECT_RETRY_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.MASTER_CONNECT_RETRY_SYMBOL, 0);
	}
	public MASTER_RETRY_COUNT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.MASTER_RETRY_COUNT_SYMBOL, 0);
	}
	public MASTER_DELAY_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.MASTER_DELAY_SYMBOL, 0);
	}
	public MASTER_SSL_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.MASTER_SSL_SYMBOL, 0);
	}
	public MASTER_SSL_CA_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.MASTER_SSL_CA_SYMBOL, 0);
	}
	public MASTER_SSL_CAPATH_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.MASTER_SSL_CAPATH_SYMBOL, 0);
	}
	public MASTER_TLS_VERSION_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.MASTER_TLS_VERSION_SYMBOL, 0);
	}
	public MASTER_SSL_CERT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.MASTER_SSL_CERT_SYMBOL, 0);
	}
	public MASTER_SSL_CIPHER_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.MASTER_SSL_CIPHER_SYMBOL, 0);
	}
	public MASTER_SSL_CRL_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.MASTER_SSL_CRL_SYMBOL, 0);
	}
	public MASTER_SSL_CRLPATH_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.MASTER_SSL_CRLPATH_SYMBOL, 0);
	}
	public MASTER_SSL_KEY_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.MASTER_SSL_KEY_SYMBOL, 0);
	}
	public MASTER_AUTO_POSITION_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.MASTER_AUTO_POSITION_SYMBOL, 0);
	}
	public MAX_CONNECTIONS_PER_HOUR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL, 0);
	}
	public MAX_QUERIES_PER_HOUR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.MAX_QUERIES_PER_HOUR_SYMBOL, 0);
	}
	public MAX_STATEMENT_TIME_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.MAX_STATEMENT_TIME_SYMBOL, 0);
	}
	public MAX_SIZE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.MAX_SIZE_SYMBOL, 0);
	}
	public MAX_UPDATES_PER_HOUR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.MAX_UPDATES_PER_HOUR_SYMBOL, 0);
	}
	public MAX_USER_CONNECTIONS_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.MAX_USER_CONNECTIONS_SYMBOL, 0);
	}
	public MEDIUM_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.MEDIUM_SYMBOL, 0);
	}
	public MEMORY_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.MEMORY_SYMBOL, 0);
	}
	public MERGE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.MERGE_SYMBOL, 0);
	}
	public MESSAGE_TEXT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.MESSAGE_TEXT_SYMBOL, 0);
	}
	public MICROSECOND_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.MICROSECOND_SYMBOL, 0);
	}
	public MIGRATE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.MIGRATE_SYMBOL, 0);
	}
	public MINUTE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.MINUTE_SYMBOL, 0);
	}
	public MIN_ROWS_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.MIN_ROWS_SYMBOL, 0);
	}
	public MODIFY_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.MODIFY_SYMBOL, 0);
	}
	public MODE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.MODE_SYMBOL, 0);
	}
	public MONTH_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.MONTH_SYMBOL, 0);
	}
	public MULTILINESTRING_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.MULTILINESTRING_SYMBOL, 0);
	}
	public MULTIPOINT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.MULTIPOINT_SYMBOL, 0);
	}
	public MULTIPOLYGON_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.MULTIPOLYGON_SYMBOL, 0);
	}
	public MUTEX_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.MUTEX_SYMBOL, 0);
	}
	public MYSQL_ERRNO_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.MYSQL_ERRNO_SYMBOL, 0);
	}
	public NAME_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.NAME_SYMBOL, 0);
	}
	public NAMES_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.NAMES_SYMBOL, 0);
	}
	public NATIONAL_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.NATIONAL_SYMBOL, 0);
	}
	public NCHAR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.NCHAR_SYMBOL, 0);
	}
	public NDBCLUSTER_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.NDBCLUSTER_SYMBOL, 0);
	}
	public NESTED_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.NESTED_SYMBOL, 0);
	}
	public NEVER_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.NEVER_SYMBOL, 0);
	}
	public NEXT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.NEXT_SYMBOL, 0);
	}
	public NEW_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.NEW_SYMBOL, 0);
	}
	public NO_WAIT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.NO_WAIT_SYMBOL, 0);
	}
	public NODEGROUP_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.NODEGROUP_SYMBOL, 0);
	}
	public NULLS_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.NULLS_SYMBOL, 0);
	}
	public NOWAIT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.NOWAIT_SYMBOL, 0);
	}
	public NUMBER_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.NUMBER_SYMBOL, 0);
	}
	public NVARCHAR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.NVARCHAR_SYMBOL, 0);
	}
	public OFFSET_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.OFFSET_SYMBOL, 0);
	}
	public OLD_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.OLD_SYMBOL, 0);
	}
	public OLD_PASSWORD_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.OLD_PASSWORD_SYMBOL, 0);
	}
	public ONE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ONE_SYMBOL, 0);
	}
	public OPTIONAL_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.OPTIONAL_SYMBOL, 0);
	}
	public ORDINALITY_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ORDINALITY_SYMBOL, 0);
	}
	public ORGANIZATION_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ORGANIZATION_SYMBOL, 0);
	}
	public OTHERS_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.OTHERS_SYMBOL, 0);
	}
	public PACK_KEYS_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.PACK_KEYS_SYMBOL, 0);
	}
	public PAGE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.PAGE_SYMBOL, 0);
	}
	public PARTIAL_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.PARTIAL_SYMBOL, 0);
	}
	public PARTITIONING_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.PARTITIONING_SYMBOL, 0);
	}
	public PARTITIONS_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.PARTITIONS_SYMBOL, 0);
	}
	public PASSWORD_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.PASSWORD_SYMBOL, 0);
	}
	public PATH_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.PATH_SYMBOL, 0);
	}
	public PHASE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.PHASE_SYMBOL, 0);
	}
	public PLUGIN_DIR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.PLUGIN_DIR_SYMBOL, 0);
	}
	public PLUGIN_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.PLUGIN_SYMBOL, 0);
	}
	public PLUGINS_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.PLUGINS_SYMBOL, 0);
	}
	public POINT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.POINT_SYMBOL, 0);
	}
	public POLYGON_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.POLYGON_SYMBOL, 0);
	}
	public PRECEDING_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.PRECEDING_SYMBOL, 0);
	}
	public PRESERVE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.PRESERVE_SYMBOL, 0);
	}
	public PREV_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.PREV_SYMBOL, 0);
	}
	public THREAD_PRIORITY_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.THREAD_PRIORITY_SYMBOL, 0);
	}
	public PRIVILEGES_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.PRIVILEGES_SYMBOL, 0);
	}
	public PROCESSLIST_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.PROCESSLIST_SYMBOL, 0);
	}
	public PROFILE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.PROFILE_SYMBOL, 0);
	}
	public PROFILES_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.PROFILES_SYMBOL, 0);
	}
	public QUARTER_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.QUARTER_SYMBOL, 0);
	}
	public QUERY_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.QUERY_SYMBOL, 0);
	}
	public QUICK_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.QUICK_SYMBOL, 0);
	}
	public READ_ONLY_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.READ_ONLY_SYMBOL, 0);
	}
	public REBUILD_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.REBUILD_SYMBOL, 0);
	}
	public RECOVER_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.RECOVER_SYMBOL, 0);
	}
	public REDO_BUFFER_SIZE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.REDO_BUFFER_SIZE_SYMBOL, 0);
	}
	public REDOFILE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.REDOFILE_SYMBOL, 0);
	}
	public REDUNDANT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.REDUNDANT_SYMBOL, 0);
	}
	public RELAY_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.RELAY_SYMBOL, 0);
	}
	public RELAYLOG_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.RELAYLOG_SYMBOL, 0);
	}
	public RELAY_LOG_FILE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.RELAY_LOG_FILE_SYMBOL, 0);
	}
	public RELAY_LOG_POS_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.RELAY_LOG_POS_SYMBOL, 0);
	}
	public RELAY_THREAD_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.RELAY_THREAD_SYMBOL, 0);
	}
	public REMOTE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.REMOTE_SYMBOL, 0);
	}
	public REORGANIZE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.REORGANIZE_SYMBOL, 0);
	}
	public REPEATABLE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.REPEATABLE_SYMBOL, 0);
	}
	public REPLICATE_DO_DB_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.REPLICATE_DO_DB_SYMBOL, 0);
	}
	public REPLICATE_IGNORE_DB_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.REPLICATE_IGNORE_DB_SYMBOL, 0);
	}
	public REPLICATE_DO_TABLE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.REPLICATE_DO_TABLE_SYMBOL, 0);
	}
	public REPLICATE_IGNORE_TABLE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.REPLICATE_IGNORE_TABLE_SYMBOL, 0);
	}
	public REPLICATE_WILD_DO_TABLE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.REPLICATE_WILD_DO_TABLE_SYMBOL, 0);
	}
	public REPLICATE_WILD_IGNORE_TABLE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.REPLICATE_WILD_IGNORE_TABLE_SYMBOL, 0);
	}
	public REPLICATE_REWRITE_DB_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.REPLICATE_REWRITE_DB_SYMBOL, 0);
	}
	public USER_RESOURCES_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.USER_RESOURCES_SYMBOL, 0);
	}
	public RESPECT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.RESPECT_SYMBOL, 0);
	}
	public RESUME_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.RESUME_SYMBOL, 0);
	}
	public RETAIN_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.RETAIN_SYMBOL, 0);
	}
	public RETURNED_SQLSTATE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.RETURNED_SQLSTATE_SYMBOL, 0);
	}
	public RETURNS_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.RETURNS_SYMBOL, 0);
	}
	public REUSE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.REUSE_SYMBOL, 0);
	}
	public REVERSE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.REVERSE_SYMBOL, 0);
	}
	public ROLLUP_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ROLLUP_SYMBOL, 0);
	}
	public ROTATE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ROTATE_SYMBOL, 0);
	}
	public ROUTINE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ROUTINE_SYMBOL, 0);
	}
	public ROW_COUNT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ROW_COUNT_SYMBOL, 0);
	}
	public ROW_FORMAT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ROW_FORMAT_SYMBOL, 0);
	}
	public RTREE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.RTREE_SYMBOL, 0);
	}
	public SCHEDULE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SCHEDULE_SYMBOL, 0);
	}
	public SCHEMA_NAME_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SCHEMA_NAME_SYMBOL, 0);
	}
	public SECOND_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SECOND_SYMBOL, 0);
	}
	public SERIAL_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SERIAL_SYMBOL, 0);
	}
	public SERIALIZABLE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SERIALIZABLE_SYMBOL, 0);
	}
	public SESSION_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SESSION_SYMBOL, 0);
	}
	public SHARE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SHARE_SYMBOL, 0);
	}
	public SIMPLE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SIMPLE_SYMBOL, 0);
	}
	public SKIP_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SKIP_SYMBOL, 0);
	}
	public SLOW_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SLOW_SYMBOL, 0);
	}
	public SNAPSHOT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SNAPSHOT_SYMBOL, 0);
	}
	public SOUNDS_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SOUNDS_SYMBOL, 0);
	}
	public SOURCE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SOURCE_SYMBOL, 0);
	}
	public SQL_AFTER_GTIDS_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SQL_AFTER_GTIDS_SYMBOL, 0);
	}
	public SQL_AFTER_MTS_GAPS_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SQL_AFTER_MTS_GAPS_SYMBOL, 0);
	}
	public SQL_BEFORE_GTIDS_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SQL_BEFORE_GTIDS_SYMBOL, 0);
	}
	public SQL_CACHE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SQL_CACHE_SYMBOL, 0);
	}
	public SQL_BUFFER_RESULT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SQL_BUFFER_RESULT_SYMBOL, 0);
	}
	public SQL_NO_CACHE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SQL_NO_CACHE_SYMBOL, 0);
	}
	public SQL_THREAD_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SQL_THREAD_SYMBOL, 0);
	}
	public SRID_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SRID_SYMBOL, 0);
	}
	public STACKED_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.STACKED_SYMBOL, 0);
	}
	public STARTS_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.STARTS_SYMBOL, 0);
	}
	public STATS_AUTO_RECALC_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.STATS_AUTO_RECALC_SYMBOL, 0);
	}
	public STATS_PERSISTENT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.STATS_PERSISTENT_SYMBOL, 0);
	}
	public STATS_SAMPLE_PAGES_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.STATS_SAMPLE_PAGES_SYMBOL, 0);
	}
	public STATUS_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.STATUS_SYMBOL, 0);
	}
	public STORAGE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.STORAGE_SYMBOL, 0);
	}
	public STRING_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.STRING_SYMBOL, 0);
	}
	public SUBCLASS_ORIGIN_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SUBCLASS_ORIGIN_SYMBOL, 0);
	}
	public SUBDATE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SUBDATE_SYMBOL, 0);
	}
	public SUBJECT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SUBJECT_SYMBOL, 0);
	}
	public SUBPARTITION_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SUBPARTITION_SYMBOL, 0);
	}
	public SUBPARTITIONS_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SUBPARTITIONS_SYMBOL, 0);
	}
	public SUPER_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SUPER_SYMBOL, 0);
	}
	public SUSPEND_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SUSPEND_SYMBOL, 0);
	}
	public SWAPS_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SWAPS_SYMBOL, 0);
	}
	public SWITCHES_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SWITCHES_SYMBOL, 0);
	}
	public TABLE_NAME_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.TABLE_NAME_SYMBOL, 0);
	}
	public TABLES_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.TABLES_SYMBOL, 0);
	}
	public TABLE_CHECKSUM_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.TABLE_CHECKSUM_SYMBOL, 0);
	}
	public TABLESPACE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.TABLESPACE_SYMBOL, 0);
	}
	public TEMPORARY_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.TEMPORARY_SYMBOL, 0);
	}
	public TEMPTABLE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.TEMPTABLE_SYMBOL, 0);
	}
	public TEXT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.TEXT_SYMBOL, 0);
	}
	public THAN_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.THAN_SYMBOL, 0);
	}
	public TIES_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.TIES_SYMBOL, 0);
	}
	public TRANSACTION_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.TRANSACTION_SYMBOL, 0);
	}
	public TRIGGERS_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.TRIGGERS_SYMBOL, 0);
	}
	public TIMESTAMP_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.TIMESTAMP_SYMBOL, 0);
	}
	public TIMESTAMP_ADD_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.TIMESTAMP_ADD_SYMBOL, 0);
	}
	public TIMESTAMP_DIFF_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.TIMESTAMP_DIFF_SYMBOL, 0);
	}
	public TIME_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.TIME_SYMBOL, 0);
	}
	public TYPES_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.TYPES_SYMBOL, 0);
	}
	public TYPE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.TYPE_SYMBOL, 0);
	}
	public UDF_RETURNS_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.UDF_RETURNS_SYMBOL, 0);
	}
	public UNBOUNDED_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.UNBOUNDED_SYMBOL, 0);
	}
	public UNCOMMITTED_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.UNCOMMITTED_SYMBOL, 0);
	}
	public UNDEFINED_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.UNDEFINED_SYMBOL, 0);
	}
	public UNDO_BUFFER_SIZE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.UNDO_BUFFER_SIZE_SYMBOL, 0);
	}
	public UNDOFILE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.UNDOFILE_SYMBOL, 0);
	}
	public UNKNOWN_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.UNKNOWN_SYMBOL, 0);
	}
	public UNTIL_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.UNTIL_SYMBOL, 0);
	}
	public USER_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.USER_SYMBOL, 0);
	}
	public USE_FRM_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.USE_FRM_SYMBOL, 0);
	}
	public VARIABLES_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.VARIABLES_SYMBOL, 0);
	}
	public VCPU_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.VCPU_SYMBOL, 0);
	}
	public VIEW_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.VIEW_SYMBOL, 0);
	}
	public VALUE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.VALUE_SYMBOL, 0);
	}
	public WARNINGS_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.WARNINGS_SYMBOL, 0);
	}
	public WAIT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.WAIT_SYMBOL, 0);
	}
	public WEEK_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.WEEK_SYMBOL, 0);
	}
	public WORK_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.WORK_SYMBOL, 0);
	}
	public WEIGHT_STRING_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.WEIGHT_STRING_SYMBOL, 0);
	}
	public X509_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.X509_SYMBOL, 0);
	}
	public XID_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.XID_SYMBOL, 0);
	}
	public XML_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.XML_SYMBOL, 0);
	}
	public YEAR_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.YEAR_SYMBOL, 0);
	}
	public SHUTDOWN_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.SHUTDOWN_SYMBOL, 0);
	}
	public CUBE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.CUBE_SYMBOL, 0);
	}
	public IMPORT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.IMPORT_SYMBOL, 0);
	}
	public FUNCTION_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.FUNCTION_SYMBOL, 0);
	}
	public ROWS_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ROWS_SYMBOL, 0);
	}
	public ROW_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ROW_SYMBOL, 0);
	}
	public EXCHANGE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.EXCHANGE_SYMBOL, 0);
	}
	public EXPIRE_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.EXPIRE_SYMBOL, 0);
	}
	public ONLY_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ONLY_SYMBOL, 0);
	}
	public VALIDATION_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.VALIDATION_SYMBOL, 0);
	}
	public WITHOUT_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.WITHOUT_SYMBOL, 0);
	}
	public ADMIN_SYMBOL(): TerminalNode {
		return this.getToken(MySQLParser.ADMIN_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySQLParser.RULE_roleOrLabelKeyword;
	}
	public enterRule(listener: MySQLParserListener): void {
	    if(listener.enterRoleOrLabelKeyword) {
	 		listener.enterRoleOrLabelKeyword(this);
		}
	}
	public exitRule(listener: MySQLParserListener): void {
	    if(listener.exitRoleOrLabelKeyword) {
	 		listener.exitRoleOrLabelKeyword(this);
		}
	}
}
